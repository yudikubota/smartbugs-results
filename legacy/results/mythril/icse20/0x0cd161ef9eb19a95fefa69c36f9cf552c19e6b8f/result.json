{
  "contract": "0x0cd161ef9eb19a95fefa69c36f9cf552c19e6b8f",
  "tool": "mythril",
  "start": 1563530415.1818514,
  "end": 1563530453.6206105,
  "duration": 38.438759088516235,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1187,
        "code": "r {\n     for (uint i = 0; i < addresses.length; i++) {\n         balances[owner] -= _value;\n         balances[addresses[i]] += _value;\n         Transfer(owner, addresses[i], _value);\n     }\n}\n    \n    function balanceOf(address _owner) constant public returns (uint25",
        "debug": "calldata_ERC20Basic_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20Basic_0: 0xa9c7648f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Basic: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `distributeToken(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x0cd161ef9eb19a95fefa69c36f9cf552c19e6b8f.sol",
        "function": "distributeToken(address[],uint256)",
        "lineno": 71,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2215,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/10/0x0cd161ef9eb19a95fefa69c36f9cf552c19e6b8f.sol",
        "function": "withdrawGxTokens(address)",
        "lineno": 147,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2215,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2473\n",
        "filename": "/unique_chucks/10/0x0cd161ef9eb19a95fefa69c36f9cf552c19e6b8f.sol",
        "function": "withdrawGxTokens(address)",
        "lineno": 147,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2473,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/10/0x0cd161ef9eb19a95fefa69c36f9cf552c19e6b8f.sol",
        "function": "withdrawGxTokens(address)",
        "lineno": 147,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2566,
        "code": "ress _to, uint256 _amount) onlyPayl",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_ERC20Basic: 0x60\ncalldata_ERC20Basic_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/10/0x0cd161ef9eb19a95fefa69c36f9cf552c19e6b8f.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 89,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2919,
        "code": "rom][msg.sender] -= _am",
        "debug": "calldata_ERC20Basic_32 + 36: 0x5b51dac49284d052eede5596fe2ba53f779697e2114bc7bdc6e9f6dddfb2fca1\ncalldatasize_ERC20Basic: 0x800000000000000000000000000000000000000000000000000000000020\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ERC20Basic_32_+_4: 0xc8ad1292fc16ef648490c9b6f6a7ad897261541bdd738f31940d869d9824c19a\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x5b51dac49284d052eede5596fe2ba53f779697e2114bc7bdc6e9f6dddfb2fca1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ERC20Basic_4: 0x5b51dac49284d052eede5596fe2ba53f779697e2114bc7bdc6e9f6dddfb2fca1\ncalldata_ERC20Basic_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x0cd161ef9eb19a95fefa69c36f9cf552c19e6b8f.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 110,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3678,
        "code": "ress _to, uint256 _amount) onlyPayl",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_ERC20Basic: 0x4\ncalldata_ERC20Basic_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/10/0x0cd161ef9eb19a95fefa69c36f9cf552c19e6b8f.sol",
        "function": "transfer(address,uint256)",
        "lineno": 89,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3895,
        "code": "          balances[_to]",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ERC20Basic_4: 0x23d8a8520f724073445afe4bb9673704f5f700b5059efe000e50c6dfebb67db9\ncalldatasize_ERC20Basic: 0x800000000000000000000000000000000000000000000000000050\ncalldata_ERC20Basic_32 + 4: 0xef9dac035840d3446cf7e308735b46f504077e95d5dcc1feef6ce61e0ba5f9a9\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xef9dac035840d3446cf7e308735b46f504077e95d5dcc1feef6ce61e0ba5f9a9\ncalldata_ERC20Basic_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x0cd161ef9eb19a95fefa69c36f9cf552c19e6b8f.sol",
        "function": "transfer(address,uint256)",
        "lineno": 95,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4390,
        "code": "       Transfer(owner, ad",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_1,_256): 0x0\ncalldata_ERC20Basic_32 + 4: 0x1\ncalldata_ERC20Basic_4 + calldata_ERC20Basic_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_ERC20Basic_0: 0xa9c7648f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Basic: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `distributeToken(address[],uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/10/0x0cd161ef9eb19a95fefa69c36f9cf552c19e6b8f.sol",
        "function": "distributeToken(address[],uint256)",
        "lineno": 75,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 4490,
        "code": "_value);\n     }\n}\n    \n    funct",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ERC20Basic_cpy: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_ERC20Basic_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_ERC20Basic_4 + calldata_ERC20Basic_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_ERC20Basic_0: 0xa9c7648f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Basic: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `distributeToken(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x0cd161ef9eb19a95fefa69c36f9cf552c19e6b8f.sol",
        "function": "distributeToken(address[],uint256)",
        "lineno": 75,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}