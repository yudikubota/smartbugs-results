{
  "contract": "0x9c2f554150cc87dbe3617e1ee3a254665523242e",
  "tool": "mythril",
  "start": 1563282564.9449916,
  "end": 1563282584.1608953,
  "duration": 19.215903759002686,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1013,
        "code": "fer(taxMan, workDone[taxMan]);\n        workDone[msg.sen",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x9c2f554150cc87dbe3617e1ee3a254665523242e.sol",
        "function": "reapFarm()",
        "lineno": 85,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1013,
        "code": "fer(taxMan, workDone[taxMan]);\n        workDone[msg.sen",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1401\n",
        "filename": "/unique_contracts/0x9c2f554150cc87dbe3617e1ee3a254665523242e.sol",
        "function": "reapFarm()",
        "lineno": 85,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1401,
        "code": "       workDone[taxMan] = 0;\n    }\n}",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x9c2f554150cc87dbe3617e1ee3a254665523242e.sol",
        "function": "reapFarm()",
        "lineno": 87,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1526,
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_contracts/0x9c2f554150cc87dbe3617e1ee3a254665523242e.sol",
        "function": "reapFarm()",
        "lineno": 89,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 1629,
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_contracts/0x9c2f554150cc87dbe3617e1ee3a254665523242e.sol",
        "function": "reapFarm()",
        "lineno": 89,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 1655,
        "code": "nt external {\n        f",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_contracts/0x9c2f554150cc87dbe3617e1ee3a254665523242e.sol",
        "function": "reapFarm()",
        "lineno": 73,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 1922,
        "code": "nder] = workDone[msg.sender].a",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `reapFarm()`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x9c2f554150cc87dbe3617e1ee3a254665523242e.sol",
        "function": "pepFarm()",
        "lineno": 78,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1922,
        "code": "nder] = workDone[msg.sender].a",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1922\nCall at address: 1922\n",
        "filename": "/unique_contracts/0x9c2f554150cc87dbe3617e1ee3a254665523242e.sol",
        "function": "pepFarm()",
        "lineno": 78,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1922,
        "code": "nder] = workDone[msg.sender].a",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function pepFarm(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x9c2f554150cc87dbe3617e1ee3a254665523242e.sol",
        "function": "pepFarm()",
        "lineno": 78,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}