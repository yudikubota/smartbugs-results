{"error": null, "issues": [{"address": 1239, "code": "okenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to", "debug": "calldata_tokenRecipient_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/1/0x60b4b0c6a1c518be1f7f68a8ced6af510fd21b4b.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 144, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3962, "code": "    *\n     * Remove `_value` tokens from the system irreversibly\n     ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/1/0x60b4b0c6a1c518be1f7f68a8ced6af510fd21b4b.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 153, "title": "Message call to external contract", "type": "Warning"}, {"address": 4051, "code": "        return", "debug": "The exception is triggered under the following conditions:\n\ncalldata_tokenRecipient_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0x79cc679000000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/1/0x60b4b0c6a1c518be1f7f68a8ced6af510fd21b4b.sol", "function": "burnFrom(address,uint256)", "lineno": 18, "title": "Exception state", "type": "Informational"}, {"address": 5054, "code": "   return c;\n ", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xcefb8f7949fd2276b3a224f81b1c67f3c7c4ff3b204b39b9c1a083c1cbb946da\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0x4aed130d6c03c9a60116049cba4601e2b67883bbbe5309180c46043a42b8432e\ncalldata_tokenRecipient_32 + 4: 0x194e81040000673900b701881fbe047f229041da54ad1f09a05d250192d88ed0\ncalldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/1/0x60b4b0c6a1c518be1f7f68a8ced6af510fd21b4b.sol", "function": "transfer(address,uint256)", "lineno": 23, "title": "Exception state", "type": "Informational"}], "success": true}