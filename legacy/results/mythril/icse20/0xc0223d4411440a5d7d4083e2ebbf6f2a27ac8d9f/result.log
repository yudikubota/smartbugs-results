{"error": null, "issues": [{"address": 1441, "code": "_addresses[i], _amount);\n    }\n\n    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        \n        tokensPerEth = _tokensPerEth;\n        emit TokensPerEthUpdated(_tokensPe", "debug": "calldata_Trextoken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Trextoken_0: 0xc3888bce00000000000000000000000000000000000000000000000000000000\ncalldatasize_Trextoken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferTokenToMultiple(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/10/0xc0223d4411440a5d7d4083e2ebbf6f2a27ac8d9f.sol", "function": "transferTokenToMultiple(address[],uint256)", "lineno": 161, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2708, "code": "0));\n        require(_amount <= bal", "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Trextoken: 0x60\ncalldata_Trextoken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/10/0xc0223d4411440a5d7d4083e2ebbf6f2a27ac8d9f.sol", "function": "transferFrom(address,address,uint256)", "lineno": 206, "title": "Exception state", "type": "Informational"}, {"address": 4981, "code": "0));\n        require(_amount <= bal", "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Trextoken: 0x4\ncalldata_Trextoken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/10/0xc0223d4411440a5d7d4083e2ebbf6f2a27ac8d9f.sol", "function": "transfer(address,uint256)", "lineno": 206, "title": "Exception state", "type": "Informational"}, {"address": 5874, "code": "n(uint256 _value", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/10/0xc0223d4411440a5d7d4083e2ebbf6f2a27ac8d9f.sol", "function": "getTokenBalance(address,address)", "lineno": 252, "title": "Message call to external contract", "type": "Warning"}, {"address": 7360, "code": " b;\n    }\n\n   ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Trextoken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_Trextoken_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Trextoken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/10/0xc0223d4411440a5d7d4083e2ebbf6f2a27ac8d9f.sol", "function": "burn(uint256)", "lineno": 36, "title": "Exception state", "type": "Informational"}, {"address": 7377, "code": "rn c;", "debug": "calldata_Trextoken_32 + 4: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Trextoken_4: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\nstorage_5: 0x0\nstorage_4: 0x1\nstorage_1: 0x0\ncaller: 0x0\ncalldata_Trextoken_0: 0x8144650a00000000000000000000000000000000000000000000000000000000\ncalldatasize_Trextoken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferTokenTo(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/10/0xc0223d4411440a5d7d4083e2ebbf6f2a27ac8d9f.sol", "function": "transferTokenTo(address,uint256)", "lineno": 46, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7390, "code": "ontract Foreig", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Trextoken_32 + 4: 0xd2bd697b67b8b7eebcef8ebaf405ca6a0b728a06c347eda3d5dbebfeffbdb977\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Trextoken_4: 0xc63a21246c99b000ea0030728005ea6909080a424a47ca48059be3c0ff803205\nstorage_5: 0x0\nstorage_4: 0x1\nstorage_1: 0x0\ncaller: 0x0\ncalldata_Trextoken_0: 0x8144650a00000000000000000000000000000000000000000000000000000000\ncalldatasize_Trextoken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/10/0xc0223d4411440a5d7d4083e2ebbf6f2a27ac8d9f.sol", "function": "transferTokenTo(address,uint256)", "lineno": 50, "title": "Exception state", "type": "Informational"}], "success": true}