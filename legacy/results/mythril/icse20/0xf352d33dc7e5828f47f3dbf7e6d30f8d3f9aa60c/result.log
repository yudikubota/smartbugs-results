{"error": null, "issues": [{"address": 1050, "code": " spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract\n        approve(_spender, _value);                                      // Set approval to contract for _value\n        spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract\n        return true;\n    }\n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) public TokenUnFreeze returns (", "debug": "calldata_tokenRecipient_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xf352d33dc7e5828f47f3dbf7e6d30f8d3f9aa60c.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 146, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3596, "code": "attempts to get the coins */\n    function transferFrom(addres", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/19/0xf352d33dc7e5828f47f3dbf7e6d30f8d3f9aa60c.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 152, "title": "Message call to external contract", "type": "Warning"}], "success": true}