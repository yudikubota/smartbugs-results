{"error": null, "issues": [{"address": 3209, "code": " uint public required;\n", "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSigWallet_4: 0x0\nstorage_3: 0x0\ncalldata_MultiSigWallet_0: 0x25e7c2700000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/20/0x371d305f254ae991dbd9eeb55dc0b7f80e75f57e.sol", "function": "_function_0x025e7c27", "lineno": 30, "title": "Exception state", "type": "Informational"}, {"address": 3761, "code": "rs.length);\n     ", "debug": "storage_3: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `removeOwner(address)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/20/0x371d305f254ae991dbd9eeb55dc0b7f80e75f57e.sol", "function": "removeOwner(address)", "lineno": 262, "title": "Integer Underflow", "type": "Warning"}, {"address": 3805, "code": "    }\n   ", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/20/0x371d305f254ae991dbd9eeb55dc0b7f80e75f57e.sol", "function": "removeOwner(address)", "lineno": 264, "title": "Exception state", "type": "Informational"}, {"address": 5866, "code": "owner.\n    functi", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0x0\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x7065cb4800000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x371d305f254ae991dbd9eeb55dc0b7f80e75f57e.sol", "function": "addOwner(address)", "lineno": 248, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6299, "code": "ders\n        _txIndex = settingsRequestsCount;\n        settingsRequests[_txIndex] = SettingsReques", "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSigWallet_4: 0x1\ncalldata_MultiSigWallet_32 + 4: 0x1\ncalldata_MultiSigWallet_32 + 36: 0x1\ncalldata_MultiSigWallet_32 + 164: 0x1\ncalldata_MultiSigWallet_32 + 132: 0x1\ncalldata_MultiSigWallet_32 + 100: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0x7465159400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/20/0x371d305f254ae991dbd9eeb55dc0b7f80e75f57e.sol", "function": "tgeSettingsChangeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256)", "lineno": 149, "title": "Exception state", "type": "Informational"}, {"address": 6504, "code": "D.\n    function confirm", "debug": "storage_7: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_4: 0x1\ncalldata_MultiSigWallet_32 + 4: 0x1\ncalldata_MultiSigWallet_32 + 36: 0x1\ncalldata_MultiSigWallet_32 + 164: 0x1\ncalldata_MultiSigWallet_32 + 132: 0x1\ncalldata_MultiSigWallet_32 + 100: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0x7465159400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `tgeSettingsChangeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x371d305f254ae991dbd9eeb55dc0b7f80e75f57e.sol", "function": "tgeSettingsChangeRequest(uint256,uint256,uint256,uint256,uint256,uint256,uint256)", "lineno": 165, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7249, "code": "i=0; i<owners", "debug": "storage_3: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_MultiSigWallet_0: 0xa0e67e2b00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getOwners()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x371d305f254ae991dbd9eeb55dc0b7f80e75f57e.sol", "function": "getOwners()", "lineno": 469, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7251, "code": "i=0; i<owners", "debug": "storage_3: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_MultiSigWallet_0: 0xa0e67e2b00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getOwners()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x371d305f254ae991dbd9eeb55dc0b7f80e75f57e.sol", "function": "getOwners()", "lineno": 469, "title": "Integer Overflow ", "type": "Warning"}, {"address": 11637, "code": "gth; i++)\n           ", "debug": "keccac_2_+_keccac_storage_5: 0x11ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2 + keccac_storage_5: 0x80\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0x1fab3fd400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setFinishedTx(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x371d305f254ae991dbd9eeb55dc0b7f80e75f57e.sol", "function": "setFinishedTx(address)", "lineno": 428, "title": "Integer Overflow ", "type": "Warning"}, {"address": 11722, "code": "SigWallet {\n    uint constant public MAX_OWNER_COUNT = 50;\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n    \n    IToken public token;\n    struct SettingsRequest \n    {\n        uint amount;\n        uint partInvestor;\n        uint partProject;\n        uint partFounders;\n        uint blocksPerStage;\n        uint partInvestorIncreasePerStage;\n        uint maxStages;\n        bool executed;\n        mapping(address => bool) confirmations;\n    }\n    uint settingsRequestsCount = 0;\n    mapping(uint => SettingsRequest) settingsRequests;\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n    address owner;\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n    modifier transactionExists(uint transactionId) {\n        require(transactions[transactionId].destination != 0);\n        _;\n    }\n    modifier confirmed(uint transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n    modifier notExecuted(uint transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n    modifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require(ownerCount < MAX_OWNER_COUNT\n            && _required <= ownerCount\n            && _required != 0\n            && ownerCount != 0);\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function() public payable {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function MultiSigWallet(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n        owner = msg.sender;\n    }\n\n    function setToken(address _token)\n    public\n    onlyOwner\n    {\n        require(token == address(0));\n        \n        token = IToken(_token);\n    }\n\n    //---------------- TGE SETTINGS -----------\n    /// @dev Sends request to change settings\n    /// @return Transaction ID\n    function tgeSettingsChangeRequest(\n        uint amount, \n        uint partInvestor,\n        uint partProject, \n        uint partFounders, \n        uint blocksPerStage, \n        uint partInvestorIncreasePerStage,\n        uint maxStages\n    ) \n    public\n    ownerExists(msg.sender)\n    returns (uint _txIndex) \n    {\n        assert(amount*partInvestor*partProject*blocksPerStage*partInvestorIncreasePerStage*maxStages != 0); //asserting no parameter is zero except partFounders\n        _txIndex = settingsRequestsCount;\n        settingsRequests[_txIndex] = SettingsRequest({\n            amount: amount,\n            partInvestor: partInvestor,\n            partProject: partProject,\n            partFounders: partFounders,\n            blocksPerStage: blocksPerStage,\n            partInvestorIncreasePerStage: partInvestorIncreasePerStage,\n            maxStages: maxStages,\n            executed: false\n        });\n        settingsRequestsCount++;\n        return _txIndex;\n    }\n    /// @dev Allows an owner to confirm a change settings request.\n    /// @param _txIndex Transaction ID.\n    function confirmSettingsChange(uint _txIndex) \n    public\n    ownerExists(msg.sender) \n    returns(bool success)\n    {\n        require(settingsRequests[_txIndex].executed == false);\n\n        settingsRequests[_txIndex].confirmations[msg.sender] = true;\n        if(isConfirmedSettingsRequest(_txIndex)){\n            SettingsRequest storage request = settingsRequests[_txIndex];\n            request.executed = true;\n            IToken(token).executeSettingsChange(\n                request.amount, \n                request.partInvestor,\n                request.partProject,\n                request.partFounders,\n                request.blocksPerStage,\n                request.partInvestorIncreasePerStage,\n                request.maxStages\n            );\n            return true;\n        } else {\n            return false;\n        }\n    }\n    function isConfirmedSettingsRequest(uint transactionId)\n    public\n    constant\n    returns (bool)\n    {\n        uint count = 0;\n        for (uint i = 0; i < owners.length; i++) {\n            if (settingsRequests[transactionId].confirmations[owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n        return false;\n    }\n\n    function getSettingChangeConfirmationCount(uint _txIndex)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (settingsRequests[_txIndex].confirmations[owners[i]])\n                count += 1;\n    }\n\n    /// @dev Shows what settings were requested in a settings change request\n    function viewSettingsChange(uint _txIndex) \n    public\n    constant\n    ownerExists(msg.sender)  \n    returns (uint amount, uint partInvestor, uint partProject, uint partFounders, uint blocksPerStage, uint partInvestorIncreasePerStage, uint maxStages) {\n        SettingsRequest storage request = settingsRequests[_txIndex];\n        return (\n            request.amount,\n            request.partInvestor, \n            request.partProject,\n            request.partFounders,\n            request.blocksPerStage,\n            request.partInvestorIncreasePerStage,\n            request.maxStages\n        );\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param owner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        OwnerRemoval(owner);\n        OwnerAddition(newOwner);\n    }\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        RequirementChange(_required);\n    }\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        ownerExists(msg.sender)\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    function setFinishedTx(address destination)\n        public\n        ownerExists(msg.sender)\n        notNull(destination)\n        returns(uint transactionId)\n    {\n        transactionId = addTransaction(destination, 0, hex\"64f65cc0\");\n        confirmTransaction(transactionId);\n    }\n\n    function setLiveTx(address destination)\n        public\n        ownerExists(msg.sender)\n        notNull(destination)\n        returns(uint transactionId)\n    {\n        transactionId = addTransaction(destination, 0, hex\"9d0714b2\");\n        confirmTransaction(transactionId);\n    }\n\n    function setFreezeTx(address destination)\n        ownerExists(msg.sender)\n        notNull(destination)\n        returns(uint transactionId)\n    {\n        transactionId = addTransaction(destination, 0, hex\"2c8cbe40\");\n        confirmTransaction(transactionId);\n    }\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction tx = transactions[transactionId];\n            tx.executed = true;\n            if (tx.destination.call.value(tx.value)(tx.data))\n                Execution(transactionId);\n            else {\n                ExecutionFailure(transactionId);\n                tx.executed = false;\n            }\n        }\n    }\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n        return false;\n    }\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=from; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n}", "debug": "storage_3: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe2000\ncalldata_MultiSigWallet_4: 0x0\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x371d305f254ae991dbd9eeb55dc0b7f80e75f57e.sol", "function": "removeOwner(address)", "lineno": 15, "title": "Integer Overflow ", "type": "Warning"}, {"address": 11724, "code": "SigWallet {\n    uint constant public MAX_OWNER_COUNT = 50;\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n    \n    IToken public token;\n    struct SettingsRequest \n    {\n        uint amount;\n        uint partInvestor;\n        uint partProject;\n        uint partFounders;\n        uint blocksPerStage;\n        uint partInvestorIncreasePerStage;\n        uint maxStages;\n        bool executed;\n        mapping(address => bool) confirmations;\n    }\n    uint settingsRequestsCount = 0;\n    mapping(uint => SettingsRequest) settingsRequests;\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n    address owner;\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n    modifier transactionExists(uint transactionId) {\n        require(transactions[transactionId].destination != 0);\n        _;\n    }\n    modifier confirmed(uint transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n    modifier notExecuted(uint transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n    modifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require(ownerCount < MAX_OWNER_COUNT\n            && _required <= ownerCount\n            && _required != 0\n            && ownerCount != 0);\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function() public payable {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function MultiSigWallet(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n        owner = msg.sender;\n    }\n\n    function setToken(address _token)\n    public\n    onlyOwner\n    {\n        require(token == address(0));\n        \n        token = IToken(_token);\n    }\n\n    //---------------- TGE SETTINGS -----------\n    /// @dev Sends request to change settings\n    /// @return Transaction ID\n    function tgeSettingsChangeRequest(\n        uint amount, \n        uint partInvestor,\n        uint partProject, \n        uint partFounders, \n        uint blocksPerStage, \n        uint partInvestorIncreasePerStage,\n        uint maxStages\n    ) \n    public\n    ownerExists(msg.sender)\n    returns (uint _txIndex) \n    {\n        assert(amount*partInvestor*partProject*blocksPerStage*partInvestorIncreasePerStage*maxStages != 0); //asserting no parameter is zero except partFounders\n        _txIndex = settingsRequestsCount;\n        settingsRequests[_txIndex] = SettingsRequest({\n            amount: amount,\n            partInvestor: partInvestor,\n            partProject: partProject,\n            partFounders: partFounders,\n            blocksPerStage: blocksPerStage,\n            partInvestorIncreasePerStage: partInvestorIncreasePerStage,\n            maxStages: maxStages,\n            executed: false\n        });\n        settingsRequestsCount++;\n        return _txIndex;\n    }\n    /// @dev Allows an owner to confirm a change settings request.\n    /// @param _txIndex Transaction ID.\n    function confirmSettingsChange(uint _txIndex) \n    public\n    ownerExists(msg.sender) \n    returns(bool success)\n    {\n        require(settingsRequests[_txIndex].executed == false);\n\n        settingsRequests[_txIndex].confirmations[msg.sender] = true;\n        if(isConfirmedSettingsRequest(_txIndex)){\n            SettingsRequest storage request = settingsRequests[_txIndex];\n            request.executed = true;\n            IToken(token).executeSettingsChange(\n                request.amount, \n                request.partInvestor,\n                request.partProject,\n                request.partFounders,\n                request.blocksPerStage,\n                request.partInvestorIncreasePerStage,\n                request.maxStages\n            );\n            return true;\n        } else {\n            return false;\n        }\n    }\n    function isConfirmedSettingsRequest(uint transactionId)\n    public\n    constant\n    returns (bool)\n    {\n        uint count = 0;\n        for (uint i = 0; i < owners.length; i++) {\n            if (settingsRequests[transactionId].confirmations[owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n        return false;\n    }\n\n    function getSettingChangeConfirmationCount(uint _txIndex)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (settingsRequests[_txIndex].confirmations[owners[i]])\n                count += 1;\n    }\n\n    /// @dev Shows what settings were requested in a settings change request\n    function viewSettingsChange(uint _txIndex) \n    public\n    constant\n    ownerExists(msg.sender)  \n    returns (uint amount, uint partInvestor, uint partProject, uint partFounders, uint blocksPerStage, uint partInvestorIncreasePerStage, uint maxStages) {\n        SettingsRequest storage request = settingsRequests[_txIndex];\n        return (\n            request.amount,\n            request.partInvestor, \n            request.partProject,\n            request.partFounders,\n            request.blocksPerStage,\n            request.partInvestorIncreasePerStage,\n            request.maxStages\n        );\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param owner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        OwnerRemoval(owner);\n        OwnerAddition(newOwner);\n    }\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        RequirementChange(_required);\n    }\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        ownerExists(msg.sender)\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    function setFinishedTx(address destination)\n        public\n        ownerExists(msg.sender)\n        notNull(destination)\n        returns(uint transactionId)\n    {\n        transactionId = addTransaction(destination, 0, hex\"64f65cc0\");\n        confirmTransaction(transactionId);\n    }\n\n    function setLiveTx(address destination)\n        public\n        ownerExists(msg.sender)\n        notNull(destination)\n        returns(uint transactionId)\n    {\n        transactionId = addTransaction(destination, 0, hex\"9d0714b2\");\n        confirmTransaction(transactionId);\n    }\n\n    function setFreezeTx(address destination)\n        ownerExists(msg.sender)\n        notNull(destination)\n        returns(uint transactionId)\n    {\n        transactionId = addTransaction(destination, 0, hex\"2c8cbe40\");\n        confirmTransaction(transactionId);\n    }\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction tx = transactions[transactionId];\n            tx.executed = true;\n            if (tx.destination.call.value(tx.value)(tx.data))\n                Execution(transactionId);\n            else {\n                ExecutionFailure(transactionId);\n                tx.executed = false;\n            }\n        }\n    }\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n        return false;\n    }\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=from; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n}", "debug": "storage_3: 0x7ffff9f100000000000000000000000000000000000000000000000000000000\ncalldata_MultiSigWallet_4: 0x0\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x371d305f254ae991dbd9eeb55dc0b7f80e75f57e.sol", "function": "removeOwner(address)", "lineno": 15, "title": "Integer Overflow ", "type": "Warning"}, {"address": 11779, "code": "SigWallet {\n    uint constant public MAX_OWNER_COUNT = 50;\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n    \n    IToken public token;\n    struct SettingsRequest \n    {\n        uint amount;\n        uint partInvestor;\n        uint partProject;\n        uint partFounders;\n        uint blocksPerStage;\n        uint partInvestorIncreasePerStage;\n        uint maxStages;\n        bool executed;\n        mapping(address => bool) confirmations;\n    }\n    uint settingsRequestsCount = 0;\n    mapping(uint => SettingsRequest) settingsRequests;\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n    address owner;\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n    modifier transactionExists(uint transactionId) {\n        require(transactions[transactionId].destination != 0);\n        _;\n    }\n    modifier confirmed(uint transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n    modifier notExecuted(uint transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n    modifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require(ownerCount < MAX_OWNER_COUNT\n            && _required <= ownerCount\n            && _required != 0\n            && ownerCount != 0);\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function() public payable {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function MultiSigWallet(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n        owner = msg.sender;\n    }\n\n    function setToken(address _token)\n    public\n    onlyOwner\n    {\n        require(token == address(0));\n        \n        token = IToken(_token);\n    }\n\n    //---------------- TGE SETTINGS -----------\n    /// @dev Sends request to change settings\n    /// @return Transaction ID\n    function tgeSettingsChangeRequest(\n        uint amount, \n        uint partInvestor,\n        uint partProject, \n        uint partFounders, \n        uint blocksPerStage, \n        uint partInvestorIncreasePerStage,\n        uint maxStages\n    ) \n    public\n    ownerExists(msg.sender)\n    returns (uint _txIndex) \n    {\n        assert(amount*partInvestor*partProject*blocksPerStage*partInvestorIncreasePerStage*maxStages != 0); //asserting no parameter is zero except partFounders\n        _txIndex = settingsRequestsCount;\n        settingsRequests[_txIndex] = SettingsRequest({\n            amount: amount,\n            partInvestor: partInvestor,\n            partProject: partProject,\n            partFounders: partFounders,\n            blocksPerStage: blocksPerStage,\n            partInvestorIncreasePerStage: partInvestorIncreasePerStage,\n            maxStages: maxStages,\n            executed: false\n        });\n        settingsRequestsCount++;\n        return _txIndex;\n    }\n    /// @dev Allows an owner to confirm a change settings request.\n    /// @param _txIndex Transaction ID.\n    function confirmSettingsChange(uint _txIndex) \n    public\n    ownerExists(msg.sender) \n    returns(bool success)\n    {\n        require(settingsRequests[_txIndex].executed == false);\n\n        settingsRequests[_txIndex].confirmations[msg.sender] = true;\n        if(isConfirmedSettingsRequest(_txIndex)){\n            SettingsRequest storage request = settingsRequests[_txIndex];\n            request.executed = true;\n            IToken(token).executeSettingsChange(\n                request.amount, \n                request.partInvestor,\n                request.partProject,\n                request.partFounders,\n                request.blocksPerStage,\n                request.partInvestorIncreasePerStage,\n                request.maxStages\n            );\n            return true;\n        } else {\n            return false;\n        }\n    }\n    function isConfirmedSettingsRequest(uint transactionId)\n    public\n    constant\n    returns (bool)\n    {\n        uint count = 0;\n        for (uint i = 0; i < owners.length; i++) {\n            if (settingsRequests[transactionId].confirmations[owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n        return false;\n    }\n\n    function getSettingChangeConfirmationCount(uint _txIndex)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (settingsRequests[_txIndex].confirmations[owners[i]])\n                count += 1;\n    }\n\n    /// @dev Shows what settings were requested in a settings change request\n    function viewSettingsChange(uint _txIndex) \n    public\n    constant\n    ownerExists(msg.sender)  \n    returns (uint amount, uint partInvestor, uint partProject, uint partFounders, uint blocksPerStage, uint partInvestorIncreasePerStage, uint maxStages) {\n        SettingsRequest storage request = settingsRequests[_txIndex];\n        return (\n            request.amount,\n            request.partInvestor, \n            request.partProject,\n            request.partFounders,\n            request.blocksPerStage,\n            request.partInvestorIncreasePerStage,\n            request.maxStages\n        );\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param owner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        OwnerRemoval(owner);\n        OwnerAddition(newOwner);\n    }\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        RequirementChange(_required);\n    }\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        ownerExists(msg.sender)\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    function setFinishedTx(address destination)\n        public\n        ownerExists(msg.sender)\n        notNull(destination)\n        returns(uint transactionId)\n    {\n        transactionId = addTransaction(destination, 0, hex\"64f65cc0\");\n        confirmTransaction(transactionId);\n    }\n\n    function setLiveTx(address destination)\n        public\n        ownerExists(msg.sender)\n        notNull(destination)\n        returns(uint transactionId)\n    {\n        transactionId = addTransaction(destination, 0, hex\"9d0714b2\");\n        confirmTransaction(transactionId);\n    }\n\n    function setFreezeTx(address destination)\n        ownerExists(msg.sender)\n        notNull(destination)\n        returns(uint transactionId)\n    {\n        transactionId = addTransaction(destination, 0, hex\"2c8cbe40\");\n        confirmTransaction(transactionId);\n    }\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction tx = transactions[transactionId];\n            tx.executed = true;\n            if (tx.destination.call.value(tx.value)(tx.data))\n                Execution(transactionId);\n            else {\n                ExecutionFailure(transactionId);\n                tx.executed = false;\n            }\n        }\n    }\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n        return false;\n    }\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=from; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n}", "debug": "keccac_2_+_keccac_storage_5: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_2 + keccac_storage_5: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0x345c8fca00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setFreezeTx(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x371d305f254ae991dbd9eeb55dc0b7f80e75f57e.sol", "function": "setFreezeTx(address)", "lineno": 15, "title": "Integer Overflow ", "type": "Warning"}], "success": true}