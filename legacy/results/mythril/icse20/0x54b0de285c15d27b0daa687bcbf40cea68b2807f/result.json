{
  "contract": "0x54b0de285c15d27b0daa687bcbf40cea68b2807f",
  "tool": "mythril",
  "start": 1563523556.3874567,
  "end": 1563523629.4368985,
  "duration": 73.04944181442261,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 3095,
        "code": "  /// @param token Address of the token to withdraw.\n    //",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/9/0x54b0de285c15d27b0daa687bcbf40cea68b2807f.sol",
        "function": "deposit(address,uint256)",
        "lineno": 177,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 6570,
        "code": " @param amount Amount of tokens.\n    function withdrawTo(",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/9/0x54b0de285c15d27b0daa687bcbf40cea68b2807f.sol",
        "function": "deposit(address,uint256)",
        "lineno": 314,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 6719,
        "code": "r, address token, uint amount) private {\n      ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/9/0x54b0de285c15d27b0daa687bcbf40cea68b2807f.sol",
        "function": "deposit(address,uint256)",
        "lineno": 315,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 7246,
        "code": "address token, uint amount) ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/9/0x54b0de285c15d27b0daa687bcbf40cea68b2807f.sol",
        "function": "withdrawOverflow(address)",
        "lineno": 305,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 7246,
        "code": "address token, uint amount) ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7425\n",
        "filename": "/unique_chucks/9/0x54b0de285c15d27b0daa687bcbf40cea68b2807f.sol",
        "function": "withdrawOverflow(address)",
        "lineno": 305,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 7701,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/9/0x54b0de285c15d27b0daa687bcbf40cea68b2807f.sol",
        "function": "withdrawOverflow(address)",
        "lineno": 328,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 7893,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/9/0x54b0de285c15d27b0daa687bcbf40cea68b2807f.sol",
        "function": "withdrawOverflow(address)",
        "lineno": 328,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 7979,
        "code": "unction add(ui",
        "debug": "The exception is triggered under the following conditions:\n\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VaultInterface_4: 0x1\ncalldata_VaultInterface_4: 0x0\ncaller: 0x0\nstorage_0: 0x0\ncalldata_VaultInterface_0: 0x3a30452a00000000000000000000000000000000000000000000000000000000\ncalldatasize_VaultInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x54b0de285c15d27b0daa687bcbf40cea68b2807f.sol",
        "function": "withdrawOverflow(address)",
        "lineno": 55,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7997,
        "code": "\n    ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VaultInterface_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_VaultInterface_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_VaultInterface_0: 0xc0ee0b8a00000000000000000000000000000000000000000000000000000000\ncalldatasize_VaultInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `tokenFallback(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0x54b0de285c15d27b0daa687bcbf40cea68b2807f.sol",
        "function": "tokenFallback(address,uint256,bytes)",
        "lineno": 60,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8010,
        "code": "x64(uint64 a, ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VaultInterface_4: 0x1\ncalldata_VaultInterface_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_VaultInterface_0: 0xc0ee0b8a00000000000000000000000000000000000000000000000000000000\ncalldatasize_VaultInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x54b0de285c15d27b0daa687bcbf40cea68b2807f.sol",
        "function": "tokenFallback(address,uint256,bytes)",
        "lineno": 61,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}