{"error": null, "issues": [{"address": 991, "code": "er to remove a white listed contract, eventually ownership could transition to\n    /// a decentralized smart contr", "debug": "storage_2: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_Ownable_0: 0xc6f5d91f00000000000000000000000000000000000000000000000000000000\ncalldatasize_Ownable: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getAddressWhiteList()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol", "function": "getAddressWhiteList()", "lineno": 150, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1575, "code": "s => bool) public factoryAddressW", "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Ownable: 0xa0\ncalldata_Ownable_4: 0x0\nstorage_2: 0x0\ncalldata_Ownable_0: 0x1e7f9f3600000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol", "function": "_function_0x1e7f9f36", "lineno": 126, "title": "Exception state", "type": "Informational"}, {"address": 2495, "code": "019 Phillip A. Els", "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Ownable: 0x200\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Ownable_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_0: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Ownable_0: 0x9244f49600000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addAddressToWhiteList(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol", "function": "addAddressToWhiteList(address)", "lineno": 2, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3128, "code": "/// a decentralized sma", "debug": "storage_2: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_Ownable_0: 0xc6f5d91f00000000000000000000000000000000000000000000000000000000\ncalldatasize_Ownable: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getAddressWhiteList()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol", "function": "getAddressWhiteList()", "lineno": 151, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3130, "code": "/// a decentralized sma", "debug": "storage_2: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_Ownable_0: 0xc6f5d91f00000000000000000000000000000000000000000000000000000000\ncalldatasize_Ownable: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getAddressWhiteList()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol", "function": "getAddressWhiteList()", "lineno": 151, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3446, "code": " item in array to replace the ad", "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Ownable: 0x4000000000000000000000000000000000000000000000000000000000000040\ncalldata_Ownable_32 + 4: 0x0\nstorage_2: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Ownable_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Ownable_0: 0xd8fbbf3100000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol", "function": "removeContractFromWhiteList(address,uint256)", "lineno": 163, "title": "Exception state", "type": "Informational"}, {"address": 4273, "code": "ddress => bool) public isWhiteListed;\n    address[] public addressWhiteList;                             // record of currently deployed addresses;\n    mapping(address => bool) public factoryAddressWhiteList;       // record of authorized factories\n\n    // events\n    event AddressAddedToWhitelist(address indexed contractAddress);\n    event AddressRemovedFromWhitelist(address indexed contractAddress);\n    event FactoryAddressAdded(address indexed factoryAddress);\n    event FactoryAddressRemoved(address indexed factoryAddress);\n\n    /*\n    // External Methods\n    */\n\n    /// @notice determines if an address is a valid MarketContract\n    /// @return false if the address is not white listed.\n    function isAddressWhiteListed(address contractAddress) external view returns (bool) {\n        return isWhiteListed[contractAddress];\n    }\n\n    /// @notice all currently whitelisted addresses\n    /// returns array of addresses\n    function getAddressWhiteList() external view returns (address[] memory) {\n        return addressWhiteList;\n    }\n\n    /// @dev allows for the owner to remove a white listed contract, eventually ownership could transition to\n    /// a decentralized smart contract of community members to vote\n    /// @param contractAddress contract to removed from white list\n    /// @param whiteListIndex of the contractAddress in the addressWhiteList to be removed.\n    function removeContractFromWhiteList(\n        address contractAddress,\n        uint whiteListIndex\n    ) external onlyOwner\n    {\n        require(isWhiteListed[contractAddress], \"can only remove whitelisted addresses\");\n        require(addressWhiteList[whiteListIndex] == contractAddress, \"index does not match address\");\n        isWhiteListed[contractAddress] = false;\n\n        // push the last item in array to replace the address we are removing and then trim the array.\n        addressWhiteList[whiteListIndex] = addressWhiteList[addressWhiteList.length - 1];\n        addressWhiteList.length -= 1;\n        emit AddressRemovedFromWhitelist(contractAddress);\n    }\n\n    /// @dev allows for the owner or factory to add a white listed contract, eventually ownership could transition to\n    /// a decentralized smart contract of community members to vote\n    /// @param contractAddress contract to removed from white list\n    function addAddressToWhiteList(address contractAddress) external {\n        require(isOwner() || factoryAddressWhiteList[msg.sender], \"Can only be added by factory or owner\");\n        require(!isWhiteListed[contractAddress], \"Address must not be whitelisted\");\n        isWhiteListed[contractAddress] = true;\n        addressWhiteList.push(contractAddress);\n        emit AddressAddedToWhitelist(contractAddress);\n    }\n\n    /// @dev allows for the owner to add a new address of a factory responsible for creating new market contracts\n    /// @param factoryAddress address of factory to be allowed to add contracts to whitelist\n    function addFactoryAddress(address factoryAddress) external onlyOwner {\n        require(!factoryAddressWhiteList[factoryAddress], \"address already added\");\n        factoryAddressWhiteList[factoryAddress] = true;\n        emit FactoryAddressAdded(factoryAddress);\n    }\n\n    /// @dev allows for the owner to remove an address of a factory\n    /// @param factoryAddress address of factory to be removed\n    function removeFactoryAddress(address factoryAddress) external onlyOwner {\n        require(factoryAddressWhiteList[factoryAddress], \"factory address is not in the white list\");\n        factoryAddressWhiteList[factoryAddress] = false;\n        emit FactoryAddressRemoved(factoryAddress);\n    }\n}", "debug": "storage_2: 0xdfcf400001020f1806c450fb3df7620f3f148a2f2cbf77778246f4200c040010\ncalldatasize_Ownable: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_Ownable_4: 0x0\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403022 +\ncalldata_Ownable_32 + 4: 0x0\ncalldata_Ownable_32 + 4: 0xdfcf400001020f1806c450fb3df7620f3f148a2f2cbf77778246f4200c04000f\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Ownable_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Ownable_0: 0xd8fbbf3100000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeContractFromWhiteList(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol", "function": "removeContractFromWhiteList(address,uint256)", "lineno": 124, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4275, "code": "ddress => bool) public isWhiteListed;\n    address[] public addressWhiteList;                             // record of currently deployed addresses;\n    mapping(address => bool) public factoryAddressWhiteList;       // record of authorized factories\n\n    // events\n    event AddressAddedToWhitelist(address indexed contractAddress);\n    event AddressRemovedFromWhitelist(address indexed contractAddress);\n    event FactoryAddressAdded(address indexed factoryAddress);\n    event FactoryAddressRemoved(address indexed factoryAddress);\n\n    /*\n    // External Methods\n    */\n\n    /// @notice determines if an address is a valid MarketContract\n    /// @return false if the address is not white listed.\n    function isAddressWhiteListed(address contractAddress) external view returns (bool) {\n        return isWhiteListed[contractAddress];\n    }\n\n    /// @notice all currently whitelisted addresses\n    /// returns array of addresses\n    function getAddressWhiteList() external view returns (address[] memory) {\n        return addressWhiteList;\n    }\n\n    /// @dev allows for the owner to remove a white listed contract, eventually ownership could transition to\n    /// a decentralized smart contract of community members to vote\n    /// @param contractAddress contract to removed from white list\n    /// @param whiteListIndex of the contractAddress in the addressWhiteList to be removed.\n    function removeContractFromWhiteList(\n        address contractAddress,\n        uint whiteListIndex\n    ) external onlyOwner\n    {\n        require(isWhiteListed[contractAddress], \"can only remove whitelisted addresses\");\n        require(addressWhiteList[whiteListIndex] == contractAddress, \"index does not match address\");\n        isWhiteListed[contractAddress] = false;\n\n        // push the last item in array to replace the address we are removing and then trim the array.\n        addressWhiteList[whiteListIndex] = addressWhiteList[addressWhiteList.length - 1];\n        addressWhiteList.length -= 1;\n        emit AddressRemovedFromWhitelist(contractAddress);\n    }\n\n    /// @dev allows for the owner or factory to add a white listed contract, eventually ownership could transition to\n    /// a decentralized smart contract of community members to vote\n    /// @param contractAddress contract to removed from white list\n    function addAddressToWhiteList(address contractAddress) external {\n        require(isOwner() || factoryAddressWhiteList[msg.sender], \"Can only be added by factory or owner\");\n        require(!isWhiteListed[contractAddress], \"Address must not be whitelisted\");\n        isWhiteListed[contractAddress] = true;\n        addressWhiteList.push(contractAddress);\n        emit AddressAddedToWhitelist(contractAddress);\n    }\n\n    /// @dev allows for the owner to add a new address of a factory responsible for creating new market contracts\n    /// @param factoryAddress address of factory to be allowed to add contracts to whitelist\n    function addFactoryAddress(address factoryAddress) external onlyOwner {\n        require(!factoryAddressWhiteList[factoryAddress], \"address already added\");\n        factoryAddressWhiteList[factoryAddress] = true;\n        emit FactoryAddressAdded(factoryAddress);\n    }\n\n    /// @dev allows for the owner to remove an address of a factory\n    /// @param factoryAddress address of factory to be removed\n    function removeFactoryAddress(address factoryAddress) external onlyOwner {\n        require(factoryAddressWhiteList[factoryAddress], \"factory address is not in the white list\");\n        factoryAddressWhiteList[factoryAddress] = false;\n        emit FactoryAddressRemoved(factoryAddress);\n    }\n}", "debug": "storage_2: 0xffc0000066069e00c40400000000000000000000000000000000000000000000\ncalldatasize_Ownable: 0x80000000000000000000000000000000000040\ncalldata_Ownable_4: 0x0\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403022 +\ncalldata_Ownable_32 + 4: 0x0\ncalldata_Ownable_32 + 4: 0xffc0000066069e00c403ffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Ownable_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Ownable_0: 0xd8fbbf3100000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeContractFromWhiteList(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol", "function": "removeContractFromWhiteList(address,uint256)", "lineno": 124, "title": "Integer Overflow ", "type": "Warning"}], "success": true}