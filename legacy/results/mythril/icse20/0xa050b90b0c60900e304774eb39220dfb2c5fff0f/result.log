{"error": null, "issues": [{"address": 373, "code": "// Owner can transf", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "fallback", "lineno": 308, "title": "Message call to external contract", "type": "Informational"}, {"address": 373, "code": "// Owner can transf", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 594\n", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "fallback", "lineno": 308, "title": "Multiple Calls", "type": "Information"}, {"address": 456, "code": "   // ------------------", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "fallback", "lineno": 309, "title": "State change after external call", "type": "Warning"}, {"address": 594, "code": "-------------------", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "fallback", "lineno": 309, "title": "Message call to external contract", "type": "Informational"}, {"address": 658, "code": "--------------------------------", "debug": "storage_3: 0x3bbd29690c17b54a0585596215729422d0a007846010fd045a5b1a4310f12ae1\nretval_373: 0x1473c07ca9881fa1c4c70a2047eb3fe0ffe7bfbba480a7c872df703d70a8fff9\nstorage_4: 0xe7ac0a914eb761c47735e3be2fec541e9be4333ed9fed7e032dfafb3cd3c7953\ncallvalue: 0xbab43c997463748fcbbd9c6e2d71a65cdf0137e86b9af50d9873e30be510f32f\nretval_594: 0x6c3c68461a377d3b52d797a1bfec9f7e4c0c4ca0d300061409bf08059dbb518f\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_exD: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "fallback", "lineno": 309, "title": "Integer Overflow ", "type": "Warning"}, {"address": 664, "code": "--------------------------------", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "fallback", "lineno": 309, "title": "State change after external call", "type": "Warning"}, {"address": 679, "code": "ion transferAnyERC20Token", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0xe0305a38aa6222480186c050d457956b93004acf9e1fe5904c182012d8052ec\nretval_373: 0x652e2edda0d6a5a1b1195f2f83db3b2ffe7ffffff7fea78d1b3fecf7efefebe\nstorage_4: 0xea00000000000000000000000000000000000000000000000000000000000000\ncallvalue: 0xefe10cae56a59820ffce734d1a473b873bea486efdf57f5ef6ddd57dade59ade\nretval_594: 0x1600000000000000000000000000000000000000000000000000000000000000\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_exD: 0x3\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "fallback", "lineno": 310, "title": "Exception state", "type": "Informational"}, {"address": 686, "code": "----\n    function transferAnyERC20Token", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "fallback", "lineno": 309, "title": "State change after external call", "type": "Warning"}, {"address": 1783, "code": " \n    function withdrawBond", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "withdrawDividend()", "lineno": 286, "title": "Message call to external contract", "type": "Informational"}, {"address": 1783, "code": " \n    function withdrawBond", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2125\n", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "withdrawDividend()", "lineno": 286, "title": "Multiple Calls", "type": "Information"}, {"address": 2060, "code": ");\n    }\n    \n    // ---", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "withdrawDividend()", "lineno": 290, "title": "State change after external call", "type": "Warning"}, {"address": 2076, "code": "-----------------", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "withdrawDividend()", "lineno": 293, "title": "State change after external call", "type": "Warning"}, {"address": 2125, "code": "------------------------", "debug": "SOLVER OUTPUT:\nretval_1783: 0xffffffefdffffffffffbffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0xffffffefdffffffffffc00000000000000000000000000000000000000000001\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_exD_0: 0x6a47400200000000000000000000000000000000000000000000000000000000\ncalldatasize_exD: 0x4\n", "description": "In the function `withdrawDividend()` a non-zero amount of Ether is sent to msg.sender.\n\nThere is a check on storage index 5. This storage slot can be written to by calling the function `fallback`.", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "withdrawDividend()", "lineno": 293, "title": "Ether send", "type": "Warning"}, {"address": 2125, "code": "------------------------", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdrawDividend(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "withdrawDividend()", "lineno": 293, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2519, "code": "----------\n    function w", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "balanceOf(address)", "lineno": 277, "title": "Message call to external contract", "type": "Informational"}, {"address": 3372, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "transferAnyERC20Token(address,uint256)", "lineno": 313, "title": "Message call to external contract", "type": "Warning"}, {"address": 3701, "code": "--------------------", "debug": "storage_3: 0x0\ncalldata_exD_4: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_exD_0: 0xf680607400000000000000000000000000000000000000000000000000000000\ncalldatasize_exD: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `withdrawBonds(uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "withdrawBonds(uint256)", "lineno": 295, "title": "Integer Underflow", "type": "Warning"}, {"address": 3789, "code": "-------------\n    fun", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdrawBonds(uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/28/0xa050b90b0c60900e304774eb39220dfb2c5fff0f.sol", "function": "withdrawBonds(uint256)", "lineno": 295, "title": "Transaction order dependence", "type": "Warning"}], "success": true}