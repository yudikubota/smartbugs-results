{"error": null, "issues": [{"address": 441, "code": "xternal view returns (bytes32[] memory ab32AlphaID, address[] memory aadrCreator, bool[] memory abDisabled) {\n\t\tab32AlphaID = new bytes32[](gnEntryCount);\n\t\taadrCreator = new address[](gnEntryCount);\n\t\tabDisabled = new bool[](gnEntryCount);\n\t\n\t\tfor (uint i = 0; i < gnEntryCount; i++) {\n\t\t\tclsEntry memory objEntry = gmapEntry[gmapEntryIndex[i]];\n\t\t\tab32AlphaID[i] = gmapEntryIndex[i];\n\t\t\taadrCreator[i] = objEntry.adrCreator;\n\t\t\tabDisabled[i] = objEntry.bDisabled;\n\t\t}\t\n\t}\n\n\tfunction zAddEntry(bytes32 b32Alpha", "debug": "mem_128 + 32 + 32*Concat(0, Extract(39, 8, storage_0)): 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\nstorage_0: 0x100\nmem_160 +\n32*Concat(0, Extract(39, 8, storage_0)) +\n32 +\n32*Concat(0, Extract(39, 8, storage_0)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_zDappRunner_0: 0x4b544a2c00000000000000000000000000000000000000000000000000000000\ncalldatasize_zDappRunner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `zGetAllEntries()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0xf0f1ccde48447f927307e47bd7b1ff0a147e8c74.sol", "function": "zGetAllEntries()", "lineno": 28, "title": "Integer Overflow ", "type": "Warning"}, {"address": 507, "code": "xternal view returns (bytes32[] memory ab32AlphaID, address[] memory aadrCreator, bool[] memory abDisabled) {\n\t\tab32AlphaID = new bytes32[](gnEntryCount);\n\t\taadrCreator = new address[](gnEntryCount);\n\t\tabDisabled = new bool[](gnEntryCount);\n\t\n\t\tfor (uint i = 0; i < gnEntryCount; i++) {\n\t\t\tclsEntry memory objEntry = gmapEntry[gmapEntryIndex[i]];\n\t\t\tab32AlphaID[i] = gmapEntryIndex[i];\n\t\t\taadrCreator[i] = objEntry.adrCreator;\n\t\t\tabDisabled[i] = objEntry.bDisabled;\n\t\t}\t\n\t}\n\n\tfunction zAddEntry(bytes32 b32Alpha", "debug": "mem_128 + 32 + 32*Concat(0, Extract(39, 8, storage_0)): 0x4\nmem_160 +\n32*Concat(0, Extract(39, 8, storage_0)) +\n32 +\n32*Concat(0, Extract(39, 8, storage_0)): 0x800000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncalldata_zDappRunner_0: 0x4b544a2c00000000000000000000000000000000000000000000000000000000\ncalldatasize_zDappRunner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `zGetAllEntries()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0xf0f1ccde48447f927307e47bd7b1ff0a147e8c74.sol", "function": "zGetAllEntries()", "lineno": 28, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1659, "code": "r;\n\t\t\tabDisabl", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0xffffffff00\ncalldata_zDappRunner_0: 0x4b544a2c00000000000000000000000000000000000000000000000000000000\ncalldatasize_zDappRunner: 0x4\nmem_128 + 32 + 32*Concat(0, Extract(39, 8, storage_0)): 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/26/0xf0f1ccde48447f927307e47bd7b1ff0a147e8c74.sol", "function": "zGetAllEntries()", "lineno": 36, "title": "Exception state", "type": "Informational"}, {"address": 1738, "code": "\t\t}\t\n\t}\n\n\tfun", "debug": "The exception is triggered under the following conditions:\n\nmem_128 + 32 + 32*Concat(0, Extract(39, 8, storage_0)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0xffffffff00\ncalldata_zDappRunner_0: 0x4b544a2c00000000000000000000000000000000000000000000000000000000\ncalldatasize_zDappRunner: 0x4\nmem_160 +\n32*Concat(0, Extract(39, 8, storage_0)) +\n32 +\n32*Concat(0, Extract(39, 8, storage_0)): 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/26/0xf0f1ccde48447f927307e47bd7b1ff0a147e8c74.sol", "function": "zGetAllEntries()", "lineno": 38, "title": "Exception state", "type": "Informational"}, {"address": 2032, "code": "}\n\t\n\tfunction zGetAllEnt", "debug": "SOLVER OUTPUT:\nstorage_0: 0x0\ncaller: 0x0\ncalldata_zDappRunner_0: 0xffe3c6fd00000000000000000000000000000000000000000000000000000000\ncalldatasize_zDappRunner: 0x4\ncallvalue: 0x0\n", "description": "The function `zKill()` executes the SUICIDE instruction. The remaining Ether is sent to a stored address.\n\nThere is a check on storage index 0. This storage index can be written to by calling the function `zAddEntry(bytes32,string)`.", "filename": "/unique_chucks/26/0xf0f1ccde48447f927307e47bd7b1ff0a147e8c74.sol", "function": "zKill()", "lineno": 26, "title": "Unchecked SUICIDE", "type": "Warning"}], "success": true}