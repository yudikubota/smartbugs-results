{"error": null, "issues": [{"address": 270, "code": "uploadData(bytes _data) public returns (uint){\n        require(msg.sender == owner);\n        data[counter] = _data;\n        counter++;\n    }\n    function", "debug": "calldata_Storage_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Storage_0: 0x69cef46c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Storage: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `uploadData(bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/42/0xa98a18b786ebb5020552882b9a740ec69818a991.sol", "function": "uploadData(bytes)", "lineno": 10, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1089, "code": "r] = _data;\n ", "debug": "The exception is triggered under the following conditions:\n\nstorage_7: 0x6\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Storage_0: 0x69cef46c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Storage: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/42/0xa98a18b786ebb5020552882b9a740ec69818a991.sol", "function": "uploadData(bytes)", "lineno": 12, "title": "Exception state", "type": "Informational"}, {"address": 1148, "code": "s[6] public data;\n  ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Storage_4: 0x6\ncalldata_Storage_0: 0xf0ba844000000000000000000000000000000000000000000000000000000000\ncalldatasize_Storage: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/42/0xa98a18b786ebb5020552882b9a740ec69818a991.sol", "function": "_function_0xf0ba8440", "lineno": 5, "title": "Exception state", "type": "Informational"}, {"address": 1351, "code": "ntract Storage {\n    address owner;\n    bytes[6] public data;\n    uint counter;\n    constructor() public {\n        owner = msg.sender;\n    }\n    function uploadData(bytes _data) public returns (uint){\n        require(msg.sender == owner);\n        data[counter] = _data;\n        counter++;\n    }\n    function getData() public view returns (bytes){\n        uint length;\n        for(uint i = 0; i<6; i++) {\n            length += data[i].length;\n        }\n        uint index;\n        bytes memory result = new bytes(length);\n        for(i = 0; i<6; i++) {\n            for(uint k = 0; k < data[i].length; k++) {\n                result[index + k] = data[i][k];\n            }\n            index += data[i].length;\n        }\n        return result;\n    }\n}", "debug": "keccac_storage_7_+_1: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_storage_7 + 1: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_7: 0x5\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Storage_0: 0x69cef46c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Storage: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `uploadData(bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/42/0xa98a18b786ebb5020552882b9a740ec69818a991.sol", "function": "uploadData(bytes)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1380, "code": "ntract Storage {\n    address owner;\n    bytes[6] public data;\n    uint counter;\n    constructor() public {\n        owner = msg.sender;\n    }\n    function uploadData(bytes _data) public returns (uint){\n        require(msg.sender == owner);\n        data[counter] = _data;\n        counter++;\n    }\n    function getData() public view returns (bytes){\n        uint length;\n        for(uint i = 0; i<6; i++) {\n            length += data[i].length;\n        }\n        uint index;\n        bytes memory result = new bytes(length);\n        for(i = 0; i<6; i++) {\n            for(uint k = 0; k < data[i].length; k++) {\n                result[index + k] = data[i][k];\n            }\n            index += data[i].length;\n        }\n        return result;\n    }\n}", "debug": "calldata_Storage_4 + calldata_Storage_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_7: 0x5\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Storage_0: 0x69cef46c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Storage: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `uploadData(bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/42/0xa98a18b786ebb5020552882b9a740ec69818a991.sol", "function": "uploadData(bytes)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1394, "code": "ntract Storage {\n    address owner;\n    bytes[6] public data;\n    uint counter;\n    constructor() public {\n        owner = msg.sender;\n    }\n    function uploadData(bytes _data) public returns (uint){\n        require(msg.sender == owner);\n        data[counter] = _data;\n        counter++;\n    }\n    function getData() public view returns (bytes){\n        uint length;\n        for(uint i = 0; i<6; i++) {\n            length += data[i].length;\n        }\n        uint index;\n        bytes memory result = new bytes(length);\n        for(i = 0; i<6; i++) {\n            for(uint k = 0; k < data[i].length; k++) {\n                result[index + k] = data[i][k];\n            }\n            index += data[i].length;\n        }\n        return result;\n    }\n}", "debug": "calldata_Storage_4 + calldata_Storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_7: 0x5\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Storage_0: 0x69cef46c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Storage: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `uploadData(bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/42/0xa98a18b786ebb5020552882b9a740ec69818a991.sol", "function": "uploadData(bytes)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1416, "code": "ntract Storage {\n    address owner;\n    bytes[6] public data;\n    uint counter;\n    constructor() public {\n        owner = msg.sender;\n    }\n    function uploadData(bytes _data) public returns (uint){\n        require(msg.sender == owner);\n        data[counter] = _data;\n        counter++;\n    }\n    function getData() public view returns (bytes){\n        uint length;\n        for(uint i = 0; i<6; i++) {\n            length += data[i].length;\n        }\n        uint index;\n        bytes memory result = new bytes(length);\n        for(i = 0; i<6; i++) {\n            for(uint k = 0; k < data[i].length; k++) {\n                result[index + k] = data[i][k];\n            }\n            index += data[i].length;\n        }\n        return result;\n    }\n}", "debug": "keccac_storage_7_+_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Storage_4 + calldata_Storage_4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\nstorage_7: 0x5\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Storage_0: 0x69cef46c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Storage: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `uploadData(bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/42/0xa98a18b786ebb5020552882b9a740ec69818a991.sol", "function": "uploadData(bytes)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}