{
  "contract": "0x664201f2771211e4f890b64ac8f1d65c47520864",
  "tool": "mythril",
  "start": 1563597620.997458,
  "end": 1563598085.8852232,
  "duration": 464.8877651691437,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 407,
        "code": " \n        RegistryInterface registry = RegistryInterface(coord.getContract(\"REGISTRY\")); \n        require(registry.isProviderInitiated(address(this)), \"Provider not intiialized\");\n\n        registry.initiateProviderCurve(endpoint, curve, address(this));\n        curves[endpoint] = newToken(bytes32ToString(endpoint), bytes32ToString(symbol));\n        curves_list.push(endpoint);        \n        registry.setProviderParameter(endpoint, toBytes(curves[endpoint]));\n        \n        DotTokenCreated(curves[endpoint]);\n        return curves[endpoint];\n    }\n\n    //whether this contract holds tokens or coming from msg.sender,etc\n    function bond(bytes32 endpoint, uint numDots) public  {\n\n        require( status == ContestStatus.Initialized, \" contest not live\"); \n\n        bondage = BondageInterface(coord.getContract(\"BONDAGE\"));\n ",
        "debug": "calldata_ZapCoordinatorInterface_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZapCoordinatorInterface_0: 0x6af065000000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `initializeCurve(bytes32,bytes32,int256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "initializeCurve(bytes32,bytes32,int256[])",
        "lineno": 269,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 598,
        "code": " public curves_list; // arr",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_9: 0x8000\ncalldata_ZapCoordinatorInterface_0: 0x200d2ed200000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "_function_0x200d2ed2",
        "lineno": 169,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 676,
        "code": "view returns(address) {\n        RegistryInterface registry = RegistryInterface(coord.getContract(\"REGISTRY\")); \n        return bytesToAddr(registry.getProviderParameter(address(this), endpoint));\n    }\n\n    // https://ethereum.stackexchange.com/questions/884/how-to-convert-an-address-t",
        "debug": "calldata_ZapCoordinatorInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZapCoordinatorInterface_0: 0x4629ffea00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `newToken(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "newToken(string,string)",
        "lineno": 345,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1221,
        "debug": "calldata_ZapCoordinatorInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZapCoordinatorInterface_0: 0x5ef6228c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x5ef6228c`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "_function_0x5ef6228c",
        "lineno": 374,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3239,
        "code": "tring(symbol));\n        curve",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "initializeCurve(bytes32,bytes32,int256[])",
        "lineno": 274,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3239,
        "code": "tring(symbol));\n        curve",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3874\nCall at address: 3874\nCall at address: 3874\nCall at address: 3874\nCall at address: 3874\nCall at address: 3455\n",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "initializeCurve(bytes32,bytes32,int256[])",
        "lineno": 274,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3455,
        "code": ";        \n        registry.setProviderParam",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "initializeCurve(bytes32,bytes32,int256[])",
        "lineno": 275,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3455,
        "code": ";        \n        registry.setProviderParam",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3874\nCall at address: 3874\nCall at address: 3874\nCall at address: 3874\nCall at address: 3874\n",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "initializeCurve(bytes32,bytes32,int256[])",
        "lineno": 275,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3799,
        "code": "\n        \n        DotTokenCreated(curves[endpoint]);\n        r",
        "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_32 + 36: 0x800000000000000000000000000000000000000000000000000000000000000\nmem_128 +\n32 +\n32*\ncalldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_3455: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_3239: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_ZapCoordinatorInterface_4: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x6af065000000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `initializeCurve(bytes32,bytes32,int256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "initializeCurve(bytes32,bytes32,int256[])",
        "lineno": 276,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3874,
        "code": "\n        \n        DotTokenCreated(curves[endpoint]);\n        r",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "initializeCurve(bytes32,bytes32,int256[])",
        "lineno": 276,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4687,
        "code": "ves_list[i] != winner) {\n     ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_9: 0x8000\ncalldata_ZapCoordinatorInterface_0: 0x11da60b400000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "settle()",
        "lineno": 232,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5002,
        "code": "t[i]);  \n                if(",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "settle()",
        "lineno": 233,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5002,
        "code": "t[i]);  \n                if(",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6258\nCall at address: 6007\nCall at address: 6258\nCall at address: 6007\nCall at address: 6007\nCall at address: 5417\nCall at address: 6007\nCall at address: 5725\nCall at address: 5417\n",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "settle()",
        "lineno": 233,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5121,
        "code": "d(address(this), curves_list[i]);  \n                if( ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "settle()",
        "lineno": 233,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 5417,
        "code": "// how many winning dots    \n        uint256 numWin ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "settle()",
        "lineno": 240,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5417,
        "code": "// how many winning dots    \n        uint256 numWin ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6007\nCall at address: 5725\n",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "settle()",
        "lineno": 240,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5725,
        "code": " // redeemable value of each dot token\n        winV",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "settle()",
        "lineno": 242,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6007,
        "code": "\n    }\n\n\n    //TODO ensure all has been rede",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "settle()",
        "lineno": 245,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6007,
        "code": "\n    }\n\n\n    //TODO ensure all has been rede",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6258\n",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "settle()",
        "lineno": 245,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 6258,
        "code": "require(status == ContestStatus.Settl",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "settle()",
        "lineno": 251,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6329,
        "code": " {\n        require(status == ContestStatus.Settled, \"cont",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "settle()",
        "lineno": 250,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 6365,
        "code": "tled\");\n        require(msg.se",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "settle()",
        "lineno": 251,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 6989,
        "code": "s(this), endpoint));\n    }\n\n    /",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "newToken(string,string)",
        "lineno": 347,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 7104,
        "code": "this), winner);\n\n        curren",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_9: 0x8000\ncalldata_ZapCoordinatorInterface_0: 0x4d8de4fc00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 312,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7747,
        "code": "s\n        bondage.unbond(add",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 316,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 7747,
        "code": "s\n        bondage.unbond(add",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 8332\nCall at address: 8077\n",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 316,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 7866,
        "code": " - 1);\n        //unbond dots\n        bondage.unbond(addr",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 315,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 8077,
        "code": "s);\n\n        //burn dot backed token\n       ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 317,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 8077,
        "code": "s);\n\n        //burn dot backed token\n       ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 8332\n",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 317,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 8332,
        "code": "Interface(curves[winner]);\n\n     ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 320,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 9973,
        "code": "_COST\"));\n        uint256 numReserv",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_9: 0x8000\ncalldata_ZapCoordinatorInterface_0: 0x51f9321500000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 290,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10288,
        "code": "ots - 1);\n\n        require(\n",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 291,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 10288,
        "code": "ots - 1);\n\n        require(\n",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 10871\nCall at address: 10616\n",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 291,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 10407,
        "code": " endpoint, issued + 1, numDots - 1);\n\n        require(\n ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 291,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 10616,
        "code": "sferFrom(msg.sender, address(this), numReserve",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 294,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 10616,
        "code": "sferFrom(msg.sender, address(this), numReserve",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 10871\n",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 294,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 10871,
        "code": "or transfer\"\n        );\n\n        ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 295,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 12818,
        "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x5ef6228c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `_function_0x5ef6228c`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "_function_0x5ef6228c",
        "lineno": 374,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 12827,
        "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x5ef6228c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x5ef6228c`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "_function_0x5ef6228c",
        "lineno": 374,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 12987,
        "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0x1\ncalldata_ZapCoordinatorInterface_0: 0x5ef6228c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `_function_0x5ef6228c`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "_function_0x5ef6228c",
        "lineno": 374,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 13188,
        "code": "e() onlyOwner {\n        status = Cont",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_9: 0x8000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x74e77a8100000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "initializeContest(address)",
        "lineno": 212,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 13965,
        "code": "< 20; i++)\n            b[i] =",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x664201f2771211e4f890b64ac8f1d65c47520864.sol",
        "function": "getTokenAddress(bytes32)",
        "lineno": 353,
        "title": "Message call to external contract",
        "type": "Informational"
      }
    ],
    "success": true
  }
}