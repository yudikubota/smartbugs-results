{"error": null, "issues": [{"address": 920, "code": " }\n    }\n\n\n    function transferAndFreeze(address _to, uint256 _value, uint256 _when) external {\n        require(unpausedWallet[msg.sender]);\n        require(freezedTokenOf(_to) == 0);\n        if(_when > 0){\n            freeze storage _freeze = freezedTokens[_to];\n            _freeze.amount = _value;\n            _freeze.when = _when;\n        }\n        transfer(_to,_value);\n    }\n\n    function transfer(address _to, uint256 _value) publ", "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0x24db1f5000000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `masFreezedTokens(address[],uint256[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/22/0x7d2701fb8c73e279e818db92544e471d5df3afdf.sol", "function": "masFreezedTokens(address[],uint256[],uint256[])", "lineno": 430, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1705, "code": "ion migrate() public\n    {\n        require(balances[msg.sender] > 0);\n        migrateInternal(msg.sender);\n    }\n\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view ret", "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0x680b3bdf00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `migrateAll(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/22/0x7d2701fb8c73e279e818db92544e471d5df3afdf.sol", "function": "migrateAll(address[])", "lineno": 261, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4004, "code": " the totalSupply, which *should* be a", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/22/0x7d2701fb8c73e279e818db92544e471d5df3afdf.sol", "function": "rejectTokens(address,uint256)", "lineno": 217, "title": "Message call to external contract", "type": "Informational"}, {"address": 4294, "code": "    }\n}\n\ncontract MigratableToken is BasicToken,GuidedByRol", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/22/0x7d2701fb8c73e279e818db92544e471d5df3afdf.sol", "function": "rejectTokens(address,uint256)", "lineno": 223, "title": "State change after external call", "type": "Warning"}, {"address": 4321, "code": "int256 public totalMigrated;\n    addres", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/22/0x7d2701fb8c73e279e818db92544e471d5df3afdf.sol", "function": "rejectTokens(address,uint256)", "lineno": 228, "title": "State change after external call", "type": "Warning"}, {"address": 4713, "code": " freeze) freezedTokens;\n\n    function", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/22/0x7d2701fb8c73e279e818db92544e471d5df3afdf.sol", "function": "mint(address,uint256)", "lineno": 402, "title": "Message call to external contract", "type": "Informational"}, {"address": 4806, "code": "nOf(address _beneficiary) public view re", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/22/0x7d2701fb8c73e279e818db92544e471d5df3afdf.sol", "function": "mint(address,uint256)", "lineno": 404, "title": "State change after external call", "type": "Warning"}, {"address": 4953, "code": "256 amount){\n        freeze storage _freez", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/22/0x7d2701fb8c73e279e818db92544e471d5df3afdf.sol", "function": "mint(address,uint256)", "lineno": 404, "title": "State change after external call", "type": "Warning"}, {"address": 6168, "code": "0);\n        migrateInternal(msg.sende", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/22/0x7d2701fb8c73e279e818db92544e471d5df3afdf.sol", "function": "migrateAll(address[])", "lineno": 263, "title": "Message call to external contract", "type": "Informational"}, {"address": 6575, "code": "int256 value = balances[_holder];\n   ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/22/0x7d2701fb8c73e279e818db92544e471d5df3afdf.sol", "function": "setMigrationAgent(address)", "lineno": 243, "title": "Message call to external contract", "type": "Informational"}, {"address": 9342, "code": "    f", "debug": "calldata_Token_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_1: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nreturndatasize: 0x20\nretval_4713: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `mint(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/22/0x7d2701fb8c73e279e818db92544e471d5df3afdf.sol", "function": "mint(address,uint256)", "lineno": 60, "title": "Integer Overflow ", "type": "Warning"}, {"address": 9355, "code": "us(uint256 a, ", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x1\ncalldata_Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_4713: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0x7d2701fb8c73e279e818db92544e471d5df3afdf.sol", "function": "mint(address,uint256)", "lineno": 60, "title": "Exception state", "type": "Informational"}, {"address": 9791, "code": "ause\". Available to the owner of the ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/22/0x7d2701fb8c73e279e818db92544e471d5df3afdf.sol", "function": "masFreezedTokens(address[],uint256[],uint256[])", "lineno": 95, "title": "Message call to external contract", "type": "Informational"}, {"address": 9873, "code": "ction add(uint", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_4004: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0x3d02c85b00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0x7d2701fb8c73e279e818db92544e471d5df3afdf.sol", "function": "rejectTokens(address,uint256)", "lineno": 55, "title": "Exception state", "type": "Informational"}], "success": true}