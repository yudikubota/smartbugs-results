{
  "contract": "0xc3a684140448995f6abeb361c56110207da04d57",
  "tool": "mythril",
  "start": 1563628944.1361625,
  "end": 1563628958.1406286,
  "duration": 14.00446605682373,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 998,
        "code": " Deposited(account, amount,",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x77a1affea47121bbfbbbfb27a4111641cfec6ed6eb77ddbfbbffa5f7b1d9f5be\ncallvalue: 0xc80e31fe2571ee33012303c7ad91e5a4aeaf8ca0936799b83e002d863192753c\ncalldata_SignalsSociety_0: 0x0\ncalldatasize_SignalsSociety: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0xc3a684140448995f6abeb361c56110207da04d57.sol",
        "function": "fallback",
        "lineno": 83,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1300,
        "code": "pay for it\n    require(balances[account] ",
        "debug": "calldata_SignalsSociety_32 + 4: 0x0\nstorage_keccac_255_&_calldata_SignalsSociety_32_+_4: 0x0\ncalldata_SignalsSociety_32 + 36: 0x1\nstorage_1: 0x0\ncaller: 0x0\ncalldata_SignalsSociety_0: 0xb4475000000000000000000000000000000000000000000000000000000000\ncalldatasize_SignalsSociety: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `fallback`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/26/0xc3a684140448995f6abeb361c56110207da04d57.sol",
        "function": "fallback",
        "lineno": 90,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 1537,
        "code": "\n    } else {\n      // other",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1643\n",
        "filename": "/unique_chucks/26/0xc3a684140448995f6abeb361c56110207da04d57.sol",
        "function": "fallback",
        "lineno": 99,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1643,
        "code": "ransfer(price);\n    }    \n    // ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/26/0xc3a684140448995f6abeb361c56110207da04d57.sol",
        "function": "fallback",
        "lineno": 102,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1752,
        "code": "ccount, membership, n",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/26/0xc3a684140448995f6abeb361c56110207da04d57.sol",
        "function": "fallback",
        "lineno": 105,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2443,
        "code": "sSociety Contrac",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SignalsSociety_4: 0x80\ncalldata_SignalsSociety_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SignalsSociety_0: 0x4adc0b0900000000000000000000000000000000000000000000000000000000\ncalldatasize_SignalsSociety: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/26/0xc3a684140448995f6abeb361c56110207da04d57.sol",
        "function": "_function_0x4adc0b09",
        "lineno": 66,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2483,
        "code": "e for a single m",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SignalsSociety_4: 0x80\ncalldata_SignalsSociety_0: 0x88fd0b6e00000000000000000000000000000000000000000000000000000000\ncalldatasize_SignalsSociety: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/26/0xc3a684140448995f6abeb361c56110207da04d57.sol",
        "function": "_function_0x88fd0b6e",
        "lineno": 58,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}