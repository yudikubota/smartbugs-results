{
  "contract": "0x38538851a1df08022f96406663074efbb4421d7d",
  "tool": "mythril",
  "start": 1563650841.4541414,
  "end": 1563650971.8939543,
  "duration": 130.43981289863586,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1541,
        "code": "      \n        if (outcomes",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1646\n",
        "filename": "/unique_chucks/29/0x38538851a1df08022f96406663074efbb4421d7d.sol",
        "function": "buyTokenFor(address)",
        "lineno": 279,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1646,
        "code": "dex] > 0) {\n            retu",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1903\n",
        "filename": "/unique_chucks/29/0x38538851a1df08022f96406663074efbb4421d7d.sol",
        "function": "fallback",
        "lineno": 280,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1903,
        "code": "index + i)%outcomesChances.length);\n        } else {",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/29/0x38538851a1df08022f96406663074efbb4421d7d.sol",
        "function": "fallback",
        "lineno": 281,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3051,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/29/0x38538851a1df08022f96406663074efbb4421d7d.sol",
        "function": "changeFundOwner(address)",
        "lineno": 376,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3051,
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function changeFundOwner(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/29/0x38538851a1df08022f96406663074efbb4421d7d.sol",
        "function": "changeFundOwner(address)",
        "lineno": 376,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4889,
        "code": "\n        retur",
        "debug": "The exception is triggered under the following conditions:\n\nretval_5324: 0x989680\nblock_number: 0x0\nstorage_3: 0x1\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SlotCrowdsale_0: 0x102fcfc00000000000000000000000000000000000000000000000000000000\ncalldatasize_SlotCrowdsale: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/29/0x38538851a1df08022f96406663074efbb4421d7d.sol",
        "function": "distributeOwnership()",
        "lineno": 16,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5324,
        "code": "alse;\n        }\n  ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/29/0x38538851a1df08022f96406663074efbb4421d7d.sol",
        "function": "distributeOwnership()",
        "lineno": 324,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5324,
        "code": "alse;\n        }\n  ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function distributeOwnership(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/29/0x38538851a1df08022f96406663074efbb4421d7d.sol",
        "function": "distributeOwnership()",
        "lineno": 324,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}