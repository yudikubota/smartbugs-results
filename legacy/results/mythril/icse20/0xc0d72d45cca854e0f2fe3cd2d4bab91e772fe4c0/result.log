{"error": null, "issues": [{"address": 1005, "code": "age = _message;\n    }\n\n\n    function setPrice(uint16 _pixelNumber, uint256 _weiAmount) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].price = _weiAmount;\n    ", "debug": "calldata_Pixereum_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Pixereum_0: 0x30fb6bfb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMessage(uint16,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "setMessage(uint16,string)", "lineno": 178, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1209, "code": "blic \n    {\n        require(_pixelNumber < numberOfPixels);\n        require(beneficiary != address(0));\n        require(msg.value != 0);\n        \n        // get current pixel info\n        address currentOwner;\n        uint256 currentPrice;\n        bool currentSaleState;\n        (currentOwner, , currentPrice, currentSaleState) = getPixel(_pixelNumber);\n        \n        // check if a pixel is for sale\n        require(currentSaleState == true);\n\n        // check if a received Ether is higher than current price\n        require(currentPrice <= msg.value);\n\n        // calculate fee\n        uint fee = msg.value / feeRate;\n\n        // transfer received amount to current owner\n        currentOwner.transfer(msg.value - fee);\n\n        // transfer fee to fundWallet\n        fundWallet.transfer(fee);\n\n        // update pixel\n        pixels[_pixelNumber] = Pixel(beneficiary, _message, currentPrice, false);\n        \n        // update color\n        colors[_pixelNumber] = _color;\n    }\n\n\n    function setOwner(uint16 _pixelNumber, address _owner) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        require(_owner != addre", "debug": "calldata_Pixereum_32 + 68: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Pixereum_0: 0x5a052dff00000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\n", "description": "A possible integer overflow exists in the function `buyPixel(address,uint16,uint24,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "buyPixel(address,uint16,uint24,string)", "lineno": 121, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1221, "code": "blic \n    {\n        require(_pixelNumber < numberOfPixels);\n        require(beneficiary != address(0));\n        require(msg.value != 0);\n        \n        // get current pixel info\n        address currentOwner;\n        uint256 currentPrice;\n        bool currentSaleState;\n        (currentOwner, , currentPrice, currentSaleState) = getPixel(_pixelNumber);\n        \n        // check if a pixel is for sale\n        require(currentSaleState == true);\n\n        // check if a received Ether is higher than current price\n        require(currentPrice <= msg.value);\n\n        // calculate fee\n        uint fee = msg.value / feeRate;\n\n        // transfer received amount to current owner\n        currentOwner.transfer(msg.value - fee);\n\n        // transfer fee to fundWallet\n        fundWallet.transfer(fee);\n\n        // update pixel\n        pixels[_pixelNumber] = Pixel(beneficiary, _message, currentPrice, false);\n        \n        // update color\n        colors[_pixelNumber] = _color;\n    }\n\n\n    function setOwner(uint16 _pixelNumber, address _owner) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        require(_owner != addre", "debug": "calldata_Pixereum_4 + calldata_Pixereum_32 + 68: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_Pixereum_0: 0x5a052dff00000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\n", "description": "A possible integer overflow exists in the function `buyPixel(address,uint16,uint24,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "buyPixel(address,uint16,uint24,string)", "lineno": 121, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1230, "code": "blic \n    {\n        require(_pixelNumber < numberOfPixels);\n        require(beneficiary != address(0));\n        require(msg.value != 0);\n        \n        // get current pixel info\n        address currentOwner;\n        uint256 currentPrice;\n        bool currentSaleState;\n        (currentOwner, , currentPrice, currentSaleState) = getPixel(_pixelNumber);\n        \n        // check if a pixel is for sale\n        require(currentSaleState == true);\n\n        // check if a received Ether is higher than current price\n        require(currentPrice <= msg.value);\n\n        // calculate fee\n        uint fee = msg.value / feeRate;\n\n        // transfer received amount to current owner\n        currentOwner.transfer(msg.value - fee);\n\n        // transfer fee to fundWallet\n        fundWallet.transfer(fee);\n\n        // update pixel\n        pixels[_pixelNumber] = Pixel(beneficiary, _message, currentPrice, false);\n        \n        // update color\n        colors[_pixelNumber] = _color;\n    }\n\n\n    function setOwner(uint16 _pixelNumber, address _owner) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        require(_owner != addre", "debug": "calldata_Pixereum_4 + calldata_Pixereum_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_Pixereum_0: 0x5a052dff00000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\n", "description": "A possible integer overflow exists in the function `buyPixel(address,uint16,uint24,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "buyPixel(address,uint16,uint24,string)", "lineno": 121, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1236, "code": "blic \n    {\n        require(_pixelNumber < numberOfPixels);\n        require(beneficiary != address(0));\n        require(msg.value != 0);\n        \n        // get current pixel info\n        address currentOwner;\n        uint256 currentPrice;\n        bool currentSaleState;\n        (currentOwner, , currentPrice, currentSaleState) = getPixel(_pixelNumber);\n        \n        // check if a pixel is for sale\n        require(currentSaleState == true);\n\n        // check if a received Ether is higher than current price\n        require(currentPrice <= msg.value);\n\n        // calculate fee\n        uint fee = msg.value / feeRate;\n\n        // transfer received amount to current owner\n        currentOwner.transfer(msg.value - fee);\n\n        // transfer fee to fundWallet\n        fundWallet.transfer(fee);\n\n        // update pixel\n        pixels[_pixelNumber] = Pixel(beneficiary, _message, currentPrice, false);\n        \n        // update color\n        colors[_pixelNumber] = _color;\n    }\n\n\n    function setOwner(uint16 _pixelNumber, address _owner) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        require(_owner != addre", "debug": "calldata_Pixereum_4 + calldata_Pixereum_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_Pixereum_0: 0x5a052dff00000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\n", "description": "A possible integer overflow exists in the function `buyPixel(address,uint16,uint24,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "buyPixel(address,uint16,uint24,string)", "lineno": 121, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2576, "code": "    pixels[_pixelNumber] = Pixel(benef", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2667\n", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "buyPixel(address,uint16,uint24,string)", "lineno": 149, "title": "Multiple Calls", "type": "Information"}, {"address": 3730, "code": "Number)\n    {\n      ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Pixereum_4: 0x2710\nstorage_0 + keccac_65535_&_65535_&_65535_&_calldata_Pixereum_4: 0x0\ncaller: 0x0\ncalldata_Pixereum_0: 0x8858adc600000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "setColor(uint16,uint24)", "lineno": 176, "title": "Exception state", "type": "Informational"}, {"address": 3766, "code": "Number)\n    {\n        pixels[", "debug": "256_EXP_3*\nbvurem_i(Concat(0, Extract(15, 0, calldata_Pixereum_4)), 10): 0xd508ecd7ee583fe95ffffffffe6675fff6a23fe7ffffffffffc7ff9fc7ffc9f8\ncalldata_Pixereum_32 + 4: 0x77c5a4\ncalldata_Pixereum_4: 0x270f\nstorage_0 + keccac_65535_&_65535_&_65535_&_calldata_Pixereum_4: 0x0\ncaller: 0x0\ncalldata_Pixereum_0: 0x8858adc600000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setColor(uint16,uint24)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "setColor(uint16,uint24)", "lineno": 176, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4426, "code": "lic colors;\n    bool public", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Pixereum_4: 0x2710\ncalldata_Pixereum_0: 0xbd11f69d00000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "_function_0xbd11f69d", "lineno": 18, "title": "Exception state", "type": "Informational"}, {"address": 4712, "code": "ice, pixel.isSale);\n    }\n  ", "debug": "calldata_Pixereum_4 + calldata_Pixereum_32 + 68: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe41\nstorage_0 + keccac_65535_&_65535_&_65535_&_calldata_Pixereum_32_+_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Pixereum_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Pixereum_32 + 4: 0x270f\ncalldata_Pixereum_0: 0x5a052dff00000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\n", "description": "A possible integer overflow exists in the function `buyPixel(address,uint16,uint24,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "buyPixel(address,uint16,uint24,string)", "lineno": 95, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4858, "code": "ice, pixel.isSale);\n    }\n  ", "debug": "calldata_Pixereum_4 + calldata_Pixereum_32 + 68: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe21\nstorage_0 + keccac_65535_&_65535_&_65535_&_calldata_Pixereum_32_+_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Pixereum_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Pixereum_32 + 4: 0x270f\ncalldata_Pixereum_0: 0x5a052dff00000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\n", "description": "A possible integer overflow exists in the function `buyPixel(address,uint16,uint24,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "buyPixel(address,uint16,uint24,string)", "lineno": 95, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4914, "code": "ice, pixel.isSale);\n    }\n  ", "debug": "storage_keccac_65535_&_65535_&_65535_&_calldata_Pixereum_32_+_4 + 1: 0x9ed1111000022e7ffffffffff1fdff6f7ffffffffffffffffffffffffffffc01\ncalldata_Pixereum_4 + calldata_Pixereum_32 + 68: 0xee00000000000000000000000000000000000000000000000000000000000001\nstorage_0 + keccac_65535_&_65535_&_65535_&_calldata_Pixereum_32_+_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Pixereum_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Pixereum_32 + 4: 0x270f\ncalldata_Pixereum_0: 0x5a052dff00000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\n", "description": "A possible integer overflow exists in the function `buyPixel(address,uint16,uint24,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "buyPixel(address,uint16,uint24,string)", "lineno": 95, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4938, "code": "ice, pixel.isSale);\n    }\n  ", "debug": "storage_keccac_65535_&_65535_&_65535_&_calldata_Pixereum_32_+_4 + 1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01\ncalldata_Pixereum_4 + calldata_Pixereum_32 + 68: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01\nstorage_0 + keccac_65535_&_65535_&_65535_&_calldata_Pixereum_32_+_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Pixereum_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Pixereum_32 + 4: 0x270f\ncalldata_Pixereum_0: 0x5a052dff00000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\n", "description": "A possible integer overflow exists in the function `buyPixel(address,uint16,uint24,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "buyPixel(address,uint16,uint24,string)", "lineno": 95, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5131, "code": "ntract Pixereum {\n\n\n    struct Pixel {\n        address owner;\n        string message;\n        uint256 price;\n        bool isSale;\n    }\n\n\n\n    /**************************************************************************\n    * public variables\n    ***************************************************************************/\n    uint24[10000] public colors;\n    bool public isMessageEnabled;\n\n\n\n    /**************************************************************************\n    * private variables\n    ***************************************************************************/\n    mapping (uint16 => Pixel) private pixels;\n\n\n\n    /**************************************************************************\n    * public constants\n    ***************************************************************************/\n    uint16 public constant numberOfPixels = 10000;\n    uint16 public constant width = 100;\n    uint256 public constant feeRate = 100;\n\n\n\n    /**************************************************************************\n    * private constants\n    ***************************************************************************/\n    address private constant owner = 0xF1fA618D4661A8E20f665BE3BD46CAad828B5837;\n    address private constant fundWallet = 0x4F6896AF8C26D1a3C464a4A03705FB78fA2aDB86;\n    uint256 private constant defaultWeiPrice = 10000000000000000;   // 0.01 eth\n\n\n\n    /**************************************************************************\n    * modifiers\n    ***************************************************************************/\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyPixelOwner(uint16 pixelNumber) {\n        require(msg.sender == pixels[pixelNumber].owner);\n        _;\n    }\n\n    modifier messageEnabled {\n        require(isMessageEnabled == true);\n        _;\n    }\n\n\n\n    /**************************************************************************\n    * public methods\n    ***************************************************************************/\n\n    // constructor\n    function Pixereum() public {\n        isMessageEnabled = true;\n    }\n\n\n\n    /**************************************************************************\n    * public methods\n    ***************************************************************************/\n\n    function getPixel(uint16 _pixelNumber)\n        constant\n        public\n        returns(address, string, uint256, bool) \n    {\n        Pixel memory pixel;\n        if (pixels[_pixelNumber].owner == 0) {\n            pixel = Pixel(fundWallet, \"\", defaultWeiPrice, true); \n        } else {\n            pixel = pixels[_pixelNumber];\n        }\n        return (pixel.owner, pixel.message, pixel.price, pixel.isSale);\n    }\n    \n    \n    function getColors() constant public returns(uint24[10000])  {\n        return colors;\n    }\n\n\n    // called when ether is sent to this contract\n    function ()\n        payable\n        public \n    {\n        // check if data format is valid\n        // bytes[0]=x, bytes[1]=y, bytes[2-4]=color\n        require(msg.data.length == 5);\n\n        uint16 pixelNumber = getPixelNumber(msg.data[0], msg.data[1]);\n        uint24 color = getColor(msg.data[2], msg.data[3], msg.data[4]);\n        buyPixel(msg.sender, pixelNumber, color, \"\");\n    }\n\n\n    function buyPixel(address beneficiary, uint16 _pixelNumber, uint24 _color, string _message)\n        payable\n        public \n    {\n        require(_pixelNumber < numberOfPixels);\n        require(beneficiary != address(0));\n        require(msg.value != 0);\n        \n        // get current pixel info\n        address currentOwner;\n        uint256 currentPrice;\n        bool currentSaleState;\n        (currentOwner, , currentPrice, currentSaleState) = getPixel(_pixelNumber);\n        \n        // check if a pixel is for sale\n        require(currentSaleState == true);\n\n        // check if a received Ether is higher than current price\n        require(currentPrice <= msg.value);\n\n        // calculate fee\n        uint fee = msg.value / feeRate;\n\n        // transfer received amount to current owner\n        currentOwner.transfer(msg.value - fee);\n\n        // transfer fee to fundWallet\n        fundWallet.transfer(fee);\n\n        // update pixel\n        pixels[_pixelNumber] = Pixel(beneficiary, _message, currentPrice, false);\n        \n        // update color\n        colors[_pixelNumber] = _color;\n    }\n\n\n    function setOwner(uint16 _pixelNumber, address _owner) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        require(_owner != address(0));\n        pixels[_pixelNumber].owner = _owner;\n    }\n\n\n    function setColor(uint16 _pixelNumber, uint24 _color) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        colors[_pixelNumber] = _color;\n    }\n\n\n    function setMessage(uint16 _pixelNumber, string _message)\n        public\n        messageEnabled\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].message = _message;\n    }\n\n\n    function setPrice(uint16 _pixelNumber, uint256 _weiAmount) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].price = _weiAmount;\n    }\n\n\n    function setSaleState(uint16 _pixelNumber, bool _isSale)\n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].isSale = _isSale;\n    }\n\n\n\n    /**************************************************************************\n    * internal methods\n    ***************************************************************************/\n\n    function getPixelNumber(byte _x, byte _y)\n        internal pure\n        returns(uint16) \n    {\n        return uint16(_x) + uint16(_y) * width;\n    }\n\n\n    function getColor(byte _red, byte _green, byte _blue)\n        internal pure\n        returns(uint24) \n    {\n        return uint24(_red)*65536 + uint24(_green)*256 + uint24(_blue);\n    }\n\n\n\n    /**************************************************************************\n    * methods for contract owner\n    ***************************************************************************/\n\n    // for emergency purpose\n    function deleteMessage(uint16 _pixelNumber)\n        onlyOwner\n        public\n    {\n        pixels[_pixelNumber].message = \"\";\n    }\n\n\n    // for emergency purpose\n    function setMessageStatus(bool _isMesssageEnabled)\n        onlyOwner\n        public\n    {\n        isMessageEnabled = _isMesssageEnabled;\n    }\n\n}", "debug": "callvalue: 0x8000000000000000000000000000000000000000000000000000000000000000\nmem_mem_448 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Pixereum_4 + calldata_Pixereum_32 + 68)) +\n32: 0x8000000000000000000000000000000000000000000000000000000000000000\nretval_2667: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_2576: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_64 +\n288 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Pixereum_4 + calldata_Pixereum_32 + 68)): 0x8000000000000000000000000000000000000000000000000000000000000000\nmem_96 +\n288 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Pixereum_4 + calldata_Pixereum_32 + 68)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 + keccac_65535_&_65535_&_65535_&_calldata_Pixereum_32_+_4: 0x0\ncalldata_Pixereum_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Pixereum_32 + 4: 0x270f\ncalldata_Pixereum_0: 0x5a052dff00000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\n", "description": "A possible integer overflow exists in the function `buyPixel(address,uint16,uint24,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "buyPixel(address,uint16,uint24,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5230, "code": "ntract Pixereum {\n\n\n    struct Pixel {\n        address owner;\n        string message;\n        uint256 price;\n        bool isSale;\n    }\n\n\n\n    /**************************************************************************\n    * public variables\n    ***************************************************************************/\n    uint24[10000] public colors;\n    bool public isMessageEnabled;\n\n\n\n    /**************************************************************************\n    * private variables\n    ***************************************************************************/\n    mapping (uint16 => Pixel) private pixels;\n\n\n\n    /**************************************************************************\n    * public constants\n    ***************************************************************************/\n    uint16 public constant numberOfPixels = 10000;\n    uint16 public constant width = 100;\n    uint256 public constant feeRate = 100;\n\n\n\n    /**************************************************************************\n    * private constants\n    ***************************************************************************/\n    address private constant owner = 0xF1fA618D4661A8E20f665BE3BD46CAad828B5837;\n    address private constant fundWallet = 0x4F6896AF8C26D1a3C464a4A03705FB78fA2aDB86;\n    uint256 private constant defaultWeiPrice = 10000000000000000;   // 0.01 eth\n\n\n\n    /**************************************************************************\n    * modifiers\n    ***************************************************************************/\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyPixelOwner(uint16 pixelNumber) {\n        require(msg.sender == pixels[pixelNumber].owner);\n        _;\n    }\n\n    modifier messageEnabled {\n        require(isMessageEnabled == true);\n        _;\n    }\n\n\n\n    /**************************************************************************\n    * public methods\n    ***************************************************************************/\n\n    // constructor\n    function Pixereum() public {\n        isMessageEnabled = true;\n    }\n\n\n\n    /**************************************************************************\n    * public methods\n    ***************************************************************************/\n\n    function getPixel(uint16 _pixelNumber)\n        constant\n        public\n        returns(address, string, uint256, bool) \n    {\n        Pixel memory pixel;\n        if (pixels[_pixelNumber].owner == 0) {\n            pixel = Pixel(fundWallet, \"\", defaultWeiPrice, true); \n        } else {\n            pixel = pixels[_pixelNumber];\n        }\n        return (pixel.owner, pixel.message, pixel.price, pixel.isSale);\n    }\n    \n    \n    function getColors() constant public returns(uint24[10000])  {\n        return colors;\n    }\n\n\n    // called when ether is sent to this contract\n    function ()\n        payable\n        public \n    {\n        // check if data format is valid\n        // bytes[0]=x, bytes[1]=y, bytes[2-4]=color\n        require(msg.data.length == 5);\n\n        uint16 pixelNumber = getPixelNumber(msg.data[0], msg.data[1]);\n        uint24 color = getColor(msg.data[2], msg.data[3], msg.data[4]);\n        buyPixel(msg.sender, pixelNumber, color, \"\");\n    }\n\n\n    function buyPixel(address beneficiary, uint16 _pixelNumber, uint24 _color, string _message)\n        payable\n        public \n    {\n        require(_pixelNumber < numberOfPixels);\n        require(beneficiary != address(0));\n        require(msg.value != 0);\n        \n        // get current pixel info\n        address currentOwner;\n        uint256 currentPrice;\n        bool currentSaleState;\n        (currentOwner, , currentPrice, currentSaleState) = getPixel(_pixelNumber);\n        \n        // check if a pixel is for sale\n        require(currentSaleState == true);\n\n        // check if a received Ether is higher than current price\n        require(currentPrice <= msg.value);\n\n        // calculate fee\n        uint fee = msg.value / feeRate;\n\n        // transfer received amount to current owner\n        currentOwner.transfer(msg.value - fee);\n\n        // transfer fee to fundWallet\n        fundWallet.transfer(fee);\n\n        // update pixel\n        pixels[_pixelNumber] = Pixel(beneficiary, _message, currentPrice, false);\n        \n        // update color\n        colors[_pixelNumber] = _color;\n    }\n\n\n    function setOwner(uint16 _pixelNumber, address _owner) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        require(_owner != address(0));\n        pixels[_pixelNumber].owner = _owner;\n    }\n\n\n    function setColor(uint16 _pixelNumber, uint24 _color) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        colors[_pixelNumber] = _color;\n    }\n\n\n    function setMessage(uint16 _pixelNumber, string _message)\n        public\n        messageEnabled\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].message = _message;\n    }\n\n\n    function setPrice(uint16 _pixelNumber, uint256 _weiAmount) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].price = _weiAmount;\n    }\n\n\n    function setSaleState(uint16 _pixelNumber, bool _isSale)\n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].isSale = _isSale;\n    }\n\n\n\n    /**************************************************************************\n    * internal methods\n    ***************************************************************************/\n\n    function getPixelNumber(byte _x, byte _y)\n        internal pure\n        returns(uint16) \n    {\n        return uint16(_x) + uint16(_y) * width;\n    }\n\n\n    function getColor(byte _red, byte _green, byte _blue)\n        internal pure\n        returns(uint24) \n    {\n        return uint24(_red)*65536 + uint24(_green)*256 + uint24(_blue);\n    }\n\n\n\n    /**************************************************************************\n    * methods for contract owner\n    ***************************************************************************/\n\n    // for emergency purpose\n    function deleteMessage(uint16 _pixelNumber)\n        onlyOwner\n        public\n    {\n        pixels[_pixelNumber].message = \"\";\n    }\n\n\n    // for emergency purpose\n    function setMessageStatus(bool _isMesssageEnabled)\n        onlyOwner\n        public\n    {\n        isMessageEnabled = _isMesssageEnabled;\n    }\n\n}", "debug": "keccac_1_+_keccac_65535_&_65535_&_65535_&_calldata_Pixereum_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_1 + keccac_65535_&_65535_&_65535_&_calldata_Pixereum_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_0 + keccac_65535_&_65535_&_65535_&_calldata_Pixereum_4: 0x0\ncaller: 0x0\nstorage_1000: 0xff00\ncalldata_Pixereum_0: 0x30fb6bfb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMessage(uint16,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "setMessage(uint16,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5259, "code": "ntract Pixereum {\n\n\n    struct Pixel {\n        address owner;\n        string message;\n        uint256 price;\n        bool isSale;\n    }\n\n\n\n    /**************************************************************************\n    * public variables\n    ***************************************************************************/\n    uint24[10000] public colors;\n    bool public isMessageEnabled;\n\n\n\n    /**************************************************************************\n    * private variables\n    ***************************************************************************/\n    mapping (uint16 => Pixel) private pixels;\n\n\n\n    /**************************************************************************\n    * public constants\n    ***************************************************************************/\n    uint16 public constant numberOfPixels = 10000;\n    uint16 public constant width = 100;\n    uint256 public constant feeRate = 100;\n\n\n\n    /**************************************************************************\n    * private constants\n    ***************************************************************************/\n    address private constant owner = 0xF1fA618D4661A8E20f665BE3BD46CAad828B5837;\n    address private constant fundWallet = 0x4F6896AF8C26D1a3C464a4A03705FB78fA2aDB86;\n    uint256 private constant defaultWeiPrice = 10000000000000000;   // 0.01 eth\n\n\n\n    /**************************************************************************\n    * modifiers\n    ***************************************************************************/\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyPixelOwner(uint16 pixelNumber) {\n        require(msg.sender == pixels[pixelNumber].owner);\n        _;\n    }\n\n    modifier messageEnabled {\n        require(isMessageEnabled == true);\n        _;\n    }\n\n\n\n    /**************************************************************************\n    * public methods\n    ***************************************************************************/\n\n    // constructor\n    function Pixereum() public {\n        isMessageEnabled = true;\n    }\n\n\n\n    /**************************************************************************\n    * public methods\n    ***************************************************************************/\n\n    function getPixel(uint16 _pixelNumber)\n        constant\n        public\n        returns(address, string, uint256, bool) \n    {\n        Pixel memory pixel;\n        if (pixels[_pixelNumber].owner == 0) {\n            pixel = Pixel(fundWallet, \"\", defaultWeiPrice, true); \n        } else {\n            pixel = pixels[_pixelNumber];\n        }\n        return (pixel.owner, pixel.message, pixel.price, pixel.isSale);\n    }\n    \n    \n    function getColors() constant public returns(uint24[10000])  {\n        return colors;\n    }\n\n\n    // called when ether is sent to this contract\n    function ()\n        payable\n        public \n    {\n        // check if data format is valid\n        // bytes[0]=x, bytes[1]=y, bytes[2-4]=color\n        require(msg.data.length == 5);\n\n        uint16 pixelNumber = getPixelNumber(msg.data[0], msg.data[1]);\n        uint24 color = getColor(msg.data[2], msg.data[3], msg.data[4]);\n        buyPixel(msg.sender, pixelNumber, color, \"\");\n    }\n\n\n    function buyPixel(address beneficiary, uint16 _pixelNumber, uint24 _color, string _message)\n        payable\n        public \n    {\n        require(_pixelNumber < numberOfPixels);\n        require(beneficiary != address(0));\n        require(msg.value != 0);\n        \n        // get current pixel info\n        address currentOwner;\n        uint256 currentPrice;\n        bool currentSaleState;\n        (currentOwner, , currentPrice, currentSaleState) = getPixel(_pixelNumber);\n        \n        // check if a pixel is for sale\n        require(currentSaleState == true);\n\n        // check if a received Ether is higher than current price\n        require(currentPrice <= msg.value);\n\n        // calculate fee\n        uint fee = msg.value / feeRate;\n\n        // transfer received amount to current owner\n        currentOwner.transfer(msg.value - fee);\n\n        // transfer fee to fundWallet\n        fundWallet.transfer(fee);\n\n        // update pixel\n        pixels[_pixelNumber] = Pixel(beneficiary, _message, currentPrice, false);\n        \n        // update color\n        colors[_pixelNumber] = _color;\n    }\n\n\n    function setOwner(uint16 _pixelNumber, address _owner) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        require(_owner != address(0));\n        pixels[_pixelNumber].owner = _owner;\n    }\n\n\n    function setColor(uint16 _pixelNumber, uint24 _color) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        colors[_pixelNumber] = _color;\n    }\n\n\n    function setMessage(uint16 _pixelNumber, string _message)\n        public\n        messageEnabled\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].message = _message;\n    }\n\n\n    function setPrice(uint16 _pixelNumber, uint256 _weiAmount) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].price = _weiAmount;\n    }\n\n\n    function setSaleState(uint16 _pixelNumber, bool _isSale)\n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].isSale = _isSale;\n    }\n\n\n\n    /**************************************************************************\n    * internal methods\n    ***************************************************************************/\n\n    function getPixelNumber(byte _x, byte _y)\n        internal pure\n        returns(uint16) \n    {\n        return uint16(_x) + uint16(_y) * width;\n    }\n\n\n    function getColor(byte _red, byte _green, byte _blue)\n        internal pure\n        returns(uint24) \n    {\n        return uint24(_red)*65536 + uint24(_green)*256 + uint24(_blue);\n    }\n\n\n\n    /**************************************************************************\n    * methods for contract owner\n    ***************************************************************************/\n\n    // for emergency purpose\n    function deleteMessage(uint16 _pixelNumber)\n        onlyOwner\n        public\n    {\n        pixels[_pixelNumber].message = \"\";\n    }\n\n\n    // for emergency purpose\n    function setMessageStatus(bool _isMesssageEnabled)\n        onlyOwner\n        public\n    {\n        isMessageEnabled = _isMesssageEnabled;\n    }\n\n}", "debug": "calldata_Pixereum_4 + calldata_Pixereum_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0 + keccac_65535_&_65535_&_65535_&_calldata_Pixereum_4: 0x0\ncaller: 0x0\nstorage_1000: 0xff00\ncalldata_Pixereum_0: 0x30fb6bfb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMessage(uint16,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "setMessage(uint16,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5273, "code": "ntract Pixereum {\n\n\n    struct Pixel {\n        address owner;\n        string message;\n        uint256 price;\n        bool isSale;\n    }\n\n\n\n    /**************************************************************************\n    * public variables\n    ***************************************************************************/\n    uint24[10000] public colors;\n    bool public isMessageEnabled;\n\n\n\n    /**************************************************************************\n    * private variables\n    ***************************************************************************/\n    mapping (uint16 => Pixel) private pixels;\n\n\n\n    /**************************************************************************\n    * public constants\n    ***************************************************************************/\n    uint16 public constant numberOfPixels = 10000;\n    uint16 public constant width = 100;\n    uint256 public constant feeRate = 100;\n\n\n\n    /**************************************************************************\n    * private constants\n    ***************************************************************************/\n    address private constant owner = 0xF1fA618D4661A8E20f665BE3BD46CAad828B5837;\n    address private constant fundWallet = 0x4F6896AF8C26D1a3C464a4A03705FB78fA2aDB86;\n    uint256 private constant defaultWeiPrice = 10000000000000000;   // 0.01 eth\n\n\n\n    /**************************************************************************\n    * modifiers\n    ***************************************************************************/\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyPixelOwner(uint16 pixelNumber) {\n        require(msg.sender == pixels[pixelNumber].owner);\n        _;\n    }\n\n    modifier messageEnabled {\n        require(isMessageEnabled == true);\n        _;\n    }\n\n\n\n    /**************************************************************************\n    * public methods\n    ***************************************************************************/\n\n    // constructor\n    function Pixereum() public {\n        isMessageEnabled = true;\n    }\n\n\n\n    /**************************************************************************\n    * public methods\n    ***************************************************************************/\n\n    function getPixel(uint16 _pixelNumber)\n        constant\n        public\n        returns(address, string, uint256, bool) \n    {\n        Pixel memory pixel;\n        if (pixels[_pixelNumber].owner == 0) {\n            pixel = Pixel(fundWallet, \"\", defaultWeiPrice, true); \n        } else {\n            pixel = pixels[_pixelNumber];\n        }\n        return (pixel.owner, pixel.message, pixel.price, pixel.isSale);\n    }\n    \n    \n    function getColors() constant public returns(uint24[10000])  {\n        return colors;\n    }\n\n\n    // called when ether is sent to this contract\n    function ()\n        payable\n        public \n    {\n        // check if data format is valid\n        // bytes[0]=x, bytes[1]=y, bytes[2-4]=color\n        require(msg.data.length == 5);\n\n        uint16 pixelNumber = getPixelNumber(msg.data[0], msg.data[1]);\n        uint24 color = getColor(msg.data[2], msg.data[3], msg.data[4]);\n        buyPixel(msg.sender, pixelNumber, color, \"\");\n    }\n\n\n    function buyPixel(address beneficiary, uint16 _pixelNumber, uint24 _color, string _message)\n        payable\n        public \n    {\n        require(_pixelNumber < numberOfPixels);\n        require(beneficiary != address(0));\n        require(msg.value != 0);\n        \n        // get current pixel info\n        address currentOwner;\n        uint256 currentPrice;\n        bool currentSaleState;\n        (currentOwner, , currentPrice, currentSaleState) = getPixel(_pixelNumber);\n        \n        // check if a pixel is for sale\n        require(currentSaleState == true);\n\n        // check if a received Ether is higher than current price\n        require(currentPrice <= msg.value);\n\n        // calculate fee\n        uint fee = msg.value / feeRate;\n\n        // transfer received amount to current owner\n        currentOwner.transfer(msg.value - fee);\n\n        // transfer fee to fundWallet\n        fundWallet.transfer(fee);\n\n        // update pixel\n        pixels[_pixelNumber] = Pixel(beneficiary, _message, currentPrice, false);\n        \n        // update color\n        colors[_pixelNumber] = _color;\n    }\n\n\n    function setOwner(uint16 _pixelNumber, address _owner) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        require(_owner != address(0));\n        pixels[_pixelNumber].owner = _owner;\n    }\n\n\n    function setColor(uint16 _pixelNumber, uint24 _color) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        colors[_pixelNumber] = _color;\n    }\n\n\n    function setMessage(uint16 _pixelNumber, string _message)\n        public\n        messageEnabled\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].message = _message;\n    }\n\n\n    function setPrice(uint16 _pixelNumber, uint256 _weiAmount) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].price = _weiAmount;\n    }\n\n\n    function setSaleState(uint16 _pixelNumber, bool _isSale)\n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].isSale = _isSale;\n    }\n\n\n\n    /**************************************************************************\n    * internal methods\n    ***************************************************************************/\n\n    function getPixelNumber(byte _x, byte _y)\n        internal pure\n        returns(uint16) \n    {\n        return uint16(_x) + uint16(_y) * width;\n    }\n\n\n    function getColor(byte _red, byte _green, byte _blue)\n        internal pure\n        returns(uint24) \n    {\n        return uint24(_red)*65536 + uint24(_green)*256 + uint24(_blue);\n    }\n\n\n\n    /**************************************************************************\n    * methods for contract owner\n    ***************************************************************************/\n\n    // for emergency purpose\n    function deleteMessage(uint16 _pixelNumber)\n        onlyOwner\n        public\n    {\n        pixels[_pixelNumber].message = \"\";\n    }\n\n\n    // for emergency purpose\n    function setMessageStatus(bool _isMesssageEnabled)\n        onlyOwner\n        public\n    {\n        isMessageEnabled = _isMesssageEnabled;\n    }\n\n}", "debug": "calldata_Pixereum_4 + calldata_Pixereum_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0 + keccac_65535_&_65535_&_65535_&_calldata_Pixereum_4: 0x0\ncaller: 0x0\nstorage_1000: 0xff00\ncalldata_Pixereum_0: 0x30fb6bfb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMessage(uint16,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "setMessage(uint16,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5295, "code": "ntract Pixereum {\n\n\n    struct Pixel {\n        address owner;\n        string message;\n        uint256 price;\n        bool isSale;\n    }\n\n\n\n    /**************************************************************************\n    * public variables\n    ***************************************************************************/\n    uint24[10000] public colors;\n    bool public isMessageEnabled;\n\n\n\n    /**************************************************************************\n    * private variables\n    ***************************************************************************/\n    mapping (uint16 => Pixel) private pixels;\n\n\n\n    /**************************************************************************\n    * public constants\n    ***************************************************************************/\n    uint16 public constant numberOfPixels = 10000;\n    uint16 public constant width = 100;\n    uint256 public constant feeRate = 100;\n\n\n\n    /**************************************************************************\n    * private constants\n    ***************************************************************************/\n    address private constant owner = 0xF1fA618D4661A8E20f665BE3BD46CAad828B5837;\n    address private constant fundWallet = 0x4F6896AF8C26D1a3C464a4A03705FB78fA2aDB86;\n    uint256 private constant defaultWeiPrice = 10000000000000000;   // 0.01 eth\n\n\n\n    /**************************************************************************\n    * modifiers\n    ***************************************************************************/\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyPixelOwner(uint16 pixelNumber) {\n        require(msg.sender == pixels[pixelNumber].owner);\n        _;\n    }\n\n    modifier messageEnabled {\n        require(isMessageEnabled == true);\n        _;\n    }\n\n\n\n    /**************************************************************************\n    * public methods\n    ***************************************************************************/\n\n    // constructor\n    function Pixereum() public {\n        isMessageEnabled = true;\n    }\n\n\n\n    /**************************************************************************\n    * public methods\n    ***************************************************************************/\n\n    function getPixel(uint16 _pixelNumber)\n        constant\n        public\n        returns(address, string, uint256, bool) \n    {\n        Pixel memory pixel;\n        if (pixels[_pixelNumber].owner == 0) {\n            pixel = Pixel(fundWallet, \"\", defaultWeiPrice, true); \n        } else {\n            pixel = pixels[_pixelNumber];\n        }\n        return (pixel.owner, pixel.message, pixel.price, pixel.isSale);\n    }\n    \n    \n    function getColors() constant public returns(uint24[10000])  {\n        return colors;\n    }\n\n\n    // called when ether is sent to this contract\n    function ()\n        payable\n        public \n    {\n        // check if data format is valid\n        // bytes[0]=x, bytes[1]=y, bytes[2-4]=color\n        require(msg.data.length == 5);\n\n        uint16 pixelNumber = getPixelNumber(msg.data[0], msg.data[1]);\n        uint24 color = getColor(msg.data[2], msg.data[3], msg.data[4]);\n        buyPixel(msg.sender, pixelNumber, color, \"\");\n    }\n\n\n    function buyPixel(address beneficiary, uint16 _pixelNumber, uint24 _color, string _message)\n        payable\n        public \n    {\n        require(_pixelNumber < numberOfPixels);\n        require(beneficiary != address(0));\n        require(msg.value != 0);\n        \n        // get current pixel info\n        address currentOwner;\n        uint256 currentPrice;\n        bool currentSaleState;\n        (currentOwner, , currentPrice, currentSaleState) = getPixel(_pixelNumber);\n        \n        // check if a pixel is for sale\n        require(currentSaleState == true);\n\n        // check if a received Ether is higher than current price\n        require(currentPrice <= msg.value);\n\n        // calculate fee\n        uint fee = msg.value / feeRate;\n\n        // transfer received amount to current owner\n        currentOwner.transfer(msg.value - fee);\n\n        // transfer fee to fundWallet\n        fundWallet.transfer(fee);\n\n        // update pixel\n        pixels[_pixelNumber] = Pixel(beneficiary, _message, currentPrice, false);\n        \n        // update color\n        colors[_pixelNumber] = _color;\n    }\n\n\n    function setOwner(uint16 _pixelNumber, address _owner) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        require(_owner != address(0));\n        pixels[_pixelNumber].owner = _owner;\n    }\n\n\n    function setColor(uint16 _pixelNumber, uint24 _color) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        colors[_pixelNumber] = _color;\n    }\n\n\n    function setMessage(uint16 _pixelNumber, string _message)\n        public\n        messageEnabled\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].message = _message;\n    }\n\n\n    function setPrice(uint16 _pixelNumber, uint256 _weiAmount) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].price = _weiAmount;\n    }\n\n\n    function setSaleState(uint16 _pixelNumber, bool _isSale)\n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].isSale = _isSale;\n    }\n\n\n\n    /**************************************************************************\n    * internal methods\n    ***************************************************************************/\n\n    function getPixelNumber(byte _x, byte _y)\n        internal pure\n        returns(uint16) \n    {\n        return uint16(_x) + uint16(_y) * width;\n    }\n\n\n    function getColor(byte _red, byte _green, byte _blue)\n        internal pure\n        returns(uint24) \n    {\n        return uint24(_red)*65536 + uint24(_green)*256 + uint24(_blue);\n    }\n\n\n\n    /**************************************************************************\n    * methods for contract owner\n    ***************************************************************************/\n\n    // for emergency purpose\n    function deleteMessage(uint16 _pixelNumber)\n        onlyOwner\n        public\n    {\n        pixels[_pixelNumber].message = \"\";\n    }\n\n\n    // for emergency purpose\n    function setMessageStatus(bool _isMesssageEnabled)\n        onlyOwner\n        public\n    {\n        isMessageEnabled = _isMesssageEnabled;\n    }\n\n}", "debug": "calldata_Pixereum_4 + calldata_Pixereum_32 + 4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\nkeccac_1_+_keccac_65535_&_65535_&_65535_&_calldata_Pixereum_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 + keccac_65535_&_65535_&_65535_&_calldata_Pixereum_4: 0x0\ncaller: 0x0\nstorage_1000: 0xff00\ncalldata_Pixereum_0: 0x30fb6bfb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMessage(uint16,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "setMessage(uint16,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5365, "code": "ntract Pixereum {\n\n\n    struct Pixel {\n        address owner;\n        string message;\n        uint256 price;\n        bool isSale;\n    }\n\n\n\n    /**************************************************************************\n    * public variables\n    ***************************************************************************/\n    uint24[10000] public colors;\n    bool public isMessageEnabled;\n\n\n\n    /**************************************************************************\n    * private variables\n    ***************************************************************************/\n    mapping (uint16 => Pixel) private pixels;\n\n\n\n    /**************************************************************************\n    * public constants\n    ***************************************************************************/\n    uint16 public constant numberOfPixels = 10000;\n    uint16 public constant width = 100;\n    uint256 public constant feeRate = 100;\n\n\n\n    /**************************************************************************\n    * private constants\n    ***************************************************************************/\n    address private constant owner = 0xF1fA618D4661A8E20f665BE3BD46CAad828B5837;\n    address private constant fundWallet = 0x4F6896AF8C26D1a3C464a4A03705FB78fA2aDB86;\n    uint256 private constant defaultWeiPrice = 10000000000000000;   // 0.01 eth\n\n\n\n    /**************************************************************************\n    * modifiers\n    ***************************************************************************/\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyPixelOwner(uint16 pixelNumber) {\n        require(msg.sender == pixels[pixelNumber].owner);\n        _;\n    }\n\n    modifier messageEnabled {\n        require(isMessageEnabled == true);\n        _;\n    }\n\n\n\n    /**************************************************************************\n    * public methods\n    ***************************************************************************/\n\n    // constructor\n    function Pixereum() public {\n        isMessageEnabled = true;\n    }\n\n\n\n    /**************************************************************************\n    * public methods\n    ***************************************************************************/\n\n    function getPixel(uint16 _pixelNumber)\n        constant\n        public\n        returns(address, string, uint256, bool) \n    {\n        Pixel memory pixel;\n        if (pixels[_pixelNumber].owner == 0) {\n            pixel = Pixel(fundWallet, \"\", defaultWeiPrice, true); \n        } else {\n            pixel = pixels[_pixelNumber];\n        }\n        return (pixel.owner, pixel.message, pixel.price, pixel.isSale);\n    }\n    \n    \n    function getColors() constant public returns(uint24[10000])  {\n        return colors;\n    }\n\n\n    // called when ether is sent to this contract\n    function ()\n        payable\n        public \n    {\n        // check if data format is valid\n        // bytes[0]=x, bytes[1]=y, bytes[2-4]=color\n        require(msg.data.length == 5);\n\n        uint16 pixelNumber = getPixelNumber(msg.data[0], msg.data[1]);\n        uint24 color = getColor(msg.data[2], msg.data[3], msg.data[4]);\n        buyPixel(msg.sender, pixelNumber, color, \"\");\n    }\n\n\n    function buyPixel(address beneficiary, uint16 _pixelNumber, uint24 _color, string _message)\n        payable\n        public \n    {\n        require(_pixelNumber < numberOfPixels);\n        require(beneficiary != address(0));\n        require(msg.value != 0);\n        \n        // get current pixel info\n        address currentOwner;\n        uint256 currentPrice;\n        bool currentSaleState;\n        (currentOwner, , currentPrice, currentSaleState) = getPixel(_pixelNumber);\n        \n        // check if a pixel is for sale\n        require(currentSaleState == true);\n\n        // check if a received Ether is higher than current price\n        require(currentPrice <= msg.value);\n\n        // calculate fee\n        uint fee = msg.value / feeRate;\n\n        // transfer received amount to current owner\n        currentOwner.transfer(msg.value - fee);\n\n        // transfer fee to fundWallet\n        fundWallet.transfer(fee);\n\n        // update pixel\n        pixels[_pixelNumber] = Pixel(beneficiary, _message, currentPrice, false);\n        \n        // update color\n        colors[_pixelNumber] = _color;\n    }\n\n\n    function setOwner(uint16 _pixelNumber, address _owner) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        require(_owner != address(0));\n        pixels[_pixelNumber].owner = _owner;\n    }\n\n\n    function setColor(uint16 _pixelNumber, uint24 _color) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        colors[_pixelNumber] = _color;\n    }\n\n\n    function setMessage(uint16 _pixelNumber, string _message)\n        public\n        messageEnabled\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].message = _message;\n    }\n\n\n    function setPrice(uint16 _pixelNumber, uint256 _weiAmount) \n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].price = _weiAmount;\n    }\n\n\n    function setSaleState(uint16 _pixelNumber, bool _isSale)\n        public\n        onlyPixelOwner(_pixelNumber)\n    {\n        pixels[_pixelNumber].isSale = _isSale;\n    }\n\n\n\n    /**************************************************************************\n    * internal methods\n    ***************************************************************************/\n\n    function getPixelNumber(byte _x, byte _y)\n        internal pure\n        returns(uint16) \n    {\n        return uint16(_x) + uint16(_y) * width;\n    }\n\n\n    function getColor(byte _red, byte _green, byte _blue)\n        internal pure\n        returns(uint24) \n    {\n        return uint24(_red)*65536 + uint24(_green)*256 + uint24(_blue);\n    }\n\n\n\n    /**************************************************************************\n    * methods for contract owner\n    ***************************************************************************/\n\n    // for emergency purpose\n    function deleteMessage(uint16 _pixelNumber)\n        onlyOwner\n        public\n    {\n        pixels[_pixelNumber].message = \"\";\n    }\n\n\n    // for emergency purpose\n    function setMessageStatus(bool _isMesssageEnabled)\n        onlyOwner\n        public\n    {\n        isMessageEnabled = _isMesssageEnabled;\n    }\n\n}", "debug": "calldata_Pixereum_4 + calldata_Pixereum_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Pixereum_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Pixereum_32 + 4: 0x270f\ncalldata_Pixereum_0: 0x5a052dff00000000000000000000000000000000000000000000000000000000\ncalldatasize_Pixereum: 0x4\n", "description": "A possible integer overflow exists in the function `buyPixel(address,uint16,uint24,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc0d72d45cca854e0f2fe3cd2d4bab91e772fe4c0.sol", "function": "buyPixel(address,uint16,uint24,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}