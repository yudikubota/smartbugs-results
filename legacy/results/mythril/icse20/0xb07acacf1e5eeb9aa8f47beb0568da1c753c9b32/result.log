{"error": null, "issues": [{"address": 252, "code": "ei = amount;\n        u", "debug": "storage_3: 0xe6442abdff6ec7ce7df7482487d9e5ba591fbb5dec5433d1d63aa876b5047fb7\ncallvalue: 0xac944205bb66efc87dc50de36f5d573a45903a590967abd585b8a775b1566035\ncalldata_token_0: 0x1900000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0xb07acacf1e5eeb9aa8f47beb0568da1c753c9b32.sol", "function": "fallback", "lineno": 65, "title": "Integer Overflow ", "type": "Warning"}, {"address": 313, "code": " throw;\n        }\n        tokenReward.transfer(", "debug": "The exception is triggered under the following conditions:\n\ncalldata_token_0: 0x9f926300000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\nstorage_4: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xb07acacf1e5eeb9aa8f47beb0568da1c753c9b32.sol", "function": "fallback", "lineno": 71, "title": "Exception state", "type": "Informational"}, {"address": 554, "code": "     walletOut1.transfer(amountOut1);\n", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xb07acacf1e5eeb9aa8f47beb0568da1c753c9b32.sol", "function": "fallback", "lineno": 75, "title": "Message call to external contract", "type": "Informational"}, {"address": 554, "code": "     walletOut1.transfer(amountOut1);\n", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1065\nCall at address: 960\nCall at address: 821\n", "filename": "/unique_contracts/0xb07acacf1e5eeb9aa8f47beb0568da1c753c9b32.sol", "function": "fallback", "lineno": 75, "title": "Multiple Calls", "type": "Information"}, {"address": 821, "code": "er(msg.sender, amount, true);\n    }\n\n    functi", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xb07acacf1e5eeb9aa8f47beb0568da1c753c9b32.sol", "function": "fallback", "lineno": 78, "title": "Message call to external contract", "type": "Informational"}, {"address": 821, "code": "er(msg.sender, amount, true);\n    }\n\n    functi", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1065\nCall at address: 960\n", "filename": "/unique_contracts/0xb07acacf1e5eeb9aa8f47beb0568da1c753c9b32.sol", "function": "fallback", "lineno": 78, "title": "Multiple Calls", "type": "Information"}, {"address": 960, "code": "ut1(address wallet) onlyowner\n ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1065\n", "filename": "/unique_contracts/0xb07acacf1e5eeb9aa8f47beb0568da1c753c9b32.sol", "function": "fallback", "lineno": 81, "title": "Multiple Calls", "type": "Information"}, {"address": 3377, "code": "dCentCostOfEachToken - \u0446\u0435\u043d\u0430 \u0432 \u0446\u0435\u043d\u0442\u0430\u0445\n    fu", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xb07acacf1e5eeb9aa8f47beb0568da1c753c9b32.sol", "function": "sendAVR(address,uint256)", "lineno": 101, "title": "Message call to external contract", "type": "Informational"}], "success": true}