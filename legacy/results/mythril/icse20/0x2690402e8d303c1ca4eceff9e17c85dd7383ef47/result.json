{
  "contract": "0x2690402e8d303c1ca4eceff9e17c85dd7383ef47",
  "tool": "mythril",
  "start": 1563556259.8401332,
  "end": 1563556278.656551,
  "duration": 18.816417694091797,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1303,
        "code": "23ReceivingContract {\n    function tokenFallback(address",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0x2690402e8d303c1ca4eceff9e17c85dd7383ef47.sol",
        "function": "setUnburnableWallet(address)",
        "lineno": 494,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1303,
        "code": "23ReceivingContract {\n    function tokenFallback(address",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function setUnburnableWallet(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/17/0x2690402e8d303c1ca4eceff9e17c85dd7383ef47.sol",
        "function": "setUnburnableWallet(address)",
        "lineno": 494,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1504,
        "code": " _value, bytes _data) public;\n}\n",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/17/0x2690402e8d303c1ca4eceff9e17c85dd7383ef47.sol",
        "function": "setUnburnableWallet(address)",
        "lineno": 495,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 1932,
        "code": "      unburnableWallet[_wallet] = true;\n    }\n\n    /**\n ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0x2690402e8d303c1ca4eceff9e17c85dd7383ef47.sol",
        "function": "grantToSetUnburnableWallet(address,bool)",
        "lineno": 477,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1932,
        "code": "      unburnableWallet[_wallet] = true;\n    }\n\n    /**\n ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function grantToSetUnburnableWallet(address,bool). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/17/0x2690402e8d303c1ca4eceff9e17c85dd7383ef47.sol",
        "function": "grantToSetUnburnableWallet(address,bool)",
        "lineno": 477,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2132,
        "code": "urns a specific amount of tokens.\n     * @para",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/17/0x2690402e8d303c1ca4eceff9e17c85dd7383ef47.sol",
        "function": "grantToSetUnburnableWallet(address,bool)",
        "lineno": 481,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3759,
        "code": "    return a -",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UnburnableListToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fe\ncalldata_UnburnableListToken_32 + 4: 0x2\nstorage_1: 0x1\nstorage_2: 0x0\ncaller: 0x0\ncalldata_UnburnableListToken_0: 0x9dc29fac00000000000000000000000000000000000000000000000000000000\ncalldatasize_UnburnableListToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x2690402e8d303c1ca4eceff9e17c85dd7383ef47.sol",
        "function": "burn(address,uint256)",
        "lineno": 22,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3777,
        "code": ">= a)",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UnburnableListToken_4: 0x9c9efb7ae5acd378025256a3945f5859076e809243093d9ecae2636c9fd28979\ncalldata_UnburnableListToken_32 + 4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\ncalldata_UnburnableListToken_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_UnburnableListToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_UnburnableListToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x2690402e8d303c1ca4eceff9e17c85dd7383ef47.sol",
        "function": "transfer(address,uint256)",
        "lineno": 26,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3790,
        "code": "eturn c;\n    }",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UnburnableListToken_4: 0xbd5dfeabad0efffffffffeffffffffffd599ffefbfe6f24271e80e64322c0700\ncalldata_UnburnableListToken_32 + 4: 0x6218000d800000000000000000000000039800002005500633e06f771baff7fc\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x6218000d800000000000000000000000039800002005500633e06f771baff7fc\ncalldata_UnburnableListToken_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_UnburnableListToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_UnburnableListToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x2690402e8d303c1ca4eceff9e17c85dd7383ef47.sol",
        "function": "transfer(address,uint256)",
        "lineno": 27,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}