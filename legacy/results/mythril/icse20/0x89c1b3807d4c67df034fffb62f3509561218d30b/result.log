{"error": null, "issues": [{"address": 939, "code": " bytes32[] requestData) public payable returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n\n        if (killswitch) {\n            externalCallFlag = true;\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return newVersion;\n        }\n\n        if (msg.value < MIN_FEE) {\n            externalCallFlag = true;\n            // If the amount of ether sent by the requester is too little or \n            // too much, refund the requester and discard the request.\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return FAIL_FLAG;\n        } else {\n            // Record the request.\n            uint64 requestId = requestCnt;\n            requestCnt++;\n            unrespondedCnt++;\n\n            bytes32 paramsHash = sha3(requestType, requestData);\n            requests[requestId].requester = msg.sender;\n            requests[requestId].fee = msg.value;\n            requests[requestId].callbackAddr = callbackAddr;\n            requests[requestId].callbackFID = callbackFID;\n            requests[requestId].paramsHash = paramsHash;\n\n            // Log the request for the Town Crier server to process.\n            RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\n            return requestId;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respData) public {\n        if (msg.sender != SGX_A", "debug": "calldata_TownCrier_32 + 100: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TownCrier_0: 0x58487bee00000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\n", "description": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "request(uint8,address,bytes4,uint256,bytes32[])", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 951, "code": " bytes32[] requestData) public payable returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n\n        if (killswitch) {\n            externalCallFlag = true;\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return newVersion;\n        }\n\n        if (msg.value < MIN_FEE) {\n            externalCallFlag = true;\n            // If the amount of ether sent by the requester is too little or \n            // too much, refund the requester and discard the request.\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return FAIL_FLAG;\n        } else {\n            // Record the request.\n            uint64 requestId = requestCnt;\n            requestCnt++;\n            unrespondedCnt++;\n\n            bytes32 paramsHash = sha3(requestType, requestData);\n            requests[requestId].requester = msg.sender;\n            requests[requestId].fee = msg.value;\n            requests[requestId].callbackAddr = callbackAddr;\n            requests[requestId].callbackFID = callbackFID;\n            requests[requestId].paramsHash = paramsHash;\n\n            // Log the request for the Town Crier server to process.\n            RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\n            return requestId;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respData) public {\n        if (msg.sender != SGX_A", "debug": "calldata_TownCrier_4 + calldata_TownCrier_32 + 100: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_TownCrier_0: 0x58487bee00000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\n", "description": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "request(uint8,address,bytes4,uint256,bytes32[])", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 954, "code": " bytes32[] requestData) public payable returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n\n        if (killswitch) {\n            externalCallFlag = true;\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return newVersion;\n        }\n\n        if (msg.value < MIN_FEE) {\n            externalCallFlag = true;\n            // If the amount of ether sent by the requester is too little or \n            // too much, refund the requester and discard the request.\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return FAIL_FLAG;\n        } else {\n            // Record the request.\n            uint64 requestId = requestCnt;\n            requestCnt++;\n            unrespondedCnt++;\n\n            bytes32 paramsHash = sha3(requestType, requestData);\n            requests[requestId].requester = msg.sender;\n            requests[requestId].fee = msg.value;\n            requests[requestId].callbackAddr = callbackAddr;\n            requests[requestId].callbackFID = callbackFID;\n            requests[requestId].paramsHash = paramsHash;\n\n            // Log the request for the Town Crier server to process.\n            RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\n            return requestId;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respData) public {\n        if (msg.sender != SGX_A", "debug": "calldata_TownCrier_4 + calldata_TownCrier_32 + 100: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TownCrier_0: 0x58487bee00000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\n", "description": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "request(uint8,address,bytes4,uint256,bytes32[])", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 960, "code": " bytes32[] requestData) public payable returns (int) {\n        if (externalCallFlag) {\n            throw;\n        }\n\n        if (killswitch) {\n            externalCallFlag = true;\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return newVersion;\n        }\n\n        if (msg.value < MIN_FEE) {\n            externalCallFlag = true;\n            // If the amount of ether sent by the requester is too little or \n            // too much, refund the requester and discard the request.\n            if (!msg.sender.call.value(msg.value)()) {\n                throw;\n            }\n            externalCallFlag = false;\n            return FAIL_FLAG;\n        } else {\n            // Record the request.\n            uint64 requestId = requestCnt;\n            requestCnt++;\n            unrespondedCnt++;\n\n            bytes32 paramsHash = sha3(requestType, requestData);\n            requests[requestId].requester = msg.sender;\n            requests[requestId].fee = msg.value;\n            requests[requestId].callbackAddr = callbackAddr;\n            requests[requestId].callbackFID = callbackFID;\n            requests[requestId].paramsHash = paramsHash;\n\n            // Log the request for the Town Crier server to process.\n            RequestInfo(requestId, requestType, msg.sender, msg.value, callbackAddr, paramsHash, timestamp, requestData);\n            return requestId;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 respData) public {\n        if (msg.sender != SGX_A", "debug": "calldata_TownCrier_4 + calldata_TownCrier_32 + 100: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_TownCrier_0: 0x58487bee00000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\n", "description": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "request(uint8,address,bytes4,uint256,bytes32[])", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1982, "code": "Upgrade(newAd", "debug": "calldata_TownCrier_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\nstorage_4: 0x0\ncaller: 0x0\ncalldata_TownCrier_0: 0x900f01000000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `upgrade(address)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "upgrade(address)", "lineno": 61, "title": "Integer Underflow", "type": "Warning"}, {"address": 2621, "code": "}\n        }\n    }\n\n    function request(uint8 re", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "withdraw()", "lineno": 90, "title": "Message call to external contract", "type": "Informational"}, {"address": 3101, "code": "\n        requests[requestId].fee =", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "deliver(uint64,bytes32,uint64,bytes32)", "lineno": 160, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 3186, "code": "           // Ei", "debug": "storage_3: 0x0\nstorage_0 + 4 + 4*Concat(0, Extract(63, 0, calldata_TownCrier_4)): 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_TownCrier_4: 0xffffffffffffffff\ncaller: 0x18513702ccd928f2a3eb63d900adf03c9cc81593\ncalldata_TownCrier_0: 0x487a6e3200000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\nstorage_1 + 4 + 4*Concat(0, Extract(63, 0, calldata_TownCrier_4)): 0x1\ncalldata_TownCrier_32 + 4: 0x0\nstorage_3 + 4 + 4*Concat(0, Extract(63, 0, calldata_TownCrier_4)): 0x0\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `deliver(uint64,bytes32,uint64,bytes32)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "deliver(uint64,bytes32,uint64,bytes32)", "lineno": 165, "title": "Integer Underflow", "type": "Warning"}, {"address": 3309, "code": " account for its", "debug": "storage_1 + 4 + 4*Concat(0, Extract(63, 0, calldata_TownCrier_4)): 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_3: 0x0\nstorage_0 + 4 + 4*Concat(0, Extract(63, 0, calldata_TownCrier_4)): 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_TownCrier_4: 0xffffffffffffffff\ncaller: 0x18513702ccd928f2a3eb63d900adf03c9cc81593\ncalldata_TownCrier_0: 0x487a6e3200000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\ncalldata_TownCrier_32 + 4: 0x0\nstorage_3 + 4 + 4*Concat(0, Extract(63, 0, calldata_TownCrier_4)): 0x0\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `deliver(uint64,bytes32,uint64,bytes32)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "deliver(uint64,bytes32,uint64,bytes32)", "lineno": 166, "title": "Integer Underflow", "type": "Warning"}, {"address": 3435, "code": "].requester.call.gas(", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "deliver(uint64,bytes32,uint64,bytes32)", "lineno": 171, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 3588, "code": "as left for the callback function\n        DeliverInfo(req", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "deliver(uint64,bytes32,uint64,bytes32)", "lineno": 175, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 4599, "code": "equests[requestId].fee, 1);\n            return ", "debug": "", "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "cancel(uint64)", "lineno": 205, "title": "Message call to external contract", "type": "Warning"}, {"address": 4640, "code": "tId, msg.sender, request", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "cancel(uint64)", "lineno": 208, "title": "State change after external call", "type": "Warning"}, {"address": 5418, "code": "lag = false;\n            return ne", "debug": "", "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "request(uint8,address,bytes4,uint256,bytes32[])", "lineno": 104, "title": "Message call to external contract", "type": "Warning"}, {"address": 5459, "code": "            externalCall", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "request(uint8,address,bytes4,uint256,bytes32[])", "lineno": 109, "title": "State change after external call", "type": "Warning"}, {"address": 5555, "code": ";\n            return FAIL_FLAG;\n  ", "debug": "", "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "request(uint8,address,bytes4,uint256,bytes32[])", "lineno": 115, "title": "Message call to external contract", "type": "Warning"}, {"address": 5596, "code": "      uint64 requestId =", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "request(uint8,address,bytes4,uint256,bytes32[])", "lineno": 119, "title": "State change after external call", "type": "Warning"}, {"address": 5867, "code": "e = msg.value;\n            req", "debug": "calldata_TownCrier_4 + calldata_TownCrier_32 + 100: 0x800000000000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\nstorage_1: 0x0\nstorage_3: 0x0\ncalldata_TownCrier_0: 0x58487bee00000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\n", "description": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "request(uint8,address,bytes4,uint256,bytes32[])", "lineno": 125, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6557, "code": "equestId;\n        }\n    }\n\n    function deliver(uint64 requestId, bytes32 paramsHash, uint64 error, bytes32 ", "debug": "calldata_TownCrier_4 + calldata_TownCrier_32 + 100: 0x4000000000000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\nstorage_1: 0x0\nstorage_3: 0x0\ncalldata_TownCrier_0: 0x58487bee00000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\n", "description": "A possible integer overflow exists in the function `request(uint8,address,bytes4,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "request(uint8,address,bytes4,uint256,bytes32[])", "lineno": 132, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6737, "code": "   int public newVersion = 0;\n", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TownCrier_4: 0x10000000000000000\ncalldata_TownCrier_0: 0x81d12c5800000000000000000000000000000000000000000000000000000000\ncalldatasize_TownCrier: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/10/0x89c1b3807d4c67df034fffb62f3509561218d30b.sol", "function": "_function_0x81d12c58", "lineno": 37, "title": "Exception state", "type": "Informational"}], "success": true}