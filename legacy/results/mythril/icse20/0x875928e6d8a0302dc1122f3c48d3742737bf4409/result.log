{"error": null, "issues": [{"address": 1630, "code": " true;\n        }\n    }\n\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n        return allowance[_owner][_spender];\n    }\n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\n        \n      ", "debug": "calldata_tokenRecipient_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/30/0x875928e6d8a0302dc1122f3c48d3742737bf4409.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 303, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7226, "code": "nt256 b) inter", "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x7fffffffffffffffffffffffffffffffffffffffefffffffffffffffffffffff\ncalldata_tokenRecipient_4: 0xfffffffffffffffffffffffffffffffffffffffff00000000000000000000001\nstorage_5: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffffffffffffffffffffffffff00000000000000000000001\ncalldata_tokenRecipient_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/30/0x875928e6d8a0302dc1122f3c48d3742737bf4409.sol", "function": "burn(uint256)", "lineno": 80, "title": "Exception state", "type": "Informational"}, {"address": 7257, "code": "pply() constan", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0xbd5dfeabad0efffffffffeffffffffffd599ffefbfe6f24271e80e64322c0700\ncalldata_tokenRecipient_32 + 4: 0x6218000d800000000000000000000000039800002005500633e06f771baff7fc\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x6218000d800000000000000000000000039800002005500633e06f771baff7fc\ncalldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/30/0x875928e6d8a0302dc1122f3c48d3742737bf4409.sol", "function": "transfer(address,uint256)", "lineno": 90, "title": "Exception state", "type": "Informational"}], "success": true}