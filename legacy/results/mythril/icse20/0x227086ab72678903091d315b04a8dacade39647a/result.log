{"error": null, "issues": [{"address": 169, "code": "dress tokenAddress,\n        address[] recipients,\n        uint256[] amounts) public {\n        require(msg.sender == owner);\n        require(tokenAddress != 0x0);\n        require(amounts.length == recipients.length);\n\n        ERC20 token = ERC20(tokenAddress);\n\n        uint balance = token.balanceOf(msg.sender);\n        uint allowance = token.allowance(msg.sender, address(this));\n        uint available = balance > allowance ? allowance : balance;\n\n        for (uint i = 0; i < recipients.length; i++) {\n            require(available >= amounts[i]);\n            if (isQualitifiedAddress(\n                recipients[i]\n            )) {\n                available -= amounts[i];\n                require(token.transferFrom(msg.sender, recipients[i], amounts[i]));\n\n                AirDropped(recipients[i], amounts[i]);\n            }\n        }\n    }\n\n    function isQualitifiedAddress(address addr)\n", "debug": "calldata_ERC20_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20_0: 0x7da5efc800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `drop(address,address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x227086ab72678903091d315b04a8dacade39647a.sol", "function": "drop(address,address[],uint256[])", "lineno": 27, "title": "Integer Overflow ", "type": "Warning"}, {"address": 897, "code": "  uint allowance = token.al", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x227086ab72678903091d315b04a8dacade39647a.sol", "function": "drop(address,address[],uint256[])", "lineno": 37, "title": "Message call to external contract", "type": "Warning"}, {"address": 897, "code": "  uint allowance = token.al", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1165\n", "filename": "/unique_contracts/0x227086ab72678903091d315b04a8dacade39647a.sol", "function": "drop(address,address[],uint256[])", "lineno": 37, "title": "Multiple Calls", "type": "Information"}, {"address": 1165, "code": "this));\n        uint available = balance >", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x227086ab72678903091d315b04a8dacade39647a.sol", "function": "drop(address,address[],uint256[])", "lineno": 37, "title": "Message call to external contract", "type": "Warning"}, {"address": 2212, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x227086ab72678903091d315b04a8dacade39647a.sol", "function": "transferAnyERC20Token(address,uint256)", "lineno": 75, "title": "Message call to external contract", "type": "Warning"}], "success": true}