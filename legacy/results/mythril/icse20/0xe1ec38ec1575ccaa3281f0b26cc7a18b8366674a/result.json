{
  "contract": "0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a",
  "tool": "mythril",
  "start": 1563500159.9909933,
  "end": 1563500254.74902,
  "duration": 94.75802683830261,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 403,
        "code": " uint8 _v, \n                            bytes32 _r, \n                            bytes32 _s) {\n\n    // reject if the new nonce is lower or equal to the current one\n    require(_nonce > nonces[msg.sender],\n            \"wrong nonce\");\n    nonces[msg.sender] = _nonce;\n\n    // verify signature\n    address signer = ecrecover(keccak256(msg.sender, \n                                         _nonce,\n                                         _amounts), _v, _r, _s);\n    require(signer == neverdieSigner,\n            \"signature verification failed\");\n\n    // transer tokens\n    \n    for (uint256 i = 0; i < _amounts.length; i++) {\n      if (_amounts[i] > 0) {\n        assert(ERC20(tokens[i]).transfer(msg.sender, _amounts[i]));\n      }\n    }\n    \n\n    // emit event\n    ReceiveLoot(msg.sender, _nonce, tokens, _amounts);\n  }\n\n  /// @dev fallback function to reject any ether coming directly to the contract\n  function () payable public { \n      revert(); \n  }\n\n  /// @dev ",
        "debug": "calldata_TokenLoot_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenLoot_0: 0x4dcf743000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLoot: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)",
        "lineno": 122,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 415,
        "code": " uint8 _v, \n                            bytes32 _r, \n                            bytes32 _s) {\n\n    // reject if the new nonce is lower or equal to the current one\n    require(_nonce > nonces[msg.sender],\n            \"wrong nonce\");\n    nonces[msg.sender] = _nonce;\n\n    // verify signature\n    address signer = ecrecover(keccak256(msg.sender, \n                                         _nonce,\n                                         _amounts), _v, _r, _s);\n    require(signer == neverdieSigner,\n            \"signature verification failed\");\n\n    // transer tokens\n    \n    for (uint256 i = 0; i < _amounts.length; i++) {\n      if (_amounts[i] > 0) {\n        assert(ERC20(tokens[i]).transfer(msg.sender, _amounts[i]));\n      }\n    }\n    \n\n    // emit event\n    ReceiveLoot(msg.sender, _nonce, tokens, _amounts);\n  }\n\n  /// @dev fallback function to reject any ether coming directly to the contract\n  function () payable public { \n      revert(); \n  }\n\n  /// @dev ",
        "debug": "calldata_TokenLoot_4 + calldata_TokenLoot_4: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_TokenLoot_0: 0x4dcf743000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLoot: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)",
        "lineno": 122,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 418,
        "code": " uint8 _v, \n                            bytes32 _r, \n                            bytes32 _s) {\n\n    // reject if the new nonce is lower or equal to the current one\n    require(_nonce > nonces[msg.sender],\n            \"wrong nonce\");\n    nonces[msg.sender] = _nonce;\n\n    // verify signature\n    address signer = ecrecover(keccak256(msg.sender, \n                                         _nonce,\n                                         _amounts), _v, _r, _s);\n    require(signer == neverdieSigner,\n            \"signature verification failed\");\n\n    // transer tokens\n    \n    for (uint256 i = 0; i < _amounts.length; i++) {\n      if (_amounts[i] > 0) {\n        assert(ERC20(tokens[i]).transfer(msg.sender, _amounts[i]));\n      }\n    }\n    \n\n    // emit event\n    ReceiveLoot(msg.sender, _nonce, tokens, _amounts);\n  }\n\n  /// @dev fallback function to reject any ether coming directly to the contract\n  function () payable public { \n      revert(); \n  }\n\n  /// @dev ",
        "debug": "calldata_TokenLoot_4 + calldata_TokenLoot_4: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenLoot_0: 0x4dcf743000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLoot: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)",
        "lineno": 122,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 424,
        "code": " uint8 _v, \n                            bytes32 _r, \n                            bytes32 _s) {\n\n    // reject if the new nonce is lower or equal to the current one\n    require(_nonce > nonces[msg.sender],\n            \"wrong nonce\");\n    nonces[msg.sender] = _nonce;\n\n    // verify signature\n    address signer = ecrecover(keccak256(msg.sender, \n                                         _nonce,\n                                         _amounts), _v, _r, _s);\n    require(signer == neverdieSigner,\n            \"signature verification failed\");\n\n    // transer tokens\n    \n    for (uint256 i = 0; i < _amounts.length; i++) {\n      if (_amounts[i] > 0) {\n        assert(ERC20(tokens[i]).transfer(msg.sender, _amounts[i]));\n      }\n    }\n    \n\n    // emit event\n    ReceiveLoot(msg.sender, _nonce, tokens, _amounts);\n  }\n\n  /// @dev fallback function to reject any ether coming directly to the contract\n  function () payable public { \n      revert(); \n  }\n\n  /// @dev ",
        "debug": "calldata_TokenLoot_4 + calldata_TokenLoot_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_TokenLoot_0: 0x4dcf743000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLoot: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)",
        "lineno": 122,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 665,
        "code": "++) {\n      tokens[i] = _tokens[i];\n    }\n    for (uint256 j = _tokens.length; j < _tokens.length; j++) {\n      tokens.push(_tokens[j]);\n    }\n  }\n\n  /// @param _tokens tokens addresses\n  /// @param _signer signer address, verified further in swap functi",
        "debug": "calldata_TokenLoot_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenLoot_0: 0x625adaf200000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLoot: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTokens(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "setTokens(address[])",
        "lineno": 103,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1498,
        "code": "r all SKL and XP tokens \n  funct",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "kill()",
        "lineno": 164,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1498,
        "code": "r all SKL and XP tokens \n  funct",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1498\nCall at address: 1788\n",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "kill()",
        "lineno": 164,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1498,
        "code": "r all SKL and XP tokens \n  funct",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function kill(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "kill()",
        "lineno": 164,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1788,
        "code": "ic {\n    withdraw();\n    selfdestruct(owner);",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "kill()",
        "lineno": 165,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1788,
        "code": "ic {\n    withdraw();\n    selfdestruct(owner);",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1498\n",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "withdraw()",
        "lineno": 165,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1788,
        "code": "ic {\n    withdraw();\n    selfdestruct(owner);",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function kill(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "kill()",
        "lineno": 165,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2364,
        "code": " _s);\n    require(signer == neverdieSigner,\n            \"signature verification failed\");\n\n    // transer tokens\n    \n    fo",
        "debug": "calldata_TokenLoot_4 + calldata_TokenLoot_4: 0x800000000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_TokenLoot_32 + 4: 0x1\ncalldata_TokenLoot_0: 0x4dcf743000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLoot: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)",
        "lineno": 134,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2802,
        "code": " }\n\n  ///",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenLoot_4 + calldata_TokenLoot_4: 0x3\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_TokenLoot_cpy: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\nmem_192 + 32*calldata_TokenLoot_4 + calldata_TokenLoot_4 - 32: 0x0\nretval_2516: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenLoot_32 + 4: 0x1\ncalldata_TokenLoot_0: 0x4dcf743000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLoot: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)",
        "lineno": 149,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3034,
        "code": "ts);\n  }\n\n  /// @dev fallback function to reject a",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)",
        "lineno": 148,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3034,
        "code": "ts);\n  }\n\n  /// @dev fallback function to reject a",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)",
        "lineno": 148,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3097,
        "code": " _amounts);\n  }\n\n  /// @dev fallback function to reject an",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenLoot_4 + calldata_TokenLoot_4: 0x4000000000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nreturndatasize: 0x20\nretval_3034: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenLoot_cpy: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\nmem_192 + 32*calldata_TokenLoot_4 + calldata_TokenLoot_4 - 32: 0x0\nretval_2516: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenLoot_32 + 4: 0x1\ncalldata_TokenLoot_0: 0x4dcf743000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLoot: 0x4\nmem_32 + 160 + 32*calldata_TokenLoot_4 + calldata_TokenLoot_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)",
        "lineno": 148,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3217,
        "code": " () payable public { \n      revert(); \n  }\n\n  ///",
        "debug": "storage_3: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_TokenLoot_4 + calldata_TokenLoot_4: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_1: 0x0\nmem_192 + 32*calldata_TokenLoot_4 + calldata_TokenLoot_4 - 32: 0x0\nretval_2516: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenLoot_32 + 4: 0x1\ncalldata_TokenLoot_0: 0x4dcf743000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLoot: 0x4\ncalldata_TokenLoot_cpy: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)",
        "lineno": 152,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3219,
        "code": " () payable public { \n      revert(); \n  }\n\n  ///",
        "debug": "storage_3: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenLoot_4 + calldata_TokenLoot_4: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_1: 0x0\nmem_192 + 32*calldata_TokenLoot_4 + calldata_TokenLoot_4 - 32: 0x0\nretval_2516: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenLoot_32 + 4: 0x1\ncalldata_TokenLoot_0: 0x4dcf743000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLoot: 0x4\ncalldata_TokenLoot_cpy: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "receiveTokenLoot(uint256[],uint256,uint8,bytes32,bytes32)",
        "lineno": 152,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3411,
        "code": "               uint256 ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenLoot_4: 0x0\nstorage_3: 0x0\ncalldata_TokenLoot_0: 0x4f64b2be00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLoot: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "_function_0x4f64b2be",
        "lineno": 92,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3584,
        "code": "kens[j]);\n",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenLoot_0: 0x625adaf200000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLoot: 0x4\ncalldata_TokenLoot_4 + calldata_TokenLoot_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/8/0xe1ec38ec1575ccaa3281f0b26cc7a18b8366674a.sol",
        "function": "setTokens(address[])",
        "lineno": 107,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}