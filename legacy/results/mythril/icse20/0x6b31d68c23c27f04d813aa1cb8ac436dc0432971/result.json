{
  "contract": "0x6b31d68c23c27f04d813aa1cb8ac436dc0432971",
  "tool": "mythril",
  "start": 1563674457.3895261,
  "end": 1563674741.5195508,
  "duration": 284.13002467155457,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 667,
        "code": " _symbol, uint _totalSupply, uint _decimals) public {\n        require(msg.sender == owner);\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _totalSupply * 10 ** _decimals;\n        balances[msg.sender] = totalSupply;\n        Transfer(address(this), msg.sender, totalSupply);\n    }\n\n    function transfer(address _to, uint _",
        "debug": "calldata_ERC20_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20_0: 0x3764e2be00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setup(string,string,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x6b31d68c23c27f04d813aa1cb8ac436dc0432971.sol",
        "function": "setup(string,string,uint256,uint256)",
        "lineno": 36,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 679,
        "code": " _symbol, uint _totalSupply, uint _decimals) public {\n        require(msg.sender == owner);\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _totalSupply * 10 ** _decimals;\n        balances[msg.sender] = totalSupply;\n        Transfer(address(this), msg.sender, totalSupply);\n    }\n\n    function transfer(address _to, uint _",
        "debug": "calldata_ERC20_4 + calldata_ERC20_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_ERC20_0: 0x3764e2be00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setup(string,string,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x6b31d68c23c27f04d813aa1cb8ac436dc0432971.sol",
        "function": "setup(string,string,uint256,uint256)",
        "lineno": 36,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 688,
        "code": " _symbol, uint _totalSupply, uint _decimals) public {\n        require(msg.sender == owner);\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _totalSupply * 10 ** _decimals;\n        balances[msg.sender] = totalSupply;\n        Transfer(address(this), msg.sender, totalSupply);\n    }\n\n    function transfer(address _to, uint _",
        "debug": "calldata_ERC20_4 + calldata_ERC20_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_ERC20_0: 0x3764e2be00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setup(string,string,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x6b31d68c23c27f04d813aa1cb8ac436dc0432971.sol",
        "function": "setup(string,string,uint256,uint256)",
        "lineno": 36,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 694,
        "code": " _symbol, uint _totalSupply, uint _decimals) public {\n        require(msg.sender == owner);\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _totalSupply * 10 ** _decimals;\n        balances[msg.sender] = totalSupply;\n        Transfer(address(this), msg.sender, totalSupply);\n    }\n\n    function transfer(address _to, uint _",
        "debug": "calldata_ERC20_4 + calldata_ERC20_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_ERC20_0: 0x3764e2be00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setup(string,string,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x6b31d68c23c27f04d813aa1cb8ac436dc0432971.sol",
        "function": "setup(string,string,uint256,uint256)",
        "lineno": 36,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3727,
        "code": "tract ERC20 {\n\n    address owner;\n\n    string public name;\n\n    string public symbol;\n\n    uint public decimals;\n\n    uint public totalSupply;\n\n    mapping(address => uint) balances;\n\n    mapping(address => mapping(address => uint)) allowed;\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n    function ERC20() public {\n        owner = msg.sender;\n    }\n\n    function balanceOf(address _owner) public constant returns (uint balance)  {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function setup(string _name, string _symbol, uint _totalSupply, uint _decimals) public {\n        require(msg.sender == owner);\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _totalSupply * 10 ** _decimals;\n        balances[msg.sender] = totalSupply;\n        Transfer(address(this), msg.sender, totalSupply);\n    }\n\n    function transfer(address _to, uint _amount) public returns (bool success)  {\n        require(balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]);\n        balances[msg.sender] -= _amount;\n        balances[_to] += _amount;\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\n        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]);\n        balances[_to] += _amount;\n        balances[_from] -= _amount;\n        allowed[_from][msg.sender] -= _amount;\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    function approve(address _spender, uint _amount) public returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n}",
        "debug": "mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_ERC20_4 + calldata_ERC20_4)): 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_1: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff40\ncalldata_ERC20_4 + calldata_ERC20_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ERC20_0: 0x3764e2be00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setup(string,string,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x6b31d68c23c27f04d813aa1cb8ac436dc0432971.sol",
        "function": "setup(string,string,uint256,uint256)",
        "lineno": 4,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3741,
        "code": "tract ERC20 {\n\n    address owner;\n\n    string public name;\n\n    string public symbol;\n\n    uint public decimals;\n\n    uint public totalSupply;\n\n    mapping(address => uint) balances;\n\n    mapping(address => mapping(address => uint)) allowed;\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n    function ERC20() public {\n        owner = msg.sender;\n    }\n\n    function balanceOf(address _owner) public constant returns (uint balance)  {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function setup(string _name, string _symbol, uint _totalSupply, uint _decimals) public {\n        require(msg.sender == owner);\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _totalSupply * 10 ** _decimals;\n        balances[msg.sender] = totalSupply;\n        Transfer(address(this), msg.sender, totalSupply);\n    }\n\n    function transfer(address _to, uint _amount) public returns (bool success)  {\n        require(balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]);\n        balances[msg.sender] -= _amount;\n        balances[_to] += _amount;\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\n        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]);\n        balances[_to] += _amount;\n        balances[_from] -= _amount;\n        allowed[_from][msg.sender] -= _amount;\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    function approve(address _spender, uint _amount) public returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n}",
        "debug": "mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_ERC20_4 + calldata_ERC20_4)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_1: 0xa0222022202220222022200200003e0000000000ff7f7eefeeefff77f00\ncalldata_ERC20_4 + calldata_ERC20_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ERC20_0: 0x3764e2be00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setup(string,string,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x6b31d68c23c27f04d813aa1cb8ac436dc0432971.sol",
        "function": "setup(string,string,uint256,uint256)",
        "lineno": 4,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}