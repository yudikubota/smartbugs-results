{
  "contract": "0x7522d0543b0c5a3e86dda570cecd5f005d565ff7",
  "tool": "mythril",
  "start": 1563560416.5903122,
  "end": 1563560830.942305,
  "duration": 414.3519928455353,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 4683,
        "code": "al pure returns (uint256) {\n\t\t",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0x7522d0543b0c5a3e86dda570cecd5f005d565ff7.sol",
        "function": "Holdplatform_Withdraw(uint256)",
        "lineno": 557,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4683,
        "code": "al pure returns (uint256) {\n\t\t",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4918\n",
        "filename": "/unique_chucks/17/0x7522d0543b0c5a3e86dda570cecd5f005d565ff7.sol",
        "function": "Holdplatform_Withdraw(uint256)",
        "lineno": 557,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4918,
        "code": "t256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\t",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0x7522d0543b0c5a3e86dda570cecd5f005d565ff7.sol",
        "function": "Holdplatform_Withdraw(uint256)",
        "lineno": 559,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6235,
        "code": "  \t\n\n//-------o 01 Add Contrac",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/17/0x7522d0543b0c5a3e86dda570cecd5f005d565ff7.sol",
        "function": "WithdrawAffiliate(address,address)",
        "lineno": 476,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 7548,
        "code": "D\t\t\t\n\tmapping(address => address[]) \t\tpublic aff",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ldoh_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_ldoh_4: 0x0\ncalldata_ldoh_0: 0x4b698aff00000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x7522d0543b0c5a3e86dda570cecd5f005d565ff7.sol",
        "function": "_function_0x4b698aff",
        "lineno": 85,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10041,
        "code": "\t\t\t\t\n\tmapping(address => string) \t\t\tpublic Con",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ldoh_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_ldoh_4: 0x0\ncalldata_ldoh_0: 0x7028b6a300000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x7522d0543b0c5a3e86dda570cecd5f005d565ff7.sol",
        "function": "_function_0x7028b6a3",
        "lineno": 86,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 13296,
        "code": " func",
        "debug": "storage_6 +\nkeccac_storage_66448226337682112469901396875338497574368918010328814248214166510316316219958: 0xe2bb8124024cf91268e4035fd2655165bbefff7add5affa7656847001cfc3741\nstorage_5 +\nkeccac_storage_66448226337682112469901396875338497574368918010328814248214166510316316219958: 0x0\nstorage_7 +\nkeccac_storage_66448226337682112469901396875338497574368918010328814248214166510316316219958: 0x232300b48a12d7ec4808184e0229707003000064115ab848524acdbc10e16775\nstorage_2 +\nkeccac_storage_66448226337682112469901396875338497574368918010328814248214166510316316219958: 0x0\nstorage_1: 0x1\nstorage_0 +\nkeccac_storage_66448226337682112469901396875338497574368918010328814248214166510316316219958: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4 +\nkeccac_storage_66448226337682112469901396875338497574368918010328814248214166510316316219958: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_3 +\nkeccac_storage_66448226337682112469901396875338497574368918010328814248214166510316316219958: 0x0\nstorage_66448226337682112469901396875338497574368918010328814248214166510316316219958: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_66448226337682112469901396875338497574368918010328814248214166510316316219962: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\nstorage_66448226337682112469901396875338497574368918010328814248214166510316316219961: 0x0\nstorage_3: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldatasize_ldoh: 0x3\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x7522d0543b0c5a3e86dda570cecd5f005d565ff7.sol",
        "function": "fallback",
        "lineno": 591,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}