{"error": null, "issues": [{"address": 1045, "code": "            l.message=mssg;\n            Change(id,'message');\n        }else{\n\t\t\tthrow;\n\t\t}\n    }\n\n    function setSaleImg(uint id, bool setSale, address to, uint p) isValidLocId(id) {\n        Location l=locations[id];\n\t\tif(l.owner==msg.sender){\n       ", "debug": "calldata_PixelSelling_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_PixelSelling_0: 0x648345c800000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelSelling: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMessage(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x709c7134053510fce03b464982eab6e3d89728a5.sol", "function": "setMessage(uint256,string)", "lineno": 152, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1840, "code": "g.sender){\n            ba", "debug": "The exception is triggered under the following conditions:\n\nstorage_1 + keccac_calldata_PixelSelling_4: 0x0\nstorage_10: 0x0\nstorage_0 + keccac_calldata_PixelSelling_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_PixelSelling_4: 0x270f\ncalldata_PixelSelling_0: 0x1984d41900000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelSelling: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x709c7134053510fce03b464982eab6e3d89728a5.sol", "function": "getProvisionBalance(uint256)", "lineno": 199, "title": "Exception state", "type": "Informational"}, {"address": 1871, "code": "        if(s.owner==m", "debug": "The exception is triggered under the following conditions:\n\nstorage_10: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\nstorage_1 + keccac_calldata_PixelSelling_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_0 + keccac_calldata_PixelSelling_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_PixelSelling_4: 0x270f\ncalldata_PixelSelling_0: 0x1984d41900000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelSelling: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x709c7134053510fce03b464982eab6e3d89728a5.sol", "function": "getProvisionBalance(uint256)", "lineno": 199, "title": "Exception state", "type": "Informational"}, {"address": 3061, "code": "t amtToWithdraw=balances[", "debug": "The exception is triggered under the following conditions:\n\nstorage_1 + keccac_calldata_PixelSelling_4: 0x0\nstorage_10: 0x0\ncaller: 0x0\nstorage_0 + keccac_calldata_PixelSelling_4: 0x0\ncalldata_PixelSelling_4: 0x270f\ncalldata_PixelSelling_0: 0x2edf804200000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelSelling: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x709c7134053510fce03b464982eab6e3d89728a5.sol", "function": "collectProvisions(uint256)", "lineno": 209, "title": "Exception state", "type": "Informational"}, {"address": 3092, "code": "r]>0){\n            ui", "debug": "The exception is triggered under the following conditions:\n\nstorage_10: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\nstorage_1 + keccac_calldata_PixelSelling_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncaller: 0x0\nstorage_0 + keccac_calldata_PixelSelling_4: 0x0\ncalldata_PixelSelling_4: 0x270f\ncalldata_PixelSelling_0: 0x2edf804200000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelSelling: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x709c7134053510fce03b464982eab6e3d89728a5.sol", "function": "collectProvisions(uint256)", "lineno": 208, "title": "Exception state", "type": "Informational"}, {"address": 3105, "code": "r]>0){\n            uint amtToWithdraw=balances[", "debug": "storage_10: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_89717814153306320011181716697424560163256864414616650038987186496166826726056 +\n115792089237316195423570985008687907853269984665640564039457584007913129639935 +\nstorage_2: 0x0\nstorage_89717814153306320011181716697424560163256864414616650038987186496166826726056 +\nstorage_1 + keccac_calldata_PixelSelling_4: 0x1\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1 + keccac_calldata_PixelSelling_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncaller: 0x0\nstorage_0 + keccac_calldata_PixelSelling_4: 0x0\ncalldata_PixelSelling_4: 0x270f\ncalldata_PixelSelling_0: 0x2edf804200000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelSelling: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `collectProvisions(uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_contracts/0x709c7134053510fce03b464982eab6e3d89728a5.sol", "function": "collectProvisions(uint256)", "lineno": 208, "title": "Integer Underflow", "type": "Warning"}, {"address": 3210, "code": "(balances[msg.sender]>0){\n            uint amtToWithdraw=balances[", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_0_+_keccac_calldata_PixelSelling_4,_256): 0xfffffffffffffffffbfffffffffffffffffffffffffffffffffffffffdfffffe\nstorage_89717814153306320011181716697424560163256864414616650038987186496166826726056 +\n115792089237316195423570985008687907853269984665640564039457584007913129639935 +\nstorage_2: 0x1000000003ffffffffffffffffffffffffffffffffffffffffffffff\nstorage_89717814153306320011181716697424560163256864414616650038987186496166826726056 +\nstorage_1 + keccac_calldata_PixelSelling_4: 0xfffffffffffffffffc0000000000000000000000000000000000000000000001\nstorage_10: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1 + keccac_calldata_PixelSelling_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncaller: 0x0\nstorage_0 + keccac_calldata_PixelSelling_4: 0x0\ncalldata_PixelSelling_4: 0x270f\ncalldata_PixelSelling_0: 0x2edf804200000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelSelling: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `collectProvisions(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x709c7134053510fce03b464982eab6e3d89728a5.sol", "function": "collectProvisions(uint256)", "lineno": 208, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3801, "code": "n);\n\n            Cha", "debug": "storage_5: 0x70\nstorage_2 + keccac_calldata_PixelSelling_4: 0xff00\ncaller: 0xff\nstorage_0 + keccac_calldata_PixelSelling_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_PixelSelling_4: 0x270f\ncalldata_PixelSelling_0: 0x4567c5f700000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelSelling: 0x4\nstorage_3 + keccac_calldata_PixelSelling_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `buySharePriv(uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_contracts/0x709c7134053510fce03b464982eab6e3d89728a5.sol", "function": "buySharePriv(uint256)", "lineno": 131, "title": "Integer Underflow", "type": "Warning"}, {"address": 7628, "code": "\n        if(s.owner!=0x0){\n     ", "debug": "The exception is triggered under the following conditions:\n\nstorage_2 + keccac_calldata_PixelSelling_4: 0xff00\ncaller: 0xff\nstorage_0 + keccac_calldata_PixelSelling_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_PixelSelling_4: 0x270f\ncalldata_PixelSelling_0: 0x4567c5f700000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelSelling: 0x4\nstorage_1: 0x0\nstorage_3 + keccac_calldata_PixelSelling_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x709c7134053510fce03b464982eab6e3d89728a5.sol", "function": "buySharePriv(uint256)", "lineno": 189, "title": "Exception state", "type": "Informational"}, {"address": 7649, "code": "    Share s=shares[id", "debug": "The exception is triggered under the following conditions:\n\nstorage_2 + keccac_calldata_PixelSelling_4: 0xff00\nstorage_10: 0x0\nstorage_2: 0x1\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0xff\nstorage_0 + keccac_calldata_PixelSelling_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_PixelSelling_4: 0x270f\ncalldata_PixelSelling_0: 0x4567c5f700000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelSelling: 0x4\nstorage_3 + keccac_calldata_PixelSelling_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x709c7134053510fce03b464982eab6e3d89728a5.sol", "function": "buySharePriv(uint256)", "lineno": 189, "title": "Exception state", "type": "Informational"}, {"address": 7669, "code": "\n\ncontract PixelSe", "debug": "storage_10: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2 + keccac_calldata_PixelSelling_4: 0xff00\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0xff\nstorage_0 + keccac_calldata_PixelSelling_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_PixelSelling_4: 0x270f\ncalldata_PixelSelling_0: 0x4567c5f700000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelSelling: 0x4\nstorage_3 + keccac_calldata_PixelSelling_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `buySharePriv(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x709c7134053510fce03b464982eab6e3d89728a5.sol", "function": "buySharePriv(uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7713, "code": " provision", "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2 + keccac_calldata_PixelSelling_4: 0xff00\nstorage_10: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0xff\nstorage_0 + keccac_calldata_PixelSelling_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_PixelSelling_4: 0x270f\ncalldata_PixelSelling_0: 0x4567c5f700000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelSelling: 0x4\nstorage_3 + keccac_calldata_PixelSelling_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `buySharePriv(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x709c7134053510fce03b464982eab6e3d89728a5.sol", "function": "buySharePriv(uint256)", "lineno": 191, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7763, "code": "ntract PixelSelling {\n\n    struct Location{\n        address owner;\n        string image;\n        string message;\n        bool sale;\n        address saleTo;\n        uint price;\n    }\n\n    struct Share{\n        address owner;\n        uint lastCashout;\n        bool sale;\n        address saleTo;\n        uint price;\n    }\n\n    uint public latestprice;\n    uint public noShares;\n    uint public noSales;\n    mapping (address=>uint) public balances;\n\n    uint emptyLocationProvision;\n    uint privSaleProvision;\n    uint priceRise;\n    address creator;\n\n    mapping (uint=>Location) public locations;\n    mapping (uint=>Share) public shares;\n\n    uint[] provisions;\n\n    event Change(uint id, string eventType);\n\n    modifier isValidLocId(uint id){\n        if(!(id>=0 && id<10000))\n            throw;\n        _;\n    }\n\n    function PixelSelling() {\n        creator=msg.sender;\n        latestprice=10000000000000000;\n        priceRise  =20000000000000000;\n        noShares=0;\n        noSales=0;\n        emptyLocationProvision=90;\n        privSaleProvision=9;\n    }\n\n    function(){throw;}\n\n    function buyEmptyLocation(uint id) isValidLocId(id) payable{\n        Location l=locations[id];\n        if(l.owner==0x0 && msg.value==latestprice){\n            l.owner=msg.sender;\n            l.image='';\n            l.message='';\n\n            l.sale=false;\n            l.saleTo=0x0;\n            l.price=latestprice;\n\n            shares[id] = Share(msg.sender,noSales,false,0x0,latestprice);\n\n            if(noShares>0){\n                balances[creator]+=(latestprice/100)*(100-emptyLocationProvision);\n                creditShareProvision(latestprice, emptyLocationProvision);\n            }else{\n                balances[creator]+=latestprice;\n                provisions.push(0);\n                noSales+=1;\n            }\n\n            noShares+=1;\n\n            latestprice+=priceRise;\n\n            Change(id,'owner');\n        }else{\n            throw;\n        }\n    }\n\n    function buyImagePriv(uint id) isValidLocId(id) payable{\n        Location l=locations[id];\n        if(\n            l.owner!=0x0 &&\n            l.sale==true &&\n            (l.saleTo==msg.sender||l.saleTo==0x0) &&\n            msg.value==l.price\n        ){\n            l.image='';\n            l.message='';\n            l.sale=false;\n            l.saleTo=0x0;\n\n            balances[creator]+=(msg.value/100);\n            balances[l.owner]+=(msg.value/100)*(99-privSaleProvision);\n\n            l.owner=msg.sender;\n\n            creditShareProvision(msg.value, privSaleProvision);\n\n            Change(id,'img owner');\n        }else{\n            throw;\n        }\n    }\n\n    function buySharePriv(uint id) isValidLocId(id) payable{\n        Share s=shares[id];\n\t\tif(\n\t\t\ts.owner!=0x0 &&\n\t\t\ts.sale==true &&\n\t\t\t(s.saleTo==msg.sender||s.saleTo==0x0) &&\n\t\t\tmsg.value==s.price\n\t\t){\n            s.sale=false;\n            s.saleTo=0x0;\n\n            balances[creator]+=(msg.value/100);\n            balances[shares[id].owner]+=(msg.value/100)*(99-privSaleProvision);\n\n            shares[id].owner=msg.sender;\n\n            creditShareProvision(msg.value, privSaleProvision);\n\n            Change(id,'share owner');\n        }else{\n            throw;\n        }\n    }\n\n    function setImage(uint id, string img) isValidLocId(id) {\n\t\tLocation l=locations[id];\n        if(l.owner==msg.sender && bytes(img).length<5001){\n            l.image=img;\n            Change(id,'image');\n        }else{\n            throw;\n        }\n    }\n\n    function setMessage(uint id, string mssg) isValidLocId(id) {\n\t\tLocation l=locations[id];\n        if(l.owner==msg.sender && bytes(mssg).length<501){\n            l.message=mssg;\n            Change(id,'message');\n        }else{\n\t\t\tthrow;\n\t\t}\n    }\n\n    function setSaleImg(uint id, bool setSale, address to, uint p) isValidLocId(id) {\n        Location l=locations[id];\n\t\tif(l.owner==msg.sender){\n            l.sale=setSale;\n            l.price=p;\n            l.saleTo=to;\n            Change(id,'img sale');\n        }else{\n\t\t\tthrow;\n\t\t}\n    }\n\n    function setSaleShare(uint id, bool setSale, address to, uint p) isValidLocId(id) {\n        Share s=shares[id];\n\t\tif(s.owner==msg.sender){\n            s.sale=setSale;\n            s.price=p;\n            s.saleTo=to;\n            Change(id,'share sale');\n        }else{\n\t\t\tthrow;\n\t\t}\n    }\n\n    function creditShareProvision(uint price, uint provision) private {\n        provisions.push(provisions[noSales-1]+(((price/100)*provision)/noShares));\n        noSales+=1;\n    }\n\n    function getProvisionBalance(uint id) isValidLocId(id) constant returns (uint balance) {\n        Share s=shares[id];\n        if(s.owner!=0x0){\n            return provisions[noSales-1]-provisions[s.lastCashout];\n        }else{\n            return 0;\n        }\n    }\n\n    function collectProvisions(uint id) isValidLocId(id) {\n        Share s=shares[id];\n        if(s.owner==msg.sender){\n            balances[s.owner]+=provisions[noSales-1]-provisions[s.lastCashout];\n            s.lastCashout=noSales-1;\n        }else{\n            throw;\n        }\n    }\n\n    function withdrawBalance() {\n        if(balances[msg.sender]>0){\n            uint amtToWithdraw=balances[msg.sender];\n            balances[msg.sender]=0;\n            if(!msg.sender.send(amtToWithdraw)) throw;\n        }else{\n            throw;\n        }\n    }\n}", "debug": "storage_1 + keccac_calldata_PixelSelling_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_1_+_keccac_calldata_PixelSelling_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_3 + keccac_calldata_PixelSelling_4: 0xff00\ncaller: 0xff\nstorage_0 + keccac_calldata_PixelSelling_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_PixelSelling_4: 0x270f\ncalldata_PixelSelling_0: 0x23c5c55a00000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelSelling: 0x4\nstorage_4 + keccac_calldata_PixelSelling_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `buyImagePriv(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x709c7134053510fce03b464982eab6e3d89728a5.sol", "function": "buyImagePriv(uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}