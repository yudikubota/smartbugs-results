{"error": null, "issues": [{"address": 1480, "code": "uint256 _value) public {\n        require(balanceOf[msg.sender] >= _value);\n        ba", "debug": "calldata_MLCToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MLCToken_0: 0xb84c824600000000000000000000000000000000000000000000000000000000\ncalldatasize_MLCToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/41/0xbf4a783ca0404fe3d6dd5b48dd9a39e03ddb829e.sol", "function": "setSymbol(string)", "lineno": 108, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2245, "code": "    _;\n    }\n\n    modifier ", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_7: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_MLCToken_0: 0x7da68f500000000000000000000000000000000000000000000000000000000\ncalldatasize_MLCToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/41/0xbf4a783ca0404fe3d6dd5b48dd9a39e03ddb829e.sol", "function": "stop()", "lineno": 35, "title": "Exception state", "type": "Informational"}, {"address": 2301, "code": "  modifier valid", "debug": "The exception is triggered under the following conditions:\n\nstorage_7: 0xff00\ncalldata_MLCToken_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncalldatasize_MLCToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/41/0xbf4a783ca0404fe3d6dd5b48dd9a39e03ddb829e.sol", "function": "approve(address,uint256)", "lineno": 43, "title": "Exception state", "type": "Informational"}, {"address": 2336, "code": "\n\n    constructor() publi", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_7: 0x0\ncalldata_MLCToken_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncalldatasize_MLCToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/41/0xbf4a783ca0404fe3d6dd5b48dd9a39e03ddb829e.sol", "function": "approve(address,uint256)", "lineno": 46, "title": "Exception state", "type": "Informational"}, {"address": 2791, "code": "  modifier valid", "debug": "The exception is triggered under the following conditions:\n\nstorage_7: 0xff00\ncalldata_MLCToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_MLCToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/41/0xbf4a783ca0404fe3d6dd5b48dd9a39e03ddb829e.sol", "function": "transferFrom(address,address,uint256)", "lineno": 43, "title": "Exception state", "type": "Informational"}, {"address": 2826, "code": "\n\n    constructor() publi", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_7: 0x0\ncalldata_MLCToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_MLCToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/41/0xbf4a783ca0404fe3d6dd5b48dd9a39e03ddb829e.sol", "function": "transferFrom(address,address,uint256)", "lineno": 46, "title": "Exception state", "type": "Informational"}, {"address": 3854, "code": "    _;\n    }\n\n    modifier ", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_7: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_MLCToken_0: 0x3e0f974c00000000000000000000000000000000000000000000000000000000\ncalldatasize_MLCToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/41/0xbf4a783ca0404fe3d6dd5b48dd9a39e03ddb829e.sol", "function": "unlockWallet(address)", "lineno": 35, "title": "Exception state", "type": "Informational"}, {"address": 4149, "code": "dexed _from, address ind", "debug": "storage_10826069350932453726649810804370223703603575740452467603846993781924376990700: 0x9c9efb7ae5acd378025256a3945f5859076e809243093d9ecae2636c9fd28979\ncalldata_MLCToken_4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\ncalldata_MLCToken_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_MLCToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `burn(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/41/0xbf4a783ca0404fe3d6dd5b48dd9a39e03ddb829e.sol", "function": "burn(uint256)", "lineno": 115, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4466, "code": "  modifier valid", "debug": "The exception is triggered under the following conditions:\n\nstorage_7: 0xff00\ncalldata_MLCToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_MLCToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/41/0xbf4a783ca0404fe3d6dd5b48dd9a39e03ddb829e.sol", "function": "transfer(address,uint256)", "lineno": 43, "title": "Exception state", "type": "Informational"}, {"address": 4501, "code": "\n\n    constructor() publi", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_7: 0x0\ncalldata_MLCToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_MLCToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/41/0xbf4a783ca0404fe3d6dd5b48dd9a39e03ddb829e.sol", "function": "transfer(address,uint256)", "lineno": 46, "title": "Exception state", "type": "Informational"}, {"address": 5207, "code": "    _;\n    }\n\n    modifier ", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_7: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_MLCToken_0: 0xb84c824600000000000000000000000000000000000000000000000000000000\ncalldatasize_MLCToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/41/0xbf4a783ca0404fe3d6dd5b48dd9a39e03ddb829e.sol", "function": "setSymbol(string)", "lineno": 35, "title": "Exception state", "type": "Informational"}, {"address": 5408, "code": "    _;\n    }\n\n    modifier ", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_7: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_MLCToken_0: 0xbe9a655500000000000000000000000000000000000000000000000000000000\ncalldatasize_MLCToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/41/0xbf4a783ca0404fe3d6dd5b48dd9a39e03ddb829e.sol", "function": "start()", "lineno": 35, "title": "Exception state", "type": "Informational"}, {"address": 5526, "code": "    _;\n    }\n\n    modifier ", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_7: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_MLCToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_MLCToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/41/0xbf4a783ca0404fe3d6dd5b48dd9a39e03ddb829e.sol", "function": "setName(string)", "lineno": 35, "title": "Exception state", "type": "Informational"}, {"address": 5854, "code": "ntract MLCToken {\n\n    string public name = \"MLC\";\n    string public symbol = \"MLC\";\n    uint256 public decimals = 18;\n    address public adminWallet;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    uint256 public totalSupply = 0;\n    bool public stopped = false;\n    uint public constant TOKEN_SUPPLY_TOTAL = 2000000000000000000000000000;\n    uint256 constant valueFounder = TOKEN_SUPPLY_TOTAL;\n    address owner = 0x0;\n\n    mapping (address => bool) public LockWallets;\n\n    function lockWallet(address _wallet) public isOwner{\n        LockWallets[_wallet]=true;\n    }\n\n    function unlockWallet(address _wallet) public isOwner{\n        LockWallets[_wallet]=false;\n    }\n\n    function containsLock(address _wallet) public view returns (bool){\n        return LockWallets[_wallet];\n    }\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier isRunning {\n        assert(!stopped);\n        _;\n    }\n\n    modifier validAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n        adminWallet = owner;\n        totalSupply = valueFounder;\n        balanceOf[owner] = valueFounder;\n        emit Transfer(0x0, owner, valueFounder);\n    }\n\n    function transfer(address _to, uint256 _value) public isRunning validAddress returns (bool success) {\n        if (containsLock(msg.sender) == true) {\n            revert(\"Wallet Locked\");\n        }\n\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public isRunning validAddress returns (bool success) {\n\n        if (containsLock(_from) == true) {\n            revert(\"Wallet Locked\");\n        }\n\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public isRunning validAddress returns (bool success) {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function stop() public isOwner {\n        stopped = true;\n    }\n\n    function start() public isOwner {\n        stopped = false;\n    }\n\n    function setName(string _name) public isOwner {\n        name = _name;\n    }\n\n    function setSymbol(string _symbol) public isOwner {\n        symbol = _symbol;\n    }\n\n    function burn(uint256 _value) public {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[0x0] += _value;\n        emit Transfer(msg.sender, 0x0, _value);\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}", "debug": "calldata_MLCToken_4 + calldata_MLCToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_7: 0x0\ncalldata_MLCToken_0: 0xb84c824600000000000000000000000000000000000000000000000000000000\ncalldatasize_MLCToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/41/0xbf4a783ca0404fe3d6dd5b48dd9a39e03ddb829e.sol", "function": "setSymbol(string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}