{"error": null, "issues": [{"address": 1108, "code": "y,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u53f0\u7063\u8b9a\";                                   // Set the name for display purposes\n        symbol = \"TW\u8b9a\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this con", "debug": "calldata_x32323_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 51, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1120, "code": "y,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u53f0\u7063\u8b9a\";                                   // Set the name for display purposes\n        symbol = \"TW\u8b9a\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this con", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 51, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1129, "code": "y,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u53f0\u7063\u8b9a\";                                   // Set the name for display purposes\n        symbol = \"TW\u8b9a\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this con", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 51, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1135, "code": "y,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u53f0\u7063\u8b9a\";                                   // Set the name for display purposes\n        symbol = \"TW\u8b9a\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this con", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 51, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1178, "code": "y,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u53f0\u7063\u8b9a\";                                   // Set the name for display purposes\n        symbol = \"TW\u8b9a\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this con", "debug": "calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 51, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1190, "code": "y,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u53f0\u7063\u8b9a\";                                   // Set the name for display purposes\n        symbol = \"TW\u8b9a\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this con", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 51, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1199, "code": "y,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u53f0\u7063\u8b9a\";                                   // Set the name for display purposes\n        symbol = \"TW\u8b9a\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this con", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 51, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1205, "code": "y,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u53f0\u7063\u8b9a\";                                   // Set the name for display purposes\n        symbol = \"TW\u8b9a\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this con", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0x746e42ddbe03c97fe6e530ac0258466c4a20dfffffffffffffffffffffffffc1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0xcf9f8ea5a709fb58f8ed502cd9b08a9b1306dfffffffffffffffffffffffff61\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 51, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2734, "code": "he name for displa", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0x7d1c220000131c81001c28498000000a310ffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0xf82e3ddffffece37effe3d7b67ffffff5ceeffffffffffffffffffffffffff01\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 57, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2842, "code": "o sell\n        balan", "debug": "The exception is triggered under the following conditions:\n\ncalldata_x32323_0: 0xa6f2ae3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\nstorage_9: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "buy()", "lineno": 146, "title": "Exception state", "type": "Informational"}, {"address": 3349, "code": ");\n    }\n\n\n    /**\n     * Set allowance for other addres", "debug": "The exception is triggered under the following conditions:\n\nbalance_at_1461501637330902918203684832716283019655932542975 & caller: 0x0\nstorage_10: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_x32323_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\nstorage_8: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "transfer(address,uint256)", "lineno": 94, "title": "Exception state", "type": "Informational"}, {"address": 3506, "debug": "calldata_x32323_4: 0x5420f860cbaa38a1a0b3b190441c5a362d821016921e61f0365c77d2d7e1804c\nstorage_0: 0x0\ncaller: 0x0\ncalldata_x32323_0: 0xc91d956c00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMinBalance(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "setMinBalance(uint256)", "lineno": 170, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4089, "code": " amount from seller's bal", "debug": "storage_38357942052654430511805280289652572966474101887281969759642760585367641502968: 0x9c9efb7ae5acd378025256a3945f5859076e809243093d9ecae2636c9fd28979\ncalldata_x32323_4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\ncalldata_x32323_0: 0xe4849b3200000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `sell(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "sell(uint256)", "lineno": 156, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4228, "code": "er, this, amount);          ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function sell(uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "sell(uint256)", "lineno": 159, "title": "Transaction order dependence", "type": "Warning"}, {"address": 5511, "code": " owned{\n\n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address target, bool frozen);\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 0;\n    // 0 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u53f0\u7063\u8b9a\";                                   // Set the name for display purposes\n        symbol = \"TW\u8b9a\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        require(!frozenAccount[msg.sender]);\n\tif(msg.sender.balance < minBalanceForAccounts)\n            sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    \n    \n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function buy() payable returns (uint amount){\n        amount = msg.value / buyPrice;                    // calculates the amount\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n        return amount;                                    // ends function and returns\n    }\n\n    function sell(uint amount) returns (uint revenue){\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n        balanceOf[this] += amount;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        revenue = amount * sellPrice;\n        msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\n        return revenue;                                   // ends function and returns\n    }\n\n\n    uint minBalanceForAccounts;\n    \n    function setMinBalance(uint minimumBalanceInFinney) onlyOwner {\n         minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n    }\n\n}", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 19, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5525, "code": " owned{\n\n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address target, bool frozen);\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 0;\n    // 0 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u53f0\u7063\u8b9a\";                                   // Set the name for display purposes\n        symbol = \"TW\u8b9a\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        require(!frozenAccount[msg.sender]);\n\tif(msg.sender.balance < minBalanceForAccounts)\n            sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    \n    \n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function buy() payable returns (uint amount){\n        amount = msg.value / buyPrice;                    // calculates the amount\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n        return amount;                                    // ends function and returns\n    }\n\n    function sell(uint amount) returns (uint revenue){\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n        balanceOf[this] += amount;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        revenue = amount * sellPrice;\n        msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\n        return revenue;                                   // ends function and returns\n    }\n\n\n    uint minBalanceForAccounts;\n    \n    function setMinBalance(uint minimumBalanceInFinney) onlyOwner {\n         minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n    }\n\n}", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0xe2240c073350198c7e1fe6a188343fffffffbbc5606fffffffffffffffffffa0\ncalldata_x32323_4 + calldata_x32323_32 + 36: 0xe728cbd10097e51a790002e0afffffffffffffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0x469e07d63c0ba14e849f5e157670afbffffc443a9f8fffffffffffffffffff61\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 19, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5542, "code": " owned{\n\n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address target, bool frozen);\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 0;\n    // 0 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u53f0\u7063\u8b9a\";                                   // Set the name for display purposes\n        symbol = \"TW\u8b9a\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        require(!frozenAccount[msg.sender]);\n\tif(msg.sender.balance < minBalanceForAccounts)\n            sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    \n    \n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function buy() payable returns (uint amount){\n        amount = msg.value / buyPrice;                    // calculates the amount\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n        return amount;                                    // ends function and returns\n    }\n\n    function sell(uint amount) returns (uint revenue){\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n        balanceOf[this] += amount;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        revenue = amount * sellPrice;\n        msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\n        return revenue;                                   // ends function and returns\n    }\n\n\n    uint minBalanceForAccounts;\n    \n    function setMinBalance(uint minimumBalanceInFinney) onlyOwner {\n         minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n    }\n\n}", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0x30\ncalldata_x32323_4 + calldata_x32323_32 + 36: 0x750e46084e2052802802c42182b02000637dffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0x8af1b9f7b1dfad7fd7fd3bde7d4fdfff9c81fffffffffffffffffffffffffec1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0x6f7ad850ef94320cb88f5ae66e5eb8244e81c949.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 19, "title": "Integer Overflow ", "type": "Warning"}], "success": true}