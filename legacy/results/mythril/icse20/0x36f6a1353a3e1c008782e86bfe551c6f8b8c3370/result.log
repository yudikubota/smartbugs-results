{"error": null, "issues": [{"address": 2174, "code": "equire(\n                // is the customer", "debug": "balance_at_1461501637330902918203684832716283019655932542975 & 0: 0x0\ncallvalue: 0x1\nstorage_11: 0xff00\ncalldatasize_Shadow3D: 0x3\n", "description": "A possible integer underflow exists in the function `fallback`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/14/0x36f6a1353a3e1c008782e86bfe551c6f8b8c3370.sol", "function": "fallback", "lineno": 83, "title": "Integer Underflow", "type": "Warning"}, {"address": 8839, "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfc00000000000000000000000000000000000000000000000b994fc21e004dd3\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x400000000000000000000000000000000000000000000007c78d00e0b662fc2\ncallvalue: 0x400000000000000000000000000000000000000000000006e29ac3a8ffd6f83\nstorage_11: 0xff00\ncalldatasize_Shadow3D: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x36f6a1353a3e1c008782e86bfe551c6f8b8c3370.sol", "function": "fallback", "lineno": 763, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8852, "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xbc7aefffcbf33c4ff2d22000000000000000000000000000042573c52143ec05\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x43851000340cc3b00d2de0000000000000000000000000001c94c1748fc200e8\ncallvalue: 0x43851000340cc3b00d2de000000000000000000000000000141d16450743eee5\nstorage_11: 0xff00\ncalldatasize_Shadow3D: 0x3\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/14/0x36f6a1353a3e1c008782e86bfe551c6f8b8c3370.sol", "function": "fallback", "lineno": 763, "title": "Exception state", "type": "Informational"}, {"address": 9088, "code": "uint z = (x + 1) / ", "debug": "storage_8: 0xfffffffffffffffffffffffffffffffffffffffffffffffff90fb0802c080000\ncalldata_Shadow3D_0: 0x4b75033400000000000000000000000000000000000000000000000000000000\ncalldatasize_Shadow3D: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `sellPrice()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x36f6a1353a3e1c008782e86bfe551c6f8b8c3370.sol", "function": "sellPrice()", "lineno": 710, "title": "Integer Overflow ", "type": "Warning"}], "success": true}