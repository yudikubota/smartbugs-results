{
  "contract": "0x64124cbc849de65469c7dc84cc6ab68aefe42aaf",
  "tool": "mythril",
  "start": 1563521931.249256,
  "end": 1563521995.032529,
  "duration": 63.783273220062256,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 6838,
        "code": "er[_tokenId] = _to;\n\n    // When ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function payout(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/13/0x64124cbc849de65469c7dc84cc6ab68aefe42aaf.sol",
        "function": "payout(address)",
        "lineno": 397,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 7203,
        "code": "r(_from, _to, _tokenId);\n ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WhaleToken_32_+_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WhaleToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_calldata_WhaleToken_32_+_36: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_WhaleToken_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_WhaleToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhaleToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0x64124cbc849de65469c7dc84cc6ab68aefe42aaf.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 407,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7419,
        "code": " 0;\n    }\n    uint256 c = a ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WhaleToken_4: 0x0\ncalldata_WhaleToken_32 + 4: 0x800000000200000000000000000000000001\nstorage_keccac_calldata_WhaleToken_32_+_36: 0x80000000020000000000000000000000000100\ncalldata_WhaleToken_4: 0x800000000200000000000000000000000001\ncalldata_WhaleToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhaleToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `transferFrom(address,address,uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/13/0x64124cbc849de65469c7dc84cc6ab68aefe42aaf.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 418,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 7683,
        "code": "; // solhint-disab",
        "debug": "storage_10: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0x0\ncaller: 0x0\ncalldata_WhaleToken_0: 0x4dc189ef00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhaleToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createContractWhale(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0x64124cbc849de65469c7dc84cc6ab68aefe42aaf.sol",
        "function": "createContractWhale(string)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8227,
        "code": "1 {\n\n  /*** EVENTS ***/\n\n  /// @dev The Birth event is fired whenever a new whale comes into existence.\n  event Birth(uint256 tokenId, string name, address owner);\n\n  /// @dev The TokenSold event is fired whenever a token is sold.\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\n\n  /// @dev Transfer event as defined in current draft of ERC721. \n  ///  ownership is assigned, including births.\n  event Transfer(address from, address to, uint256 tokenId);\n\n  /*** CONSTANTS ***/\n\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n  string public constant NAME = \"CryptoWhale\"; // solhint-disable-line\n  string public constant SYMBOL = \"WhaleToken\"; // solhint-disable-line\n\n  uint256 private startingPrice = 0.001 ether;\n  uint256 private constant PROMO_CREATION_LIMIT = 5000;\n  uint256 private firstStepLimit =  0.05 ether;\n  uint256 private secondStepLimit = 0.5 ether;\n\n  /*** STORAGE ***/\n\n  /// @dev A mapping from whale IDs to the address that owns them. All whales have\n  ///  some valid owner address.\n  mapping (uint256 => address) public whaleIndexToOwner;\n\n  // @dev A mapping from owner address to count of tokens that address owns.\n  //  Used internally inside balanceOf() to resolve ownership count.\n  mapping (address => uint256) private ownershipTokenCount;\n\n  /// @dev A mapping from WhaleIDs to an address that has been approved to call\n  ///  transferFrom(). Each Whale can only have one approved address for transfer\n  ///  at any time. A zero value means no approval is outstanding.\n  mapping (uint256 => address) public whaleIndexToApproved;\n\n  // @dev A mapping from WhaleIDs to the price of the token.\n  mapping (uint256 => uint256) private whaleIndexToPrice;\n\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n  address public ceoAddress;\n  address public cooAddress;\n\n  uint256 public promoCreatedCount;\n\n  /*** DATATYPES ***/\n  struct Whale {\n    string name;\n  }\n\n  Whale[] private whales;\n\n  /*** ACCESS MODIFIERS ***/\n  /// @dev Access modifier for CEO-only functionality\n  modifier onlyCEO() {\n    require(msg.sender == ceoAddress);\n    _;\n  }\n\n  /// @dev Access modifier for COO-only functionality\n  modifier onlyCOO() {\n    require(msg.sender == cooAddress);\n    _;\n  }\n\n  /// Access modifier for contract owner only functionality\n  modifier onlyCLevel() {\n    require(\n      msg.sender == ceoAddress ||\n      msg.sender == cooAddress\n    );\n    _;\n  }\n\n  /*** CONSTRUCTOR ***/\n  function WhaleToken() public {\n    ceoAddress = msg.sender;\n    cooAddress = msg.sender;\n  }\n\n  /*** PUBLIC FUNCTIONS ***/\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\n  ///  clear all approvals.\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n  /// @dev Required for ERC-721 compliance.\n  function approve(\n    address _to,\n    uint256 _tokenId\n  ) public {\n    // Caller must own token.\n    require(_owns(msg.sender, _tokenId));\n\n    whaleIndexToApproved[_tokenId] = _to;\n\n    Approval(msg.sender, _to, _tokenId);\n  }\n\n  /// For querying balance of a particular account\n  /// @param _owner The address for balance query\n  /// @dev Required for ERC-721 compliance.\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return ownershipTokenCount[_owner];\n  }\n\n  /// @dev Creates a new promo Whale with the given name, with given _price and assignes it to an address.\n  function createPromoWhale(address _owner, string _name, uint256 _price) public onlyCOO {\n    require(promoCreatedCount < PROMO_CREATION_LIMIT);\n\n    address whaleOwner = _owner;\n    if (whaleOwner == address(0)) {\n      whaleOwner = cooAddress;\n    }\n\n    if (_price <= 0) {\n      _price = startingPrice;\n    }\n\n    promoCreatedCount++;\n    _createWhale(_name, whaleOwner, _price);\n  }\n\n  /// @dev Creates a new Whale with the given name.\n  function createContractWhale(string _name) public onlyCOO {\n    _createWhale(_name, address(this), startingPrice);\n  }\n\n  /// @notice Returns all the relevant information about a specific whale.\n  /// @param _tokenId The tokenId of the whale of interest.\n  function getWhale(uint256 _tokenId) public view returns (\n    uint256 Id,\n    string whaleName,\n    uint256 sellingPrice,\n    address owner\n  ) {\n    Whale storage whale = whales[_tokenId];\n    Id = _tokenId;\n    whaleName = whale.name;\n    sellingPrice = whaleIndexToPrice[_tokenId];\n    owner = whaleIndexToOwner[_tokenId];\n  }\n\n  function implementsERC721() public pure returns (bool) {\n    return true;\n  }\n\n  /// @dev Required for ERC-721 compliance.\n  function name() public pure returns (string) {\n    return NAME;\n  }\n\n  /// For querying owner of token\n  /// @param _tokenId The tokenID for owner inquiry\n  /// @dev Required for ERC-721 compliance.\n  function ownerOf(uint256 _tokenId)\n    public\n    view\n    returns (address owner)\n  {\n    owner = whaleIndexToOwner[_tokenId];\n    require(owner != address(0));\n  }\n\n  function payout(address _to) public onlyCLevel {\n    _payout(_to);\n  }\n\n  // Allows someone to send ether and obtain the token\n  function purchase(uint256 _tokenId) public payable {\n    address oldOwner = whaleIndexToOwner[_tokenId];\n    address newOwner = msg.sender;\n\n    uint256 sellingPrice = whaleIndexToPrice[_tokenId];\n\n    // Making sure token owner is not sending to self\n    require(oldOwner != newOwner);\n\n    // Safety check to prevent against an unexpected 0x0 default.\n    require(_addressNotNull(newOwner));\n\n    // Making sure sent amount is greater than or equal to the sellingPrice\n    require(msg.value >= sellingPrice);\n\n    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 94), 100));\n    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n\n    // Update prices\n    if (sellingPrice < firstStepLimit) {\n      // first stage\n      whaleIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 200), 94);\n    } else if (sellingPrice < secondStepLimit) {\n      // second stage\n      whaleIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 120), 94);\n    } else {\n      // third stage\n      whaleIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 115), 94);\n    }\n\n    _transfer(oldOwner, newOwner, _tokenId);\n\n    // Pay previous tokenOwner if owner is not contract\n    if (oldOwner != address(this)) {\n      oldOwner.transfer(payment); //(1-0.06)\n    }\n\n    TokenSold(_tokenId, sellingPrice, whaleIndexToPrice[_tokenId], oldOwner, newOwner, whales[_tokenId].name);\n\n    msg.sender.transfer(purchaseExcess);\n  }\n\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n    return whaleIndexToPrice[_tokenId];\n  }\n\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n  /// @param _newCEO The address of the new CEO\n  function setCEO(address _newCEO) public onlyCEO {\n    require(_newCEO != address(0));\n\n    ceoAddress = _newCEO;\n  }\n\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n  /// @param _newCOO The address of the new COO\n  function setCOO(address _newCOO) public onlyCEO {\n    require(_newCOO != address(0));\n\n    cooAddress = _newCOO;\n  }\n\n  /// @dev Required for ERC-721 compliance.\n  function symbol() public pure returns (string) {\n    return SYMBOL;\n  }\n\n  /// @notice Allow pre-approved user to take ownership of a token\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n  /// @dev Required for ERC-721 compliance.\n  function takeOwnership(uint256 _tokenId) public {\n    address newOwner = msg.sender;\n    address oldOwner = whaleIndexToOwner[_tokenId];\n\n    // Safety check to prevent against an unexpected 0x0 default.\n    require(_addressNotNull(newOwner));\n\n    // Making sure transfer is approved\n    require(_approved(newOwner, _tokenId));\n\n    _transfer(oldOwner, newOwner, _tokenId);\n  }\n\n  /// @param _owner The owner whose whale tokens we are interested in.\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n  ///  expensive (it walks the entire whales array looking for whales belonging to owner),\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n  ///  not contract-to-contract calls.\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\n    uint256 tokenCount = balanceOf(_owner);\n    if (tokenCount == 0) {\n        // Return an empty array\n      return new uint256[](0);\n    } else {\n      uint256[] memory result = new uint256[](tokenCount);\n      uint256 totalWhales = totalSupply();\n      uint256 resultIndex = 0;\n\n      uint256 whaleId;\n      for (whaleId = 0; whaleId <= totalWhales; whaleId++) {\n        if (whaleIndexToOwner[whaleId] == _owner) {\n          result[resultIndex] = whaleId;\n          resultIndex++;\n        }\n      }\n      return result;\n    }\n  }\n\n  /// For querying totalSupply of token\n  /// @dev Required for ERC-721 compliance.\n  function totalSupply() public view returns (uint256 total) {\n    return whales.length;\n  }\n\n  /// Owner initates the transfer of the token to another account\n  /// @param _to The address for the token to be transferred to.\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n  /// @dev Required for ERC-721 compliance.\n  function transfer(\n    address _to,\n    uint256 _tokenId\n  ) public {\n    require(_owns(msg.sender, _tokenId));\n    require(_addressNotNull(_to));\n\n    _transfer(msg.sender, _to, _tokenId);\n  }\n\n  /// Third-party initiates transfer of token from address _from to address _to\n  /// @param _from The address for the token to be transferred from.\n  /// @param _to The address for the token to be transferred to.\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n  /// @dev Required for ERC-721 compliance.\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  ) public {\n    require(_owns(_from, _tokenId));\n    require(_approved(_to, _tokenId));\n    require(_addressNotNull(_to));\n\n    _transfer(_from, _to, _tokenId);\n  }\n\n  /*** PRIVATE FUNCTIONS ***/\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\n  function _addressNotNull(address _to) private pure returns (bool) {\n    return _to != address(0);\n  }\n\n  /// For checking approval of transfer for address _to\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n    return whaleIndexToApproved[_tokenId] == _to;\n  }\n\n  /// For creating whale\n  function _createWhale(string _name, address _owner, uint256 _price) private {\n    Whale memory _whale = Whale({\n      name: _name\n    });\n    uint256 newWhaleId = whales.push(_whale) - 1;\n\n    // It's probably never going to happen, 4 billion tokens are A LOT, but\n    // let's just be 100% sure we never let this happen.\n    require(newWhaleId == uint256(uint32(newWhaleId)));\n\n    Birth(newWhaleId, _name, _owner);\n\n    whaleIndexToPrice[newWhaleId] = _price;\n\n    // This will assign ownership, and also emit the Transfer event as\n    // per ERC721 draft\n    _transfer(address(0), _owner, newWhaleId);\n  }\n\n  /// Check for token ownership\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\n    return claimant == whaleIndexToOwner[_tokenId];\n  }\n\n  /// For paying out balance on contract\n  function _payout(address _to) private {\n    if (_to == address(0)) {\n      ceoAddress.transfer(this.balance);\n    } else {\n      _to.transfer(this.balance);\n    }\n  }\n\n  /// @dev Assigns ownership of a specific whale to an address.\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\n    // Since the number of whales is capped to 2^32 we can't overflow this\n    ownershipTokenCount[_to]++;\n    //transfer ownership\n    whaleIndexToOwner[_tokenId] = _to;\n\n    // When creating new whales _from is 0x0, but we can't account that address.\n    if (_from != address(0)) {\n      ownershipTokenCount[_from]--;\n      // clear any previously approved ownership exchange\n      delete whaleIndexToApproved[_tokenId];\n    }\n\n    // Emit the transfer event.\n    Transfer(_from, _to, _tokenId);\n  }\n\n}\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) ",
        "debug": "mem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_WhaleToken_4 + calldata_WhaleToken_4)) +\n0: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_8: 0x0\ncaller: 0x0\ncalldata_WhaleToken_0: 0x4dc189ef00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhaleToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createContractWhale(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0x64124cbc849de65469c7dc84cc6ab68aefe42aaf.sol",
        "function": "createContractWhale(string)",
        "lineno": 29,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}