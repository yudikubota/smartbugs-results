{
  "contract": "0x0a64fe0b2587c31c511ae81c7b4c2cf8bb3b3cc6",
  "tool": "mythril",
  "start": 1563605254.7501314,
  "end": 1563606359.1545293,
  "duration": 1104.4043979644775,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 598,
        "code": "new uint[](_take);\n        uint counter = 0; \n        uint taken = 0;\n\n        for (uint i = providers.length; i > 0; i--) {\n            if (taken >= _take) {\n                break;\n            }\n\n            Provider provider = Provider(providers[i-1]);\n            temp = provider.getBrickIds();\n            \n            for (uint j = 0; j < temp.length; j++) { \n                if (taken >= _take) {\n                    break;\n                }\n                \n                bool exist = provider.filterBrick(temp[j], _tags, _status, _started, _expired);\n                if(exist){\n                    if (counter >= _skip) { \n                        brickIds[taken] = temp[j];                     \n                        taken++;\n                    }\n                    counter++;\n                }\n            }\n        }\n\n        return brickIds;\n    }\n\n    function addBrick(string _title, string _url, uint _expired, string _description, bytes32[] _tags) \n        public payable\n        returns (uint id)\n    {\n        id = getId();\n        require(getProvider(id).addBrick(id, _title, _url, _expired, _description, _tags, msg.value));\n        emit BrickAdded(id);\n    }\n\n    function changeBrick(uint _brickId, ",
        "debug": "mem_160 +\n32*calldata_WeBuildWorld_4 + calldata_WeBuildWorld_32 + 36 +\n32 +\n32*Concat(0, 1 + Extract(23, 8, storage_2)): 0x8000007c9b65f07c1000000003def81ef80f7be8420f801f20226c16e1071000\nmem_128 +\n32 +\n32*calldata_WeBuildWorld_4 + calldata_WeBuildWorld_32 + 36: 0x100000000000000000000000000000000000000000\nstorage_2: 0x100\ncalldata_WeBuildWorld_0: 0x10cad69c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WeBuildWorld: 0x4\ncalldata_WeBuildWorld_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getBrickIds(uint256,uint256,bytes32[],uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x0a64fe0b2587c31c511ae81c7b4c2cf8bb3b3cc6.sol",
        "function": "getBrickIds(uint256,uint256,bytes32[],uint256,uint256,uint256)",
        "lineno": 334,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4562,
        "code": "    providerA",
        "debug": "storage_1: 0x0\nstorage_2 + keccac_65535_&_65535_&_UDiv(storage_2,_256): 0xfffffffffffffffffffff7ffffffffffffffffff00\ncalldata_WeBuildWorld_4: 0x8000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WeBuildWorld_0: 0x100356ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_WeBuildWorld: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `upgradeProvider(address)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/22/0x0a64fe0b2587c31c511ae81c7b4c2cf8bb3b3cc6.sol",
        "function": "upgradeProvider(address)",
        "lineno": 142,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 5087,
        "code": "er >= _skip) { \n      ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/22/0x0a64fe0b2587c31c511ae81c7b4c2cf8bb3b3cc6.sol",
        "function": "getBrickIds(uint256,uint256,bytes32[],uint256,uint256,uint256)",
        "lineno": 353,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 6096,
        "code": "ess",
        "debug": "calldata_WeBuildWorld_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffff\nstorage_2: 0x0\nstorage_keccac_65535_&_65535_&_UDiv(storage_2,_256) + 1: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffe\nstorage_keccac_65535_&_65535_&_UDiv(storage_2,_256) + 0: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffff\ncalldata_WeBuildWorld_0: 0x43620f2400000000000000000000000000000000000000000000000000000000\ncalldatasize_WeBuildWorld: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `startWork(uint256,bytes32,bytes32)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/22/0x0a64fe0b2587c31c511ae81c7b4c2cf8bb3b3cc6.sol",
        "function": "startWork(uint256,bytes32,bytes32)",
        "lineno": 160,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 6301,
        "code": "\n        cur",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0xffff00\ncalldata_WeBuildWorld_0: 0x744f499400000000000000000000000000000000000000000000000000000000\ncalldatasize_WeBuildWorld: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x0a64fe0b2587c31c511ae81c7b4c2cf8bb3b3cc6.sol",
        "function": "getBrickIdsByOwner(address)",
        "lineno": 180,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6511,
        "code": "\n    function getId() private returns (uint) {",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x0a64fe0b2587c31c511ae81c7b4c2cf8bb3b3cc6.sol",
        "function": "getBrickDetail(uint256)",
        "lineno": 454,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6511,
        "code": "\n    function getId() private returns (uint) {",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function getBrickDetail(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/22/0x0a64fe0b2587c31c511ae81c7b4c2cf8bb3b3cc6.sol",
        "function": "getBrickDetail(uint256)",
        "lineno": 454,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 7016,
        "code": "   event WorkAccepted (uint _brickId, address[] _winners",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/22/0x0a64fe0b2587c31c511ae81c7b4c2cf8bb3b3cc6.sol",
        "function": "_function_0x3c89f9d4",
        "lineno": 271,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 13339,
        "debug": "storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WeBuildWorld_0: 0xbe34dab300000000000000000000000000000000000000000000000000000000\ncalldatasize_WeBuildWorld: 0x4\n",
        "description": "A possible integer overflow exists in the function `addBrick(string,string,uint256,string,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x0a64fe0b2587c31c511ae81c7b4c2cf8bb3b3cc6.sol",
        "function": "addBrick(string,string,uint256,string,bytes32[])",
        "lineno": 458,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}