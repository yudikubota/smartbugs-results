{
  "contract": "0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98",
  "tool": "mythril",
  "start": 1563520379.311338,
  "end": 1563520565.4672756,
  "duration": 186.15593767166138,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1188,
        "code": " onlyAdmin(2) public{\n        require(state == State.Successful); //Only when sale finish\n\n        uint256 remainder = _address.balance",
        "debug": "calldata_admined_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_admined_0: 0xaf8ea4e300000000000000000000000000000000000000000000000000000000\ncalldatasize_admined: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setPrice(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98.sol",
        "function": "setPrice(uint256,string)",
        "lineno": 321,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1338,
        "code": "200; //Human time (GMT): Friday, 1",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x8000\ncalldata_admined_0: 0xc19d93fb00000000000000000000000000000000000000000000000000000000\ncalldatasize_admined: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98.sol",
        "function": "_function_0xc19d93fb",
        "lineno": 108,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1937,
        "code": "i\n    */\n    constructor(",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x8000\ncalldata_admined_0: 0x4cbc155300000000000000000000000000000000000000000000000000000000\ncalldatasize_admined: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98.sol",
        "function": "contribute(address,uint256,address)",
        "lineno": 144,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4398,
        "code": "ward to contribute functi",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x8000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x200\ncalldata_admined_0: 0x4c801cee00000000000000000000000000000000000000000000000000000000\ncalldatasize_admined: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98.sol",
        "function": "_function_0x4c801cee",
        "lineno": 334,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4569,
        "code": "      contribute(address(0),0,add",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/9/0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98.sol",
        "function": "_function_0x4c801cee",
        "lineno": 336,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4569,
        "code": "      contribute(address(0),0,add",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4793\n",
        "filename": "/unique_chucks/9/0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98.sol",
        "function": "_function_0x4c801cee",
        "lineno": 336,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4793,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/9/0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98.sol",
        "function": "_function_0x4c801cee",
        "lineno": 339,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5257,
        "code": "successful(); //and execu",
        "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x5d40da01\nstorage_1: 0x8000\ncalldata_admined_0: 0x86f3258600000000000000000000000000000000000000000000000000000000\ncalldatasize_admined: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98.sol",
        "function": "checkIfFundingCompleteOrExpired()",
        "lineno": 281,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5418,
        "code": "\n\n        uint256 temp",
        "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x0\nstorage_1: 0x300\ncalldata_admined_0: 0x86f3258600000000000000000000000000000000000000000000000000000000\ncalldatasize_admined: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98.sol",
        "function": "checkIfFundingCompleteOrExpired()",
        "lineno": 295,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5520,
        "code": "transfer(address(this).ba",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x8000\ncalldata_admined_0: 0x9a9e3fd800000000000000000000000000000000000000000000000000000000\ncalldatasize_admined: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98.sol",
        "function": "successful()",
        "lineno": 302,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5725,
        "code": "it LogBeneficiaryPaid(fundsWallet); ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/9/0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98.sol",
        "function": "successful()",
        "lineno": 303,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5725,
        "code": "it LogBeneficiaryPaid(fundsWallet); ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6017\n",
        "filename": "/unique_chucks/9/0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98.sol",
        "function": "successful()",
        "lineno": 303,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 6017,
        "code": " @notice set usd price on wei\n    ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/9/0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98.sol",
        "function": "successful()",
        "lineno": 307,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 7133,
        "code": "  ass",
        "debug": "timestamp: 0x5c738480\ncallvalue: 0xe4067fbafcb881f4671508391cd5fd3890d025bed631a6217deb44bc77d20946\nstorage_1: 0x0\ncalldatasize_admined: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98.sol",
        "function": "fallback",
        "lineno": 15,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7479,
        "code": "ible states\n    enum State {\n        PRESALE,\n        MAINSALE,\n        Successful\n    }\n    //Public variables\n\n    //Time-state Related\n    State public state = State.PRESALE; //Set initial stage\n    uint256 constant public PRESALEStart = 1548979200; //Human time (GMT): Friday, 1 February 2019 0:00:00\n    uint256 constant public MAINSALEStart = 1554163200; //Human time (GMT): Tuesday, 2 April 2019 0:00:00\n    uint256 constant public SaleDeadline = 1564531200; //Human time (GMT): Wednesday, 31 July 2019 0:00:00\n    uint256 public completedAt; //Set when ico finish\n    //Token-eth related\n    uint256 public totalRaised; //eth collected in wei\n    uint256 public totalRefDistributed; //total tokens distributed to referrals\n    uint256 public totalEthRefDistributed; //total eth distributed to specified referrals\n    uint256 public totalDistributed; //Sale tokens distributed\n    ERC20Basic public tokenReward = ERC20Basic(0xA2e13c4f0431B6f2B06BBE61a24B61CCBe13136A); //Token contract address\n    mapping(address => bool) referral; //Determine the referral type\n\n    //Contract details\n    address public creator; //Creator address\n    address public fundsWallet = 0x62e0b52F0a7AD4bB7b87Ce41e132bCBC7173EB96;\n    string public version = '0.2'; //Contract version\n\n    //Price related\n    uint256 public USDPriceInWei; // 0.1 cent (0.001$) in wei\n    string public USDPrice;\n\n    //events for log\n    event LogFundrisingInitialized(address indexed _creator);\n    event LogFundingReceived(address indexed _addr, uint _amount, uint _currentTotal, address _referral);\n    event LogBeneficiaryPaid(address indexed _beneficiaryAddress);\n    event LogContributorsPayout(address indexed _addr, uint _amount);\n    event LogFundingSuccessful(uint _totalRaised);\n\n    //Modifier to prevent execution if ico has ended or is holded\n    modifier notFinished() {\n        require(state != State.Successful);\n        _;\n    }\n\n    /**\n    * @notice ICO constructor\n    * @param _initialUSDInWei initial usd value on wei\n    */\n    constructor(uint _initialUSDInWei) public {\n\n        creator = msg.sender; //Creator is set from deployer address\n        USDPriceInWei = _initialUSDInWei;\n\n        emit LogFundrisingInitialized(creator); //Log contract initialization\n\n    }\n\n    function setReferralType(address _user, bool _type) onlyAdmin(1) public {\n      referral[_user] = _type;\n    }\n\n    /**\n    * @notice contribution handler\n    */\n    function contribute(address _target, uint256 _value, address _reff) public notFinished payable {\n        require(now > PRESALEStart); //This time must be equal or greater than the start time\n\n        address user;\n        uint remaining;\n        uint256 tokenBought;\n        uint256 temp;\n        uint256 refBase;\n\n        //If the address is not zero the caller must be an admin\n        if(_target != address(0) && level[msg.sender] >= 1){\n          user = _target; //user is set by admin\n          remaining = _value.mul(1e18); //value contributed is set by admin\n          refBase = _value; //value for referral calc\n        } else { //If the address is zero or the caller is not an admin\n          user = msg.sender; //user is same as caller\n          remaining = msg.value.mul(1e18); //value is same as sent\n          refBase = msg.value; //value for referral calc\n        }\n\n        totalRaised = totalRaised.add(remaining.div(1e18)); //ether received updated\n\n        //Tokens bought calculation\n        while(remaining > 0){\n\n          (temp,remaining) = tokenBuyCalc(remaining);\n          tokenBought = tokenBought.add(temp);\n\n        }\n\n        temp = 0; //Clear temporal variable\n\n        totalDistributed = totalDistributed.add(tokenBought); //Whole tokens sold updated\n\n        //Check for presale limit\n        if(state == State.PRESALE){\n          require(totalDistributed <= 5000000 * (10**18));\n        }\n\n        //Transfer tokens to user\n        tokenReward.transfer(user,tokenBought);\n\n        //Referral checks\n        if(_reff != address(0) && _reff != user){ //referral cannot be zero or self\n\n          //Check if referral receives eth or tokens\n          if(referral[_reff] == true){ //If eth\n            //Check current rate\n            if(state == State.PRESALE){//Presale Rate\n              //100%/10 = 10%\n              _reff.transfer(refBase.div(10));\n              totalEthRefDistributed = totalEthRefDistributed.add(refBase.div(10));\n\n            } else {//Mainsale rate\n              //100%/20= 5%\n              _reff.transfer(refBase.div(20));\n              totalEthRefDistributed = totalEthRefDistributed.add(refBase.div(20));\n\n            }\n          } else {//if tokens\n            //Check current rate\n            if(state == State.PRESALE){//Presale Rate\n              //100%/10 = 10%\n              tokenReward.transfer(_reff,tokenBought.div(10));\n              totalRefDistributed = totalRefDistributed.add(tokenBought.div(10));\n            } else {//Mainsale rate\n              //100%/20= 5%\n              tokenReward.transfer(_reff,tokenBought.div(20));\n              totalRefDistributed = totalRefDistributed.add(tokenBought.div(20));\n            }\n          }\n        }\n\n        emit LogFundingReceived(user, msg.value, totalRaised, _reff); //Log the purchase\n\n        fundsWallet.transfer(address(this).balance); //Eth is send to fundsWallet\n        emit LogBeneficiaryPaid(fundsWallet); //Log transaction\n\n        checkIfFundingCompleteOrExpired(); //Execute state checks\n    }\n\n\n    /**\n    * @notice tokenBought calculation function\n    * @param _value is the amount of eth multiplied by 1e18\n    */\n    function tokenBuyCalc(uint _value) internal view returns (uint sold,uint remaining) {\n\n      uint256 tempPrice = USDPriceInWei; //0.001$ in wei\n\n      //Determine state to set current price\n      if(state == State.PRESALE){ //Presale price\n\n            tempPrice = tempPrice.mul(400); //0.001$ * 400 = 0.4$\n            sold = _value.div(tempPrice); //here occurs decimal correction\n\n            return (sold,0);\n\n      } else { //state == State.MAINSALE - Mainsale price\n\n            tempPrice = tempPrice.mul(600); //0.001$ * 600 = 0.6$\n            sold = _value.div(tempPrice); //here occurs decimal correction\n\n            return (sold,0);\n\n        }\n}\n\n    /**\n    * @notice Process to check contract current status\n    */\n    function checkIfFundingCompleteOrExpired() public {\n\n        if ( now > SaleDeadline && state != State.Successful){ //If deadline is reached and not yet successful\n\n            state = State.Successful; //ICO becomes Successful\n            completedAt = now; //ICO is complete\n\n            emit LogFundingSuccessful(totalRaised); //we log the finish\n            successful(); //and execute closure\n\n        } else if(state == State.PRESALE && now >= MAINSALEStart ) {\n\n            state = State.MAINSALE; //We get on next stage\n\n        }\n\n    }\n\n    /**\n    * @notice successful closure handler\n    */\n    function successful() public {\n        require(state == State.Successful); //When successful\n\n        uint256 temp = tokenReward.balanceOf(address(this)); //Remanent tokens handle\n\n        tokenReward.transfer(creator,temp); //Transfer remanent tokens\n        emit LogContributorsPayout(creator,temp); //Log transaction\n\n        fundsWallet.transfer(address(this).balance); //Eth is send to fundsWallet\n        emit LogBeneficiaryPaid(fundsWallet); //Log transaction\n    }\n\n    /**\n    * @notice set usd price on wei\n    * @param _value wei value\n    */\n    function setPrice(uint _value, string _price) public onlyAdmin(2) {\n\n      USDPriceInWei = _value;\n      USDPrice = _price;\n\n    }\n\n    /**\n    * @notice Function to claim any token stuck on contract\n    * @param _address Address of target token\n    */\n    function externalTokensRecovery(ERC20Basic _address) onlyAdmin(2) public{\n        require(state == State.Successful); //Only when sale finish\n\n        uint256 remainder = _address.balanceOf(address(this)); //Check remainder tokens\n        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\n\n    }\n\n    /*\n    * @dev Direct payments handler\n    */\n    function () public payable {\n\n        //Forward to contribute function\n        //zero address, no custom value, no referral\n        contribute(address(0),0,address(0));\n\n    }\n}",
        "debug": "calldata_admined_4 + calldata_admined_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x200\ncalldata_admined_0: 0xaf8ea4e300000000000000000000000000000000000000000000000000000000\ncalldatasize_admined: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setPrice(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98.sol",
        "function": "setPrice(uint256,string)",
        "lineno": 98,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7493,
        "code": "ible states\n    enum State {\n        PRESALE,\n        MAINSALE,\n        Successful\n    }\n    //Public variables\n\n    //Time-state Related\n    State public state = State.PRESALE; //Set initial stage\n    uint256 constant public PRESALEStart = 1548979200; //Human time (GMT): Friday, 1 February 2019 0:00:00\n    uint256 constant public MAINSALEStart = 1554163200; //Human time (GMT): Tuesday, 2 April 2019 0:00:00\n    uint256 constant public SaleDeadline = 1564531200; //Human time (GMT): Wednesday, 31 July 2019 0:00:00\n    uint256 public completedAt; //Set when ico finish\n    //Token-eth related\n    uint256 public totalRaised; //eth collected in wei\n    uint256 public totalRefDistributed; //total tokens distributed to referrals\n    uint256 public totalEthRefDistributed; //total eth distributed to specified referrals\n    uint256 public totalDistributed; //Sale tokens distributed\n    ERC20Basic public tokenReward = ERC20Basic(0xA2e13c4f0431B6f2B06BBE61a24B61CCBe13136A); //Token contract address\n    mapping(address => bool) referral; //Determine the referral type\n\n    //Contract details\n    address public creator; //Creator address\n    address public fundsWallet = 0x62e0b52F0a7AD4bB7b87Ce41e132bCBC7173EB96;\n    string public version = '0.2'; //Contract version\n\n    //Price related\n    uint256 public USDPriceInWei; // 0.1 cent (0.001$) in wei\n    string public USDPrice;\n\n    //events for log\n    event LogFundrisingInitialized(address indexed _creator);\n    event LogFundingReceived(address indexed _addr, uint _amount, uint _currentTotal, address _referral);\n    event LogBeneficiaryPaid(address indexed _beneficiaryAddress);\n    event LogContributorsPayout(address indexed _addr, uint _amount);\n    event LogFundingSuccessful(uint _totalRaised);\n\n    //Modifier to prevent execution if ico has ended or is holded\n    modifier notFinished() {\n        require(state != State.Successful);\n        _;\n    }\n\n    /**\n    * @notice ICO constructor\n    * @param _initialUSDInWei initial usd value on wei\n    */\n    constructor(uint _initialUSDInWei) public {\n\n        creator = msg.sender; //Creator is set from deployer address\n        USDPriceInWei = _initialUSDInWei;\n\n        emit LogFundrisingInitialized(creator); //Log contract initialization\n\n    }\n\n    function setReferralType(address _user, bool _type) onlyAdmin(1) public {\n      referral[_user] = _type;\n    }\n\n    /**\n    * @notice contribution handler\n    */\n    function contribute(address _target, uint256 _value, address _reff) public notFinished payable {\n        require(now > PRESALEStart); //This time must be equal or greater than the start time\n\n        address user;\n        uint remaining;\n        uint256 tokenBought;\n        uint256 temp;\n        uint256 refBase;\n\n        //If the address is not zero the caller must be an admin\n        if(_target != address(0) && level[msg.sender] >= 1){\n          user = _target; //user is set by admin\n          remaining = _value.mul(1e18); //value contributed is set by admin\n          refBase = _value; //value for referral calc\n        } else { //If the address is zero or the caller is not an admin\n          user = msg.sender; //user is same as caller\n          remaining = msg.value.mul(1e18); //value is same as sent\n          refBase = msg.value; //value for referral calc\n        }\n\n        totalRaised = totalRaised.add(remaining.div(1e18)); //ether received updated\n\n        //Tokens bought calculation\n        while(remaining > 0){\n\n          (temp,remaining) = tokenBuyCalc(remaining);\n          tokenBought = tokenBought.add(temp);\n\n        }\n\n        temp = 0; //Clear temporal variable\n\n        totalDistributed = totalDistributed.add(tokenBought); //Whole tokens sold updated\n\n        //Check for presale limit\n        if(state == State.PRESALE){\n          require(totalDistributed <= 5000000 * (10**18));\n        }\n\n        //Transfer tokens to user\n        tokenReward.transfer(user,tokenBought);\n\n        //Referral checks\n        if(_reff != address(0) && _reff != user){ //referral cannot be zero or self\n\n          //Check if referral receives eth or tokens\n          if(referral[_reff] == true){ //If eth\n            //Check current rate\n            if(state == State.PRESALE){//Presale Rate\n              //100%/10 = 10%\n              _reff.transfer(refBase.div(10));\n              totalEthRefDistributed = totalEthRefDistributed.add(refBase.div(10));\n\n            } else {//Mainsale rate\n              //100%/20= 5%\n              _reff.transfer(refBase.div(20));\n              totalEthRefDistributed = totalEthRefDistributed.add(refBase.div(20));\n\n            }\n          } else {//if tokens\n            //Check current rate\n            if(state == State.PRESALE){//Presale Rate\n              //100%/10 = 10%\n              tokenReward.transfer(_reff,tokenBought.div(10));\n              totalRefDistributed = totalRefDistributed.add(tokenBought.div(10));\n            } else {//Mainsale rate\n              //100%/20= 5%\n              tokenReward.transfer(_reff,tokenBought.div(20));\n              totalRefDistributed = totalRefDistributed.add(tokenBought.div(20));\n            }\n          }\n        }\n\n        emit LogFundingReceived(user, msg.value, totalRaised, _reff); //Log the purchase\n\n        fundsWallet.transfer(address(this).balance); //Eth is send to fundsWallet\n        emit LogBeneficiaryPaid(fundsWallet); //Log transaction\n\n        checkIfFundingCompleteOrExpired(); //Execute state checks\n    }\n\n\n    /**\n    * @notice tokenBought calculation function\n    * @param _value is the amount of eth multiplied by 1e18\n    */\n    function tokenBuyCalc(uint _value) internal view returns (uint sold,uint remaining) {\n\n      uint256 tempPrice = USDPriceInWei; //0.001$ in wei\n\n      //Determine state to set current price\n      if(state == State.PRESALE){ //Presale price\n\n            tempPrice = tempPrice.mul(400); //0.001$ * 400 = 0.4$\n            sold = _value.div(tempPrice); //here occurs decimal correction\n\n            return (sold,0);\n\n      } else { //state == State.MAINSALE - Mainsale price\n\n            tempPrice = tempPrice.mul(600); //0.001$ * 600 = 0.6$\n            sold = _value.div(tempPrice); //here occurs decimal correction\n\n            return (sold,0);\n\n        }\n}\n\n    /**\n    * @notice Process to check contract current status\n    */\n    function checkIfFundingCompleteOrExpired() public {\n\n        if ( now > SaleDeadline && state != State.Successful){ //If deadline is reached and not yet successful\n\n            state = State.Successful; //ICO becomes Successful\n            completedAt = now; //ICO is complete\n\n            emit LogFundingSuccessful(totalRaised); //we log the finish\n            successful(); //and execute closure\n\n        } else if(state == State.PRESALE && now >= MAINSALEStart ) {\n\n            state = State.MAINSALE; //We get on next stage\n\n        }\n\n    }\n\n    /**\n    * @notice successful closure handler\n    */\n    function successful() public {\n        require(state == State.Successful); //When successful\n\n        uint256 temp = tokenReward.balanceOf(address(this)); //Remanent tokens handle\n\n        tokenReward.transfer(creator,temp); //Transfer remanent tokens\n        emit LogContributorsPayout(creator,temp); //Log transaction\n\n        fundsWallet.transfer(address(this).balance); //Eth is send to fundsWallet\n        emit LogBeneficiaryPaid(fundsWallet); //Log transaction\n    }\n\n    /**\n    * @notice set usd price on wei\n    * @param _value wei value\n    */\n    function setPrice(uint _value, string _price) public onlyAdmin(2) {\n\n      USDPriceInWei = _value;\n      USDPrice = _price;\n\n    }\n\n    /**\n    * @notice Function to claim any token stuck on contract\n    * @param _address Address of target token\n    */\n    function externalTokensRecovery(ERC20Basic _address) onlyAdmin(2) public{\n        require(state == State.Successful); //Only when sale finish\n\n        uint256 remainder = _address.balanceOf(address(this)); //Check remainder tokens\n        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\n\n    }\n\n    /*\n    * @dev Direct payments handler\n    */\n    function () public payable {\n\n        //Forward to contribute function\n        //zero address, no custom value, no referral\n        contribute(address(0),0,address(0));\n\n    }\n}",
        "debug": "calldata_admined_4 + calldata_admined_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x200\ncalldata_admined_0: 0xaf8ea4e300000000000000000000000000000000000000000000000000000000\ncalldatasize_admined: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setPrice(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xfe5acbd46abfc246c3a4f9b0019aae624ff0da98.sol",
        "function": "setPrice(uint256,string)",
        "lineno": 98,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}