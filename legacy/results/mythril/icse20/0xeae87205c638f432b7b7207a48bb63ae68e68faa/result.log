{"error": null, "issues": [{"address": 512, "code": "sg.sender == recipient);\n      require(block.timestamp > excavation);\n\n      // withdraw ether\n      if(this.balance > 0) {\n        uint ethShare = this.balance / (100 / percent);\n        company.transfer(ethShare);\n        uint ethWithdrawal = this.balance;\n        msg.sender.transfer(ethWithdrawal);\n        EtherWithdrawal(ethWithdrawal);\n      }\n\n      // withdraw listed ERC20 tokens\n      for(uint i = 0; i < _tokens.length; i++) {\n        ERC20 token = ERC20(_tokens[i]);\n        uint tokenBalance = token.balanceOf(this);\n        if(tokenBalance > 0) {\n          uint tokenShare = tokenBalance / (100 / percent);\n          token.transfer(company, tokenShare);\n          uint tokenWithdrawal = token.balanceOf(this);\n          token.transfer(recipient, tokenWithdrawal);\n          TokenWithdrawal(_tokens[i], tokenWithdrawal);\n        }\n      }\n    }\n}", "debug": "calldata_ERC20_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20_0: 0xbd5dec9800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `withdraw(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/40/0xeae87205c638f432b7b7207a48bb63ae68e68faa.sol", "function": "withdraw(address[])", "lineno": 63, "title": "Integer Overflow ", "type": "Warning"}, {"address": 830, "code": "hWithdrawal =", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ERC20_0: 0xbd5dec9800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xeae87205c638f432b7b7207a48bb63ae68e68faa.sol", "function": "withdraw(address[])", "lineno": 70, "title": "Exception state", "type": "Informational"}, {"address": 864, "code": "\n        uint ethWithdrawal = ", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x6d\nstorage_1: 0x0\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ERC20_0: 0xbd5dec9800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xeae87205c638f432b7b7207a48bb63ae68e68faa.sol", "function": "withdraw(address[])", "lineno": 69, "title": "Exception state", "type": "Informational"}, {"address": 950, "code": "e;\n        msg.sender.tran", "debug": "", "description": "In the function `withdraw(address[])` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "filename": "/unique_chucks/40/0xeae87205c638f432b7b7207a48bb63ae68e68faa.sol", "function": "withdraw(address[])", "lineno": 70, "title": "Dependence on predictable environment variable", "type": "Warning"}, {"address": 950, "code": "e;\n        msg.sender.tran", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1324\nCall at address: 1047\n", "filename": "/unique_chucks/40/0xeae87205c638f432b7b7207a48bb63ae68e68faa.sol", "function": "withdraw(address[])", "lineno": 70, "title": "Multiple Calls", "type": "Information"}, {"address": 1047, "code": "wal);\n      }\n\n      // withdraw l", "debug": "", "description": "In the function `withdraw(address[])` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "filename": "/unique_chucks/40/0xeae87205c638f432b7b7207a48bb63ae68e68faa.sol", "function": "withdraw(address[])", "lineno": 72, "title": "Dependence on predictable environment variable", "type": "Warning"}, {"address": 1047, "code": "wal);\n      }\n\n      // withdraw l", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1324\n", "filename": "/unique_chucks/40/0xeae87205c638f432b7b7207a48bb63ae68e68faa.sol", "function": "withdraw(address[])", "lineno": 72, "title": "Multiple Calls", "type": "Information"}, {"address": 1324, "code": "re = tokenBalance / (", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/40/0xeae87205c638f432b7b7207a48bb63ae68e68faa.sol", "function": "withdraw(address[])", "lineno": 80, "title": "Message call to external contract", "type": "Warning"}, {"address": 1324, "code": "re = tokenBalance / (", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1619\n", "filename": "/unique_chucks/40/0xeae87205c638f432b7b7207a48bb63ae68e68faa.sol", "function": "withdraw(address[])", "lineno": 80, "title": "Multiple Calls", "type": "Information"}, {"address": 1404, "code": "okenWithdrawa", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\nmem_128 + 32 + 32*calldata_ERC20_4 + calldata_ERC20_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_1324: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20_4 + calldata_ERC20_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ERC20_0: 0xbd5dec9800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\nstorage_3: 0x0\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xeae87205c638f432b7b7207a48bb63ae68e68faa.sol", "function": "withdraw(address[])", "lineno": 82, "title": "Exception state", "type": "Informational"}, {"address": 1415, "code": "          uint tokenWithdrawal", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x6d\nstorage_1: 0x0\nmem_128 + 32 + 32*calldata_ERC20_4 + calldata_ERC20_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_1324: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20_4 + calldata_ERC20_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ERC20_0: 0xbd5dec9800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xeae87205c638f432b7b7207a48bb63ae68e68faa.sol", "function": "withdraw(address[])", "lineno": 82, "title": "Exception state", "type": "Informational"}, {"address": 1619, "code": "nceOf(this);\n          token.transf", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/40/0xeae87205c638f432b7b7207a48bb63ae68e68faa.sol", "function": "withdraw(address[])", "lineno": 82, "title": "Message call to external contract", "type": "Warning"}], "success": true}