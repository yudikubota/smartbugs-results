{
  "contract": "0xcb504e6590f78acd9aa1fbff6c749124facb56a6",
  "tool": "mythril",
  "start": 1563512100.1366136,
  "end": 1563512652.2151034,
  "duration": 552.078489780426,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 3086,
        "code": " _weaponId == 1) {\n       ",
        "debug": "storage_keccac_calldata_KryptoArmy_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_KryptoArmy_0: 0x16a5290c00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncalldata_KryptoArmy_32 + 4: 0x0\ncallvalue: 0x2386f26fc10000\n",
        "description": "A possible integer overflow exists in the function `purchaseWeapons(uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "purchaseWeapons(uint256,uint256,uint256,uint256)",
        "lineno": 106,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3157,
        "code": "eaponId == 2) {\n          ",
        "debug": "storage_keccac_calldata_KryptoArmy_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_KryptoArmy_0: 0x16a5290c00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncalldata_KryptoArmy_32 + 4: 0x1\ncallvalue: 0x58d15e17628000\n",
        "description": "A possible integer overflow exists in the function `purchaseWeapons(uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "purchaseWeapons(uint256,uint256,uint256,uint256)",
        "lineno": 109,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3228,
        "code": "_weaponId == 3) {\n            a",
        "debug": "storage_keccac_calldata_KryptoArmy_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_KryptoArmy_0: 0x16a5290c00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncalldata_KryptoArmy_32 + 4: 0x2\ncallvalue: 0x58d15e17628000\n",
        "description": "A possible integer overflow exists in the function `purchaseWeapons(uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "purchaseWeapons(uint256,uint256,uint256,uint256)",
        "lineno": 112,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3299,
        "code": "d == 4) {\n            arm",
        "debug": "storage_keccac_calldata_KryptoArmy_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_KryptoArmy_0: 0x16a5290c00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncalldata_KryptoArmy_32 + 4: 0x3\ncallvalue: 0x9fdf42f6e48000\n",
        "description": "A possible integer overflow exists in the function `purchaseWeapons(uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "purchaseWeapons(uint256,uint256,uint256,uint256)",
        "lineno": 115,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3371,
        "code": "_weaponId == 5) {\n            armySu",
        "debug": "storage_keccac_calldata_KryptoArmy_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_KryptoArmy_0: 0x16a5290c00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncalldata_KryptoArmy_32 + 4: 0x4\ncallvalue: 0x16345785d8a0000\n",
        "description": "A possible integer overflow exists in the function `purchaseWeapons(uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "purchaseWeapons(uint256,uint256,uint256,uint256)",
        "lineno": 118,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3443,
        "code": " == 6) {\n            armySatel",
        "debug": "storage_keccac_calldata_KryptoArmy_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_KryptoArmy_0: 0x16a5290c00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncalldata_KryptoArmy_32 + 4: 0x5\ncallvalue: 0x16345785d8a0000\n",
        "description": "A possible integer overflow exists in the function `purchaseWeapons(uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "purchaseWeapons(uint256,uint256,uint256,uint256)",
        "lineno": 121,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3515,
        "code": "valid\n        if(isValid == 1",
        "debug": "storage_keccac_calldata_KryptoArmy_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_KryptoArmy_0: 0x16a5290c00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncalldata_KryptoArmy_32 + 4: 0x6\ncallvalue: 0x1aa535d3d0c0000\n",
        "description": "A possible integer overflow exists in the function `purchaseWeapons(uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "purchaseWeapons(uint256,uint256,uint256,uint256)",
        "lineno": 126,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3555,
        "code": "ense;\n        }",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_KryptoArmy_4: 0x0\nstorage_2: 0x0\ncalldata_KryptoArmy_0: 0x16a5290c00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncalldata_KryptoArmy_32 + 4: 0x0\ncallvalue: 0x2386f26fc10000\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "purchaseWeapons(uint256,uint256,uint256,uint256)",
        "lineno": 129,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3575,
        "code": "ense;\n        }\n    }\n\n    // We use this ",
        "debug": "storage_4 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n8*calldata_KryptoArmy_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_KryptoArmy_32 + 36: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_KryptoArmy_4: 0x0\nstorage_2: 0x1\ncalldata_KryptoArmy_0: 0x16a5290c00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncalldata_KryptoArmy_32 + 4: 0x0\ncallvalue: 0x2386f26fc10000\n",
        "description": "A possible integer overflow exists in the function `purchaseWeapons(uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "purchaseWeapons(uint256,uint256,uint256,uint256)",
        "lineno": 129,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3646,
        "code": " someone purchase an army)\n    function _own",
        "debug": "storage_5 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n8*calldata_KryptoArmy_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_KryptoArmy_32 + 68: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_KryptoArmy_4: 0x0\nstorage_2: 0x1\ncalldata_KryptoArmy_0: 0x16a5290c00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncalldata_KryptoArmy_32 + 4: 0x0\ncallvalue: 0x2386f26fc10000\n",
        "description": "A possible integer overflow exists in the function `purchaseWeapons(uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "purchaseWeapons(uint256,uint256,uint256,uint256)",
        "lineno": 133,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3708,
        "code": "Count[armyId];",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_KryptoArmy_4: 0x0\nstorage_2: 0x0\ncalldata_KryptoArmy_0: 0x20f756bd00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "getArmySoldiersCount(uint256)",
        "lineno": 254,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3754,
        "code": "  \n        // W",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_KryptoArmy_4: 0x0\nstorage_2: 0x0\ncalldata_KryptoArmy_0: 0x24038d2e00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "purchaseArmy(uint256)",
        "lineno": 65,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4219,
        "code": "    return (Ar",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_2: 0x0\ncalldata_KryptoArmy_0: 0x42ed00da00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "getSenderArmyDetails()",
        "lineno": 243,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4964,
        "code": ";\n\ncontract Krypto",
        "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_KryptoArmy_0: 0x5768bc4a00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_createArmy(string,string,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "_createArmy(string,string,uint256,uint256,uint256)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5016,
        "code": ", _defenseBonus, true, address(this), 0));\n    }\n\n    // We use this function to purchase an army",
        "debug": "mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_32 + 4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_KryptoArmy_0: 0x5768bc4a00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_createArmy(string,string,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "_createArmy(string,string,uint256,uint256,uint256)",
        "lineno": 57,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5344,
        "code": " public view retu",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_KryptoArmy_4: 0x0\nstorage_3: 0x0\ncalldata_KryptoArmy_0: 0x639cba6e00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "getDetailsBattles(uint256)",
        "lineno": 278,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5475,
        "code": "tract\n    function withdraw(uint amount, ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_KryptoArmy_4: 0x0\nstorage_0 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n3*calldata_KryptoArmy_4: 0x0\nstorage_2: 0x0\nstorage_3: 0x1\ncalldata_KryptoArmy_0: 0x639cba6e00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "getDetailsBattles(uint256)",
        "lineno": 282,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5539,
        "code": " public onlyCeo returns(bool) {\n        r",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_KryptoArmy_4: 0x0\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n3*calldata_KryptoArmy_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n3*calldata_KryptoArmy_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_3: 0x1\ncalldata_KryptoArmy_0: 0x639cba6e00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "getDetailsBattles(uint256)",
        "lineno": 283,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 9283,
        "code": "      ownerToArmy[msg.sender] = armyId;\n\n    ",
        "debug": "storage_6 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n8*calldata_KryptoArmy_4: 0xffffffffffffffffffdfffffffffffffffffffff00\ncalldata_KryptoArmy_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_6_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n8*calldata_KryptoArmy_4,\n_____256): 0x0\nretval_4047: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x1\ncalldata_KryptoArmy_0: 0x24038d2e00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_3 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n8*calldata_KryptoArmy_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n",
        "description": "A possible integer underflow exists in the function `purchaseArmy(uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "purchaseArmy(uint256)",
        "lineno": 150,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 9629,
        "code": "ntract KryptoArmy {\n\n    address ceoAddress = 0x46d9112533ef677059c430E515775e358888e38b;\n    address cfoAddress = 0x23a49A9930f5b562c6B1096C3e6b5BEc133E8B2E;\n\n    modifier onlyCeo() {\n        require (msg.sender == ceoAddress);\n        _;\n    }\n\n    // Struct for Army\n    struct Army {\n        string name;            // The name of the army (invented by the user)\n        string idArmy;          // The id of the army (USA for United States)\n        uint experiencePoints;  // The experience points of the army, we will use this to handle\n        uint256 price;          // The cost of the Army in Wei (1 ETH = 1000000000000000000 Wei) \n        uint attackBonus;       // The attack bonus for the soldiers (from 0 to 10)\n        uint defenseBonus;      // The defense bonus for the soldiers (from 0 to 10)\n        bool isForSale;         // User is selling this army, it can be purchase on the marketplace\n        address ownerAddress;   // The address of the owner\n        uint soldiersCount;     // The count of all the soldiers in this army\n    } \n    Army[] armies;\n    \n    // Struct for Battles\n    struct Battle {\n        uint idArmyAttacking;   // The id of the army attacking\n        uint idArmyDefensing;   // The id of the army defensing\n        uint idArmyVictorious;  // The id of the winning army\n    } \n\n    Battle[] battles;\n\n    // Mapping army\n    mapping (address => uint) public ownerToArmy;       // Which army does this address own\n    mapping (address => uint) public ownerArmyCount;    // How many armies own this address?\n\n    // Mapping weapons to army\n    mapping (uint => uint) public armyDronesCount;\n    mapping (uint => uint) public armyPlanesCount;\n    mapping (uint => uint) public armyHelicoptersCount;\n    mapping (uint => uint) public armyTanksCount;\n    mapping (uint => uint) public armyAircraftCarriersCount;\n    mapping (uint => uint) public armySubmarinesCount;\n    mapping (uint => uint) public armySatelitesCount;\n\n    // Mapping battles\n    mapping (uint => uint) public armyCountBattlesWon;\n    mapping (uint => uint) public armyCountBattlesLost;\n\n    // This function creates a new army and saves it in the array with its parameters\n    function _createArmy(string _name, string _idArmy, uint _price, uint _attackBonus, uint _defenseBonus) public onlyCeo {\n\n        // We add the new army to the list and save the id in a variable \n        armies.push(Army(_name, _idArmy, 0, _price, _attackBonus, _defenseBonus, true, address(this), 0));\n    }\n\n    // We use this function to purchase an army with Metamask\n    function purchaseArmy(uint _armyId) public payable {\n        // We verify that the value paid is equal to the cost of the army\n        require(msg.value == armies[_armyId].price);\n        require(msg.value > 0);\n        \n        // We check if this army is owned by another user\n        if(armies[_armyId].ownerAddress != address(this)) {\n            uint CommissionOwnerValue = msg.value - (msg.value / 10);\n            armies[_armyId].ownerAddress.transfer(CommissionOwnerValue);\n        }\n\n        // We modify the ownership of the army\n        _ownershipArmy(_armyId);\n    }\n\n    // Function to purchase a soldier\n    function purchaseSoldiers(uint _armyId, uint _countSoldiers) public payable {\n        // Check that message value > 0\n        require(msg.value > 0);\n        uint256 msgValue = msg.value;\n\n        if(msgValue == 1000000000000000 && _countSoldiers == 1) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        } else if(msgValue == 8000000000000000 && _countSoldiers == 10) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        } else if(msgValue == 65000000000000000 && _countSoldiers == 100) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        } else if(msgValue == 500000000000000000 && _countSoldiers == 1000) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        }\n    }\n\n    // Payable function to purchase weapons\n    function purchaseWeapons(uint _armyId, uint _weaponId, uint _bonusAttack, uint _bonusDefense ) public payable {\n        // Check that message value > 0\n        uint isValid = 0;\n        uint256 msgValue = msg.value;\n\n        if(msgValue == 10000000000000000 && _weaponId == 0) {\n            armyDronesCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 25000000000000000 && _weaponId == 1) {\n             armyPlanesCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 25000000000000000 && _weaponId == 2) {\n            armyHelicoptersCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 45000000000000000 && _weaponId == 3) {\n            armyTanksCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 100000000000000000 && _weaponId == 4) {\n            armyAircraftCarriersCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 100000000000000000 && _weaponId == 5) {\n            armySubmarinesCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 120000000000000000 && _weaponId == 6) {\n            armySatelitesCount[_armyId]++;\n            isValid = 1;\n        } \n\n        // We check if the data has been verified as valid\n        if(isValid == 1) {\n            armies[_armyId].attackBonus = armies[_armyId].attackBonus + _bonusAttack;\n            armies[_armyId].defenseBonus = armies[_armyId].defenseBonus + _bonusDefense;\n        }\n    }\n\n    // We use this function to affect an army to an address (when someone purchase an army)\n    function _ownershipArmy(uint armyId) private {\n\n        // We check if the sender already own an army\n        require (ownerArmyCount[msg.sender] == 0);\n\n        // If this army has alreay been purchased we verify that the owner put it on sale\n        require(armies[armyId].isForSale == true);\n        \n        // We check one more time that the price paid is the price of the army\n        require(armies[armyId].price == msg.value);\n\n        // We decrement the army count for the previous owner (in case a user is selling army on marketplace)\n        ownerArmyCount[armies[armyId].ownerAddress]--;\n        \n        // We set the new army owner\n        armies[armyId].ownerAddress = msg.sender;\n        ownerToArmy[msg.sender] = armyId;\n\n        // We increment the army count for this address\n        ownerArmyCount[msg.sender]++;\n\n        // Send event for new ownership\n        armies[armyId].isForSale = false;\n    }\n\n    // We use this function to start a new battle\n    function startNewBattle(uint _idArmyAttacking, uint _idArmyDefensing, uint _randomIndicatorAttack, uint _randomIndicatorDefense) public returns(uint) {\n\n        // We verify that the army attacking is the army of msg.sender\n        require (armies[_idArmyAttacking].ownerAddress == msg.sender);\n\n        // Get details for army attacking\n        uint ScoreAttack = armies[_idArmyAttacking].attackBonus * (armies[_idArmyAttacking].soldiersCount/3) + armies[_idArmyAttacking].soldiersCount  + _randomIndicatorAttack; \n\n        // Get details for army defending\n        uint ScoreDefense = armies[_idArmyAttacking].defenseBonus * (armies[_idArmyDefensing].soldiersCount/2) + armies[_idArmyDefensing].soldiersCount + _randomIndicatorDefense; \n\n        uint VictoriousArmy;\n        uint ExperiencePointsGained;\n        if(ScoreDefense >= ScoreAttack) {\n            VictoriousArmy = _idArmyDefensing;\n            ExperiencePointsGained = armies[_idArmyAttacking].attackBonus + 2;\n            armies[_idArmyDefensing].experiencePoints = armies[_idArmyDefensing].experiencePoints + ExperiencePointsGained;\n\n            // Increment mapping battles won\n            armyCountBattlesWon[_idArmyDefensing]++;\n            armyCountBattlesLost[_idArmyAttacking]++;\n        } else {\n            VictoriousArmy = _idArmyAttacking;\n            ExperiencePointsGained = armies[_idArmyDefensing].defenseBonus + 2;\n            armies[_idArmyAttacking].experiencePoints = armies[_idArmyAttacking].experiencePoints + ExperiencePointsGained;\n\n            // Increment mapping battles won\n            armyCountBattlesWon[_idArmyAttacking]++;\n            armyCountBattlesLost[_idArmyDefensing]++;\n        }\n        \n        // We add the new battle to the blockchain and save its id in a variable \n        battles.push(Battle(_idArmyAttacking, _idArmyDefensing, VictoriousArmy));  \n        \n        // Send event\n        return (VictoriousArmy);\n    }\n\n    // Owner can sell army\n    function ownerSellArmy(uint _armyId, uint256 _amount) public {\n        // We close the function if the user calling this function doesn't own the army\n        require (armies[_armyId].ownerAddress == msg.sender);\n        require (_amount > 0);\n        require (armies[_armyId].isForSale == false);\n\n        armies[_armyId].isForSale = true;\n        armies[_armyId].price = _amount;\n    }\n    \n    // Owner remove army from marketplace\n    function ownerCancelArmyMarketplace(uint _armyId) public {\n        require (armies[_armyId].ownerAddress == msg.sender);\n        require (armies[_armyId].isForSale == true);\n        armies[_armyId].isForSale = false;\n    }\n\n    // Function to return all the value of an army\n    function getArmyFullData(uint armyId) public view returns(string, string, uint, uint256, uint, uint, bool) {\n        string storage ArmyName = armies[armyId].name;\n        string storage ArmyId = armies[armyId].idArmy;\n        uint ArmyExperiencePoints = armies[armyId].experiencePoints;\n        uint256 ArmyPrice = armies[armyId].price;\n        uint ArmyAttack = armies[armyId].attackBonus;\n        uint ArmyDefense = armies[armyId].defenseBonus;\n        bool ArmyIsForSale = armies[armyId].isForSale;\n        return (ArmyName, ArmyId, ArmyExperiencePoints, ArmyPrice, ArmyAttack, ArmyDefense, ArmyIsForSale);\n    }\n\n    // Function to return the owner of the army\n    function getArmyOwner(uint armyId) public view returns(address, bool) {\n        return (armies[armyId].ownerAddress, armies[armyId].isForSale);\n    }\n\n    // Function to return the owner of the army\n    function getSenderArmyDetails() public view returns(uint, string) {\n        uint ArmyId = ownerToArmy[msg.sender];\n        string storage ArmyName = armies[ArmyId].name;\n        return (ArmyId, ArmyName);\n    }\n    \n    // Function to return the owner army count\n    function getSenderArmyCount() public view returns(uint) {\n        uint ArmiesCount = ownerArmyCount[msg.sender];\n        return (ArmiesCount);\n    }\n\n    // Function to return the soldiers count of an army\n    function getArmySoldiersCount(uint armyId) public view returns(uint) {\n        uint SoldiersCount = armies[armyId].soldiersCount;\n        return (SoldiersCount);\n    }\n\n    // Return an array with the weapons of the army\n    function getWeaponsArmy1(uint armyId) public view returns(uint, uint, uint, uint)  {\n        uint CountDrones = armyDronesCount[armyId];\n        uint CountPlanes = armyPlanesCount[armyId];\n        uint CountHelicopters = armyHelicoptersCount[armyId];\n        uint CountTanks = armyTanksCount[armyId];\n        return (CountDrones, CountPlanes, CountHelicopters, CountTanks);\n    }\n    function getWeaponsArmy2(uint armyId) public view returns(uint, uint, uint)  {\n        uint CountAircraftCarriers = armyAircraftCarriersCount[armyId];\n        uint CountSubmarines = armySubmarinesCount[armyId];\n        uint CountSatelites = armySatelitesCount[armyId];\n        return (CountAircraftCarriers, CountSubmarines, CountSatelites);\n    }\n\n    // Retrieve count battles won\n    function getArmyBattles(uint _armyId) public view returns(uint, uint) {\n        return (armyCountBattlesWon[_armyId], armyCountBattlesLost[_armyId]);\n    }\n    \n    // Retrieve the details of a battle\n    function getDetailsBattles(uint battleId) public view returns(uint, uint, uint, string, string) {\n        return (battles[battleId].idArmyAttacking, battles[battleId].idArmyDefensing, battles[battleId].idArmyVictorious, armies[battles[battleId].idArmyAttacking].idArmy, armies[battles[battleId].idArmyDefensing].idArmy);\n    }\n    \n    // Get battles count\n    function getBattlesCount() public view returns(uint) {\n        return (battles.length);\n    }\n\n    // To withdraw fund from this contract\n    function withdraw(uint amount, uint who) public onlyCeo returns(bool) {\n        require(amount <= this.balance);\n        if(who == 0) {\n            ceoAddress.transfer(amount);\n        } else {\n            cfoAddress.transfer(amount);\n        }\n        \n        return true;\n    }\n    \n    // Initial function to create the 100 armies with their attributes\n    function KryptoArmy() public onlyCeo {\n\n      // 1. USA\n        _createArmy(\"United States\", \"USA\", 550000000000000000, 8, 9);\n\n        // 2. North Korea\n        _createArmy(\"North Korea\", \"NK\", 500000000000000000, 10, 5);\n\n        // 3. Russia\n        _createArmy(\"Russia\", \"RUS\", 450000000000000000, 8, 7);\n\n        // 4. China\n        _createArmy(\"China\", \"CHN\", 450000000000000000, 7, 8);\n\n        // 5. Japan\n        _createArmy(\"Japan\", \"JPN\", 420000000000000000, 7, 7);\n\n        // 6. France\n        _createArmy(\"France\", \"FRA\", 400000000000000000, 6, 8);\n\n        // 7. Germany\n        _createArmy(\"Germany\", \"GER\", 400000000000000000, 7, 6);\n\n        // 8. India\n        _createArmy(\"India\", \"IND\", 400000000000000000, 7, 6);\n\n        // 9. United Kingdom\n        _createArmy(\"United Kingdom\", \"UK\", 350000000000000000, 5, 7);\n\n        // 10. South Korea\n        _createArmy(\"South Korea\", \"SK\", 350000000000000000, 6, 6);\n\n        // 11. Turkey\n        _createArmy(\"Turkey\", \"TUR\", 300000000000000000, 7, 4);\n\n        // 12. Italy\n        //_createArmy(\"Italy\", \"ITA\", 280000000000000000, 5, 5);\n    }\n}",
        "debug": "keccac_0_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n8*storage_2: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_0 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n8*storage_2: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_0: 0x0\ncaller: 0x0\ncalldata_KryptoArmy_0: 0x5768bc4a00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_createArmy(string,string,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "_createArmy(string,string,uint256,uint256,uint256)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9658,
        "code": "ntract KryptoArmy {\n\n    address ceoAddress = 0x46d9112533ef677059c430E515775e358888e38b;\n    address cfoAddress = 0x23a49A9930f5b562c6B1096C3e6b5BEc133E8B2E;\n\n    modifier onlyCeo() {\n        require (msg.sender == ceoAddress);\n        _;\n    }\n\n    // Struct for Army\n    struct Army {\n        string name;            // The name of the army (invented by the user)\n        string idArmy;          // The id of the army (USA for United States)\n        uint experiencePoints;  // The experience points of the army, we will use this to handle\n        uint256 price;          // The cost of the Army in Wei (1 ETH = 1000000000000000000 Wei) \n        uint attackBonus;       // The attack bonus for the soldiers (from 0 to 10)\n        uint defenseBonus;      // The defense bonus for the soldiers (from 0 to 10)\n        bool isForSale;         // User is selling this army, it can be purchase on the marketplace\n        address ownerAddress;   // The address of the owner\n        uint soldiersCount;     // The count of all the soldiers in this army\n    } \n    Army[] armies;\n    \n    // Struct for Battles\n    struct Battle {\n        uint idArmyAttacking;   // The id of the army attacking\n        uint idArmyDefensing;   // The id of the army defensing\n        uint idArmyVictorious;  // The id of the winning army\n    } \n\n    Battle[] battles;\n\n    // Mapping army\n    mapping (address => uint) public ownerToArmy;       // Which army does this address own\n    mapping (address => uint) public ownerArmyCount;    // How many armies own this address?\n\n    // Mapping weapons to army\n    mapping (uint => uint) public armyDronesCount;\n    mapping (uint => uint) public armyPlanesCount;\n    mapping (uint => uint) public armyHelicoptersCount;\n    mapping (uint => uint) public armyTanksCount;\n    mapping (uint => uint) public armyAircraftCarriersCount;\n    mapping (uint => uint) public armySubmarinesCount;\n    mapping (uint => uint) public armySatelitesCount;\n\n    // Mapping battles\n    mapping (uint => uint) public armyCountBattlesWon;\n    mapping (uint => uint) public armyCountBattlesLost;\n\n    // This function creates a new army and saves it in the array with its parameters\n    function _createArmy(string _name, string _idArmy, uint _price, uint _attackBonus, uint _defenseBonus) public onlyCeo {\n\n        // We add the new army to the list and save the id in a variable \n        armies.push(Army(_name, _idArmy, 0, _price, _attackBonus, _defenseBonus, true, address(this), 0));\n    }\n\n    // We use this function to purchase an army with Metamask\n    function purchaseArmy(uint _armyId) public payable {\n        // We verify that the value paid is equal to the cost of the army\n        require(msg.value == armies[_armyId].price);\n        require(msg.value > 0);\n        \n        // We check if this army is owned by another user\n        if(armies[_armyId].ownerAddress != address(this)) {\n            uint CommissionOwnerValue = msg.value - (msg.value / 10);\n            armies[_armyId].ownerAddress.transfer(CommissionOwnerValue);\n        }\n\n        // We modify the ownership of the army\n        _ownershipArmy(_armyId);\n    }\n\n    // Function to purchase a soldier\n    function purchaseSoldiers(uint _armyId, uint _countSoldiers) public payable {\n        // Check that message value > 0\n        require(msg.value > 0);\n        uint256 msgValue = msg.value;\n\n        if(msgValue == 1000000000000000 && _countSoldiers == 1) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        } else if(msgValue == 8000000000000000 && _countSoldiers == 10) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        } else if(msgValue == 65000000000000000 && _countSoldiers == 100) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        } else if(msgValue == 500000000000000000 && _countSoldiers == 1000) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        }\n    }\n\n    // Payable function to purchase weapons\n    function purchaseWeapons(uint _armyId, uint _weaponId, uint _bonusAttack, uint _bonusDefense ) public payable {\n        // Check that message value > 0\n        uint isValid = 0;\n        uint256 msgValue = msg.value;\n\n        if(msgValue == 10000000000000000 && _weaponId == 0) {\n            armyDronesCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 25000000000000000 && _weaponId == 1) {\n             armyPlanesCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 25000000000000000 && _weaponId == 2) {\n            armyHelicoptersCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 45000000000000000 && _weaponId == 3) {\n            armyTanksCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 100000000000000000 && _weaponId == 4) {\n            armyAircraftCarriersCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 100000000000000000 && _weaponId == 5) {\n            armySubmarinesCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 120000000000000000 && _weaponId == 6) {\n            armySatelitesCount[_armyId]++;\n            isValid = 1;\n        } \n\n        // We check if the data has been verified as valid\n        if(isValid == 1) {\n            armies[_armyId].attackBonus = armies[_armyId].attackBonus + _bonusAttack;\n            armies[_armyId].defenseBonus = armies[_armyId].defenseBonus + _bonusDefense;\n        }\n    }\n\n    // We use this function to affect an army to an address (when someone purchase an army)\n    function _ownershipArmy(uint armyId) private {\n\n        // We check if the sender already own an army\n        require (ownerArmyCount[msg.sender] == 0);\n\n        // If this army has alreay been purchased we verify that the owner put it on sale\n        require(armies[armyId].isForSale == true);\n        \n        // We check one more time that the price paid is the price of the army\n        require(armies[armyId].price == msg.value);\n\n        // We decrement the army count for the previous owner (in case a user is selling army on marketplace)\n        ownerArmyCount[armies[armyId].ownerAddress]--;\n        \n        // We set the new army owner\n        armies[armyId].ownerAddress = msg.sender;\n        ownerToArmy[msg.sender] = armyId;\n\n        // We increment the army count for this address\n        ownerArmyCount[msg.sender]++;\n\n        // Send event for new ownership\n        armies[armyId].isForSale = false;\n    }\n\n    // We use this function to start a new battle\n    function startNewBattle(uint _idArmyAttacking, uint _idArmyDefensing, uint _randomIndicatorAttack, uint _randomIndicatorDefense) public returns(uint) {\n\n        // We verify that the army attacking is the army of msg.sender\n        require (armies[_idArmyAttacking].ownerAddress == msg.sender);\n\n        // Get details for army attacking\n        uint ScoreAttack = armies[_idArmyAttacking].attackBonus * (armies[_idArmyAttacking].soldiersCount/3) + armies[_idArmyAttacking].soldiersCount  + _randomIndicatorAttack; \n\n        // Get details for army defending\n        uint ScoreDefense = armies[_idArmyAttacking].defenseBonus * (armies[_idArmyDefensing].soldiersCount/2) + armies[_idArmyDefensing].soldiersCount + _randomIndicatorDefense; \n\n        uint VictoriousArmy;\n        uint ExperiencePointsGained;\n        if(ScoreDefense >= ScoreAttack) {\n            VictoriousArmy = _idArmyDefensing;\n            ExperiencePointsGained = armies[_idArmyAttacking].attackBonus + 2;\n            armies[_idArmyDefensing].experiencePoints = armies[_idArmyDefensing].experiencePoints + ExperiencePointsGained;\n\n            // Increment mapping battles won\n            armyCountBattlesWon[_idArmyDefensing]++;\n            armyCountBattlesLost[_idArmyAttacking]++;\n        } else {\n            VictoriousArmy = _idArmyAttacking;\n            ExperiencePointsGained = armies[_idArmyDefensing].defenseBonus + 2;\n            armies[_idArmyAttacking].experiencePoints = armies[_idArmyAttacking].experiencePoints + ExperiencePointsGained;\n\n            // Increment mapping battles won\n            armyCountBattlesWon[_idArmyAttacking]++;\n            armyCountBattlesLost[_idArmyDefensing]++;\n        }\n        \n        // We add the new battle to the blockchain and save its id in a variable \n        battles.push(Battle(_idArmyAttacking, _idArmyDefensing, VictoriousArmy));  \n        \n        // Send event\n        return (VictoriousArmy);\n    }\n\n    // Owner can sell army\n    function ownerSellArmy(uint _armyId, uint256 _amount) public {\n        // We close the function if the user calling this function doesn't own the army\n        require (armies[_armyId].ownerAddress == msg.sender);\n        require (_amount > 0);\n        require (armies[_armyId].isForSale == false);\n\n        armies[_armyId].isForSale = true;\n        armies[_armyId].price = _amount;\n    }\n    \n    // Owner remove army from marketplace\n    function ownerCancelArmyMarketplace(uint _armyId) public {\n        require (armies[_armyId].ownerAddress == msg.sender);\n        require (armies[_armyId].isForSale == true);\n        armies[_armyId].isForSale = false;\n    }\n\n    // Function to return all the value of an army\n    function getArmyFullData(uint armyId) public view returns(string, string, uint, uint256, uint, uint, bool) {\n        string storage ArmyName = armies[armyId].name;\n        string storage ArmyId = armies[armyId].idArmy;\n        uint ArmyExperiencePoints = armies[armyId].experiencePoints;\n        uint256 ArmyPrice = armies[armyId].price;\n        uint ArmyAttack = armies[armyId].attackBonus;\n        uint ArmyDefense = armies[armyId].defenseBonus;\n        bool ArmyIsForSale = armies[armyId].isForSale;\n        return (ArmyName, ArmyId, ArmyExperiencePoints, ArmyPrice, ArmyAttack, ArmyDefense, ArmyIsForSale);\n    }\n\n    // Function to return the owner of the army\n    function getArmyOwner(uint armyId) public view returns(address, bool) {\n        return (armies[armyId].ownerAddress, armies[armyId].isForSale);\n    }\n\n    // Function to return the owner of the army\n    function getSenderArmyDetails() public view returns(uint, string) {\n        uint ArmyId = ownerToArmy[msg.sender];\n        string storage ArmyName = armies[ArmyId].name;\n        return (ArmyId, ArmyName);\n    }\n    \n    // Function to return the owner army count\n    function getSenderArmyCount() public view returns(uint) {\n        uint ArmiesCount = ownerArmyCount[msg.sender];\n        return (ArmiesCount);\n    }\n\n    // Function to return the soldiers count of an army\n    function getArmySoldiersCount(uint armyId) public view returns(uint) {\n        uint SoldiersCount = armies[armyId].soldiersCount;\n        return (SoldiersCount);\n    }\n\n    // Return an array with the weapons of the army\n    function getWeaponsArmy1(uint armyId) public view returns(uint, uint, uint, uint)  {\n        uint CountDrones = armyDronesCount[armyId];\n        uint CountPlanes = armyPlanesCount[armyId];\n        uint CountHelicopters = armyHelicoptersCount[armyId];\n        uint CountTanks = armyTanksCount[armyId];\n        return (CountDrones, CountPlanes, CountHelicopters, CountTanks);\n    }\n    function getWeaponsArmy2(uint armyId) public view returns(uint, uint, uint)  {\n        uint CountAircraftCarriers = armyAircraftCarriersCount[armyId];\n        uint CountSubmarines = armySubmarinesCount[armyId];\n        uint CountSatelites = armySatelitesCount[armyId];\n        return (CountAircraftCarriers, CountSubmarines, CountSatelites);\n    }\n\n    // Retrieve count battles won\n    function getArmyBattles(uint _armyId) public view returns(uint, uint) {\n        return (armyCountBattlesWon[_armyId], armyCountBattlesLost[_armyId]);\n    }\n    \n    // Retrieve the details of a battle\n    function getDetailsBattles(uint battleId) public view returns(uint, uint, uint, string, string) {\n        return (battles[battleId].idArmyAttacking, battles[battleId].idArmyDefensing, battles[battleId].idArmyVictorious, armies[battles[battleId].idArmyAttacking].idArmy, armies[battles[battleId].idArmyDefensing].idArmy);\n    }\n    \n    // Get battles count\n    function getBattlesCount() public view returns(uint) {\n        return (battles.length);\n    }\n\n    // To withdraw fund from this contract\n    function withdraw(uint amount, uint who) public onlyCeo returns(bool) {\n        require(amount <= this.balance);\n        if(who == 0) {\n            ceoAddress.transfer(amount);\n        } else {\n            cfoAddress.transfer(amount);\n        }\n        \n        return true;\n    }\n    \n    // Initial function to create the 100 armies with their attributes\n    function KryptoArmy() public onlyCeo {\n\n      // 1. USA\n        _createArmy(\"United States\", \"USA\", 550000000000000000, 8, 9);\n\n        // 2. North Korea\n        _createArmy(\"North Korea\", \"NK\", 500000000000000000, 10, 5);\n\n        // 3. Russia\n        _createArmy(\"Russia\", \"RUS\", 450000000000000000, 8, 7);\n\n        // 4. China\n        _createArmy(\"China\", \"CHN\", 450000000000000000, 7, 8);\n\n        // 5. Japan\n        _createArmy(\"Japan\", \"JPN\", 420000000000000000, 7, 7);\n\n        // 6. France\n        _createArmy(\"France\", \"FRA\", 400000000000000000, 6, 8);\n\n        // 7. Germany\n        _createArmy(\"Germany\", \"GER\", 400000000000000000, 7, 6);\n\n        // 8. India\n        _createArmy(\"India\", \"IND\", 400000000000000000, 7, 6);\n\n        // 9. United Kingdom\n        _createArmy(\"United Kingdom\", \"UK\", 350000000000000000, 5, 7);\n\n        // 10. South Korea\n        _createArmy(\"South Korea\", \"SK\", 350000000000000000, 6, 6);\n\n        // 11. Turkey\n        _createArmy(\"Turkey\", \"TUR\", 300000000000000000, 7, 4);\n\n        // 12. Italy\n        //_createArmy(\"Italy\", \"ITA\", 280000000000000000, 5, 5);\n    }\n}",
        "debug": "mem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_32 + 4)) +\n32: 0x8000000000000000000000000000000000000000000000000000000000000000\nkeccac_0_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n8*storage_2: 0xfe6c3882c8c219105b1269338c14a907b57fe56d7e7402ce023400000973b6fb\nstorage_0 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n8*storage_2: 0xfde7dbef9fbcee952ba2fefcee7f3f46f6fffcffffffffffffffffffffffffc5\nmem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_32 + 4)) +\n0: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_KryptoArmy_0: 0x5768bc4a00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_createArmy(string,string,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "_createArmy(string,string,uint256,uint256,uint256)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9672,
        "code": "ntract KryptoArmy {\n\n    address ceoAddress = 0x46d9112533ef677059c430E515775e358888e38b;\n    address cfoAddress = 0x23a49A9930f5b562c6B1096C3e6b5BEc133E8B2E;\n\n    modifier onlyCeo() {\n        require (msg.sender == ceoAddress);\n        _;\n    }\n\n    // Struct for Army\n    struct Army {\n        string name;            // The name of the army (invented by the user)\n        string idArmy;          // The id of the army (USA for United States)\n        uint experiencePoints;  // The experience points of the army, we will use this to handle\n        uint256 price;          // The cost of the Army in Wei (1 ETH = 1000000000000000000 Wei) \n        uint attackBonus;       // The attack bonus for the soldiers (from 0 to 10)\n        uint defenseBonus;      // The defense bonus for the soldiers (from 0 to 10)\n        bool isForSale;         // User is selling this army, it can be purchase on the marketplace\n        address ownerAddress;   // The address of the owner\n        uint soldiersCount;     // The count of all the soldiers in this army\n    } \n    Army[] armies;\n    \n    // Struct for Battles\n    struct Battle {\n        uint idArmyAttacking;   // The id of the army attacking\n        uint idArmyDefensing;   // The id of the army defensing\n        uint idArmyVictorious;  // The id of the winning army\n    } \n\n    Battle[] battles;\n\n    // Mapping army\n    mapping (address => uint) public ownerToArmy;       // Which army does this address own\n    mapping (address => uint) public ownerArmyCount;    // How many armies own this address?\n\n    // Mapping weapons to army\n    mapping (uint => uint) public armyDronesCount;\n    mapping (uint => uint) public armyPlanesCount;\n    mapping (uint => uint) public armyHelicoptersCount;\n    mapping (uint => uint) public armyTanksCount;\n    mapping (uint => uint) public armyAircraftCarriersCount;\n    mapping (uint => uint) public armySubmarinesCount;\n    mapping (uint => uint) public armySatelitesCount;\n\n    // Mapping battles\n    mapping (uint => uint) public armyCountBattlesWon;\n    mapping (uint => uint) public armyCountBattlesLost;\n\n    // This function creates a new army and saves it in the array with its parameters\n    function _createArmy(string _name, string _idArmy, uint _price, uint _attackBonus, uint _defenseBonus) public onlyCeo {\n\n        // We add the new army to the list and save the id in a variable \n        armies.push(Army(_name, _idArmy, 0, _price, _attackBonus, _defenseBonus, true, address(this), 0));\n    }\n\n    // We use this function to purchase an army with Metamask\n    function purchaseArmy(uint _armyId) public payable {\n        // We verify that the value paid is equal to the cost of the army\n        require(msg.value == armies[_armyId].price);\n        require(msg.value > 0);\n        \n        // We check if this army is owned by another user\n        if(armies[_armyId].ownerAddress != address(this)) {\n            uint CommissionOwnerValue = msg.value - (msg.value / 10);\n            armies[_armyId].ownerAddress.transfer(CommissionOwnerValue);\n        }\n\n        // We modify the ownership of the army\n        _ownershipArmy(_armyId);\n    }\n\n    // Function to purchase a soldier\n    function purchaseSoldiers(uint _armyId, uint _countSoldiers) public payable {\n        // Check that message value > 0\n        require(msg.value > 0);\n        uint256 msgValue = msg.value;\n\n        if(msgValue == 1000000000000000 && _countSoldiers == 1) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        } else if(msgValue == 8000000000000000 && _countSoldiers == 10) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        } else if(msgValue == 65000000000000000 && _countSoldiers == 100) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        } else if(msgValue == 500000000000000000 && _countSoldiers == 1000) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        }\n    }\n\n    // Payable function to purchase weapons\n    function purchaseWeapons(uint _armyId, uint _weaponId, uint _bonusAttack, uint _bonusDefense ) public payable {\n        // Check that message value > 0\n        uint isValid = 0;\n        uint256 msgValue = msg.value;\n\n        if(msgValue == 10000000000000000 && _weaponId == 0) {\n            armyDronesCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 25000000000000000 && _weaponId == 1) {\n             armyPlanesCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 25000000000000000 && _weaponId == 2) {\n            armyHelicoptersCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 45000000000000000 && _weaponId == 3) {\n            armyTanksCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 100000000000000000 && _weaponId == 4) {\n            armyAircraftCarriersCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 100000000000000000 && _weaponId == 5) {\n            armySubmarinesCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 120000000000000000 && _weaponId == 6) {\n            armySatelitesCount[_armyId]++;\n            isValid = 1;\n        } \n\n        // We check if the data has been verified as valid\n        if(isValid == 1) {\n            armies[_armyId].attackBonus = armies[_armyId].attackBonus + _bonusAttack;\n            armies[_armyId].defenseBonus = armies[_armyId].defenseBonus + _bonusDefense;\n        }\n    }\n\n    // We use this function to affect an army to an address (when someone purchase an army)\n    function _ownershipArmy(uint armyId) private {\n\n        // We check if the sender already own an army\n        require (ownerArmyCount[msg.sender] == 0);\n\n        // If this army has alreay been purchased we verify that the owner put it on sale\n        require(armies[armyId].isForSale == true);\n        \n        // We check one more time that the price paid is the price of the army\n        require(armies[armyId].price == msg.value);\n\n        // We decrement the army count for the previous owner (in case a user is selling army on marketplace)\n        ownerArmyCount[armies[armyId].ownerAddress]--;\n        \n        // We set the new army owner\n        armies[armyId].ownerAddress = msg.sender;\n        ownerToArmy[msg.sender] = armyId;\n\n        // We increment the army count for this address\n        ownerArmyCount[msg.sender]++;\n\n        // Send event for new ownership\n        armies[armyId].isForSale = false;\n    }\n\n    // We use this function to start a new battle\n    function startNewBattle(uint _idArmyAttacking, uint _idArmyDefensing, uint _randomIndicatorAttack, uint _randomIndicatorDefense) public returns(uint) {\n\n        // We verify that the army attacking is the army of msg.sender\n        require (armies[_idArmyAttacking].ownerAddress == msg.sender);\n\n        // Get details for army attacking\n        uint ScoreAttack = armies[_idArmyAttacking].attackBonus * (armies[_idArmyAttacking].soldiersCount/3) + armies[_idArmyAttacking].soldiersCount  + _randomIndicatorAttack; \n\n        // Get details for army defending\n        uint ScoreDefense = armies[_idArmyAttacking].defenseBonus * (armies[_idArmyDefensing].soldiersCount/2) + armies[_idArmyDefensing].soldiersCount + _randomIndicatorDefense; \n\n        uint VictoriousArmy;\n        uint ExperiencePointsGained;\n        if(ScoreDefense >= ScoreAttack) {\n            VictoriousArmy = _idArmyDefensing;\n            ExperiencePointsGained = armies[_idArmyAttacking].attackBonus + 2;\n            armies[_idArmyDefensing].experiencePoints = armies[_idArmyDefensing].experiencePoints + ExperiencePointsGained;\n\n            // Increment mapping battles won\n            armyCountBattlesWon[_idArmyDefensing]++;\n            armyCountBattlesLost[_idArmyAttacking]++;\n        } else {\n            VictoriousArmy = _idArmyAttacking;\n            ExperiencePointsGained = armies[_idArmyDefensing].defenseBonus + 2;\n            armies[_idArmyAttacking].experiencePoints = armies[_idArmyAttacking].experiencePoints + ExperiencePointsGained;\n\n            // Increment mapping battles won\n            armyCountBattlesWon[_idArmyAttacking]++;\n            armyCountBattlesLost[_idArmyDefensing]++;\n        }\n        \n        // We add the new battle to the blockchain and save its id in a variable \n        battles.push(Battle(_idArmyAttacking, _idArmyDefensing, VictoriousArmy));  \n        \n        // Send event\n        return (VictoriousArmy);\n    }\n\n    // Owner can sell army\n    function ownerSellArmy(uint _armyId, uint256 _amount) public {\n        // We close the function if the user calling this function doesn't own the army\n        require (armies[_armyId].ownerAddress == msg.sender);\n        require (_amount > 0);\n        require (armies[_armyId].isForSale == false);\n\n        armies[_armyId].isForSale = true;\n        armies[_armyId].price = _amount;\n    }\n    \n    // Owner remove army from marketplace\n    function ownerCancelArmyMarketplace(uint _armyId) public {\n        require (armies[_armyId].ownerAddress == msg.sender);\n        require (armies[_armyId].isForSale == true);\n        armies[_armyId].isForSale = false;\n    }\n\n    // Function to return all the value of an army\n    function getArmyFullData(uint armyId) public view returns(string, string, uint, uint256, uint, uint, bool) {\n        string storage ArmyName = armies[armyId].name;\n        string storage ArmyId = armies[armyId].idArmy;\n        uint ArmyExperiencePoints = armies[armyId].experiencePoints;\n        uint256 ArmyPrice = armies[armyId].price;\n        uint ArmyAttack = armies[armyId].attackBonus;\n        uint ArmyDefense = armies[armyId].defenseBonus;\n        bool ArmyIsForSale = armies[armyId].isForSale;\n        return (ArmyName, ArmyId, ArmyExperiencePoints, ArmyPrice, ArmyAttack, ArmyDefense, ArmyIsForSale);\n    }\n\n    // Function to return the owner of the army\n    function getArmyOwner(uint armyId) public view returns(address, bool) {\n        return (armies[armyId].ownerAddress, armies[armyId].isForSale);\n    }\n\n    // Function to return the owner of the army\n    function getSenderArmyDetails() public view returns(uint, string) {\n        uint ArmyId = ownerToArmy[msg.sender];\n        string storage ArmyName = armies[ArmyId].name;\n        return (ArmyId, ArmyName);\n    }\n    \n    // Function to return the owner army count\n    function getSenderArmyCount() public view returns(uint) {\n        uint ArmiesCount = ownerArmyCount[msg.sender];\n        return (ArmiesCount);\n    }\n\n    // Function to return the soldiers count of an army\n    function getArmySoldiersCount(uint armyId) public view returns(uint) {\n        uint SoldiersCount = armies[armyId].soldiersCount;\n        return (SoldiersCount);\n    }\n\n    // Return an array with the weapons of the army\n    function getWeaponsArmy1(uint armyId) public view returns(uint, uint, uint, uint)  {\n        uint CountDrones = armyDronesCount[armyId];\n        uint CountPlanes = armyPlanesCount[armyId];\n        uint CountHelicopters = armyHelicoptersCount[armyId];\n        uint CountTanks = armyTanksCount[armyId];\n        return (CountDrones, CountPlanes, CountHelicopters, CountTanks);\n    }\n    function getWeaponsArmy2(uint armyId) public view returns(uint, uint, uint)  {\n        uint CountAircraftCarriers = armyAircraftCarriersCount[armyId];\n        uint CountSubmarines = armySubmarinesCount[armyId];\n        uint CountSatelites = armySatelitesCount[armyId];\n        return (CountAircraftCarriers, CountSubmarines, CountSatelites);\n    }\n\n    // Retrieve count battles won\n    function getArmyBattles(uint _armyId) public view returns(uint, uint) {\n        return (armyCountBattlesWon[_armyId], armyCountBattlesLost[_armyId]);\n    }\n    \n    // Retrieve the details of a battle\n    function getDetailsBattles(uint battleId) public view returns(uint, uint, uint, string, string) {\n        return (battles[battleId].idArmyAttacking, battles[battleId].idArmyDefensing, battles[battleId].idArmyVictorious, armies[battles[battleId].idArmyAttacking].idArmy, armies[battles[battleId].idArmyDefensing].idArmy);\n    }\n    \n    // Get battles count\n    function getBattlesCount() public view returns(uint) {\n        return (battles.length);\n    }\n\n    // To withdraw fund from this contract\n    function withdraw(uint amount, uint who) public onlyCeo returns(bool) {\n        require(amount <= this.balance);\n        if(who == 0) {\n            ceoAddress.transfer(amount);\n        } else {\n            cfoAddress.transfer(amount);\n        }\n        \n        return true;\n    }\n    \n    // Initial function to create the 100 armies with their attributes\n    function KryptoArmy() public onlyCeo {\n\n      // 1. USA\n        _createArmy(\"United States\", \"USA\", 550000000000000000, 8, 9);\n\n        // 2. North Korea\n        _createArmy(\"North Korea\", \"NK\", 500000000000000000, 10, 5);\n\n        // 3. Russia\n        _createArmy(\"Russia\", \"RUS\", 450000000000000000, 8, 7);\n\n        // 4. China\n        _createArmy(\"China\", \"CHN\", 450000000000000000, 7, 8);\n\n        // 5. Japan\n        _createArmy(\"Japan\", \"JPN\", 420000000000000000, 7, 7);\n\n        // 6. France\n        _createArmy(\"France\", \"FRA\", 400000000000000000, 6, 8);\n\n        // 7. Germany\n        _createArmy(\"Germany\", \"GER\", 400000000000000000, 7, 6);\n\n        // 8. India\n        _createArmy(\"India\", \"IND\", 400000000000000000, 7, 6);\n\n        // 9. United Kingdom\n        _createArmy(\"United Kingdom\", \"UK\", 350000000000000000, 5, 7);\n\n        // 10. South Korea\n        _createArmy(\"South Korea\", \"SK\", 350000000000000000, 6, 6);\n\n        // 11. Turkey\n        _createArmy(\"Turkey\", \"TUR\", 300000000000000000, 7, 4);\n\n        // 12. Italy\n        //_createArmy(\"Italy\", \"ITA\", 280000000000000000, 5, 5);\n    }\n}",
        "debug": "mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_32 + 4)) +\n0: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nmem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_32 + 4)) +\n0: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nstorage_0: 0x0\ncaller: 0x0\ncalldata_KryptoArmy_0: 0x5768bc4a00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_createArmy(string,string,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "_createArmy(string,string,uint256,uint256,uint256)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9689,
        "code": "ntract KryptoArmy {\n\n    address ceoAddress = 0x46d9112533ef677059c430E515775e358888e38b;\n    address cfoAddress = 0x23a49A9930f5b562c6B1096C3e6b5BEc133E8B2E;\n\n    modifier onlyCeo() {\n        require (msg.sender == ceoAddress);\n        _;\n    }\n\n    // Struct for Army\n    struct Army {\n        string name;            // The name of the army (invented by the user)\n        string idArmy;          // The id of the army (USA for United States)\n        uint experiencePoints;  // The experience points of the army, we will use this to handle\n        uint256 price;          // The cost of the Army in Wei (1 ETH = 1000000000000000000 Wei) \n        uint attackBonus;       // The attack bonus for the soldiers (from 0 to 10)\n        uint defenseBonus;      // The defense bonus for the soldiers (from 0 to 10)\n        bool isForSale;         // User is selling this army, it can be purchase on the marketplace\n        address ownerAddress;   // The address of the owner\n        uint soldiersCount;     // The count of all the soldiers in this army\n    } \n    Army[] armies;\n    \n    // Struct for Battles\n    struct Battle {\n        uint idArmyAttacking;   // The id of the army attacking\n        uint idArmyDefensing;   // The id of the army defensing\n        uint idArmyVictorious;  // The id of the winning army\n    } \n\n    Battle[] battles;\n\n    // Mapping army\n    mapping (address => uint) public ownerToArmy;       // Which army does this address own\n    mapping (address => uint) public ownerArmyCount;    // How many armies own this address?\n\n    // Mapping weapons to army\n    mapping (uint => uint) public armyDronesCount;\n    mapping (uint => uint) public armyPlanesCount;\n    mapping (uint => uint) public armyHelicoptersCount;\n    mapping (uint => uint) public armyTanksCount;\n    mapping (uint => uint) public armyAircraftCarriersCount;\n    mapping (uint => uint) public armySubmarinesCount;\n    mapping (uint => uint) public armySatelitesCount;\n\n    // Mapping battles\n    mapping (uint => uint) public armyCountBattlesWon;\n    mapping (uint => uint) public armyCountBattlesLost;\n\n    // This function creates a new army and saves it in the array with its parameters\n    function _createArmy(string _name, string _idArmy, uint _price, uint _attackBonus, uint _defenseBonus) public onlyCeo {\n\n        // We add the new army to the list and save the id in a variable \n        armies.push(Army(_name, _idArmy, 0, _price, _attackBonus, _defenseBonus, true, address(this), 0));\n    }\n\n    // We use this function to purchase an army with Metamask\n    function purchaseArmy(uint _armyId) public payable {\n        // We verify that the value paid is equal to the cost of the army\n        require(msg.value == armies[_armyId].price);\n        require(msg.value > 0);\n        \n        // We check if this army is owned by another user\n        if(armies[_armyId].ownerAddress != address(this)) {\n            uint CommissionOwnerValue = msg.value - (msg.value / 10);\n            armies[_armyId].ownerAddress.transfer(CommissionOwnerValue);\n        }\n\n        // We modify the ownership of the army\n        _ownershipArmy(_armyId);\n    }\n\n    // Function to purchase a soldier\n    function purchaseSoldiers(uint _armyId, uint _countSoldiers) public payable {\n        // Check that message value > 0\n        require(msg.value > 0);\n        uint256 msgValue = msg.value;\n\n        if(msgValue == 1000000000000000 && _countSoldiers == 1) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        } else if(msgValue == 8000000000000000 && _countSoldiers == 10) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        } else if(msgValue == 65000000000000000 && _countSoldiers == 100) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        } else if(msgValue == 500000000000000000 && _countSoldiers == 1000) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        }\n    }\n\n    // Payable function to purchase weapons\n    function purchaseWeapons(uint _armyId, uint _weaponId, uint _bonusAttack, uint _bonusDefense ) public payable {\n        // Check that message value > 0\n        uint isValid = 0;\n        uint256 msgValue = msg.value;\n\n        if(msgValue == 10000000000000000 && _weaponId == 0) {\n            armyDronesCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 25000000000000000 && _weaponId == 1) {\n             armyPlanesCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 25000000000000000 && _weaponId == 2) {\n            armyHelicoptersCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 45000000000000000 && _weaponId == 3) {\n            armyTanksCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 100000000000000000 && _weaponId == 4) {\n            armyAircraftCarriersCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 100000000000000000 && _weaponId == 5) {\n            armySubmarinesCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 120000000000000000 && _weaponId == 6) {\n            armySatelitesCount[_armyId]++;\n            isValid = 1;\n        } \n\n        // We check if the data has been verified as valid\n        if(isValid == 1) {\n            armies[_armyId].attackBonus = armies[_armyId].attackBonus + _bonusAttack;\n            armies[_armyId].defenseBonus = armies[_armyId].defenseBonus + _bonusDefense;\n        }\n    }\n\n    // We use this function to affect an army to an address (when someone purchase an army)\n    function _ownershipArmy(uint armyId) private {\n\n        // We check if the sender already own an army\n        require (ownerArmyCount[msg.sender] == 0);\n\n        // If this army has alreay been purchased we verify that the owner put it on sale\n        require(armies[armyId].isForSale == true);\n        \n        // We check one more time that the price paid is the price of the army\n        require(armies[armyId].price == msg.value);\n\n        // We decrement the army count for the previous owner (in case a user is selling army on marketplace)\n        ownerArmyCount[armies[armyId].ownerAddress]--;\n        \n        // We set the new army owner\n        armies[armyId].ownerAddress = msg.sender;\n        ownerToArmy[msg.sender] = armyId;\n\n        // We increment the army count for this address\n        ownerArmyCount[msg.sender]++;\n\n        // Send event for new ownership\n        armies[armyId].isForSale = false;\n    }\n\n    // We use this function to start a new battle\n    function startNewBattle(uint _idArmyAttacking, uint _idArmyDefensing, uint _randomIndicatorAttack, uint _randomIndicatorDefense) public returns(uint) {\n\n        // We verify that the army attacking is the army of msg.sender\n        require (armies[_idArmyAttacking].ownerAddress == msg.sender);\n\n        // Get details for army attacking\n        uint ScoreAttack = armies[_idArmyAttacking].attackBonus * (armies[_idArmyAttacking].soldiersCount/3) + armies[_idArmyAttacking].soldiersCount  + _randomIndicatorAttack; \n\n        // Get details for army defending\n        uint ScoreDefense = armies[_idArmyAttacking].defenseBonus * (armies[_idArmyDefensing].soldiersCount/2) + armies[_idArmyDefensing].soldiersCount + _randomIndicatorDefense; \n\n        uint VictoriousArmy;\n        uint ExperiencePointsGained;\n        if(ScoreDefense >= ScoreAttack) {\n            VictoriousArmy = _idArmyDefensing;\n            ExperiencePointsGained = armies[_idArmyAttacking].attackBonus + 2;\n            armies[_idArmyDefensing].experiencePoints = armies[_idArmyDefensing].experiencePoints + ExperiencePointsGained;\n\n            // Increment mapping battles won\n            armyCountBattlesWon[_idArmyDefensing]++;\n            armyCountBattlesLost[_idArmyAttacking]++;\n        } else {\n            VictoriousArmy = _idArmyAttacking;\n            ExperiencePointsGained = armies[_idArmyDefensing].defenseBonus + 2;\n            armies[_idArmyAttacking].experiencePoints = armies[_idArmyAttacking].experiencePoints + ExperiencePointsGained;\n\n            // Increment mapping battles won\n            armyCountBattlesWon[_idArmyAttacking]++;\n            armyCountBattlesLost[_idArmyDefensing]++;\n        }\n        \n        // We add the new battle to the blockchain and save its id in a variable \n        battles.push(Battle(_idArmyAttacking, _idArmyDefensing, VictoriousArmy));  \n        \n        // Send event\n        return (VictoriousArmy);\n    }\n\n    // Owner can sell army\n    function ownerSellArmy(uint _armyId, uint256 _amount) public {\n        // We close the function if the user calling this function doesn't own the army\n        require (armies[_armyId].ownerAddress == msg.sender);\n        require (_amount > 0);\n        require (armies[_armyId].isForSale == false);\n\n        armies[_armyId].isForSale = true;\n        armies[_armyId].price = _amount;\n    }\n    \n    // Owner remove army from marketplace\n    function ownerCancelArmyMarketplace(uint _armyId) public {\n        require (armies[_armyId].ownerAddress == msg.sender);\n        require (armies[_armyId].isForSale == true);\n        armies[_armyId].isForSale = false;\n    }\n\n    // Function to return all the value of an army\n    function getArmyFullData(uint armyId) public view returns(string, string, uint, uint256, uint, uint, bool) {\n        string storage ArmyName = armies[armyId].name;\n        string storage ArmyId = armies[armyId].idArmy;\n        uint ArmyExperiencePoints = armies[armyId].experiencePoints;\n        uint256 ArmyPrice = armies[armyId].price;\n        uint ArmyAttack = armies[armyId].attackBonus;\n        uint ArmyDefense = armies[armyId].defenseBonus;\n        bool ArmyIsForSale = armies[armyId].isForSale;\n        return (ArmyName, ArmyId, ArmyExperiencePoints, ArmyPrice, ArmyAttack, ArmyDefense, ArmyIsForSale);\n    }\n\n    // Function to return the owner of the army\n    function getArmyOwner(uint armyId) public view returns(address, bool) {\n        return (armies[armyId].ownerAddress, armies[armyId].isForSale);\n    }\n\n    // Function to return the owner of the army\n    function getSenderArmyDetails() public view returns(uint, string) {\n        uint ArmyId = ownerToArmy[msg.sender];\n        string storage ArmyName = armies[ArmyId].name;\n        return (ArmyId, ArmyName);\n    }\n    \n    // Function to return the owner army count\n    function getSenderArmyCount() public view returns(uint) {\n        uint ArmiesCount = ownerArmyCount[msg.sender];\n        return (ArmiesCount);\n    }\n\n    // Function to return the soldiers count of an army\n    function getArmySoldiersCount(uint armyId) public view returns(uint) {\n        uint SoldiersCount = armies[armyId].soldiersCount;\n        return (SoldiersCount);\n    }\n\n    // Return an array with the weapons of the army\n    function getWeaponsArmy1(uint armyId) public view returns(uint, uint, uint, uint)  {\n        uint CountDrones = armyDronesCount[armyId];\n        uint CountPlanes = armyPlanesCount[armyId];\n        uint CountHelicopters = armyHelicoptersCount[armyId];\n        uint CountTanks = armyTanksCount[armyId];\n        return (CountDrones, CountPlanes, CountHelicopters, CountTanks);\n    }\n    function getWeaponsArmy2(uint armyId) public view returns(uint, uint, uint)  {\n        uint CountAircraftCarriers = armyAircraftCarriersCount[armyId];\n        uint CountSubmarines = armySubmarinesCount[armyId];\n        uint CountSatelites = armySatelitesCount[armyId];\n        return (CountAircraftCarriers, CountSubmarines, CountSatelites);\n    }\n\n    // Retrieve count battles won\n    function getArmyBattles(uint _armyId) public view returns(uint, uint) {\n        return (armyCountBattlesWon[_armyId], armyCountBattlesLost[_armyId]);\n    }\n    \n    // Retrieve the details of a battle\n    function getDetailsBattles(uint battleId) public view returns(uint, uint, uint, string, string) {\n        return (battles[battleId].idArmyAttacking, battles[battleId].idArmyDefensing, battles[battleId].idArmyVictorious, armies[battles[battleId].idArmyAttacking].idArmy, armies[battles[battleId].idArmyDefensing].idArmy);\n    }\n    \n    // Get battles count\n    function getBattlesCount() public view returns(uint) {\n        return (battles.length);\n    }\n\n    // To withdraw fund from this contract\n    function withdraw(uint amount, uint who) public onlyCeo returns(bool) {\n        require(amount <= this.balance);\n        if(who == 0) {\n            ceoAddress.transfer(amount);\n        } else {\n            cfoAddress.transfer(amount);\n        }\n        \n        return true;\n    }\n    \n    // Initial function to create the 100 armies with their attributes\n    function KryptoArmy() public onlyCeo {\n\n      // 1. USA\n        _createArmy(\"United States\", \"USA\", 550000000000000000, 8, 9);\n\n        // 2. North Korea\n        _createArmy(\"North Korea\", \"NK\", 500000000000000000, 10, 5);\n\n        // 3. Russia\n        _createArmy(\"Russia\", \"RUS\", 450000000000000000, 8, 7);\n\n        // 4. China\n        _createArmy(\"China\", \"CHN\", 450000000000000000, 7, 8);\n\n        // 5. Japan\n        _createArmy(\"Japan\", \"JPN\", 420000000000000000, 7, 7);\n\n        // 6. France\n        _createArmy(\"France\", \"FRA\", 400000000000000000, 6, 8);\n\n        // 7. Germany\n        _createArmy(\"Germany\", \"GER\", 400000000000000000, 7, 6);\n\n        // 8. India\n        _createArmy(\"India\", \"IND\", 400000000000000000, 7, 6);\n\n        // 9. United Kingdom\n        _createArmy(\"United Kingdom\", \"UK\", 350000000000000000, 5, 7);\n\n        // 10. South Korea\n        _createArmy(\"South Korea\", \"SK\", 350000000000000000, 6, 6);\n\n        // 11. Turkey\n        _createArmy(\"Turkey\", \"TUR\", 300000000000000000, 7, 4);\n\n        // 12. Italy\n        //_createArmy(\"Italy\", \"ITA\", 280000000000000000, 5, 5);\n    }\n}",
        "debug": "mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_32 + 4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\nmem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_32 + 4)) +\n0: 0x25\nstorage_0: 0x0\ncaller: 0x0\ncalldata_KryptoArmy_0: 0x5768bc4a00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_createArmy(string,string,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "_createArmy(string,string,uint256,uint256,uint256)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9694,
        "code": "ntract KryptoArmy {\n\n    address ceoAddress = 0x46d9112533ef677059c430E515775e358888e38b;\n    address cfoAddress = 0x23a49A9930f5b562c6B1096C3e6b5BEc133E8B2E;\n\n    modifier onlyCeo() {\n        require (msg.sender == ceoAddress);\n        _;\n    }\n\n    // Struct for Army\n    struct Army {\n        string name;            // The name of the army (invented by the user)\n        string idArmy;          // The id of the army (USA for United States)\n        uint experiencePoints;  // The experience points of the army, we will use this to handle\n        uint256 price;          // The cost of the Army in Wei (1 ETH = 1000000000000000000 Wei) \n        uint attackBonus;       // The attack bonus for the soldiers (from 0 to 10)\n        uint defenseBonus;      // The defense bonus for the soldiers (from 0 to 10)\n        bool isForSale;         // User is selling this army, it can be purchase on the marketplace\n        address ownerAddress;   // The address of the owner\n        uint soldiersCount;     // The count of all the soldiers in this army\n    } \n    Army[] armies;\n    \n    // Struct for Battles\n    struct Battle {\n        uint idArmyAttacking;   // The id of the army attacking\n        uint idArmyDefensing;   // The id of the army defensing\n        uint idArmyVictorious;  // The id of the winning army\n    } \n\n    Battle[] battles;\n\n    // Mapping army\n    mapping (address => uint) public ownerToArmy;       // Which army does this address own\n    mapping (address => uint) public ownerArmyCount;    // How many armies own this address?\n\n    // Mapping weapons to army\n    mapping (uint => uint) public armyDronesCount;\n    mapping (uint => uint) public armyPlanesCount;\n    mapping (uint => uint) public armyHelicoptersCount;\n    mapping (uint => uint) public armyTanksCount;\n    mapping (uint => uint) public armyAircraftCarriersCount;\n    mapping (uint => uint) public armySubmarinesCount;\n    mapping (uint => uint) public armySatelitesCount;\n\n    // Mapping battles\n    mapping (uint => uint) public armyCountBattlesWon;\n    mapping (uint => uint) public armyCountBattlesLost;\n\n    // This function creates a new army and saves it in the array with its parameters\n    function _createArmy(string _name, string _idArmy, uint _price, uint _attackBonus, uint _defenseBonus) public onlyCeo {\n\n        // We add the new army to the list and save the id in a variable \n        armies.push(Army(_name, _idArmy, 0, _price, _attackBonus, _defenseBonus, true, address(this), 0));\n    }\n\n    // We use this function to purchase an army with Metamask\n    function purchaseArmy(uint _armyId) public payable {\n        // We verify that the value paid is equal to the cost of the army\n        require(msg.value == armies[_armyId].price);\n        require(msg.value > 0);\n        \n        // We check if this army is owned by another user\n        if(armies[_armyId].ownerAddress != address(this)) {\n            uint CommissionOwnerValue = msg.value - (msg.value / 10);\n            armies[_armyId].ownerAddress.transfer(CommissionOwnerValue);\n        }\n\n        // We modify the ownership of the army\n        _ownershipArmy(_armyId);\n    }\n\n    // Function to purchase a soldier\n    function purchaseSoldiers(uint _armyId, uint _countSoldiers) public payable {\n        // Check that message value > 0\n        require(msg.value > 0);\n        uint256 msgValue = msg.value;\n\n        if(msgValue == 1000000000000000 && _countSoldiers == 1) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        } else if(msgValue == 8000000000000000 && _countSoldiers == 10) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        } else if(msgValue == 65000000000000000 && _countSoldiers == 100) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        } else if(msgValue == 500000000000000000 && _countSoldiers == 1000) {\n            // Increment soldiers count in army\n            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n        }\n    }\n\n    // Payable function to purchase weapons\n    function purchaseWeapons(uint _armyId, uint _weaponId, uint _bonusAttack, uint _bonusDefense ) public payable {\n        // Check that message value > 0\n        uint isValid = 0;\n        uint256 msgValue = msg.value;\n\n        if(msgValue == 10000000000000000 && _weaponId == 0) {\n            armyDronesCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 25000000000000000 && _weaponId == 1) {\n             armyPlanesCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 25000000000000000 && _weaponId == 2) {\n            armyHelicoptersCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 45000000000000000 && _weaponId == 3) {\n            armyTanksCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 100000000000000000 && _weaponId == 4) {\n            armyAircraftCarriersCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 100000000000000000 && _weaponId == 5) {\n            armySubmarinesCount[_armyId]++;\n            isValid = 1;\n        } else if(msgValue == 120000000000000000 && _weaponId == 6) {\n            armySatelitesCount[_armyId]++;\n            isValid = 1;\n        } \n\n        // We check if the data has been verified as valid\n        if(isValid == 1) {\n            armies[_armyId].attackBonus = armies[_armyId].attackBonus + _bonusAttack;\n            armies[_armyId].defenseBonus = armies[_armyId].defenseBonus + _bonusDefense;\n        }\n    }\n\n    // We use this function to affect an army to an address (when someone purchase an army)\n    function _ownershipArmy(uint armyId) private {\n\n        // We check if the sender already own an army\n        require (ownerArmyCount[msg.sender] == 0);\n\n        // If this army has alreay been purchased we verify that the owner put it on sale\n        require(armies[armyId].isForSale == true);\n        \n        // We check one more time that the price paid is the price of the army\n        require(armies[armyId].price == msg.value);\n\n        // We decrement the army count for the previous owner (in case a user is selling army on marketplace)\n        ownerArmyCount[armies[armyId].ownerAddress]--;\n        \n        // We set the new army owner\n        armies[armyId].ownerAddress = msg.sender;\n        ownerToArmy[msg.sender] = armyId;\n\n        // We increment the army count for this address\n        ownerArmyCount[msg.sender]++;\n\n        // Send event for new ownership\n        armies[armyId].isForSale = false;\n    }\n\n    // We use this function to start a new battle\n    function startNewBattle(uint _idArmyAttacking, uint _idArmyDefensing, uint _randomIndicatorAttack, uint _randomIndicatorDefense) public returns(uint) {\n\n        // We verify that the army attacking is the army of msg.sender\n        require (armies[_idArmyAttacking].ownerAddress == msg.sender);\n\n        // Get details for army attacking\n        uint ScoreAttack = armies[_idArmyAttacking].attackBonus * (armies[_idArmyAttacking].soldiersCount/3) + armies[_idArmyAttacking].soldiersCount  + _randomIndicatorAttack; \n\n        // Get details for army defending\n        uint ScoreDefense = armies[_idArmyAttacking].defenseBonus * (armies[_idArmyDefensing].soldiersCount/2) + armies[_idArmyDefensing].soldiersCount + _randomIndicatorDefense; \n\n        uint VictoriousArmy;\n        uint ExperiencePointsGained;\n        if(ScoreDefense >= ScoreAttack) {\n            VictoriousArmy = _idArmyDefensing;\n            ExperiencePointsGained = armies[_idArmyAttacking].attackBonus + 2;\n            armies[_idArmyDefensing].experiencePoints = armies[_idArmyDefensing].experiencePoints + ExperiencePointsGained;\n\n            // Increment mapping battles won\n            armyCountBattlesWon[_idArmyDefensing]++;\n            armyCountBattlesLost[_idArmyAttacking]++;\n        } else {\n            VictoriousArmy = _idArmyAttacking;\n            ExperiencePointsGained = armies[_idArmyDefensing].defenseBonus + 2;\n            armies[_idArmyAttacking].experiencePoints = armies[_idArmyAttacking].experiencePoints + ExperiencePointsGained;\n\n            // Increment mapping battles won\n            armyCountBattlesWon[_idArmyAttacking]++;\n            armyCountBattlesLost[_idArmyDefensing]++;\n        }\n        \n        // We add the new battle to the blockchain and save its id in a variable \n        battles.push(Battle(_idArmyAttacking, _idArmyDefensing, VictoriousArmy));  \n        \n        // Send event\n        return (VictoriousArmy);\n    }\n\n    // Owner can sell army\n    function ownerSellArmy(uint _armyId, uint256 _amount) public {\n        // We close the function if the user calling this function doesn't own the army\n        require (armies[_armyId].ownerAddress == msg.sender);\n        require (_amount > 0);\n        require (armies[_armyId].isForSale == false);\n\n        armies[_armyId].isForSale = true;\n        armies[_armyId].price = _amount;\n    }\n    \n    // Owner remove army from marketplace\n    function ownerCancelArmyMarketplace(uint _armyId) public {\n        require (armies[_armyId].ownerAddress == msg.sender);\n        require (armies[_armyId].isForSale == true);\n        armies[_armyId].isForSale = false;\n    }\n\n    // Function to return all the value of an army\n    function getArmyFullData(uint armyId) public view returns(string, string, uint, uint256, uint, uint, bool) {\n        string storage ArmyName = armies[armyId].name;\n        string storage ArmyId = armies[armyId].idArmy;\n        uint ArmyExperiencePoints = armies[armyId].experiencePoints;\n        uint256 ArmyPrice = armies[armyId].price;\n        uint ArmyAttack = armies[armyId].attackBonus;\n        uint ArmyDefense = armies[armyId].defenseBonus;\n        bool ArmyIsForSale = armies[armyId].isForSale;\n        return (ArmyName, ArmyId, ArmyExperiencePoints, ArmyPrice, ArmyAttack, ArmyDefense, ArmyIsForSale);\n    }\n\n    // Function to return the owner of the army\n    function getArmyOwner(uint armyId) public view returns(address, bool) {\n        return (armies[armyId].ownerAddress, armies[armyId].isForSale);\n    }\n\n    // Function to return the owner of the army\n    function getSenderArmyDetails() public view returns(uint, string) {\n        uint ArmyId = ownerToArmy[msg.sender];\n        string storage ArmyName = armies[ArmyId].name;\n        return (ArmyId, ArmyName);\n    }\n    \n    // Function to return the owner army count\n    function getSenderArmyCount() public view returns(uint) {\n        uint ArmiesCount = ownerArmyCount[msg.sender];\n        return (ArmiesCount);\n    }\n\n    // Function to return the soldiers count of an army\n    function getArmySoldiersCount(uint armyId) public view returns(uint) {\n        uint SoldiersCount = armies[armyId].soldiersCount;\n        return (SoldiersCount);\n    }\n\n    // Return an array with the weapons of the army\n    function getWeaponsArmy1(uint armyId) public view returns(uint, uint, uint, uint)  {\n        uint CountDrones = armyDronesCount[armyId];\n        uint CountPlanes = armyPlanesCount[armyId];\n        uint CountHelicopters = armyHelicoptersCount[armyId];\n        uint CountTanks = armyTanksCount[armyId];\n        return (CountDrones, CountPlanes, CountHelicopters, CountTanks);\n    }\n    function getWeaponsArmy2(uint armyId) public view returns(uint, uint, uint)  {\n        uint CountAircraftCarriers = armyAircraftCarriersCount[armyId];\n        uint CountSubmarines = armySubmarinesCount[armyId];\n        uint CountSatelites = armySatelitesCount[armyId];\n        return (CountAircraftCarriers, CountSubmarines, CountSatelites);\n    }\n\n    // Retrieve count battles won\n    function getArmyBattles(uint _armyId) public view returns(uint, uint) {\n        return (armyCountBattlesWon[_armyId], armyCountBattlesLost[_armyId]);\n    }\n    \n    // Retrieve the details of a battle\n    function getDetailsBattles(uint battleId) public view returns(uint, uint, uint, string, string) {\n        return (battles[battleId].idArmyAttacking, battles[battleId].idArmyDefensing, battles[battleId].idArmyVictorious, armies[battles[battleId].idArmyAttacking].idArmy, armies[battles[battleId].idArmyDefensing].idArmy);\n    }\n    \n    // Get battles count\n    function getBattlesCount() public view returns(uint) {\n        return (battles.length);\n    }\n\n    // To withdraw fund from this contract\n    function withdraw(uint amount, uint who) public onlyCeo returns(bool) {\n        require(amount <= this.balance);\n        if(who == 0) {\n            ceoAddress.transfer(amount);\n        } else {\n            cfoAddress.transfer(amount);\n        }\n        \n        return true;\n    }\n    \n    // Initial function to create the 100 armies with their attributes\n    function KryptoArmy() public onlyCeo {\n\n      // 1. USA\n        _createArmy(\"United States\", \"USA\", 550000000000000000, 8, 9);\n\n        // 2. North Korea\n        _createArmy(\"North Korea\", \"NK\", 500000000000000000, 10, 5);\n\n        // 3. Russia\n        _createArmy(\"Russia\", \"RUS\", 450000000000000000, 8, 7);\n\n        // 4. China\n        _createArmy(\"China\", \"CHN\", 450000000000000000, 7, 8);\n\n        // 5. Japan\n        _createArmy(\"Japan\", \"JPN\", 420000000000000000, 7, 7);\n\n        // 6. France\n        _createArmy(\"France\", \"FRA\", 400000000000000000, 6, 8);\n\n        // 7. Germany\n        _createArmy(\"Germany\", \"GER\", 400000000000000000, 7, 6);\n\n        // 8. India\n        _createArmy(\"India\", \"IND\", 400000000000000000, 7, 6);\n\n        // 9. United Kingdom\n        _createArmy(\"United Kingdom\", \"UK\", 350000000000000000, 5, 7);\n\n        // 10. South Korea\n        _createArmy(\"South Korea\", \"SK\", 350000000000000000, 6, 6);\n\n        // 11. Turkey\n        _createArmy(\"Turkey\", \"TUR\", 300000000000000000, 7, 4);\n\n        // 12. Italy\n        //_createArmy(\"Italy\", \"ITA\", 280000000000000000, 5, 5);\n    }\n}",
        "debug": "keccac_0_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n8*storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_32 + 4)) +\n0: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\nmem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_KryptoArmy_4 + calldata_KryptoArmy_32 + 4)) +\n0: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\nstorage_0: 0x0\ncaller: 0x0\ncalldata_KryptoArmy_0: 0x5768bc4a00000000000000000000000000000000000000000000000000000000\ncalldatasize_KryptoArmy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_createArmy(string,string,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0xcb504e6590f78acd9aa1fbff6c749124facb56a6.sol",
        "function": "_createArmy(string,string,uint256,uint256,uint256)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}