{"error": null, "issues": [{"address": 247, "code": "th == _token.length) && (_beneficiary.length == _vestingTime.length));\n        \n        for (uint i = 0; i < _beneficiary.length; i++) {\n            require(_vestingTime[i] > now);\n            require(checkZeroValue(_token[i]));\n            require(uint256(getBalance()) >= totalTokenVested.add(_token[i]));\n            vestingObj[_beneficiary[i]].push(VestingObj({\n                token : _token[i],\n                releaseTime : _vestingTime[i]\n            }));\n            totalTokenVested = totalTokenVested.add(_token[i]);\n            emit AddVesting(_beneficiary[i], _token[i], _vestingTime[i]);\n        }\n    }\n\n    /**\n   * @notice Transfers tokens held by timelock to beneficiary.\n   */\n    function claim() external {\n        uint256 transferTokenCount = 0;\n        for (uint i = 0; i < v", "debug": "calldata_TokenVesting_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenVesting_0: 0x6c9e89b600000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenVesting: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addVesting(address[],uint256[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x10d085268751e5bc6cc0433c1875e408c8f6e007.sol", "function": "addVesting(address[],uint256[],uint256[])", "lineno": 169, "title": "Integer Overflow ", "type": "Warning"}, {"address": 271, "code": "th == _token.length) && (_beneficiary.length == _vestingTime.length));\n        \n        for (uint i = 0; i < _beneficiary.length; i++) {\n            require(_vestingTime[i] > now);\n            require(checkZeroValue(_token[i]));\n            require(uint256(getBalance()) >= totalTokenVested.add(_token[i]));\n            vestingObj[_beneficiary[i]].push(VestingObj({\n                token : _token[i],\n                releaseTime : _vestingTime[i]\n            }));\n            totalTokenVested = totalTokenVested.add(_token[i]);\n            emit AddVesting(_beneficiary[i], _token[i], _vestingTime[i]);\n        }\n    }\n\n    /**\n   * @notice Transfers tokens held by timelock to beneficiary.\n   */\n    function claim() external {\n        uint256 transferTokenCount = 0;\n        for (uint i = 0; i < v", "debug": "calldata_TokenVesting_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenVesting_0: 0x6c9e89b600000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenVesting: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addVesting(address[],uint256[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x10d085268751e5bc6cc0433c1875e408c8f6e007.sol", "function": "addVesting(address[],uint256[],uint256[])", "lineno": 169, "title": "Integer Overflow ", "type": "Warning"}, {"address": 902, "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x10d085268751e5bc6cc0433c1875e408c8f6e007.sol", "function": "addVesting(address[],uint256[],uint256[])", "lineno": 207, "title": "Message call to external contract", "type": "Informational"}, {"address": 2347, "code": " uint256 token, uint256 _vestingTime);\n    event Rel", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenVesting_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_TokenVesting_4: 0x0\ncalldata_TokenVesting_0: 0x7d60404000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenVesting: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x10d085268751e5bc6cc0433c1875e408c8f6e007.sol", "function": "_function_0x7d604040", "lineno": 150, "title": "Exception state", "type": "Informational"}, {"address": 2826, "code": "llow a\n * bene", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0xc63a21246c99b000ea0030728005ea6909080a424a47ca48059be3c0ff803205\ncalldata_TokenVesting_0 + 36 + calldata_TokenVesting_32 + 4: 0xd2bd697b67b8b7eebcef8ebaf405ca6a0b728a06c347eda3d5dbebfeffbdb977\ntimestamp: 0x0\ncalldata_TokenVesting_0 + 36 + calldata_TokenVesting_32 + 36: 0x1\ncalldata_TokenVesting_4 + calldata_TokenVesting_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenVesting_0: 0x6c9e89b600000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenVesting: 0x4\ncalldata_TokenVesting_4 + calldata_TokenVesting_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenVesting_4 + calldata_TokenVesting_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x10d085268751e5bc6cc0433c1875e408c8f6e007.sol", "function": "addVesting(address[],uint256[],uint256[])", "lineno": 131, "title": "Exception state", "type": "Informational"}, {"address": 3003, "code": " function safeTransferFro", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x10d085268751e5bc6cc0433c1875e408c8f6e007.sol", "function": "claim()", "lineno": 38, "title": "Message call to external contract", "type": "Informational"}], "success": true}