{
  "contract": "0x82d69c2f6d0ef836b26f02598782b5cdee2f887e",
  "tool": "mythril",
  "start": 1563658889.614143,
  "end": 1563659044.3091943,
  "duration": 154.69505143165588,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 455,
        "code": "            curConfig.totalSize,\n                curConfig.singlePrice,\n                curConfig.pumpRate,\n                addressArray,\n                totalPrice,\n                isLock);\n    }\n    \n    function gameResult() private {\n            \n      uint index  = getRamdon();\n      address lastAddress = addressArray[index];\n   ",
        "debug": "storage_9: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_BREBuy_0: 0x1746bd1b00000000000000000000000000000000000000000000000000000000\ncalldatasize_BREBuy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getGameInfo()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x82d69c2f6d0ef836b26f02598782b5cdee2f887e.sol",
        "function": "getGameInfo()",
        "lineno": 135,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 871,
        "code": "addressArray = new address[](0);\n               ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_BREBuy_4: 0x0\nstorage_9: 0x0\ncalldata_BREBuy_0: 0xf96cf3400000000000000000000000000000000000000000000000000000000\ncalldatasize_BREBuy: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/33/0x82d69c2f6d0ef836b26f02598782b5cdee2f887e.sol",
        "function": "_function_0x0f96cf34",
        "lineno": 18,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1067,
        "code": "              addressArray,\n                totalPrice,\n                isLock);\n    }\n    \n    function gameResult() private {\n            \n      uint index  = getRamdon();\n      address lastAddress = addressArray[ind",
        "debug": "storage_9: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_BREBuy_0: 0x1746bd1b00000000000000000000000000000000000000000000000000000000\ncalldatasize_BREBuy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getGameInfo()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x82d69c2f6d0ef836b26f02598782b5cdee2f887e.sol",
        "function": "getGameInfo()",
        "lineno": 138,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1069,
        "code": "              addressArray,\n                totalPrice,\n                isLock);\n    }\n    \n    function gameResult() private {\n            \n      uint index  = getRamdon();\n      address lastAddress = addressArray[ind",
        "debug": "storage_9: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_BREBuy_0: 0x1746bd1b00000000000000000000000000000000000000000000000000000000\ncalldatasize_BREBuy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getGameInfo()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x82d69c2f6d0ef836b26f02598782b5cdee2f887e.sol",
        "function": "getGameInfo()",
        "lineno": 138,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1578,
        "code": "        if(addressArra",
        "debug": "callvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_1: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_2: 0x0\ncalldata_BREBuy_0: 0x27b5db8a00000000000000000000000000000000000000000000000000000000\ncalldatasize_BREBuy: 0x4\nstorage_7: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nextcodesize: 0x0\n",
        "description": "A possible integer overflow exists in the function `addPlayer()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x82d69c2f6d0ef836b26f02598782b5cdee2f887e.sol",
        "function": "addPlayer()",
        "lineno": 127,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1594,
        "code": ";\ncontract BREBuy ",
        "debug": "storage_9: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\ncalldata_BREBuy_0: 0x27b5db8a00000000000000000000000000000000000000000000000000000000\ncalldatasize_BREBuy: 0x4\nstorage_7: 0x0\ncallvalue: 0x0\nextcodesize: 0x0\n",
        "description": "A possible integer overflow exists in the function `addPlayer()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x82d69c2f6d0ef836b26f02598782b5cdee2f887e.sol",
        "function": "addPlayer()",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2300,
        "code": " }\n    }\n    \n    funct",
        "debug": "calldata_BREBuy_32 + 4: 0x5420f860cbaa38a1a0b3b190441c5a362d821016921e61f0365c77d2d7e1804c\ncalldata_BREBuy_32 + 36: 0x0\nstorage_5: 0xff00\ncalldata_BREBuy_4: 0x0\nstorage_3: 0xffffffff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_BREBuy_0: 0x61dbfc3f00000000000000000000000000000000000000000000000000000000\ncalldatasize_BREBuy: 0x4\n",
        "description": "A possible integer overflow exists in the function `changeConfig(uint32,uint256,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x82d69c2f6d0ef836b26f02598782b5cdee2f887e.sol",
        "function": "changeConfig(uint32,uint256,uint8)",
        "lineno": 97,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2323,
        "code": "      gameIndex++;\n    ",
        "debug": "calldata_BREBuy_32 + 4: 0x5420f860cbaa38a1a0b3b190441c5a362d821016921e61f0365c77d2d7e1804c\nstorage_4: 0xbd9b411065cb201033ba3ff81eb25466442e1772156ffa380f2c240d5511ffff\ncalldata_BREBuy_32 + 36: 0x0\nstorage_5: 0xff00\ncalldata_BREBuy_4: 0x0\nstorage_3: 0xffffffff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_BREBuy_0: 0x61dbfc3f00000000000000000000000000000000000000000000000000000000\ncalldatasize_BREBuy: 0x4\n",
        "description": "A possible integer overflow exists in the function `changeConfig(uint32,uint256,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x82d69c2f6d0ef836b26f02598782b5cdee2f887e.sol",
        "function": "changeConfig(uint32,uint256,uint8)",
        "lineno": 102,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4692,
        "code": "ddressArray.length,price)",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function updateLock(bool). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/33/0x82d69c2f6d0ef836b26f02598782b5cdee2f887e.sol",
        "function": "updateLock(bool)",
        "lineno": 76,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5362,
        "code": "ontract BREBuy {\n    \n    struct ContractParam {\n        uint32  totalSize ; \n        uint256 singlePrice;\n        uint8  pumpRate;\n        bool hasChange;\n    }\n    \n    address owner = 0x0;\n    uint32  gameIndex = 0;\n    uint256 totalPrice= 0;\n    bool isLock = false;\n    ContractParam public setConfig;\n    ContractParam public curConfig;\n    \n    address[] public addressArray = new address[](0);\n                    \n    event openLockEvent();\n    event addPlayerEvent(uint32 gameIndex,address player);\n    event gameOverEvent(uint32 gameIndex,uint32 totalSize,uint256 singlePrice,uint8 pumpRate,address winAddr,uint overTime);\n    event stopGameEvent(uint totalBalace,uint totalSize,uint price);\n          \n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    constructor ( uint32 _totalSize,\n                  uint256 _singlePrice\n    )  public  {\n        owner = msg.sender;\n        setConfig = ContractParam(_totalSize,_singlePrice * 1 finney ,5,false);\n        curConfig = ContractParam(_totalSize,_singlePrice * 1 finney ,5,false);\n        startNewGame();\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner,\"only owner can call this function\");\n        _;\n    }\n    \n     modifier notLock {\n        require(isLock == false,\"contract current is lock status\");\n        _;\n    }\n    \n    function isNotContract(address addr) private view returns (bool) {\n        uint size;\n        assembly { size := extcodesize(addr) }\n        return size <= 0;\n    }\n\n    function updateLock(bool b) onlyOwner public {\n        \n        require(isLock != b,\" updateLock new status == old status\");\n       \n        isLock = b;\n       \n        if(isLock) {\n            stopGame();\n        }else{\n            startNewGame();\n            emit openLockEvent();\n        }\n    }\n    \n    function stopGame() onlyOwner private {\n      \n      if(addressArray.length <= 0) {\n          return;\n      }  \n      uint totalBalace = address(this).balance;\n      uint price = totalBalace / addressArray.length;\n      for(uint i = 0; i < addressArray.length; i++) {\n          address curPlayer =  addressArray[i];\n          curPlayer.transfer(price);\n      }\n      emit stopGameEvent(totalBalace,addressArray.length,price);\n      addressArray.length=0;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n    \n    function changeConfig( uint32 _totalSize,uint256 _singlePrice,uint8 _pumpRate) onlyOwner public payable {\n    \n        curConfig.hasChange = true;\n        if(setConfig.totalSize != _totalSize) {\n            setConfig.totalSize = _totalSize;\n        }\n        if(setConfig.pumpRate  != _pumpRate){\n            setConfig.pumpRate  = _pumpRate;\n        }\n        if(setConfig.singlePrice != _singlePrice * 1 finney){\n            setConfig.singlePrice = _singlePrice * 1 finney;\n        }\n    }\n    \n    function startNewGame() private {\n        \n        gameIndex++;\n        if(curConfig.hasChange) {\n            if(curConfig.totalSize   != setConfig.totalSize) {\n                curConfig.totalSize   = setConfig.totalSize;\n            }\n            if(curConfig.singlePrice != setConfig.singlePrice){\n               curConfig.singlePrice = setConfig.singlePrice; \n            }\n            if( curConfig.pumpRate    != setConfig.pumpRate) {\n                curConfig.pumpRate    = setConfig.pumpRate;\n            }\n            curConfig.hasChange = false;\n        }\n        addressArray.length=0;\n    }\n    \n    \n    function addPlayer() notLock public payable {\n        \n        require(isNotContract(msg.sender),\"Contract not call addPlayer\");\n        require(msg.value == curConfig.singlePrice,\"msg.value error\");\n        totalPrice = totalPrice + msg.value;\n        addressArray.push(msg.sender);\n       \n        emit addPlayerEvent(gameIndex,msg.sender);\n        if(addressArray.length >= curConfig.totalSize) {\n            gameResult();\n            startNewGame();\n        }\n    }\n    \n    function getGameInfo() public view returns  (uint256,uint32,uint256,uint8,address[],uint256,bool)  {\n        return (gameIndex,\n                curConfig.totalSize,\n                curConfig.singlePrice,\n                curConfig.pumpRate,\n                addressArray,\n                totalPrice,\n                isLock);\n    }\n    \n    function gameResult() private {\n            \n      uint index  = getRamdon();\n      address lastAddress = addressArray[index];\n      uint totalBalace = address(this).balance;\n      uint giveToOwn   = totalBalace * curConfig.pumpRate / 100;\n      uint giveToActor = totalBalace - giveToOwn;\n      owner.transfer(giveToOwn);\n      lastAddress.transfer(giveToActor);\n      emit gameOverEvent(\n                    gameIndex,\n                    curConfig.totalSize,\n                    curConfig.singlePrice,\n                    curConfig.pumpRate,\n                    lastAddress,\n                    now);\n    }\n    \n    function getRamdon() private view returns (uint) {\n      bytes32 ramdon = keccak256(abi.encodePacked(ramdon,now,blockhash(block.number-1)));\n      for(uint i = 0; i < addressArray.length; i++) {\n            ramdon = keccak256(abi.encodePacked(ramdon,now, addressArray[i]));\n      }\n      uint index  = uint(ramdon) % addressArray.length;\n      return index;\n    }\n}",
        "debug": "storage_9: 0xd87d63f07843f36cf4c6cc2f8020affc7fff87cff7e4806f2afeee5a59145ca0\nstorage_5: 0x0\nstorage_4: 0x0\nstorage_7: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\nstorage_6: 0xffffffff00\nstorage_8: 0xff00\ncalldata_BREBuy_4: 0x0\nstorage_2: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_BREBuy_0: 0xa1f9105700000000000000000000000000000000000000000000000000000000\ncalldatasize_BREBuy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updateLock(bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x82d69c2f6d0ef836b26f02598782b5cdee2f887e.sol",
        "function": "updateLock(bool)",
        "lineno": 2,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}