{
  "contract": "0x4304bd6506aa9d2708eed2aea1cfcb0adaf652e5",
  "tool": "mythril",
  "start": 1563471256.520162,
  "end": 1563471468.6036952,
  "duration": 212.08353304862976,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1402,
        "code": "(bool _run) public isOwner {\n\t\trunning = _run;\n\t}\n\t\n\tfunction transferOwners",
        "debug": "calldata_WankCoin_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_WankCoin_0: 0xb84c824600000000000000000000000000000000000000000000000000000000\ncalldatasize_WankCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/2/0x4304bd6506aa9d2708eed2aea1cfcb0adaf652e5.sol",
        "function": "setSymbol(string)",
        "lineno": 102,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1507,
        "code": "ng _symbol) public isOwner {\n\t\tsymbol = _symbol;\n\t}\n\t\n\tfunction setR",
        "debug": "calldata_WankCoin_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_WankCoin_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_WankCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/2/0x4304bd6506aa9d2708eed2aea1cfcb0adaf652e5.sol",
        "function": "setName(string)",
        "lineno": 98,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2350,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/2/0x4304bd6506aa9d2708eed2aea1cfcb0adaf652e5.sol",
        "function": "collectERC20(address,uint256)",
        "lineno": 119,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5882,
        "code": " is ERC20 {\n\tmapping (address => uint256) balances;\n\tmapping (address => mapping (address => uint256)) allowed;\n\tuint8 public decimals;\n\tstring public name;\n\tstring public symbol;\n\t\n\tbool public running;\n\taddress public owner;\n\taddress public ownerTemp;\n\t\n\t\n\n\tmodifier isOwner {\n\t\trequire(owner == msg.sender);\n\t\t_;\n\t}\n\t\n\tmodifier isRunning {\n\t\trequire(running);\n\t\t_;\n\t}\n\t\n\t\n\tfunction WankCoin() public {\n\t\trunning = true;\n\t\towner = msg.sender;\n\t\tdecimals = 18;\n\t\ttotalSupply = 2 * uint(10)**(decimals + 9);\n\t\tbalances[owner] = totalSupply;\n\t\tname = \"WANKCOIN\";\n\t\tsymbol = \"WKC\";\n\t\temit Transfer(0x0, owner, totalSupply);\n\t}\n\t\n\tfunction transfer(address _to, uint256 _value) public isRunning returns (bool) {\n\t\trequire(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n\t\tbalances[msg.sender] -= _value;\n\t\tbalances[_to] += _value;\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) public isRunning returns (bool) {\n\t\trequire(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n\t\tbalances[_to] += _value;\n\t\tbalances[_from] -= _value;\n\t\tallowed[_from][msg.sender] -= _value;\n\t\temit Transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\tfunction balanceOf(address _owner) public constant returns (uint256) {\n\t\treturn balances[_owner];\n\t}\n\n\tfunction approve(address _spender, uint256 _value) public isRunning returns (bool) {\n\t\tallowed[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\tfunction allowance(address _owner, address _spender) public constant returns (uint256) {\n\t  return allowed[_owner][_spender];\n\t}\n\t\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public isRunning returns (bool ok) {\n\t\tTokenRecipient spender = TokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\t\t\treturn true;\n\t\t}\n    }\n\t\n\t\n\t\n\tfunction setName(string _name) public isOwner {\n\t\tname = _name;\n\t}\n\t\n\tfunction setSymbol(string _symbol) public isOwner {\n\t\tsymbol = _symbol;\n\t}\n\t\n\tfunction setRunning(bool _run) public isOwner {\n\t\trunning = _run;\n\t}\n\t\n\tfunction transferOwnership(address _owner) public isOwner {\n\t\townerTemp = _owner;\n\t}\n\t\n\tfunction acceptOwnership() public {\n\t\trequire(msg.sender == ownerTemp);\n\t\towner = ownerTemp;\n\t\townerTemp = 0x0;\n\t}\n\t\n\tfunction collectERC20(address _token, uint _amount) public isRunning isOwner returns (bool success) {\n\t\treturn ERC20(_token).transfer(owner, _amount);\n\t}\n}",
        "debug": "calldata_WankCoin_4 + calldata_WankCoin_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_6: 0x0\ncalldata_WankCoin_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_WankCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/2/0x4304bd6506aa9d2708eed2aea1cfcb0adaf652e5.sol",
        "function": "setName(string)",
        "lineno": 18,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5896,
        "code": " is ERC20 {\n\tmapping (address => uint256) balances;\n\tmapping (address => mapping (address => uint256)) allowed;\n\tuint8 public decimals;\n\tstring public name;\n\tstring public symbol;\n\t\n\tbool public running;\n\taddress public owner;\n\taddress public ownerTemp;\n\t\n\t\n\n\tmodifier isOwner {\n\t\trequire(owner == msg.sender);\n\t\t_;\n\t}\n\t\n\tmodifier isRunning {\n\t\trequire(running);\n\t\t_;\n\t}\n\t\n\t\n\tfunction WankCoin() public {\n\t\trunning = true;\n\t\towner = msg.sender;\n\t\tdecimals = 18;\n\t\ttotalSupply = 2 * uint(10)**(decimals + 9);\n\t\tbalances[owner] = totalSupply;\n\t\tname = \"WANKCOIN\";\n\t\tsymbol = \"WKC\";\n\t\temit Transfer(0x0, owner, totalSupply);\n\t}\n\t\n\tfunction transfer(address _to, uint256 _value) public isRunning returns (bool) {\n\t\trequire(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n\t\tbalances[msg.sender] -= _value;\n\t\tbalances[_to] += _value;\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) public isRunning returns (bool) {\n\t\trequire(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n\t\tbalances[_to] += _value;\n\t\tbalances[_from] -= _value;\n\t\tallowed[_from][msg.sender] -= _value;\n\t\temit Transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\tfunction balanceOf(address _owner) public constant returns (uint256) {\n\t\treturn balances[_owner];\n\t}\n\n\tfunction approve(address _spender, uint256 _value) public isRunning returns (bool) {\n\t\tallowed[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\tfunction allowance(address _owner, address _spender) public constant returns (uint256) {\n\t  return allowed[_owner][_spender];\n\t}\n\t\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public isRunning returns (bool ok) {\n\t\tTokenRecipient spender = TokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\t\t\treturn true;\n\t\t}\n    }\n\t\n\t\n\t\n\tfunction setName(string _name) public isOwner {\n\t\tname = _name;\n\t}\n\t\n\tfunction setSymbol(string _symbol) public isOwner {\n\t\tsymbol = _symbol;\n\t}\n\t\n\tfunction setRunning(bool _run) public isOwner {\n\t\trunning = _run;\n\t}\n\t\n\tfunction transferOwnership(address _owner) public isOwner {\n\t\townerTemp = _owner;\n\t}\n\t\n\tfunction acceptOwnership() public {\n\t\trequire(msg.sender == ownerTemp);\n\t\towner = ownerTemp;\n\t\townerTemp = 0x0;\n\t}\n\t\n\tfunction collectERC20(address _token, uint _amount) public isRunning isOwner returns (bool success) {\n\t\treturn ERC20(_token).transfer(owner, _amount);\n\t}\n}",
        "debug": "calldata_WankCoin_4 + calldata_WankCoin_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_6: 0x0\ncalldata_WankCoin_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_WankCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/2/0x4304bd6506aa9d2708eed2aea1cfcb0adaf652e5.sol",
        "function": "setName(string)",
        "lineno": 18,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}