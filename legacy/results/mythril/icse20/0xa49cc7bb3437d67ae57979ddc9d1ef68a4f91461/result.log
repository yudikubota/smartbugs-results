{"error": null, "issues": [{"address": 1526, "code": ");\n\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n}\n\n\n\ninterface tokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external ;\n}\n\n\n//\n// This creates and adds s", "debug": "calldata_tokenRecipient_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0xa49cc7bb3437d67ae57979ddc9d1ef68a4f91461.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 166, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5180, "code": "ress _from, uint256 _value, address _token, bytes _extraData)", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/28/0xa49cc7bb3437d67ae57979ddc9d1ef68a4f91461.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 178, "title": "Message call to external contract", "type": "Warning"}, {"address": 6234, "code": "n c;\n", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_tokenRecipient_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_tokenRecipient_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `increaseApproval(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0xa49cc7bb3437d67ae57979ddc9d1ef68a4f91461.sol", "function": "increaseApproval(address,uint256)", "lineno": 47, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6247, "code": "contract Ownab", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0x1\ncalldata_tokenRecipient_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/28/0xa49cc7bb3437d67ae57979ddc9d1ef68a4f91461.sol", "function": "increaseApproval(address,uint256)", "lineno": 53, "title": "Exception state", "type": "Informational"}], "success": true}