{
  "contract": "0x47f8c173083af430f4507124b63db55296500baf",
  "tool": "mythril",
  "start": 1563609338.9690404,
  "end": 1563609399.9071548,
  "duration": 60.938114404678345,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 280,
        "code": "    for (uint i; i < array.length; i++) {\n            summa += array[i];\n        }\n        return summa;\n    }\n\n    function changeFeeAddress(address newFee) onlyOwner {\n        fee = newFee;",
        "debug": "calldata_ERC223Interface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC223Interface_0: 0x194db8e00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC223Interface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x0194db8e`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x47f8c173083af430f4507124b63db55296500baf.sol",
        "function": "_function_0x0194db8e",
        "lineno": 78,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1220,
        "code": "blic campaigns;\n\n    modifier onlyOwner() {\n  ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_ERC223Interface_4: 0x8000\ncalldata_ERC223Interface_0: 0x9eca2f1e00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC223Interface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x47f8c173083af430f4507124b63db55296500baf.sol",
        "function": "_function_0x9eca2f1e",
        "lineno": 33,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1306,
        "code": ";\n    }\n\n    function getAddressCreatorById(bytes32 id) public constant returns(address) {\n        return campaigns[id]",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_ERC223Interface_4: 0x8000\ncalldata_ERC223Interface_0: 0xa220027800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC223Interface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x47f8c173083af430f4507124b63db55296500baf.sol",
        "function": "checkStatus(bytes32)",
        "lineno": 112,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2549,
        "code": "on sendCoin(address[] _routerOwners, uint[] amount, bytes32 id) onl",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x47f8c173083af430f4507124b63db55296500baf.sol",
        "function": "finishCampaign(bytes32)",
        "lineno": 133,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2549,
        "code": "on sendCoin(address[] _routerOwners, uint[] amount, bytes32 id) onl",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function finishCampaign(bytes32). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/22/0x47f8c173083af430f4507124b63db55296500baf.sol",
        "function": "finishCampaign(bytes32)",
        "lineno": 133,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2641,
        "code": "      require(campaigns[id].stat",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/22/0x47f8c173083af430f4507124b63db55296500baf.sol",
        "function": "finishCampaign(bytes32)",
        "lineno": 134,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3078,
        "code": "igns[id].tokenAmount);\n\n        for (v",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_ERC223Interface_32_+_36: 0x8000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ERC223Interface_0: 0x89b52b9b00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC223Interface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x47f8c173083af430f4507124b63db55296500baf.sol",
        "function": "_function_0x89b52b9b",
        "lineno": 136,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4595,
        "code": "estroyed;\n        campaigns[id].currentBalance = 0;\n    }\n\n    f",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x47f8c173083af430f4507124b63db55296500baf.sol",
        "function": "destroyCampaign(bytes32)",
        "lineno": 107,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4595,
        "code": "estroyed;\n        campaigns[id].currentBalance = 0;\n    }\n\n    f",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function destroyCampaign(bytes32). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/22/0x47f8c173083af430f4507124b63db55296500baf.sol",
        "function": "destroyCampaign(bytes32)",
        "lineno": 107,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4715,
        "code": "ckStatus(bytes32 id) public constant re",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/22/0x47f8c173083af430f4507124b63db55296500baf.sol",
        "function": "destroyCampaign(bytes32)",
        "lineno": 111,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 4751,
        "code": "us status) {\n        return camp",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/22/0x47f8c173083af430f4507124b63db55296500baf.sol",
        "function": "destroyCampaign(bytes32)",
        "lineno": 111,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 5323,
        "code": "= value;\n        campaigns[id].currentBalance += value;\n  ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x47f8c173083af430f4507124b63db55296500baf.sol",
        "function": "addTokensToCampaign(bytes32,uint256)",
        "lineno": 97,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5323,
        "code": "= value;\n        campaigns[id].currentBalance += value;\n  ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function addTokensToCampaign(bytes32,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/22/0x47f8c173083af430f4507124b63db55296500baf.sol",
        "function": "addTokensToCampaign(bytes32,uint256)",
        "lineno": 97,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}