{
  "contract": "0x6f28b146804dba2d6f944c03528a8fdbc673df2c",
  "tool": "mythril",
  "start": 1563341042.4177125,
  "end": 1563348796.0517364,
  "duration": 7753.6340239048,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 643,
        "code": " string _datasource, string _arg1, string _arg2)\n    payable\n    returns (bytes32 _id) {\n        return query2(_timestamp, _datasource, _arg1, _arg2, 200000);\n    }\n\n    functio",
        "debug": "calldata_Oraclize_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Oraclize_0: 0x23dc42e700000000000000000000000000000000000000000000000000000000\ncalldatasize_Oraclize: 0x4\n",
        "description": "A possible integer overflow exists in the function `query1(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "query1(uint256,string,string)",
        "lineno": 218,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 846,
        "code": "nder);\n    }\n\n    function getPrice(string _datasource, address _addr)\n    private\n    returns (uint _dsprice) {\n        return getPrice(_datasource, 200000, _addr);",
        "debug": "calldata_Oraclize_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Oraclize_0: 0x2ef3accc00000000000000000000000000000000000000000000000000000000\ncalldatasize_Oraclize: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getPrice(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "getPrice(string,uint256)",
        "lineno": 153,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 968,
        "code": ", string _arg1, string _arg2)\n    payable\n    returns (bytes32 _id) {\n        return query2(0, _datasource, _arg1, _arg2, 200000);\n    }\n\n    function ",
        "debug": "calldata_Oraclize_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Oraclize_0: 0x4536297800000000000000000000000000000000000000000000000000000000\ncalldatasize_Oraclize: 0x4\n",
        "description": "A possible integer overflow exists in the function `query1(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "query1(string,string)",
        "lineno": 194,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1281,
        "code": "length = 0;\n        for (uint i=0; i<_newSessionPubKeysHash.length; i++) randomDS_sessionPubKeysHash.push(_newSessionPubKeysHash[i]);\n    }\n\n    function randomDS_getSessionPubKeyHash() constant returns (bytes32) {\n        uint i = uint(sha3(reqc[msg.sender]))%random",
        "debug": "calldata_Oraclize_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Oraclize_0: 0x512c0b9c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Oraclize: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `randomDS_updateSessionPubKeysHash(bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "randomDS_updateSessionPubKeysHash(bytes32[])",
        "lineno": 127,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1383,
        "code": "ction getPrice(string _datasource, uint _gaslimit)\n    public\n    returns (uint _dsprice) {\n        return getPrice(_datasource, _gaslimit",
        "debug": "calldata_Oraclize_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Oraclize_0: 0x524f388900000000000000000000000000000000000000000000000000000000\ncalldatasize_Oraclize: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getPrice(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "getPrice(string)",
        "lineno": 150,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1505,
        "code": "sender, reqc[msg.sender]);\n        reqc[msg.sender]++;\n        Log1(msg.sender, _id, _timestamp, _datasource, _arg, _gaslimit, addr_proofType[msg.sender], addr_gasPrice[msg.sender]);\n        return _id;\n    }\n\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit)\n    costs(_datasource, _gaslimit)\n    payable\n    returns (bytes32 _id) {\n    \tif ((_timestamp > now+3600*24*60)||(_gaslimit > block.gaslimit)) throw;\n\n        _id =",
        "debug": "calldata_Oraclize_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Oraclize_0: 0x5c242c5900000000000000000000000000000000000000000000000000000000\ncalldatasize_Oraclize: 0x4\n",
        "description": "A possible integer overflow exists in the function `query1(uint256,string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "query1(uint256,string,string,uint256)",
        "lineno": 265,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1972,
        "code": "int _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit)\n    payable\n    returns (bytes32 _id) {\n        return query2(_timestamp, _datasource, _arg1, _arg2, _gaslimit);\n    }\n\n    funct",
        "debug": "calldata_Oraclize_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Oraclize_0: 0x7570043700000000000000000000000000000000000000000000000000000000\ncalldatasize_Oraclize: 0x4\n",
        "description": "A possible integer overflow exists in the function `query1_withGasLimit(uint256,string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "query1_withGasLimit(uint256,string,string,uint256)",
        "lineno": 248,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7851,
        "code": "\n    mapping (address",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "query1(uint256,string,string,uint256)",
        "lineno": 117,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 7864,
        "code": "r]);\n        r",
        "debug": "timestamp: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf200\ncallvalue: 0x8b3fd40f0000000000000000000000001ffffffffffbfffffffffe53a0ffeffe\ncalldata_Oraclize_32 + 68: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_160_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_Oraclize_4_+_calldata_Oraclize_32_+_4))_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_Oraclize_4_+_calldata_Oraclize_32_+_36))): 0x1000004400000000000000000000000040002000000000000000004802800000\ncalldata_Oraclize_4 + calldata_Oraclize_32 + 4: 0x1f\ncalldata_Oraclize_0: 0x5c242c5900000000000000000000000000000000000000000000000000000000\ncalldatasize_Oraclize: 0x4\n",
        "description": "A possible integer overflow exists in the function `query1(uint256,string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "query1(uint256,string,string,uint256)",
        "lineno": 267,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8179,
        "code": "_gaslimit)\n    cos",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0xc809bddb7fbf962edf6ecffffffffefeddffefd7ddaff97bfeb15c94186b7df7\ncalldata_Oraclize_32 + 68: 0x0\nblock_gaslimit: 0x0\ncalldata_Oraclize_4: 0x0\ntimestamp: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb0e600\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_160_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_Oraclize_4_+_calldata_Oraclize_32_+_4))_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_Oraclize_4_+_calldata_Oraclize_32_+_36))): 0x805bdccff7e4c31209ecfffffffe3e52a0002a95a1f80b6050db08a005bcdcf\ncalldata_Oraclize_4 + calldata_Oraclize_32 + 4: 0x1f\ncalldata_Oraclize_0: 0x5c242c5900000000000000000000000000000000000000000000000000000000\ncalldatasize_Oraclize: 0x4\n",
        "description": "A possible integer overflow exists in the function `query1(uint256,string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "query1(uint256,string,string,uint256)",
        "lineno": 271,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9104,
        "code": "ner = msg.sender;\n    }\n",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "withdrawFunds(address)",
        "lineno": 105,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 14233,
        "code": "  }\n\n    ",
        "debug": "",
        "description": "Function query2(uint256,string,string,string) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "query2(uint256,string,string,string)",
        "lineno": 58,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 14336,
        "code": "x.origin;\n    }\n\n    f",
        "debug": "calldata_Oraclize_32 + 68: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\norigin: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_Oraclize_0: 0x7570043700000000000000000000000000000000000000000000000000000000\ncalldatasize_Oraclize: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n",
        "description": "A possible integer overflow exists in the function `query1_withGasLimit(uint256,string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "query1_withGasLimit(uint256,string,string,uint256)",
        "lineno": 57,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 14378,
        "code": " uint mul",
        "debug": "",
        "description": "Function query1_withGasLimit(uint256,string,string,uint256) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "query1_withGasLimit(uint256,string,string,uint256)",
        "lineno": 60,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 17936,
        "code": "sprice +=",
        "debug": "",
        "description": "Function query1_withGasLimit(uint256,string,string,uint256) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "query1_withGasLimit(uint256,string,string,uint256)",
        "lineno": 169,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 18304,
        "code": "size := extcodesize",
        "debug": "calldata_Oraclize_4 + calldata_Oraclize_4: 0x20\nstorage_3: 0x7e2f0c3f4776c325c9aeaafeae54aa22c7d44427efd4472c9808484591105016\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\norigin: 0x100\ncalldata_Oraclize_0: 0x4536297800000000000000000000000000000000000000000000000000000000\ncalldatasize_Oraclize: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n",
        "description": "A possible integer overflow exists in the function `query1(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "query1(string,string)",
        "lineno": 178,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 18306,
        "code": " {\n        _size := extcodesize",
        "debug": "calldata_Oraclize_4 + calldata_Oraclize_4: 0x20\nstorage_3: 0x156bf6ddb9d7160b0a915829010878bbe1d801b87644b9f33ba7f2bf6c00e75\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_160_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_Oraclize_4_+_calldata_Oraclize_4))_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_Oraclize_4_+_calldata_Oraclize_32_+_4))): 0x8a4dbecdc1c3d6612982bfc2ab1a01004749770fa4660ede2f3bba7d2658b980\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\norigin: 0x8000\ncalldata_Oraclize_0: 0x4536297800000000000000000000000000000000000000000000000000000000\ncalldatasize_Oraclize: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n",
        "description": "A possible integer overflow exists in the function `query1(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "query1(string,string)",
        "lineno": 177,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 18370,
        "code": "aclize {\n    mapping (address => uint) reqc;\n\n    mapping (address => byte) public cbAddresses;\n\n    event Log1(address sender, bytes32 cid, uint timestamp, string datasource, string arg, uint gaslimit, byte proofType, uint gasPrice);\n    event Log2(address sender, bytes32 cid, uint timestamp, string datasource, string arg1, string arg2, uint gaslimit, byte proofType, uint gasPrice);\n    event LogN(address sender, bytes32 cid, uint timestamp, string datasource, bytes args, uint gaslimit, byte proofType, uint gasPrice);\n    event Log1_fnc(address sender, bytes32 cid, uint timestamp, string datasource, string arg, function() external callback, uint gaslimit, byte proofType, uint gasPrice);\n    event Log2_fnc(address sender, bytes32 cid, uint timestamp, string datasource, string arg1, string arg2, function() external callback, uint gaslimit, byte proofType, uint gasPrice);\n    event LogN_fnc(address sender, bytes32 cid, uint timestamp, string datasource, bytes args, function() external callback, uint gaslimit, byte proofType, uint gasPrice);\n\n    address owner;\n\n    modifier onlyadmin {\n        if (msg.sender != owner) throw;\n       _;\n    }\n    \n    function changeAdmin(address _newAdmin) \n    onlyadmin {\n        owner = _newAdmin;\n    }\n\n    // proof is currently a placeholder for when associated proof for addressType is added\n    function addCbAddress(address newCbAddress, byte addressType, bytes proof) \n    onlyadmin {\n        cbAddresses[newCbAddress] = addressType;\n    }\n\n    function addCbAddress(address newCbAddress, byte addressType)\n    onlyadmin {\n        bytes memory nil = '';\n        addCbAddress(newCbAddress, addressType, nil);\n    }\n\n    function removeCbAddress(address newCbAddress)\n    onlyadmin {\n        delete cbAddresses[newCbAddress];\n    }\n\n    function cbAddress()\n    constant\n    returns (address _cbAddress) {\n        if (cbAddresses[tx.origin] != 0)\n            _cbAddress = tx.origin;\n    }\n\n    function addDSource(string dsname, uint multiplier) {\n        addDSource(dsname, 0x00, multiplier);\n    }\n\n    function addDSource(string dsname, byte proofType, uint multiplier) onlyadmin {\n        bytes32 dsname_hash = sha3(dsname, proofType);\n        dsources[dsources.length++] = dsname_hash;\n        price_multiplier[dsname_hash] = multiplier;\n    }\n\n    function multisetProofType(uint[] _proofType, address[] _addr) onlyadmin {\n        for (uint i=0; i<_addr.length; i++) addr_proofType[_addr[i]] = byte(_proofType[i]);\n    }\n\n    function multisetCustomGasPrice(uint[] _gasPrice, address[] _addr) onlyadmin {\n        for (uint i=0; i<_addr.length; i++) addr_gasPrice[_addr[i]] = _gasPrice[i];\n    }\n\n    uint gasprice = 20000000000;\n\n    function setGasPrice(uint newgasprice)\n    onlyadmin {\n        gasprice = newgasprice;\n    }\n\n    function setBasePrice(uint new_baseprice)\n    onlyadmin { //0.001 usd in ether\n        baseprice = new_baseprice;\n        for (uint i=0; i<dsources.length; i++) price[dsources[i]] = new_baseprice*price_multiplier[dsources[i]];\n    }\n\n    function setBasePrice(uint new_baseprice, bytes proofID)\n    onlyadmin { //0.001 usd in ether\n        baseprice = new_baseprice;\n        for (uint i=0; i<dsources.length; i++) price[dsources[i]] = new_baseprice*price_multiplier[dsources[i]];\n    }\n\n    function withdrawFunds(address _addr)\n    onlyadmin {\n        _addr.send(this.balance);\n    }\n\n    function() onlyadmin {}\n\n    function Oraclize() {\n        owner = msg.sender;\n    }\n\n    modifier costs(string datasource, uint gaslimit) {\n        uint price = getPrice(datasource, gaslimit, msg.sender);\n        if (msg.value >= price){\n            uint diff = msg.value - price;\n            if (diff > 0) msg.sender.send(diff);\n           _;\n        } else throw;\n    }\n\n    mapping (address => byte) addr_proofType;\n    mapping (address => uint) addr_gasPrice;\n    uint public baseprice;\n    mapping (bytes32 => uint) price;\n    mapping (bytes32 => uint) price_multiplier;\n    bytes32[] dsources;\n\n    bytes32[] public randomDS_sessionPubKeysHash;\n\n    function randomDS_updateSessionPubKeysHash(bytes32[] _newSessionPubKeysHash) onlyadmin {\n        randomDS_sessionPubKeysHash.length = 0;\n        for (uint i=0; i<_newSessionPubKeysHash.length; i++) randomDS_sessionPubKeysHash.push(_newSessionPubKeysHash[i]);\n    }\n\n    function randomDS_getSessionPubKeyHash() constant returns (bytes32) {\n        uint i = uint(sha3(reqc[msg.sender]))%randomDS_sessionPubKeysHash.length;\n        return randomDS_sessionPubKeysHash[i];\n    }\n\n    function setProofType(byte _proofType) {\n        addr_proofType[msg.sender] = _proofType;\n    }\n\n    function setCustomGasPrice(uint _gasPrice) {\n        addr_gasPrice[msg.sender] = _gasPrice;\n    }\n\n    function getPrice(string _datasource)\n    public\n    returns (uint _dsprice) {\n        return getPrice(_datasource, msg.sender);\n    }\n\n    function getPrice(string _datasource, uint _gaslimit)\n    public\n    returns (uint _dsprice) {\n        return getPrice(_datasource, _gaslimit, msg.sender);\n    }\n\n    function getPrice(string _datasource, address _addr)\n    private\n    returns (uint _dsprice) {\n        return getPrice(_datasource, 200000, _addr);\n    }\n\n    function getPrice(string _datasource, uint _gaslimit, address _addr)\n    private\n    returns (uint _dsprice) {\n        uint gasprice_ = addr_gasPrice[_addr];\n        if ((_gaslimit <= 200000)&&(reqc[_addr] == 0)&&(gasprice_ <= gasprice)&&(tx.origin != cbAddress())) return 0;\n        if (gasprice_ == 0) gasprice_ = gasprice;\n        _dsprice = price[sha3(_datasource, addr_proofType[_addr])];\n        _dsprice += _gaslimit*gasprice_;\n        return _dsprice;\n    }\n\n    function getCodeSize(address _addr)\n    private\n    constant\n    returns(uint _size) {\n    assembly {\n        _size := extcodesize(_addr)\n        }\n    }\n\n    function query(string _datasource, string _arg)\n    payable\n    returns (bytes32 _id) {\n        return query1(0, _datasource, _arg, 200000);\n    }\n\n    function query1(string _datasource, string _arg)\n    payable\n    returns (bytes32 _id) {\n        return query1(0, _datasource, _arg, 200000);\n    }\n\n    function query2(string _datasource, string _arg1, string _arg2)\n    payable\n    returns (bytes32 _id) {\n        return query2(0, _datasource, _arg1, _arg2, 200000);\n    }\n\n    function queryN(string _datasource, bytes _args)\n    payable\n    returns (bytes32 _id) {\n        return queryN(0, _datasource, _args, 200000);\n    }\n\n    function query(uint _timestamp, string _datasource, string _arg)\n    payable\n    returns (bytes32 _id) {\n        return query1(_timestamp, _datasource, _arg, 200000);\n    }\n\n    function query1(uint _timestamp, string _datasource, string _arg)\n    payable\n    returns (bytes32 _id) {\n        return query1(_timestamp, _datasource, _arg, 200000);\n    }\n\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2)\n    payable\n    returns (bytes32 _id) {\n        return query2(_timestamp, _datasource, _arg1, _arg2, 200000);\n    }\n\n    function queryN(uint _timestamp, string _datasource, bytes _args)\n    payable\n    returns (bytes32 _id) {\n        return queryN(_timestamp, _datasource, _args, 200000);\n    }\n\n    function query(uint _timestamp, string _datasource, string _arg, uint _gaslimit)\n    payable\n    returns (bytes32 _id) {\n        return query1(_timestamp, _datasource, _arg, _gaslimit);\n    }\n\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit)\n    payable\n    returns (bytes32 _id) {\n        return query(_timestamp, _datasource, _arg, _gaslimit);\n    }\n\n    function query1_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit)\n    payable\n    returns (bytes32 _id) {\n        return query1(_timestamp, _datasource, _arg, _gaslimit);\n    }\n\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit)\n    payable\n    returns (bytes32 _id) {\n        return query2(_timestamp, _datasource, _arg1, _arg2, _gaslimit);\n    }\n\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _args, uint _gaslimit)\n    payable\n    returns (bytes32 _id) {\n        return queryN(_timestamp, _datasource, _args, _gaslimit);\n    }\n\n    function query1(uint _timestamp, string _datasource, string _arg, uint _gaslimit) costs(_datasource, _gaslimit)\n    payable\n    returns (bytes32 _id) {\n    \tif ((_timestamp > now+3600*24*60)||(_gaslimit > block.gaslimit)) throw;\n\n        _id = sha3(this, msg.sender, reqc[msg.sender]);\n        reqc[msg.sender]++;\n        Log1(msg.sender, _id, _timestamp, _datasource, _arg, _gaslimit, addr_proofType[msg.sender], addr_gasPrice[msg.sender]);\n        return _id;\n    }\n\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit)\n    costs(_datasource, _gaslimit)\n    payable\n    returns (bytes32 _id) {\n    \tif ((_timestamp > now+3600*24*60)||(_gaslimit > block.gaslimit)) throw;\n\n        _id = sha3(this, msg.sender, reqc[msg.sender]);\n        reqc[msg.sender]++;\n        Log2(msg.sender, _id, _timestamp, _datasource, _arg1, _arg2, _gaslimit, addr_proofType[msg.sender], addr_gasPrice[msg.sender]);\n        return _id;\n    }\n\n    function queryN(uint _timestamp, string _datasource, bytes _args, uint _gaslimit) costs(_datasource, _gaslimit)\n    payable\n    returns (bytes32 _id) {\n    \tif ((_timestamp > now+3600*24*60)||(_gaslimit > block.gaslimit)) throw;\n\n        _id = sha3(this, msg.sender, reqc[msg.sender]);\n        reqc[msg.sender]++;\n        LogN(msg.sender, _id, _timestamp, _datasource, _args, _gaslimit, addr_proofType[msg.sender], addr_gasPrice[msg.sender]);\n        return _id;\n    }\n\n    function query1_fnc(uint _timestamp, string _datasource, string _arg, function() external _fnc, uint _gaslimit)\n    costs(_datasource, _gaslimit)\n    payable\n    returns (bytes32 _id) {\n        if ((_timestamp > now+3600*24*60)||(_gaslimit > block.gaslimit)||address(_fnc) != msg.sender) throw;\n\n        _id = sha3(this, msg.sender, reqc[msg.sender]);\n        reqc[msg.sender]++;\n        Log1_fnc(msg.sender, _id, _timestamp, _datasource, _arg, _fnc, _gaslimit, addr_proofType[msg.sender], addr_gasPrice[msg.sender]);\n        return _id;\n    }\n\n    function query2_fnc(uint _timestamp, string _datasource, string _arg1, string _arg2, function() external _fnc, uint _gaslimit)\n    costs(_datasource, _gaslimit)\n    payable\n    returns (bytes32 _id) {\n        if ((_timestamp > now+3600*24*60)||(_gaslimit > block.gaslimit)||address(_fnc) != msg.sender) throw;\n\n        _id = sha3(this, msg.sender, reqc[msg.sender]);\n        reqc[msg.sender]++;\n        Log2_fnc(msg.sender, _id, _timestamp, _datasource, _arg1, _arg2, _fnc,  _gaslimit, addr_proofType[msg.sender], addr_gasPrice[msg.sender]);\n        return _id;\n    }\n\n    function queryN_fnc(uint _timestamp, string _datasource, bytes _args, function() external _fnc, uint _gaslimit)\n    costs(_datasource, _gaslimit)\n    payable\n    returns (bytes32 _id) {\n        if ((_timestamp > now+3600*24*60)||(_gaslimit > block.gaslimit)||address(_fnc) != msg.sender) throw;\n\n        _id = sha3(this, msg.sender, reqc[msg.sender]);\n        reqc[msg.sender]++;\n        LogN_fnc(msg.sender, _id, _timestamp, _datasource, _args, _fnc, _gaslimit, addr_proofType[msg.sender], addr_gasPrice[msg.sender]);\n        return _id;\n    }\n}",
        "debug": "storage_10: 0x3fbff7dff0000000000000000000000000000000000000001f7ff8240000b778\nstorage_2: 0x0\ncaller: 0x0\ncalldata_Oraclize_0: 0x512c0b9c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Oraclize: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `randomDS_updateSessionPubKeysHash(bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x6f28b146804dba2d6f944c03528a8fdbc673df2c.sol",
        "function": "randomDS_updateSessionPubKeysHash(bytes32[])",
        "lineno": 12,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}