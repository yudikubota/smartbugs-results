{"error": null, "issues": [{"address": 195, "code": " emit DonationCreated( ", "debug": "storage_4: 0x869ecc361cfd197dbe318c1ad689fba55aa7d6be40180b186da70481ed55108b\ncallvalue: 0xecbd0d4636e2a061e004efba1c81180dd3371a2e7fce53df66772ee6efd5bee1\ncalldata_SheetMusic_0: 0x6c00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "fallback", "lineno": 286, "title": "Integer Overflow ", "type": "Warning"}, {"address": 211, "code": " msg.value );\n\n        chec", "debug": "callvalue: 0xecbd0d4636e2a061e004efba1c81180dd3371a2e7fce53df66772ee6efd5bee1\nstorage_5: 0x869ecc361cfd197dbe318c1ad689fba55aa7d6be40180b186da70481ed55108b\ncalldata_SheetMusic_0: 0x6c00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "fallback", "lineno": 286, "title": "Integer Overflow ", "type": "Warning"}, {"address": 341, "code": "tats getter\n     */\n\n    function getDonationStats() external view returns (\n        uint goal,\n        uint minimum,\n        uint currentValue,\n        uint milestoneAmount,\n        address donateeAddr\n    ) {\n\n        return (\n            DONATION_GOAL,\n            minDonation,\n            totalValue,\n            milest", "debug": "The exception is triggered under the following conditions:\n\nstorage_2 + keccac_calldata_SheetMusic_4: 0x900\nstorage_1 + keccac_calldata_SheetMusic_4: 0x1\ncalldata_SheetMusic_0: 0x15f92e3b00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "getBeat(uint256)", "lineno": 347, "title": "Exception state", "type": "Informational"}, {"address": 382, "code": "tats getter\n     */\n\n    function getDonationStats() external view returns (\n        uint goal,\n        uint minimum,\n        uint currentValue,\n        uint milestoneAmount,\n        address donateeAddr\n    ) {\n\n        return (\n            DONATION_GOAL,\n            minDonation,\n            totalValue,\n            milest", "debug": "storage_2 + keccac_calldata_SheetMusic_4: 0x0\nstorage_1 + keccac_calldata_SheetMusic_4: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_SheetMusic_0: 0x15f92e3b00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getBeat(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "getBeat(uint256)", "lineno": 347, "title": "Integer Overflow ", "type": "Warning"}, {"address": 459, "code": " note min value\n\n        require( msg.value >= minDonation );\n\n\n        //Check valid notes\n\n        checkMidiNotesValue( midiNotes );\n\n\n        //Create note\n\n        Beat memory newBeat = Beat({\n            maker: msg.sender,\n            donation: msg.value,\n            midiNotes: midiNotes,\n            length: length\n        });\n\n        notes[ ++ numNotes ] = newBeat;\n\n        emit NoteCreated( msg.sender, numNotes, msg.value );\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Create passage or number of beats\n     * Nested array unimplemented right now\n     */\n\n    function createPassage( uint8[] userNotes, uint[] userDivider, NoteLength[] lengths )\n   ", "debug": "calldata_SheetMusic_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SheetMusic_0: 0x3064829a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\n", "description": "A possible integer overflow exists in the function `_function_0x3064829a`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x3064829a", "lineno": 174, "title": "Integer Overflow ", "type": "Warning"}, {"address": 518, "code": "   milestoneValue += msg.value;\n\n        uint userNumberBeats = userDivider.length;\n        uint userNumberLength = lengths.length;\n\n\n        //Check note min value and lengths equal eachother\n        //Check valid midi notes\n\n        require( userNumberBeats == userNumberLength );\n\n        require( msg.value >= ( minDonation * userNumberBeats ) );\n\n        checkMidiNotesValue( userNotes );\n\n\n        //Create beats\n\n        uint noteDonation = msg.value / userNumberBeats;\n        uint lastDivider = 0;\n\n        for( uint i = 0; i < userNumberBeats; ++ i ) {\n\n            uint divide = userDivider[ i ];\n            NoteLength length = lengths[ i ];\n\n            uint8[] memory midiNotes = splice( userNotes, lastDivider, divide );\n\n            Beat memory newBeat = Beat({\n                maker: msg.sender,\n                donation: noteDonation,\n                midiNotes: midiNotes,\n                length: length\n            });\n\n            lastDivider = divide;\n\n            notes[ ++ numNotes ] = newBeat;\n\n            emit NoteCreated( msg.sender, numNotes, noteDonation );\n\n        }\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Random value add to contract\n     */\n\n    function () external payable {\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Donate with intent\n     */\n\n    functio", "debug": "calldata_SheetMusic_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SheetMusic_0: 0x63136bec00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\n", "description": "A possible integer overflow exists in the function `_function_0x63136bec`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x63136bec", "lineno": 215, "title": "Integer Overflow ", "type": "Warning"}, {"address": 542, "code": "   milestoneValue += msg.value;\n\n        uint userNumberBeats = userDivider.length;\n        uint userNumberLength = lengths.length;\n\n\n        //Check note min value and lengths equal eachother\n        //Check valid midi notes\n\n        require( userNumberBeats == userNumberLength );\n\n        require( msg.value >= ( minDonation * userNumberBeats ) );\n\n        checkMidiNotesValue( userNotes );\n\n\n        //Create beats\n\n        uint noteDonation = msg.value / userNumberBeats;\n        uint lastDivider = 0;\n\n        for( uint i = 0; i < userNumberBeats; ++ i ) {\n\n            uint divide = userDivider[ i ];\n            NoteLength length = lengths[ i ];\n\n            uint8[] memory midiNotes = splice( userNotes, lastDivider, divide );\n\n            Beat memory newBeat = Beat({\n                maker: msg.sender,\n                donation: noteDonation,\n                midiNotes: midiNotes,\n                length: length\n            });\n\n            lastDivider = divide;\n\n            notes[ ++ numNotes ] = newBeat;\n\n            emit NoteCreated( msg.sender, numNotes, noteDonation );\n\n        }\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Random value add to contract\n     */\n\n    function () external payable {\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Donate with intent\n     */\n\n    functio", "debug": "calldata_SheetMusic_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SheetMusic_0: 0x63136bec00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\n", "description": "A possible integer overflow exists in the function `_function_0x63136bec`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x63136bec", "lineno": 215, "title": "Integer Overflow ", "type": "Warning"}, {"address": 548, "code": "   milestoneValue += msg.value;\n\n        uint userNumberBeats = userDivider.length;\n        uint userNumberLength = lengths.length;\n\n\n        //Check note min value and lengths equal eachother\n        //Check valid midi notes\n\n        require( userNumberBeats == userNumberLength );\n\n        require( msg.value >= ( minDonation * userNumberBeats ) );\n\n        checkMidiNotesValue( userNotes );\n\n\n        //Create beats\n\n        uint noteDonation = msg.value / userNumberBeats;\n        uint lastDivider = 0;\n\n        for( uint i = 0; i < userNumberBeats; ++ i ) {\n\n            uint divide = userDivider[ i ];\n            NoteLength length = lengths[ i ];\n\n            uint8[] memory midiNotes = splice( userNotes, lastDivider, divide );\n\n            Beat memory newBeat = Beat({\n                maker: msg.sender,\n                donation: noteDonation,\n                midiNotes: midiNotes,\n                length: length\n            });\n\n            lastDivider = divide;\n\n            notes[ ++ numNotes ] = newBeat;\n\n            emit NoteCreated( msg.sender, numNotes, noteDonation );\n\n        }\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Random value add to contract\n     */\n\n    function () external payable {\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Donate with intent\n     */\n\n    functio", "debug": "calldata_SheetMusic_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_SheetMusic_0: 0x63136bec00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\n", "description": "A possible integer overflow exists in the function `_function_0x63136bec`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x63136bec", "lineno": 215, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1473, "code": "ess donateeAddr\n    ) {\n\n        return (\n            DONATION_GOAL,\n            minDonation,\n            totalValue,\n        ", "debug": "storage_1 + keccac_calldata_SheetMusic_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_SheetMusic_0: 0x15f92e3b00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getBeat(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "getBeat(uint256)", "lineno": 355, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1475, "code": "ess donateeAddr\n    ) {\n\n        return (\n            DONATION_GOAL,\n            minDonation,\n            totalValue,\n        ", "debug": "storage_1 + keccac_calldata_SheetMusic_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_SheetMusic_0: 0x15f92e3b00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getBeat(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "getBeat(uint256)", "lineno": 355, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1585, "code": "s\n\n        checkMidiNot", "debug": "storage_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncallvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_SheetMusic_0: 0x3064829a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\n", "description": "A possible integer overflow exists in the function `_function_0x3064829a`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x3064829a", "lineno": 179, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1601, "code": "diNotes );\n\n\n        //Crea", "debug": "callvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_5: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_SheetMusic_0: 0x3064829a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\n", "description": "A possible integer overflow exists in the function `_function_0x3064829a`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x3064829a", "lineno": 181, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1785, "code": "\n        emit NoteCreated( msg.sender, numNotes, msg.value );\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Create passage or number of", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SheetMusic_4 + calldata_SheetMusic_4: 0x1\ncalldata_SheetMusic_cpy: 0x40\ncalldata_SheetMusic_32 + 4: 0x9\ncallvalue: 0x0\nstorage_6: 0x0\ncalldata_SheetMusic_0: 0x3064829a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x3064829a", "lineno": 194, "title": "Exception state", "type": "Informational"}, {"address": 1811, "code": " array unim", "debug": "calldata_SheetMusic_4 + calldata_SheetMusic_4: 0x1\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SheetMusic_cpy: 0x4c\ncalldata_SheetMusic_32 + 4: 0x0\ncallvalue: 0x0\nstorage_6: 0x0\ncalldata_SheetMusic_0: 0x3064829a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\n", "description": "A possible integer overflow exists in the function `_function_0x3064829a`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x3064829a", "lineno": 204, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1918, "code": " Nested array unimplemented ri", "debug": "calldata_SheetMusic_32 + 4: 0x0\nmem_288 + 32*calldata_SheetMusic_4 + calldata_SheetMusic_4 + 32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncallvalue: 0x0\nstorage_6: 0x0\ncalldata_SheetMusic_0: 0x3064829a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\ncalldata_SheetMusic_4 + calldata_SheetMusic_4: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x3064829a`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x3064829a", "lineno": 204, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1966, "code": " Nested array unimplemented ri", "debug": "The exception is triggered under the following conditions:\n\nmem_288 + 32*calldata_SheetMusic_4 + calldata_SheetMusic_4 + 64: 0xc\ncalldata_SheetMusic_32 + 4: 0x0\nkeccac_1_+_keccac_1_+_storage_2: 0xfd21b21f81006a0a2dadc607e028c033c1106777a5a941b484f7651b484c9018\ncallvalue: 0x0\nstorage_1 + keccac_1_+_storage_2: 0x9ed3d650220d4a208fbc040404f0822926042a9587ea32b7e155203b959200e1\nstorage_6: 0x0\ncalldata_SheetMusic_0: 0x3064829a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\nmem_mem_288 + 32*calldata_SheetMusic_4 + calldata_SheetMusic_4 + 32: 0x0\ncalldata_SheetMusic_4 + calldata_SheetMusic_4: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x3064829a", "lineno": 204, "title": "Exception state", "type": "Informational"}, {"address": 2118, "code": "eachother\n        //Che", "debug": "storage_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncallvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_SheetMusic_0: 0x63136bec00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\n", "description": "A possible integer overflow exists in the function `_function_0x63136bec`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x63136bec", "lineno": 221, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2134, "code": "di notes\n\n        require( ", "debug": "callvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_5: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_SheetMusic_0: 0x63136bec00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\n", "description": "A possible integer overflow exists in the function `_function_0x63136bec`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x63136bec", "lineno": 222, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2252, "code": "y midiNotes = splice( userN", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SheetMusic_4 + calldata_SheetMusic_4: 0x1\ncalldata_SheetMusic_cpy: 0x40\ncalldata_SheetMusic_0: 0x63136bec00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\ncalldata_SheetMusic_4 + calldata_SheetMusic_32 + 4: 0x0\ncalldata_SheetMusic_4 + calldata_SheetMusic_32 + 36: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x63136bec", "lineno": 241, "title": "Exception state", "type": "Informational"}, {"address": 3331, "code": ">= DONATION_GOAL && ! d", "debug": "storage_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncallvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_SheetMusic_0: 0xed88c68e00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\n", "description": "A possible integer overflow exists in the function `donate()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "donate()", "lineno": 299, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3347, "code": ") {\n\n            donationMe", "debug": "callvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_5: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_SheetMusic_0: 0xed88c68e00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\n", "description": "A possible integer overflow exists in the function `donate()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "donate()", "lineno": 299, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4111, "code": "/**\n     * Note lengths\n     */\n\n    enum NoteLength {\n\n        WHOLE_NOTE,\n\n        DOTTED_HALF_NOTE,\n\n        HALF_NOTE,\n\n        DOTTED_QUARTER_NOTE,\n\n        QUARTER_NOTE,\n\n        DOTTED_EIGHTH_NOTE,\n\n        EIGHTH_NOTE,\n\n        DOTTED_SIXTEENTH_NOTE,\n\n        SIXTEENTH_NOTE\n\n    }\n\n\n    /**\n     * Note struct\n     */\n\n    struct Beat {\n\n        address maker;\n\n        uint8[] midiNotes;\n\n        NoteLength length;\n\n        uint donation; //In weis\n\n    }\n\n\n    /**\n     * Internal props\n     */\n\n    mapping( uint => Beat ) private notes;\n\n    uint private numNotes;\n\n    address private donatee;\n\n\n    //Values donated toward goal and milestone\n\n    uint private totalValue;\n\n    uint private milestoneValue;\n\n\n    //Goals\n\n    uint constant DONATION_GOAL = 100 ether;\n\n    uint private minDonation = 0.005 ether;\n\n\n    //Transfer after a certain amount\n\n    uint private milestoneGoal = 5 ether;\n\n\n    //Full donation goal met\n\n    bool private donationMet = false;\n\n\n    /**\n     * Midi requirements\n     */\n\n    uint8 constant MIDI_LOWEST_NOTE = 21;\n\n    uint8 constant MIDI_HIGHEST_NOTE = 108;\n\n\n    /**\n     * Events\n     */\n\n    event NoteCreated( address indexed maker, uint id, uint donation );\n\n    event DonationCreated( address indexed maker, uint donation );\n\n    event DonationTransfered( address donatee, uint value );\n\n    event DonationGoalReached( address MrCool );\n\n    event MilestoneMet( address donater );\n\n\n    /**\n     * Construct\n     */\n\n    function SheetMusic( address donateeArg ) public {\n\n        donatee = donateeArg;\n\n    }\n\n\n    /**\n     * Main create note\n     * There is no 0 note. First one is 1\n     */\n\n    function createBeat( uint8[] midiNotes, NoteLength length ) external payable {\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n\n        //Check note min value\n\n        require( msg.value >= minDonation );\n\n\n        //Check valid notes\n\n        checkMidiNotesValue( midiNotes );\n\n\n        //Create note\n\n        Beat memory newBeat = Beat({\n            maker: msg.sender,\n            donation: msg.value,\n            midiNotes: midiNotes,\n            length: length\n        });\n\n        notes[ ++ numNotes ] = newBeat;\n\n        emit NoteCreated( msg.sender, numNotes, msg.value );\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Create passage or number of beats\n     * Nested array unimplemented right now\n     */\n\n    function createPassage( uint8[] userNotes, uint[] userDivider, NoteLength[] lengths )\n        external\n        payable\n    {\n\n        //Add values regardless if valid\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n        uint userNumberBeats = userDivider.length;\n        uint userNumberLength = lengths.length;\n\n\n        //Check note min value and lengths equal eachother\n        //Check valid midi notes\n\n        require( userNumberBeats == userNumberLength );\n\n        require( msg.value >= ( minDonation * userNumberBeats ) );\n\n        checkMidiNotesValue( userNotes );\n\n\n        //Create beats\n\n        uint noteDonation = msg.value / userNumberBeats;\n        uint lastDivider = 0;\n\n        for( uint i = 0; i < userNumberBeats; ++ i ) {\n\n            uint divide = userDivider[ i ];\n            NoteLength length = lengths[ i ];\n\n            uint8[] memory midiNotes = splice( userNotes, lastDivider, divide );\n\n            Beat memory newBeat = Beat({\n                maker: msg.sender,\n                donation: noteDonation,\n                midiNotes: midiNotes,\n                length: length\n            });\n\n            lastDivider = divide;\n\n            notes[ ++ numNotes ] = newBeat;\n\n            emit NoteCreated( msg.sender, numNotes, noteDonation );\n\n        }\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Random value add to contract\n     */\n\n    function () external payable {\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Donate with intent\n     */\n\n    function donate() external payable {\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n        emit DonationCreated( msg.sender, msg.value );\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Check if goal reached\n     */\n\n    function checkGoal( address maker ) internal {\n\n        if( totalValue >= DONATION_GOAL && ! donationMet ) {\n\n            donationMet = true;\n\n            emit DonationGoalReached( maker );\n\n        }\n\n        if( milestoneValue >= milestoneGoal ) {\n\n            transferMilestone();\n            milestoneValue = 0;\n\n        }\n\n    }\n\n\n    /**\n     * Getters for notes\n     */\n\n    function getNumberOfBeats() external view returns ( uint ) {\n\n        return numNotes;\n\n    }\n\n    function getBeat( uint id ) external view returns (\n        address,\n        uint8[],\n        NoteLength,\n        uint\n    ) {\n\n        Beat storage beat = notes[ id ];\n\n        return (\n            beat.maker,\n            beat.midiNotes,\n            beat.length,\n            beat.donation\n        );\n\n    }\n\n\n    /**\n     * Stats getter\n     */\n\n    function getDonationStats() external view returns (\n        uint goal,\n        uint minimum,\n        uint currentValue,\n        uint milestoneAmount,\n        address donateeAddr\n    ) {\n\n        return (\n            DONATION_GOAL,\n            minDonation,\n            totalValue,\n            milestoneGoal,\n            donatee\n        );\n\n    }\n\n    function getTotalDonated() external view returns( uint ) {\n\n        return totalValue;\n\n    }\n\n    function getDonatee() external view returns( address ) {\n\n        return donatee;\n\n    }\n\n\n    /**\n     * Finishers\n     */\n\n    function transferMilestone() internal {\n\n        uint balance = address( this ).balance;\n\n        donatee.transfer( balance );\n\n        emit DonationTransfered( donatee, balance );\n\n    }\n\n\n    /**\n     * Internal checks and requires for valid notes\n     */\n\n    function checkMidiNoteValue( uint8 midi ) pure internal {\n\n        require( midi >= MIDI_LOWEST_NOTE && midi <= MIDI_HIGHEST_NOTE );\n\n    }\n\n    function checkMidiNotesValue( uint8[] midis ) pure internal {\n\n        uint num = midis.length;\n\n        //require less or equal to all notes allowed\n\n        require( num <= ( MIDI_HIGHEST_NOTE - MIDI_LOWEST_NOTE ) );\n\n        for( uint i = 0; i < num; ++ i ) {\n\n            checkMidiNoteValue( midis[ i ] );\n\n        }\n\n    }\n\n\n    /**\n     * Owner setters for future proofing\n     */\n\n    function setMinDonation( uint newMin ) onlyOwner external {\n\n        minDonation = newMin;\n\n    }\n\n    function setMilestone( uint newMile ) onlyOwner external {\n\n        milestoneGoal = newMile;\n\n    }\n\n\n    /**\n     * Array splice function\n     */\n\n    function splice( uint8[] arr, uint index, uint to )\n        pure\n        internal\n        returns( uint8[] )\n    {\n\n        uint8[] memory output = new uint8[]( to - index );\n        uint counter = 0;\n\n        for( uint i = index; i < to; ++ i ) {\n\n            output[ counter ] = arr[ i ];\n\n            ++ counter;\n\n        }\n\n        return output;\n\n    }\n\n}", "debug": "calldata_SheetMusic_32 + 4: 0x0\nstorage_1 + keccac_1_+_storage_2: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0\ncallvalue: 0x0\nstorage_6: 0x0\ncalldata_SheetMusic_0: 0x3064829a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\ncalldata_SheetMusic_4 + calldata_SheetMusic_4: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x3064829a`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x3064829a", "lineno": 49, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4117, "code": "/**\n     * Note lengths\n     */\n\n    enum NoteLength {\n\n        WHOLE_NOTE,\n\n        DOTTED_HALF_NOTE,\n\n        HALF_NOTE,\n\n        DOTTED_QUARTER_NOTE,\n\n        QUARTER_NOTE,\n\n        DOTTED_EIGHTH_NOTE,\n\n        EIGHTH_NOTE,\n\n        DOTTED_SIXTEENTH_NOTE,\n\n        SIXTEENTH_NOTE\n\n    }\n\n\n    /**\n     * Note struct\n     */\n\n    struct Beat {\n\n        address maker;\n\n        uint8[] midiNotes;\n\n        NoteLength length;\n\n        uint donation; //In weis\n\n    }\n\n\n    /**\n     * Internal props\n     */\n\n    mapping( uint => Beat ) private notes;\n\n    uint private numNotes;\n\n    address private donatee;\n\n\n    //Values donated toward goal and milestone\n\n    uint private totalValue;\n\n    uint private milestoneValue;\n\n\n    //Goals\n\n    uint constant DONATION_GOAL = 100 ether;\n\n    uint private minDonation = 0.005 ether;\n\n\n    //Transfer after a certain amount\n\n    uint private milestoneGoal = 5 ether;\n\n\n    //Full donation goal met\n\n    bool private donationMet = false;\n\n\n    /**\n     * Midi requirements\n     */\n\n    uint8 constant MIDI_LOWEST_NOTE = 21;\n\n    uint8 constant MIDI_HIGHEST_NOTE = 108;\n\n\n    /**\n     * Events\n     */\n\n    event NoteCreated( address indexed maker, uint id, uint donation );\n\n    event DonationCreated( address indexed maker, uint donation );\n\n    event DonationTransfered( address donatee, uint value );\n\n    event DonationGoalReached( address MrCool );\n\n    event MilestoneMet( address donater );\n\n\n    /**\n     * Construct\n     */\n\n    function SheetMusic( address donateeArg ) public {\n\n        donatee = donateeArg;\n\n    }\n\n\n    /**\n     * Main create note\n     * There is no 0 note. First one is 1\n     */\n\n    function createBeat( uint8[] midiNotes, NoteLength length ) external payable {\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n\n        //Check note min value\n\n        require( msg.value >= minDonation );\n\n\n        //Check valid notes\n\n        checkMidiNotesValue( midiNotes );\n\n\n        //Create note\n\n        Beat memory newBeat = Beat({\n            maker: msg.sender,\n            donation: msg.value,\n            midiNotes: midiNotes,\n            length: length\n        });\n\n        notes[ ++ numNotes ] = newBeat;\n\n        emit NoteCreated( msg.sender, numNotes, msg.value );\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Create passage or number of beats\n     * Nested array unimplemented right now\n     */\n\n    function createPassage( uint8[] userNotes, uint[] userDivider, NoteLength[] lengths )\n        external\n        payable\n    {\n\n        //Add values regardless if valid\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n        uint userNumberBeats = userDivider.length;\n        uint userNumberLength = lengths.length;\n\n\n        //Check note min value and lengths equal eachother\n        //Check valid midi notes\n\n        require( userNumberBeats == userNumberLength );\n\n        require( msg.value >= ( minDonation * userNumberBeats ) );\n\n        checkMidiNotesValue( userNotes );\n\n\n        //Create beats\n\n        uint noteDonation = msg.value / userNumberBeats;\n        uint lastDivider = 0;\n\n        for( uint i = 0; i < userNumberBeats; ++ i ) {\n\n            uint divide = userDivider[ i ];\n            NoteLength length = lengths[ i ];\n\n            uint8[] memory midiNotes = splice( userNotes, lastDivider, divide );\n\n            Beat memory newBeat = Beat({\n                maker: msg.sender,\n                donation: noteDonation,\n                midiNotes: midiNotes,\n                length: length\n            });\n\n            lastDivider = divide;\n\n            notes[ ++ numNotes ] = newBeat;\n\n            emit NoteCreated( msg.sender, numNotes, noteDonation );\n\n        }\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Random value add to contract\n     */\n\n    function () external payable {\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Donate with intent\n     */\n\n    function donate() external payable {\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n        emit DonationCreated( msg.sender, msg.value );\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Check if goal reached\n     */\n\n    function checkGoal( address maker ) internal {\n\n        if( totalValue >= DONATION_GOAL && ! donationMet ) {\n\n            donationMet = true;\n\n            emit DonationGoalReached( maker );\n\n        }\n\n        if( milestoneValue >= milestoneGoal ) {\n\n            transferMilestone();\n            milestoneValue = 0;\n\n        }\n\n    }\n\n\n    /**\n     * Getters for notes\n     */\n\n    function getNumberOfBeats() external view returns ( uint ) {\n\n        return numNotes;\n\n    }\n\n    function getBeat( uint id ) external view returns (\n        address,\n        uint8[],\n        NoteLength,\n        uint\n    ) {\n\n        Beat storage beat = notes[ id ];\n\n        return (\n            beat.maker,\n            beat.midiNotes,\n            beat.length,\n            beat.donation\n        );\n\n    }\n\n\n    /**\n     * Stats getter\n     */\n\n    function getDonationStats() external view returns (\n        uint goal,\n        uint minimum,\n        uint currentValue,\n        uint milestoneAmount,\n        address donateeAddr\n    ) {\n\n        return (\n            DONATION_GOAL,\n            minDonation,\n            totalValue,\n            milestoneGoal,\n            donatee\n        );\n\n    }\n\n    function getTotalDonated() external view returns( uint ) {\n\n        return totalValue;\n\n    }\n\n    function getDonatee() external view returns( address ) {\n\n        return donatee;\n\n    }\n\n\n    /**\n     * Finishers\n     */\n\n    function transferMilestone() internal {\n\n        uint balance = address( this ).balance;\n\n        donatee.transfer( balance );\n\n        emit DonationTransfered( donatee, balance );\n\n    }\n\n\n    /**\n     * Internal checks and requires for valid notes\n     */\n\n    function checkMidiNoteValue( uint8 midi ) pure internal {\n\n        require( midi >= MIDI_LOWEST_NOTE && midi <= MIDI_HIGHEST_NOTE );\n\n    }\n\n    function checkMidiNotesValue( uint8[] midis ) pure internal {\n\n        uint num = midis.length;\n\n        //require less or equal to all notes allowed\n\n        require( num <= ( MIDI_HIGHEST_NOTE - MIDI_LOWEST_NOTE ) );\n\n        for( uint i = 0; i < num; ++ i ) {\n\n            checkMidiNoteValue( midis[ i ] );\n\n        }\n\n    }\n\n\n    /**\n     * Owner setters for future proofing\n     */\n\n    function setMinDonation( uint newMin ) onlyOwner external {\n\n        minDonation = newMin;\n\n    }\n\n    function setMilestone( uint newMile ) onlyOwner external {\n\n        milestoneGoal = newMile;\n\n    }\n\n\n    /**\n     * Array splice function\n     */\n\n    function splice( uint8[] arr, uint index, uint to )\n        pure\n        internal\n        returns( uint8[] )\n    {\n\n        uint8[] memory output = new uint8[]( to - index );\n        uint counter = 0;\n\n        for( uint i = index; i < to; ++ i ) {\n\n            output[ counter ] = arr[ i ];\n\n            ++ counter;\n\n        }\n\n        return output;\n\n    }\n\n}", "debug": "calldata_SheetMusic_32 + 4: 0x0\nkeccac_1_+_keccac_1_+_storage_2: 0xfc88ad0559ffa886490b461aaad18b5e1fa1e73d7f43800c2aebe1b2369ef760\ncallvalue: 0x0\nstorage_1 + keccac_1_+_storage_2: 0x914a0212bf09deee3e8cb8a0423a7b1bc640942c00edad11117d2af52410ed01\nstorage_6: 0x0\ncalldata_SheetMusic_0: 0x3064829a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\ncalldata_SheetMusic_4 + calldata_SheetMusic_4: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x3064829a`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x3064829a", "lineno": 49, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4128, "code": "/**\n     * Note lengths\n     */\n\n    enum NoteLength {\n\n        WHOLE_NOTE,\n\n        DOTTED_HALF_NOTE,\n\n        HALF_NOTE,\n\n        DOTTED_QUARTER_NOTE,\n\n        QUARTER_NOTE,\n\n        DOTTED_EIGHTH_NOTE,\n\n        EIGHTH_NOTE,\n\n        DOTTED_SIXTEENTH_NOTE,\n\n        SIXTEENTH_NOTE\n\n    }\n\n\n    /**\n     * Note struct\n     */\n\n    struct Beat {\n\n        address maker;\n\n        uint8[] midiNotes;\n\n        NoteLength length;\n\n        uint donation; //In weis\n\n    }\n\n\n    /**\n     * Internal props\n     */\n\n    mapping( uint => Beat ) private notes;\n\n    uint private numNotes;\n\n    address private donatee;\n\n\n    //Values donated toward goal and milestone\n\n    uint private totalValue;\n\n    uint private milestoneValue;\n\n\n    //Goals\n\n    uint constant DONATION_GOAL = 100 ether;\n\n    uint private minDonation = 0.005 ether;\n\n\n    //Transfer after a certain amount\n\n    uint private milestoneGoal = 5 ether;\n\n\n    //Full donation goal met\n\n    bool private donationMet = false;\n\n\n    /**\n     * Midi requirements\n     */\n\n    uint8 constant MIDI_LOWEST_NOTE = 21;\n\n    uint8 constant MIDI_HIGHEST_NOTE = 108;\n\n\n    /**\n     * Events\n     */\n\n    event NoteCreated( address indexed maker, uint id, uint donation );\n\n    event DonationCreated( address indexed maker, uint donation );\n\n    event DonationTransfered( address donatee, uint value );\n\n    event DonationGoalReached( address MrCool );\n\n    event MilestoneMet( address donater );\n\n\n    /**\n     * Construct\n     */\n\n    function SheetMusic( address donateeArg ) public {\n\n        donatee = donateeArg;\n\n    }\n\n\n    /**\n     * Main create note\n     * There is no 0 note. First one is 1\n     */\n\n    function createBeat( uint8[] midiNotes, NoteLength length ) external payable {\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n\n        //Check note min value\n\n        require( msg.value >= minDonation );\n\n\n        //Check valid notes\n\n        checkMidiNotesValue( midiNotes );\n\n\n        //Create note\n\n        Beat memory newBeat = Beat({\n            maker: msg.sender,\n            donation: msg.value,\n            midiNotes: midiNotes,\n            length: length\n        });\n\n        notes[ ++ numNotes ] = newBeat;\n\n        emit NoteCreated( msg.sender, numNotes, msg.value );\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Create passage or number of beats\n     * Nested array unimplemented right now\n     */\n\n    function createPassage( uint8[] userNotes, uint[] userDivider, NoteLength[] lengths )\n        external\n        payable\n    {\n\n        //Add values regardless if valid\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n        uint userNumberBeats = userDivider.length;\n        uint userNumberLength = lengths.length;\n\n\n        //Check note min value and lengths equal eachother\n        //Check valid midi notes\n\n        require( userNumberBeats == userNumberLength );\n\n        require( msg.value >= ( minDonation * userNumberBeats ) );\n\n        checkMidiNotesValue( userNotes );\n\n\n        //Create beats\n\n        uint noteDonation = msg.value / userNumberBeats;\n        uint lastDivider = 0;\n\n        for( uint i = 0; i < userNumberBeats; ++ i ) {\n\n            uint divide = userDivider[ i ];\n            NoteLength length = lengths[ i ];\n\n            uint8[] memory midiNotes = splice( userNotes, lastDivider, divide );\n\n            Beat memory newBeat = Beat({\n                maker: msg.sender,\n                donation: noteDonation,\n                midiNotes: midiNotes,\n                length: length\n            });\n\n            lastDivider = divide;\n\n            notes[ ++ numNotes ] = newBeat;\n\n            emit NoteCreated( msg.sender, numNotes, noteDonation );\n\n        }\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Random value add to contract\n     */\n\n    function () external payable {\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Donate with intent\n     */\n\n    function donate() external payable {\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n        emit DonationCreated( msg.sender, msg.value );\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Check if goal reached\n     */\n\n    function checkGoal( address maker ) internal {\n\n        if( totalValue >= DONATION_GOAL && ! donationMet ) {\n\n            donationMet = true;\n\n            emit DonationGoalReached( maker );\n\n        }\n\n        if( milestoneValue >= milestoneGoal ) {\n\n            transferMilestone();\n            milestoneValue = 0;\n\n        }\n\n    }\n\n\n    /**\n     * Getters for notes\n     */\n\n    function getNumberOfBeats() external view returns ( uint ) {\n\n        return numNotes;\n\n    }\n\n    function getBeat( uint id ) external view returns (\n        address,\n        uint8[],\n        NoteLength,\n        uint\n    ) {\n\n        Beat storage beat = notes[ id ];\n\n        return (\n            beat.maker,\n            beat.midiNotes,\n            beat.length,\n            beat.donation\n        );\n\n    }\n\n\n    /**\n     * Stats getter\n     */\n\n    function getDonationStats() external view returns (\n        uint goal,\n        uint minimum,\n        uint currentValue,\n        uint milestoneAmount,\n        address donateeAddr\n    ) {\n\n        return (\n            DONATION_GOAL,\n            minDonation,\n            totalValue,\n            milestoneGoal,\n            donatee\n        );\n\n    }\n\n    function getTotalDonated() external view returns( uint ) {\n\n        return totalValue;\n\n    }\n\n    function getDonatee() external view returns( address ) {\n\n        return donatee;\n\n    }\n\n\n    /**\n     * Finishers\n     */\n\n    function transferMilestone() internal {\n\n        uint balance = address( this ).balance;\n\n        donatee.transfer( balance );\n\n        emit DonationTransfered( donatee, balance );\n\n    }\n\n\n    /**\n     * Internal checks and requires for valid notes\n     */\n\n    function checkMidiNoteValue( uint8 midi ) pure internal {\n\n        require( midi >= MIDI_LOWEST_NOTE && midi <= MIDI_HIGHEST_NOTE );\n\n    }\n\n    function checkMidiNotesValue( uint8[] midis ) pure internal {\n\n        uint num = midis.length;\n\n        //require less or equal to all notes allowed\n\n        require( num <= ( MIDI_HIGHEST_NOTE - MIDI_LOWEST_NOTE ) );\n\n        for( uint i = 0; i < num; ++ i ) {\n\n            checkMidiNoteValue( midis[ i ] );\n\n        }\n\n    }\n\n\n    /**\n     * Owner setters for future proofing\n     */\n\n    function setMinDonation( uint newMin ) onlyOwner external {\n\n        minDonation = newMin;\n\n    }\n\n    function setMilestone( uint newMile ) onlyOwner external {\n\n        milestoneGoal = newMile;\n\n    }\n\n\n    /**\n     * Array splice function\n     */\n\n    function splice( uint8[] arr, uint index, uint to )\n        pure\n        internal\n        returns( uint8[] )\n    {\n\n        uint8[] memory output = new uint8[]( to - index );\n        uint counter = 0;\n\n        for( uint i = index; i < to; ++ i ) {\n\n            output[ counter ] = arr[ i ];\n\n            ++ counter;\n\n        }\n\n        return output;\n\n    }\n\n}", "debug": "mem_mem_288 + 32*calldata_SheetMusic_4 + calldata_SheetMusic_4 + 32: 0x84210842108001f024e0e8e74610842000000000000001f21084210607c1c1d\ncalldata_SheetMusic_32 + 4: 0x0\ncallvalue: 0x0\nstorage_6: 0x0\ncalldata_SheetMusic_0: 0x3064829a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\ncalldata_SheetMusic_4 + calldata_SheetMusic_4: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x3064829a`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x3064829a", "lineno": 49, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4130, "code": "/**\n     * Note lengths\n     */\n\n    enum NoteLength {\n\n        WHOLE_NOTE,\n\n        DOTTED_HALF_NOTE,\n\n        HALF_NOTE,\n\n        DOTTED_QUARTER_NOTE,\n\n        QUARTER_NOTE,\n\n        DOTTED_EIGHTH_NOTE,\n\n        EIGHTH_NOTE,\n\n        DOTTED_SIXTEENTH_NOTE,\n\n        SIXTEENTH_NOTE\n\n    }\n\n\n    /**\n     * Note struct\n     */\n\n    struct Beat {\n\n        address maker;\n\n        uint8[] midiNotes;\n\n        NoteLength length;\n\n        uint donation; //In weis\n\n    }\n\n\n    /**\n     * Internal props\n     */\n\n    mapping( uint => Beat ) private notes;\n\n    uint private numNotes;\n\n    address private donatee;\n\n\n    //Values donated toward goal and milestone\n\n    uint private totalValue;\n\n    uint private milestoneValue;\n\n\n    //Goals\n\n    uint constant DONATION_GOAL = 100 ether;\n\n    uint private minDonation = 0.005 ether;\n\n\n    //Transfer after a certain amount\n\n    uint private milestoneGoal = 5 ether;\n\n\n    //Full donation goal met\n\n    bool private donationMet = false;\n\n\n    /**\n     * Midi requirements\n     */\n\n    uint8 constant MIDI_LOWEST_NOTE = 21;\n\n    uint8 constant MIDI_HIGHEST_NOTE = 108;\n\n\n    /**\n     * Events\n     */\n\n    event NoteCreated( address indexed maker, uint id, uint donation );\n\n    event DonationCreated( address indexed maker, uint donation );\n\n    event DonationTransfered( address donatee, uint value );\n\n    event DonationGoalReached( address MrCool );\n\n    event MilestoneMet( address donater );\n\n\n    /**\n     * Construct\n     */\n\n    function SheetMusic( address donateeArg ) public {\n\n        donatee = donateeArg;\n\n    }\n\n\n    /**\n     * Main create note\n     * There is no 0 note. First one is 1\n     */\n\n    function createBeat( uint8[] midiNotes, NoteLength length ) external payable {\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n\n        //Check note min value\n\n        require( msg.value >= minDonation );\n\n\n        //Check valid notes\n\n        checkMidiNotesValue( midiNotes );\n\n\n        //Create note\n\n        Beat memory newBeat = Beat({\n            maker: msg.sender,\n            donation: msg.value,\n            midiNotes: midiNotes,\n            length: length\n        });\n\n        notes[ ++ numNotes ] = newBeat;\n\n        emit NoteCreated( msg.sender, numNotes, msg.value );\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Create passage or number of beats\n     * Nested array unimplemented right now\n     */\n\n    function createPassage( uint8[] userNotes, uint[] userDivider, NoteLength[] lengths )\n        external\n        payable\n    {\n\n        //Add values regardless if valid\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n        uint userNumberBeats = userDivider.length;\n        uint userNumberLength = lengths.length;\n\n\n        //Check note min value and lengths equal eachother\n        //Check valid midi notes\n\n        require( userNumberBeats == userNumberLength );\n\n        require( msg.value >= ( minDonation * userNumberBeats ) );\n\n        checkMidiNotesValue( userNotes );\n\n\n        //Create beats\n\n        uint noteDonation = msg.value / userNumberBeats;\n        uint lastDivider = 0;\n\n        for( uint i = 0; i < userNumberBeats; ++ i ) {\n\n            uint divide = userDivider[ i ];\n            NoteLength length = lengths[ i ];\n\n            uint8[] memory midiNotes = splice( userNotes, lastDivider, divide );\n\n            Beat memory newBeat = Beat({\n                maker: msg.sender,\n                donation: noteDonation,\n                midiNotes: midiNotes,\n                length: length\n            });\n\n            lastDivider = divide;\n\n            notes[ ++ numNotes ] = newBeat;\n\n            emit NoteCreated( msg.sender, numNotes, noteDonation );\n\n        }\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Random value add to contract\n     */\n\n    function () external payable {\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Donate with intent\n     */\n\n    function donate() external payable {\n\n        totalValue += msg.value;\n        milestoneValue += msg.value;\n\n        emit DonationCreated( msg.sender, msg.value );\n\n        checkGoal( msg.sender );\n\n    }\n\n\n    /**\n     * Check if goal reached\n     */\n\n    function checkGoal( address maker ) internal {\n\n        if( totalValue >= DONATION_GOAL && ! donationMet ) {\n\n            donationMet = true;\n\n            emit DonationGoalReached( maker );\n\n        }\n\n        if( milestoneValue >= milestoneGoal ) {\n\n            transferMilestone();\n            milestoneValue = 0;\n\n        }\n\n    }\n\n\n    /**\n     * Getters for notes\n     */\n\n    function getNumberOfBeats() external view returns ( uint ) {\n\n        return numNotes;\n\n    }\n\n    function getBeat( uint id ) external view returns (\n        address,\n        uint8[],\n        NoteLength,\n        uint\n    ) {\n\n        Beat storage beat = notes[ id ];\n\n        return (\n            beat.maker,\n            beat.midiNotes,\n            beat.length,\n            beat.donation\n        );\n\n    }\n\n\n    /**\n     * Stats getter\n     */\n\n    function getDonationStats() external view returns (\n        uint goal,\n        uint minimum,\n        uint currentValue,\n        uint milestoneAmount,\n        address donateeAddr\n    ) {\n\n        return (\n            DONATION_GOAL,\n            minDonation,\n            totalValue,\n            milestoneGoal,\n            donatee\n        );\n\n    }\n\n    function getTotalDonated() external view returns( uint ) {\n\n        return totalValue;\n\n    }\n\n    function getDonatee() external view returns( address ) {\n\n        return donatee;\n\n    }\n\n\n    /**\n     * Finishers\n     */\n\n    function transferMilestone() internal {\n\n        uint balance = address( this ).balance;\n\n        donatee.transfer( balance );\n\n        emit DonationTransfered( donatee, balance );\n\n    }\n\n\n    /**\n     * Internal checks and requires for valid notes\n     */\n\n    function checkMidiNoteValue( uint8 midi ) pure internal {\n\n        require( midi >= MIDI_LOWEST_NOTE && midi <= MIDI_HIGHEST_NOTE );\n\n    }\n\n    function checkMidiNotesValue( uint8[] midis ) pure internal {\n\n        uint num = midis.length;\n\n        //require less or equal to all notes allowed\n\n        require( num <= ( MIDI_HIGHEST_NOTE - MIDI_LOWEST_NOTE ) );\n\n        for( uint i = 0; i < num; ++ i ) {\n\n            checkMidiNoteValue( midis[ i ] );\n\n        }\n\n    }\n\n\n    /**\n     * Owner setters for future proofing\n     */\n\n    function setMinDonation( uint newMin ) onlyOwner external {\n\n        minDonation = newMin;\n\n    }\n\n    function setMilestone( uint newMile ) onlyOwner external {\n\n        milestoneGoal = newMile;\n\n    }\n\n\n    /**\n     * Array splice function\n     */\n\n    function splice( uint8[] arr, uint index, uint to )\n        pure\n        internal\n        returns( uint8[] )\n    {\n\n        uint8[] memory output = new uint8[]( to - index );\n        uint counter = 0;\n\n        for( uint i = index; i < to; ++ i ) {\n\n            output[ counter ] = arr[ i ];\n\n            ++ counter;\n\n        }\n\n        return output;\n\n    }\n\n}", "debug": "mem_mem_288 + 32*calldata_SheetMusic_4 + calldata_SheetMusic_4 + 32: 0x6d409d4471ca1145feff6feb8fffc35bde7f8effe1ff3a00126021fffffffff\ncalldata_SheetMusic_32 + 4: 0x0\nmem_288 + 32*calldata_SheetMusic_4 + calldata_SheetMusic_4 + 32: 0xf44a82243f77c040080201020001000110020010000210000000000000000000\ncallvalue: 0x0\nstorage_6: 0x0\ncalldata_SheetMusic_0: 0x3064829a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SheetMusic: 0x4\ncalldata_SheetMusic_4 + calldata_SheetMusic_4: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x3064829a`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x25d3b1550e518ba8d7581cad811285e005902faa.sol", "function": "_function_0x3064829a", "lineno": 49, "title": "Integer Overflow ", "type": "Warning"}], "success": true}