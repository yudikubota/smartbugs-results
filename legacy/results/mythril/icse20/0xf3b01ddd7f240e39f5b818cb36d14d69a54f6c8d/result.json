{
  "contract": "0xf3b01ddd7f240e39f5b818cb36d14d69a54f6c8d",
  "tool": "mythril",
  "start": 1563604594.4417634,
  "end": 1563604784.0859182,
  "duration": 189.6441547870636,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 626,
        "code": "or (i = 0; i < _to.length; i++) {\n            require(_to[i] != address(0));\n            \n            balances[_to[i]] = balances[_to[i]].add(_values[i]);\n            emit Transfer(msg.sender, _to[i], _values[i]);\n        }\n        \n        balances[msg.sender] = balances[msg.sender].sub(sum);\n        return true;\n    }\n}\n\ncontract ZodiaqToken is StandardToken, MintableToken, BurnableByOwnerToken, MultiTransferableToken {\n    string public name = 'Zodiaq Token';\n    string public symbol = 'ZOD';\n    uint8 public decimals = 8;\n}\n\ncontract Managable is Ownable {\n    address public manager = 0x0;\n\n    event ManagerIsChanged(address indexed previousManager,",
        "debug": "calldata_ZodiaqToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZodiaqToken_0: 0x1e89d54500000000000000000000000000000000000000000000000000000000\ncalldatasize_ZodiaqToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `multiTransfer(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xf3b01ddd7f240e39f5b818cb36d14d69a54f6c8d.sol",
        "function": "multiTransfer(address[],uint256[])",
        "lineno": 332,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7458,
        "code": " @tit",
        "debug": "calldata_ZodiaqToken_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ZodiaqToken_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_ZodiaqToken_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_ZodiaqToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `increaseApproval(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xf3b01ddd7f240e39f5b818cb36d14d69a54f6c8d.sol",
        "function": "increaseApproval(address,uint256)",
        "lineno": 62,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7471,
        "code": "c token\n * @de",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ZodiaqToken_4: 0x1\ncalldata_ZodiaqToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ZodiaqToken_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_ZodiaqToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xf3b01ddd7f240e39f5b818cb36d14d69a54f6c8d.sol",
        "function": "increaseApproval(address,uint256)",
        "lineno": 62,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}