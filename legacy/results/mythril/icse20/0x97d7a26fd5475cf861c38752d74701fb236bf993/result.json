{
  "contract": "0x97d7a26fd5475cf861c38752d74701fb236bf993",
  "tool": "mythril",
  "start": 1563579037.845451,
  "end": 1563579134.4699755,
  "duration": 96.62452435493469,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1317,
        "code": "* D;\n        }\n    }\n    \n    // \u53c2\u6570\u4e3a\u5730\u5740, \u89e3\u9501\u5168\u90e8token\n    function unlock ( address[] _addr ) onlyOwner external  {\n        for (uint i = 0; i < _addr.length; i++) {\n          balanceLocke",
        "debug": "calldata_lens_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_lens_0: 0x42f6208e00000000000000000000000000000000000000000000000000000000\ncalldatasize_lens: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x42f6208e`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/18/0x97d7a26fd5475cf861c38752d74701fb236bf993.sol",
        "function": "_function_0x42f6208e",
        "lineno": 364,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1611,
        "code": "\u6570\u91cf\n    function unlockEx ( address[] _addr , uint256[] _value ) onlyOwner external  {\n        for (uint i = 0; i < _addr.length; i++) {\n          uint256 v = (_value[i] * D) > balanceLocked[_addr[",
        "debug": "calldata_lens_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_lens_0: 0x6b1ea8d200000000000000000000000000000000000000000000000000000000\ncalldatasize_lens: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x6b1ea8d2`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/18/0x97d7a26fd5475cf861c38752d74701fb236bf993.sol",
        "function": "_function_0x6b1ea8d2",
        "lineno": 375,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1635,
        "code": "\u6570\u91cf\n    function unlockEx ( address[] _addr , uint256[] _value ) onlyOwner external  {\n        for (uint i = 0; i < _addr.length; i++) {\n          uint256 v = (_value[i] * D) > balanceLocked[_addr[",
        "debug": "calldata_lens_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_lens_0: 0x6b1ea8d200000000000000000000000000000000000000000000000000000000\ncalldatasize_lens: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x6b1ea8d2`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/18/0x97d7a26fd5475cf861c38752d74701fb236bf993.sol",
        "function": "_function_0x6b1ea8d2",
        "lineno": 375,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1641,
        "code": "\u6570\u91cf\n    function unlockEx ( address[] _addr , uint256[] _value ) onlyOwner external  {\n        for (uint i = 0; i < _addr.length; i++) {\n          uint256 v = (_value[i] * D) > balanceLocked[_addr[",
        "debug": "calldata_lens_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_lens_0: 0x6b1ea8d200000000000000000000000000000000000000000000000000000000\ncalldatasize_lens: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x6b1ea8d2`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/18/0x97d7a26fd5475cf861c38752d74701fb236bf993.sol",
        "function": "_function_0x6b1ea8d2",
        "lineno": 375,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2718,
        "code": "ERC20",
        "debug": "callvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_5: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_7: 0x0\ncalldatasize_lens: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/18/0x97d7a26fd5475cf861c38752d74701fb236bf993.sol",
        "function": "fallback",
        "lineno": 80,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2731,
        "code": "asic.sol\n\n/**\n",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_5: 0x1\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x0\ncalldatasize_lens: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x97d7a26fd5475cf861c38752d74701fb236bf993.sol",
        "function": "fallback",
        "lineno": 80,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5421,
        "code": "e[i] * D)",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_lens_4 + calldata_lens_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncaller: 0x0\ncalldata_lens_0: 0x6b1ea8d200000000000000000000000000000000000000000000000000000000\ncalldatasize_lens: 0x4\ncalldata_lens_4 + calldata_lens_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x97d7a26fd5475cf861c38752d74701fb236bf993.sol",
        "function": "_function_0x6b1ea8d2",
        "lineno": 378,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5430,
        "code": "e[i] * D) > b",
        "debug": "calldata_lens_0 + 36 + calldata_lens_32 + 4: 0x1a00d8dca0a08067020000001c2809f0c11c68000870231c08800881089bc000\ncalldata_lens_4 + calldata_lens_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_lens_4 + calldata_lens_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncaller: 0x0\ncalldata_lens_0: 0x6b1ea8d200000000000000000000000000000000000000000000000000000000\ncalldatasize_lens: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x6b1ea8d2`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/18/0x97d7a26fd5475cf861c38752d74701fb236bf993.sol",
        "function": "_function_0x6b1ea8d2",
        "lineno": 378,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7721,
        "code": "mbers, throws ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_lens_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_lens_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_lens: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x97d7a26fd5475cf861c38752d74701fb236bf993.sol",
        "function": "burn(uint256)",
        "lineno": 71,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}