{
  "contract": "0xa4ff5ce0556f9ff0797ae525ec5ba9b723878a3e",
  "tool": "mythril",
  "start": 1563299940.8847497,
  "end": 1563300113.8439896,
  "duration": 172.9592399597168,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1228,
        "code": "gas wise. Find a way to keep it in memory.\n    tkn = Tkn(msg.sender, _sender, _origin, _value, _data, getSig(_data));\n    __isTokenFallback = true;\n    if (!address(this).delegatecall(_data)) return false;\n\n    // avoid doing an overwrite to .token, which would be more expensive\n    // makes accessing .tkn values outside tokenPayable functions unsafe\n    __isTokenFallback = false;\n\n    return true;\n  }\n\n  function getSig(bytes _data) private returns (bytes4 sig) {\n    uint l = _data.length < 4 ? _data.length : 4;\n    for (uint i = 0; i < l; i++) {\n      sig = bytes4(uint(sig) + uint(_data[i]) * (2 ** (8 * (l - 1 - i))));\n  ",
        "debug": "calldata_ciphCommunity_32 + 68: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ciphCommunity_0: 0x4c12301900000000000000000000000000000000000000000000000000000000\ncalldatasize_ciphCommunity: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `tokenFallback(address,address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xa4ff5ce0556f9ff0797ae525ec5ba9b723878a3e.sol",
        "function": "tokenFallback(address,address,uint256,bytes)",
        "lineno": 217,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5283,
        "code": " more expensive\n    // makes accessing .tkn values outside tokenPayab",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ciphCommunity_4 + calldata_ciphCommunity_32 + 68)) +\n128: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_ciphCommunity_0: 0x4c12301900000000000000000000000000000000000000000000000000000000\ncalldatasize_ciphCommunity: 0x4\ncalldata_ciphCommunity_4 + calldata_ciphCommunity_32 + 68: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `tokenFallback(address,address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xa4ff5ce0556f9ff0797ae525ec5ba9b723878a3e.sol",
        "function": "tokenFallback(address,address,uint256,bytes)",
        "lineno": 222,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5844,
        "code": "_banna",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x56bc7600000000000\nstorage_13: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_14: 0xff00\ncalldata_ciphCommunity_0: 0x6195c71300000000000000000000000000000000000000000000000000000000\ncalldatasize_ciphCommunity: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `against_proposal()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xa4ff5ce0556f9ff0797ae525ec5ba9b723878a3e.sol",
        "function": "against_proposal()",
        "lineno": 375,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6364,
        "code": "\n            //investor",
        "debug": "calldata_ciphCommunity_32 + 4: 0xb135d1e4a0020a903239033aa9b45a69384c906b52a71e0575829626809581fd\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ciphCommunity_4: 0xa7e6e147bc0ca40011bf9bbaadf7593cb8cc90b17cb7d73775f0d8eb1435e9c1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb135d1e4a0020a903239033aa9b45a69384c906b52a71e0575829626809581fd\ncalldata_ciphCommunity_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_ciphCommunity: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xa4ff5ce0556f9ff0797ae525ec5ba9b723878a3e.sol",
        "function": "transfer(address,uint256)",
        "lineno": 102,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9886,
        "code": ";\n   ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ciphCommunity_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ciphCommunity_0: 0x399d7bf500000000000000000000000000000000000000000000000000000000\ncalldatasize_ciphCommunity: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `against_ban_of(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xa4ff5ce0556f9ff0797ae525ec5ba9b723878a3e.sol",
        "function": "against_ban_of(address)",
        "lineno": 27,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9899,
        "code": " c;\n  }\n}\n\n\nco",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_15: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fc80\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x56bc75e2d63180000\nstorage_14: 0xff00\ncalldata_ciphCommunity_0: 0x6195c71300000000000000000000000000000000000000000000000000000000\ncalldatasize_ciphCommunity: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xa4ff5ce0556f9ff0797ae525ec5ba9b723878a3e.sol",
        "function": "against_proposal()",
        "lineno": 28,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10791,
        "code": ";\n            Transfer(",
        "debug": "calldata_ciphCommunity_32 + 36: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ciphCommunity_32_+_4: 0x800000000000000000008eb2e34648ee0801030820000000000000000000a000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ciphCommunity_4: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\ncalldata_ciphCommunity_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_ciphCommunity: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xa4ff5ce0556f9ff0797ae525ec5ba9b723878a3e.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 115,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 11762,
        "code": "return a - b;\n",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ciphCommunity_4: 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ciphCommunity_0: 0x399d7bf500000000000000000000000000000000000000000000000000000000\ncalldatasize_ciphCommunity: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xa4ff5ce0556f9ff0797ae525ec5ba9b723878a3e.sol",
        "function": "against_ban_of(address)",
        "lineno": 22,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 12312,
        "code": " public constant MAX_SUPPLY = 860000000000e18;\n  mapping(address => uint256) votes;\n  mapping (address => mapping (address => uint256)) public trackable;\n  mapping (address => mapping (uint => uint256)) public trackable_record;\n  address[] investors;\n  mapping (address => uint256) public bannable;\n  mapping (address => uint256) internal support_ban;\n  mapping (address => uint256) internal against_ban;\n  \n  event Votes(address indexed owner, uint256 value);\n  event Mint(uint256 value);\n  \n  function () public payable {}\n  \n  function initialize_proposal() public {\n\n    if(propose) throw;\n    propose = true;\n    prosposal_time = now;\n\n  }\n  \n  function is_proposal_supported() public returns (bool) {\n    if(!propose) throw;\n    if(down.mul(4) < up)\n    {\n        return false;\n    }else{\n        return true;\n    }\n  }\n  \n  function distribute_token()\n  {\n       uint256 investors_num = investors.length;\n       uint256 amount = (1000000e18-1000)/investors_num;\n       for(var i = 0; i < investors_num; i++)\n       {\n           if(last_seen[investors[i]].add(90 * 1 days) > now)\n           {\n                balances[investors[i]] += amount;\n                last_seen[investors[i]] = now;\n            }\n       }\n    }\n\n\n  function mint() /*canMint*/ public returns (bool) {\n    \n    if(propose && now >= prosposal_time.add(7 * 1 days)){\n        uint256 _amount = 1000000e18;\n        _totalSupply = _totalSupply.add(_amount);\n        if(_totalSupply <= MAX_SUPPLY && is_proposal_supported())\n        {\n            balances[owner] = balances[owner].add(1000);\n            //Transfer(address(0), _to, _amount);\n            propose = false;\n            prosposal_time = 0;\n            up = 0;\n            down = 0;\n            distribute_token();\n            Mint(_amount);\n            return true;\n        }else{\n            propose = false;\n            prosposal_time = 0;\n            up = 0;\n            down = 0;\n            //return true;\n        }\n        \n    }\n    last_seen[msg.sender] = now;\n    //return false;\n  }\n  \n  function support_proposal() public returns (bool) {\n    if(!propose || votes[msg.sender] == 1) throw;\n    //first check balance to be more than 10 Ciphs\n    if(balances[msg.sender] > 100e18)\n    {\n        //only vote once\n        votes[msg.sender] = 1;\n        up++;\n        mint();\n        Votes(msg.sender, 1);\n        return true;\n\n    }else\n    {\n        //no sufficient funds to carry out voting consensus\n        return false;\n    }\n  }\n\n  function against_proposal() public returns (bool) {\n    if(!propose || votes[msg.sender] == 1) throw;\n    //first check balance to be more than 10 Ciphs\n    if(balances[msg.sender] > 100e18)\n    {\n        //only vote once\n        votes[msg.sender] = 1;\n        down++;\n        mint();\n        Votes(msg.sender, 1);\n        return true;\n\n    }else\n    {\n        //no sufficient funds to carry out voting consensus\n        return false;\n    }\n  }\n  \n  function ban_account(address _bannable_address) internal{\n        if(balances[_bannable_address] > 0)\n        {\n          transferFrom(_bannable_address, owner, balances[_bannable_address]);\n        }\n        delete balances[_bannable_address];\n        \n        uint256 investors_num = investors.length;\n        for(var i = 0; i < investors_num; i++)\n        {\n            if(investors[i] == _bannable_address){\n                delete investors[i];\n            }\n        }\n      //delete investors[];\n  }\n  \n  function ban_check(address _bannable_address) internal\n  {\n    last_seen[msg.sender] = now;\n    //uint256 time_diff = now.sub(bannable[_bannable_address]); \n    if(now.sub(bannable[_bannable_address]) > 0.5 * 1 days)\n    {\n        if(against_ban[_bannable_address].mul(4) < support_ban[_bannable_address])\n        {\n            ban_account(_bannable_address);\n        }\n    }\n  }\n  \n  function initialize_bannable(address _bannable_address) public {\n    bannable[_bannable_address] = now;\n    last_seen[msg.sender] = now;\n  }\n  \n  function support_ban_of(address _bannable_address) public\n  {\n    require(bannable[_bannable_address] > 0);\n    support_ban[_bannable_address] = support_ban[_bannable_address].add(1);\n    ban_check(_bannable_address);\n  }\n  \n  function against_ban_of(address _bannable_address) public\n  {\n    require(bannable[_bannable_address] > 0);\n    against_ban[_bannable_address] = against_ban[_bannable_address].add(1);\n    ban_check(_bannable_address);\n  }\n\n  function track(address _trackable) public returns (bool) {\n    // \"trackable added, vote like or dislike using the address registered with the trackable\";\n    trackable[_trackable][msg.sender] = 1;\n    last_seen[msg.sender] = now;\n    return true;\n  }\n\n  function like_trackable(address _trackable) public returns (bool) {\n    last_seen[msg.sender] = now;\n    if(trackable[_trackable][msg.sender] != 1)\n    {\n        trackable[_trackable][msg.sender] = 1;\n        trackable_record[_trackable][1] = trackable_record[_trackable][1] + 1;\n        return true;\n    }\n    return false;\n  }\n\n  function dislike_trackable(address _trackable) public returns (bool) {\n    last_seen[msg.sender] = now;\n    if(trackable[_trackable][msg.sender] != 1)\n    {\n        trackable[_trackable][msg.sender] = 1;\n        trackable_record[_trackable][2] = trackable_record[_trackable][2] + 1;\n        return true;\n    }\n    return false;\n  }\n\n  function trackable_likes(address _trackable) public returns (uint256) {\n    uint256 num = 0;\n    //if(trackable[_trackable])\n    //{\n\n        num = trackable_record[_trackable][1];\n\n    //}\n    return num;\n  }\n\n  function trackable_dislikes(address _trackable) public returns (uint256) {\n    uint256 num = 0;\n    num = trackable_record[_trackable][2];\n    return num;\n  }\n    \n}\n\ncontract Ciphs is ciphCommunity{\n\n  //using SafeMath for uint256;\n  \n  string public constant name = \"Ciphs\";\n  string public constant symbol = \"CIPHS\";\n  uint8 public constant decimals = 18;\n\n  uint256 public rate = 1000000e18;\n  uint256 raisedAmount = 0;\n  uint256 public constant INITIAL_SUPPLY = 7000000e18;\n \n  //event Approval(address indexed owner, address indexed spender, uint256 value);\n  //event Transfer(address indexed from, address indexed to, uint25",
        "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ciphCommunity_4 + calldata_ciphCommunity_32 + 68)) +\n128: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_ciphCommunity_0: 0x4c12301900000000000000000000000000000000000000000000000000000000\ncalldatasize_ciphCommunity: 0x4\ncalldata_ciphCommunity_4 + calldata_ciphCommunity_32 + 68: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `tokenFallback(address,address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xa4ff5ce0556f9ff0797ae525ec5ba9b723878a3e.sol",
        "function": "tokenFallback(address,address,uint256,bytes)",
        "lineno": 258,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 12326,
        "code": " public constant MAX_SUPPLY = 860000000000e18;\n  mapping(address => uint256) votes;\n  mapping (address => mapping (address => uint256)) public trackable;\n  mapping (address => mapping (uint => uint256)) public trackable_record;\n  address[] investors;\n  mapping (address => uint256) public bannable;\n  mapping (address => uint256) internal support_ban;\n  mapping (address => uint256) internal against_ban;\n  \n  event Votes(address indexed owner, uint256 value);\n  event Mint(uint256 value);\n  \n  function () public payable {}\n  \n  function initialize_proposal() public {\n\n    if(propose) throw;\n    propose = true;\n    prosposal_time = now;\n\n  }\n  \n  function is_proposal_supported() public returns (bool) {\n    if(!propose) throw;\n    if(down.mul(4) < up)\n    {\n        return false;\n    }else{\n        return true;\n    }\n  }\n  \n  function distribute_token()\n  {\n       uint256 investors_num = investors.length;\n       uint256 amount = (1000000e18-1000)/investors_num;\n       for(var i = 0; i < investors_num; i++)\n       {\n           if(last_seen[investors[i]].add(90 * 1 days) > now)\n           {\n                balances[investors[i]] += amount;\n                last_seen[investors[i]] = now;\n            }\n       }\n    }\n\n\n  function mint() /*canMint*/ public returns (bool) {\n    \n    if(propose && now >= prosposal_time.add(7 * 1 days)){\n        uint256 _amount = 1000000e18;\n        _totalSupply = _totalSupply.add(_amount);\n        if(_totalSupply <= MAX_SUPPLY && is_proposal_supported())\n        {\n            balances[owner] = balances[owner].add(1000);\n            //Transfer(address(0), _to, _amount);\n            propose = false;\n            prosposal_time = 0;\n            up = 0;\n            down = 0;\n            distribute_token();\n            Mint(_amount);\n            return true;\n        }else{\n            propose = false;\n            prosposal_time = 0;\n            up = 0;\n            down = 0;\n            //return true;\n        }\n        \n    }\n    last_seen[msg.sender] = now;\n    //return false;\n  }\n  \n  function support_proposal() public returns (bool) {\n    if(!propose || votes[msg.sender] == 1) throw;\n    //first check balance to be more than 10 Ciphs\n    if(balances[msg.sender] > 100e18)\n    {\n        //only vote once\n        votes[msg.sender] = 1;\n        up++;\n        mint();\n        Votes(msg.sender, 1);\n        return true;\n\n    }else\n    {\n        //no sufficient funds to carry out voting consensus\n        return false;\n    }\n  }\n\n  function against_proposal() public returns (bool) {\n    if(!propose || votes[msg.sender] == 1) throw;\n    //first check balance to be more than 10 Ciphs\n    if(balances[msg.sender] > 100e18)\n    {\n        //only vote once\n        votes[msg.sender] = 1;\n        down++;\n        mint();\n        Votes(msg.sender, 1);\n        return true;\n\n    }else\n    {\n        //no sufficient funds to carry out voting consensus\n        return false;\n    }\n  }\n  \n  function ban_account(address _bannable_address) internal{\n        if(balances[_bannable_address] > 0)\n        {\n          transferFrom(_bannable_address, owner, balances[_bannable_address]);\n        }\n        delete balances[_bannable_address];\n        \n        uint256 investors_num = investors.length;\n        for(var i = 0; i < investors_num; i++)\n        {\n            if(investors[i] == _bannable_address){\n                delete investors[i];\n            }\n        }\n      //delete investors[];\n  }\n  \n  function ban_check(address _bannable_address) internal\n  {\n    last_seen[msg.sender] = now;\n    //uint256 time_diff = now.sub(bannable[_bannable_address]); \n    if(now.sub(bannable[_bannable_address]) > 0.5 * 1 days)\n    {\n        if(against_ban[_bannable_address].mul(4) < support_ban[_bannable_address])\n        {\n            ban_account(_bannable_address);\n        }\n    }\n  }\n  \n  function initialize_bannable(address _bannable_address) public {\n    bannable[_bannable_address] = now;\n    last_seen[msg.sender] = now;\n  }\n  \n  function support_ban_of(address _bannable_address) public\n  {\n    require(bannable[_bannable_address] > 0);\n    support_ban[_bannable_address] = support_ban[_bannable_address].add(1);\n    ban_check(_bannable_address);\n  }\n  \n  function against_ban_of(address _bannable_address) public\n  {\n    require(bannable[_bannable_address] > 0);\n    against_ban[_bannable_address] = against_ban[_bannable_address].add(1);\n    ban_check(_bannable_address);\n  }\n\n  function track(address _trackable) public returns (bool) {\n    // \"trackable added, vote like or dislike using the address registered with the trackable\";\n    trackable[_trackable][msg.sender] = 1;\n    last_seen[msg.sender] = now;\n    return true;\n  }\n\n  function like_trackable(address _trackable) public returns (bool) {\n    last_seen[msg.sender] = now;\n    if(trackable[_trackable][msg.sender] != 1)\n    {\n        trackable[_trackable][msg.sender] = 1;\n        trackable_record[_trackable][1] = trackable_record[_trackable][1] + 1;\n        return true;\n    }\n    return false;\n  }\n\n  function dislike_trackable(address _trackable) public returns (bool) {\n    last_seen[msg.sender] = now;\n    if(trackable[_trackable][msg.sender] != 1)\n    {\n        trackable[_trackable][msg.sender] = 1;\n        trackable_record[_trackable][2] = trackable_record[_trackable][2] + 1;\n        return true;\n    }\n    return false;\n  }\n\n  function trackable_likes(address _trackable) public returns (uint256) {\n    uint256 num = 0;\n    //if(trackable[_trackable])\n    //{\n\n        num = trackable_record[_trackable][1];\n\n    //}\n    return num;\n  }\n\n  function trackable_dislikes(address _trackable) public returns (uint256) {\n    uint256 num = 0;\n    num = trackable_record[_trackable][2];\n    return num;\n  }\n    \n}\n\ncontract Ciphs is ciphCommunity{\n\n  //using SafeMath for uint256;\n  \n  string public constant name = \"Ciphs\";\n  string public constant symbol = \"CIPHS\";\n  uint8 public constant decimals = 18;\n\n  uint256 public rate = 1000000e18;\n  uint256 raisedAmount = 0;\n  uint256 public constant INITIAL_SUPPLY = 7000000e18;\n \n  //event Approval(address indexed owner, address indexed spender, uint256 value);\n  //event Transfer(address indexed from, address indexed to, uint25",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ciphCommunity_4 + calldata_ciphCommunity_32 + 68)) +\n128: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ciphCommunity_4 + calldata_ciphCommunity_32 + 68)) +\n128: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\ncalldata_ciphCommunity_0: 0x4c12301900000000000000000000000000000000000000000000000000000000\ncalldatasize_ciphCommunity: 0x4\ncalldata_ciphCommunity_4 + calldata_ciphCommunity_32 + 68: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `tokenFallback(address,address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xa4ff5ce0556f9ff0797ae525ec5ba9b723878a3e.sol",
        "function": "tokenFallback(address,address,uint256,bytes)",
        "lineno": 258,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}