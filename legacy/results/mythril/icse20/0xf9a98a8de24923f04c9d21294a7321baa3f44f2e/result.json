{
  "contract": "0xf9a98a8de24923f04c9d21294a7321baa3f44f2e",
  "tool": "mythril",
  "start": 1563437594.1298215,
  "end": 1563438134.86088,
  "duration": 540.7310583591461,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1110,
        "code": "\t\t\n\t\temit onAddContractAddress(tokenAddress, contractstatus, _maxcontribution, _ContractSymbol);\n    }\n\t\n\t\n//** 02 - Add Maximum Contribution\t\n    function AddMaxContribution(address tokenAddress, uint256 _maxcontribution) public restricted  {\n        maxcontribution[tokenAddress] = _maxcontribution;\t\n    }\n\t\n\t\n//** 03 - Unlock Tokens\n    function UnlockTokens(address tokenAddress, uint256 id) public restricted {\n        require(tokenAddress != 0x0);\n        require(id != 0);      \n        UnlockToken(tokenAddress, id);\n    }\n\t\n    \n//** 04 Change Hodling Time   \n    function ChangeHodlingTim",
        "debug": "calldata_ldoh_32 + 68: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ldoh_0: 0x11e0262000000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `AddContractAddress(address,bool,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xf9a98a8de24923f04c9d21294a7321baa3f44f2e.sol",
        "function": "AddContractAddress(address,bool,uint256,string)",
        "lineno": 496,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3904,
        "code": "urns ",
        "debug": "storage_8980041631919178290161226234105977776452779202751091583642356499240698725347: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\ncallvalue: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\ncalldatasize_ldoh: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xf9a98a8de24923f04c9d21294a7321baa3f44f2e.sol",
        "function": "fallback",
        "lineno": 653,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4057,
        "code": "EthereumVault;    \t// 05 -- > Reserve Funds\t\t\t\t\n\t",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ldoh_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_ldoh_4: 0x0\ncalldata_ldoh_0: 0x11a3311c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xf9a98a8de24923f04c9d21294a7321baa3f44f2e.sol",
        "function": "_function_0x11a3311c",
        "lineno": 140,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6686,
        "code": "Safe storage s = _safes[i];\n  ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0xf9a98a8de24923f04c9d21294a7321baa3f44f2e.sol",
        "function": "WithdrawAffiliate(address,address)",
        "lineno": 470,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 20001,
        "code": "/*==============================\n    =            EVENTS            =\n    ==============================*/\n\t\n\tevent onAffiliateBonus(\n\t\t  address indexed hodler,\n\t\t  address indexed tokenAddress,\n\t      string tokenSymbol,\n\t\t  uint256 amount,\n\t\t  uint256 endtime\n\t\t);\n\t\t\n\tevent onClaimTokens(\n\t\t  address indexed hodler,\n\t\t  address indexed tokenAddress,\n\t      string tokenSymbol,\n\t\t  uint256 amount,\n\t\t  uint256 endtime\n\t\t);\t\t\n\t\t\n\tevent onHodlTokens(\n\t\t  address indexed hodler,\n\t\t  address indexed tokenAddress,\n\t      string tokenSymbol,\n\t\t  uint256 amount,\n\t\t  uint256 endtime\n\t\t);\t\t\t\t\n\t\t\n\tevent onAddContractAddress(\n\t\t  address indexed contracthodler,\n\t\t  bool contractstatus,\n\t      uint256 _maxcontribution,\n\t\t  string _ContractSymbol\n\t\t);\t\n\t\t\n\tevent onCashbackCode(\n\t\t  address indexed hodler,\n\t\t  address cashbackcode\n\t\t);\t\t\t\n\t\n\tevent onUnlockedTokens(\n\t      uint256 returned\n\t\t);\t\t\n\t\t\n\tevent onReturnAll( \n\t      uint256 returned   \t// Delete\n\t\t);\n\t\n\t\n\t\n\t/*==============================\n    =          VARIABLES           =\n    ==============================*/   \n\n\taddress internal DefaultToken;\t\t\n\t\n\t\t// Struct Database\n\n    struct Safe {\n        uint256 id;\t\t\t\t\t\t// 01 -- > Registration Number\n        uint256 amount;\t\t\t\t\t// 02 -- > Total amount of contribution to this transaction\n        uint256 endtime;\t\t\t\t// 03 -- > The Expiration Of A Hold Platform Based On Unix Time\n        address user;\t\t\t\t\t// 04 -- > The ETH address that you are using\n        address tokenAddress;\t\t\t// 05 -- > The Token Contract Address That You Are Using\n\t\tstring  tokenSymbol;\t\t\t// 06 -- > The Token Symbol That You Are Using\n\t\tuint256 amountbalance; \t\t\t// 07 -- > 88% from Contribution / 72% Without Cashback\n\t\tuint256 cashbackbalance; \t\t// 08 -- > 16% from Contribution / 0% Without Cashback\n\t\tuint256 lasttime; \t\t\t\t// 09 -- > The Last Time You Withdraw Based On Unix Time\n\t\tuint256 percentage; \t\t\t// 10 -- > The percentage of tokens that are unlocked every month ( Default = 3% )\n\t\tuint256 percentagereceive; \t\t// 11 -- > The Percentage You Have Received\n\t\tuint256 tokenreceive; \t\t\t// 12 -- > The Number Of Tokens You Have Received\n\t\tuint256 lastwithdraw; \t\t\t// 13 -- > The Last Amount You Withdraw\n\t\taddress referrer; \t\t\t\t// 14 -- > Your ETH referrer address\n    }\n\t\n\t\t// Uint256\n\t\n\tuint256 public \tpercent \t\t\t\t= 1200;        \t// 01 -- > Monthly Unlock Percentage (Default 3%)\n\tuint256 private constant affiliate \t\t= 12;        \t// 02 -- > Affiliate Bonus = 12% Of Total Contributions\n\tuint256 private constant cashback \t\t= 16;        \t// 03 -- > Cashback Bonus = 16% Of Total Contributions\n\tuint256 private constant nocashback \t= 28;        \t// 04 -- > Total % loss amount if you don't get cashback\n\tuint256 private constant totalreceive \t= 88;        \t// 05 -- > The total amount you will receive\n    uint256 private constant seconds30days \t= 2592000;  \t// 06 -- > Number Of Seconds In One Month\n\tuint256 public  hodlingTime;\t\t\t\t\t\t\t// 07 -- > Length of hold time in seconds\n\tuint256 private _currentIndex; \t\t\t\t\t\t\t// 08 -- > ID number ( Start from 500 )\t\t\t\t\t\t\t//IDNumber\n\tuint256 public  _countSafes; \t\t\t\t\t\t\t// 09 -- > Total Smart Contract User\t\t\t\t\t\t\t//TotalUser\n\t\n\t\t// Mapping\n\t\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// 01 -- > Contract Address \t\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// 02 -- > Cashback Code \t\t\t\t\t\t\t\n\tmapping(address => uint256) \t\tpublic _totalSaved; \t\t// 03 -- > Token Balance\t\t\t\t//TokenBalance\t\t\n\tmapping(address => uint256[]) \t\tpublic _userSafes;\t\t\t// 04 -- > Search ID by Address \t\t//IDAddress\n\tmapping(address => uint256) \t\tprivate EthereumVault;    \t// 05 -- > Reserve Funds\t\t\t\t\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// 06 -- > Struct safe database\t\t\t\n\tmapping(address => uint256) \t\tpublic maxcontribution; \t// 07 -- > Maximum Contribution\t\t\t\t\t//N\t\t\t\t\n\tmapping(address => uint256) \t\tpublic AllContribution; \t// 08 -- > Deposit amount for all members\t\t//N\t\n\tmapping(address => uint256) \t\tpublic AllPayments; \t\t// 09 -- > Withdraw amount for all members\t\t//N\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// 10 -- > Contract Address Symbol\t\t\t\t//N\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// 11 -- > Affiliate List by ID\t\t\t\t\t//N\n\t\n    \t// Double Mapping\n\n\tmapping (address => mapping (address => uint256)) public LifetimeContribution;\t// 01 -- > Total Deposit Amount Based On Address & Token  //N\n\tmapping (address => mapping (address => uint256)) public LifetimePayments;\t\t// 02 -- > Total Withdraw Amount Based On Address & Token //N\t\n\tmapping (address => mapping (address => uint256)) public Affiliatevault;\t\t// 02 -- > Affiliate Balance That Hasn't Been Withdrawn\t  //N\n\tmapping (address => mapping (address => uint256)) public Affiliateprofit;\t\t// 03 -- > The Amount Of Profit As An Affiliate\t\t\t  //N\n\t\n\t\n\t\n\t/*==============================\n    =          CONSTRUCTOR         =\n    ==============================*/  \t\n   \n    constructor() public {\n        \t \t\n        hodlingTime \t= 730 days;\n        _currentIndex \t= 500;\n    }\n    \n\t\n\t\n\t/*==============================\n    =    AVAILABLE FOR EVERYONE    =\n    ==============================*/  \n\n//** Function 01 - Fallback Function To Receive Donation In Eth\n    function () public payable {\n        require(msg.value > 0);       \n        EthereumVault[0x0] = add(EthereumVault[0x0], msg.value);\n    }\n\t\n//** Function 02 - Cashback Code  \n    function CashbackCode(address _cashbackcode) public {\n\t\trequire(_cashbackcode != msg.sender);\n\t\t\n\t\tif (cashbackcode[msg.sender] == 0) {\n\t\t\tcashbackcode[msg.sender] = _cashbackcode;\n\t\t\temit onCashbackCode(msg.sender, _cashbackcode);\n\t\t}\t\t             \n    } \n\t\n//** Function 03 - Contribute (Hodl Platform)\n    function HodlTokens(address tokenAddress, uint256 amount) public {\n        require(tokenAddress != 0x0);\n\t\trequire(amount > 0 && amount <= maxcontribution[tokenAddress] );\n\t\t\n\t\tif (contractaddress[tokenAddress] == false) {\n\t\t\trevert();\n\t\t}\n\t\telse {\n\t\t\t\n\t\t\n        ERC20Interface token = ERC20Interface(tokenAddress);       \n        require(token.transferFrom(msg.sender, address(this), amount));\n\t\t\n\t\tuint256 affiliatecomission \t\t= div(mul(amount, affiliate), 100); \t\n\t\tuint256 no_cashback \t\t\t= div(mul(amount, nocashback), 100); \t\n\t\t\n\t\t \tif (cashbackcode[msg.sender] == 0 ) { \t\t\t\t\n\t\t\tuint256 data_amountbalance \t\t= div(mul(amount, 72), 100);\t\n\t\t\tuint256 data_cashbackbalance \t= 0; \n\t\t\taddress data_referrer\t\t\t= EthereumNodes;\n\t\t\t\n\t\t\tcashbackcode[msg.sender] = EthereumNodes;\n\t\t\temit onCashbackCode(msg.sender, EthereumNodes);\n\t\t\t\n\t\t\tEthereumVault[tokenAddress] \t= add(EthereumVault[tokenAddress], no_cashback);\n\t\t\t\n\t\t\t} else { \t\n\t\t\tdata_amountbalance \t\t\t\t= sub(amount, affiliatecomission);\t\t\t\n\t\t\tdata_cashbackbalance \t\t\t= div(mul(amount, cashback), 100);\t\t\t\n\t\t\tdata_referrer\t\t\t\t\t= cashbackcode[msg.sender];\n\t\t\tuint256 referrer_contribution \t= LifetimeContribution[data_referrer][tokenAddress];\n\t\t\t\n\t\t\tuint256 mycontribution\t\t\t= add(LifetimeContribution[msg.sender][tokenAddress], amount);\n\n\t\t\t\tif (referrer_contribution >= mycontribution) {\n\t\t\n\t\t\t\t\tAffiliatevault[data_referrer][tokenAddress] \t= add(Affiliatevault[data_referrer][tokenAddress], affiliatecomission); \n\t\t\t\t\tAffiliateprofit[data_referrer][tokenAddress] \t= add(Affiliateprofit[data_referrer][tokenAddress], affiliatecomission); \n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tuint256 Newbie \t= div(mul(referrer_contribution, affiliate), 100); \n\t\t\t\t\t\n\t\t\t\t\tAffiliatevault[data_referrer][tokenAddress] \t= add(Affiliatevault[data_referrer][tokenAddress], Newbie); \n\t\t\t\t\tAffiliateprofit[data_referrer][tokenAddress] \t= add(Affiliateprofit[data_referrer][tokenAddress], Newbie); \n\t\t\t\t\t\n\t\t\t\t\tuint256 data_unusedfunds \t\t= sub(affiliatecomission, Newbie);\t\n\t\t\t\t\tEthereumVault[tokenAddress] \t= add(EthereumVault[tokenAddress], data_unusedfunds);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t} \t\n\t\t\t  \t\t  \t\t\t\t  \t\t\t\t\t  \n\t// Insert to Database  \t\t\n\t\n\t\tafflist[data_referrer].push(msg.sender);\t\n\t\t_userSafes[msg.sender].push(_currentIndex);\n\t\t_safes[_currentIndex] = \n\n\t\tSafe(\n\t\t_currentIndex, amount, now + hodlingTime, msg.sender, tokenAddress, token.symbol(), data_amountbalance, data_cashbackbalance, now, percent, 0, 0, 0, data_referrer);\t\n\n\t\tLifetimeContribution[msg.sender][tokenAddress] = add(LifetimeContribution[msg.sender][tokenAddress], amount); \t\t\n\t\t\n\t// Update AllContribution, _totalSaved, _currentIndex, _countSafes\n\t\tAllContribution[tokenAddress] \t= add(AllContribution[tokenAddress], amount);   \t\n        _totalSaved[tokenAddress] \t\t= add(_totalSaved[tokenAddress], amount);     \t\t\n        _currentIndex++;\n        _countSafes++;\n        \n        emit onHodlTokens(msg.sender, tokenAddress, token.symbol(), amount, now + hodlingTime);\n    }\t\n\t\t\t\n\t\t\t\n}\n\t\t\n\t\n//** Function 04 - Claim Token That Has Been Unlocked\n    function ClaimTokens(address tokenAddress, uint256 id) public {\n        require(tokenAddress != 0x0);\n        require(id != 0);        \n        \n        Safe storage s = _safes[id];\n        require(s.user == msg.sender);  \n\t\t\n\t\tif (s.amountbalance == 0) {\n\t\t\trevert();\n\t\t}\n\t\telse {\n\t\t\tUnlockToken(tokenAddress, id);\n\t\t}\n    }\n    \n    function UnlockToken(address tokenAddress, uint256 id) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == tokenAddress);\n\n        uint256 eventAmount;\n        address eventTokenAddress = s.tokenAddress;\n        string memory eventTokenSymbol = s.tokenSymbol;\t\t\n\t\t     \n        if(s.endtime < now) // Hodl Complete\n        {\n            PayToken(s.user, s.tokenAddress, s.amountbalance);\n            \n            eventAmount \t\t\t\t= s.amountbalance;\n\t\t   _totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], s.amountbalance); // *\n\t\t\n\t\ts.lastwithdraw \t\t= s.amountbalance;\n\t\ts.amountbalance \t= 0;\n\t\ts.lasttime \t\t\t= now;  \n\t\t\n\t\t    if(s.cashbackbalance > 0) {\n            s.tokenreceive \t\t\t\t\t= div(mul(s.amount, 88), 100) ;\n\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 88);\n            }\n\t\t\telse {\n\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 72), 100) ;\n\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 72);\n\t\t\t}\n\t\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n\t\t\n        }\n        else \n        {\n\t\t\t\n\t\t\tUpdateUserData1(s.tokenAddress, s.id);\n\t\t\t\t\n\t\t}\n        \n    }   \n\t\n\tfunction UpdateUserData1(address tokenAddress, uint256 id) private {\n\t\t\t\n\t\tSafe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == tokenAddress);\t\t\n\t\t\t\n\t\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \n\t\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), seconds30days); \n\t\t//\tuint256 CalculateWithdraw   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\n\t\t                         \n\t\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\n\t\t\t\n\t\t\t// Maximum withdraw before unlocked, Max 10% Accumulation\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { \t\t\t\t\n\t\t\tuint256 MaxAccumulation = MaxWithdraw; \n\t\t\t} else { MaxAccumulation = CalculateWithdraw; }\n\t\t\t\n\t\t\t// Maximum withdraw = User Amount Balance   \n\t\t\tif (MaxAccumulation > s.amountbalance) { \t\t\t     \t\n\t\t\tuint256 realAmount1 = s.amountbalance; \n\t\t\t} else { realAmount1 = MaxAccumulation; }\n\t\t\t\n\t\t\t// Including Cashback In The First Contribution\n\t\t\t\n\t\t\tuint256 amountbalance72 = div(mul(s.amount, 72), 100);\n\t\t\t\n\t\t\tif (s.amountbalance >= amountbalance72) { \t\t\t\t\n\t\t\tuint256 realAmount = add(realAmount1, s.cashbackbalance); \n\t\t\t} else { realAmount = realAmount1; }\t\n\t\t\t\n\t\t\ts.lastwithdraw = realAmount;  \t\t\t\n\t\t\tuint256 newamountbalance = sub(s.amountbalance, realAmount);\t   \t          \t\t\t\n\t\t\tUpdateUserData2(tokenAddress, id, newamountbalance, realAmount);\n\t\t\t\t\t\n    }   \n\n    function UpdateUserData2(address tokenAddress, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == tokenAddress);\n\n        uint256 eventAmount;\n        address eventTokenAddress = s.tokenAddress;\n        string memory eventTokenSymbol = s.tokenSymbol;\t\t\n\n\t\ts.amountbalance \t\t\t\t= newamountbalance;  \n\t\ts.lasttime \t\t\t\t\t\t= now;  \n\t\t\n\t\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, affiliate), 100) ; \n\t\t\tuint256 maxcashback \t\t= div(mul(s.amount, cashback), 100) ; \t\t\n\t\t\tuint256 tokenreceived \t\t= sub(add(sub(sub(s.amount, tokenaffiliate), newamountbalance), s.cashbackbalance), maxcashback) ;\t\t\n\t\t//\tuint256 tokenreceived \t\t= s.amount - tokenaffiliate - newamountbalance + s.cashbackbalance - maxcashback ;\n\t\t\t\n\t\t\t// Cashback = 100 - 12 - 88 + 16 - 16 = 0 ----> No_Cashback \t= 100 - 12 - 72 + 0 - 16 = 1\n\t\t\t\n\t\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\n\t\t\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\n\t\t_totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], realAmount); \n\t\t\n\t\t\n\t        PayToken(s.user, s.tokenAddress, realAmount);           \t\t\n            eventAmount = realAmount;\n\t\t\t\n\t\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \n\t\n\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\n\t\t\n\t\tAllPayments[tokenAddress] \t\t\t\t\t= add(AllPayments[tokenAddress], amount);\n\t\tLifetimePayments[msg.sender][tokenAddress] \t= add(LifetimePayments[user][tokenAddress], amount); \n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n    }   \t\n\t\n//** Function 05 - Get How Many Contribute ?\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\n        return _userSafes[hodler].length;\n    }\n\t\n\t\n//** Function 06 - Get How Many Affiliate ?\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\n        return afflist[hodler].length;\n    }\n    \n\t\n//** Function 07 - Get complete data from each user\n\tfunction GetSafe(uint256 _id) public view\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive, address referrer)\n    {\n        Safe storage s = _safes[_id];\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive, s.referrer);\n    }\n\t\n\t\n//** Function 08 - Get Tokens Reserved For Ethereum Vault\n    function GetTokenReserve(address tokenAddress) public view returns (uint256 amount) {\n        return EthereumVault[tokenAddress];\n    }    \n    \n\t\n//** Function 09 - Get Ethereum Contract's Balance  \n    function GetContractBalance() public view returns(uint256)\n    {\n        return address(this).balance;\n    } \t\n\t\n\t\n//** Function 10 - Withdraw Affiliate Bonus\n    function WithdrawAffiliate(address user, address tokenAddress) public {  \n\t\trequire(tokenAddress != 0x0);\n\t\t\n\t\trequire(Affiliatevault[user][tokenAddress] > 0 );\n\t\t\n\t\tuint256 amount = Affiliatevault[msg.sender][tokenAddress];\n\t\t\n\t\t_totalSaved[tokenAddress] \t\t= sub(_totalSaved[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t= add(AllPayments[tokenAddress], amount);\n\t\t\n\t\tuint256 eventAmount\t\t\t\t= amount;\n        address eventTokenAddress \t\t= tokenAddress;\n        string \tmemory eventTokenSymbol = ContractSymbol[tokenAddress];\t\n\t\t\n\t\tAffiliatevault[msg.sender][tokenAddress] = 0;\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\temit onAffiliateBonus(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \t\t\n\t\n\t\n//** Function 11 - Get User's Any Token Balance\n    function GetHodlTokensBalance(address tokenAddress) public view returns (uint256 balance) {\n        require(tokenAddress != 0x0);\n        \n        for(uint256 i = 1; i < _currentIndex; i++) {            \n            Safe storage s = _safes[i];\n            if(s.user == msg.sender && s.tokenAddress == tokenAddress)\n                balance += s.amount;\n        }\n        return balance;\n    }\n\t\n\t\n\t\n\t/*==============================\n    =          RESTRICTED          =\n    ==============================*/  \t\n\n//** 01 Add Contract Address\t\n    function AddContractAddress(address tokenAddress, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol) public restricted {\n        contractaddress[tokenAddress] \t= contractstatus;\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\n\t\tmaxcontribution[tokenAddress] \t= _maxcontribution;\n\t\t\n\t\tif (DefaultToken == 0) {\n\t\t\tDefaultToken = tokenAddress;\n\t\t}\n\t\t\n\t\tif (tokenAddress == DefaultToken && contractstatus == false) {\n\t\t\tcontractaddress[tokenAddress] \t= true;\n\t\t}\t\n\t\t\n\t\temit onAddContractAddress(tokenAddress, contractstatus, _maxcontribution, _ContractSymbol);\n    }\n\t\n\t\n//** 02 - Add Maximum Contribution\t\n    function AddMaxContribution(address tokenAddress, uint256 _maxcontribution) public restricted  {\n        maxcontribution[tokenAddress] = _maxcontribution;\t\n    }\n\t\n\t\n//** 03 - Unlock Tokens\n    function UnlockTokens(address tokenAddress, uint256 id) public restricted {\n        require(tokenAddress != 0x0);\n        require(id != 0);      \n        UnlockToken(tokenAddress, id);\n    }\n\t\n    \n//** 04 Change Hodling Time   \n    function ChangeHodlingTime(uint256 newHodlingDays) restricted public {\n        require(newHodlingDays >= 180);      \n        hodlingTime = newHodlingDays * 1 days;\n    }   \n\t\n//** 05 - Change Speed Distribution \n    function ChangeSpeedDistribution(uint256 newSpeed) restricted public {\n        require(newSpeed >= 3 && newSpeed <= 12);   \t\n\t\tpercent = newSpeed;\n    }\n\t\n\t\n//** 06 - Withdraw Ethereum Received Through Fallback Function   \n    function WithdrawEth(uint256 amount) restricted public {\n        require(amount > 0); \n        require(address(this).balance >= amount); \n        \n        msg.sender.transfer(amount);\n    }\n\t\n    \n//** 07 Ethereum Nodes Fees   \n    function EthereumNodesFees(address tokenAddress) restricted public {\n        require(EthereumVault[tokenAddress] > 0);\n        \n        uint256 amount = EthereumVault[tokenAddress];\n\t\t_totalSaved[tokenAddress] \t= sub(_totalSaved[tokenAddress], amount); \n        EthereumVault[tokenAddress] = 0;\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);\n        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(msg.sender, amount);\n    }\n\t\n\t\n//** 08 - Send All Tokens That Have Been Unlocked  \n    function SendUnlockedTokens() restricted public\n    {\n        uint256 returned;\n\n        for(uint256 i = 1; i < _currentIndex; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\tUpdateUserData1(s.tokenAddress, s.id);\n\t\t\t\tWithdrawAffiliate(s.user, s.tokenAddress);\t   \n            }\n        }\n\t\t\n        emit onUnlockedTokens(returned);\n    }   \t\n\t\n//** 09 - Return All Tokens To Their Respective Addresses    \n    function ReturnAllTokens() restricted public\n    {\n        uint256 returned;\n\n        for(uint256 i = 1; i < _currentIndex; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\t\tPayToken(s.user, s.tokenAddress, s.amountbalance);\n\t\t\t\t\t\n\t\t\t\t\ts.lastwithdraw \t\t\t\t\t= s.amountbalance;\n\t\t\t\t\ts.lasttime \t\t\t\t\t\t= now;  \n\t\t\t\t\t\n\t\t\t\t\tif(s.cashbackbalance > 0) {\n\t\t\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 88), 100) ;\n\t\t\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 88);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 72), 100) ;\n\t\t\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 72);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t_totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], s.amountbalance); \t\t\t\t\t\n\t\t\t\t\ts.amountbalance \t\t\t\t= 0;\n\n                    returned++;\n                \n            }\n        }\n\t\t\n        emit onReturnAll(returned);\n    }   \n\t\n\t\n\t\n\t/*==============================\n    =      SAFE MATH FUNCTIONS     =\n    ==============================*/  \t\n\t\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 c = a * b; \n\t\trequire(c / a == b);\n\t\treturn c;\n\t}\n\t\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); \n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\t\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\t\treturn c;\n\t}\n    \n}\n\n\n\t/*==============================\n    =        ERC20 Interface       =\n    ==============================*/ \n\ncontract ERC20Interface {\n\n    uint256 public totalSupply;\n    uint256 public decimals;\n    \n    function symbol() public view returns (string);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address ",
        "debug": "keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ldoh_4: 0xfe659ede19c43b9ac1b763f92bc660393882778317580021f1f52b2eb87da3fc\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ldoh_4: 0xa56dbbe53d4ff74f7513390cc4cf1f75deddfef5df9f365f29aeea2f7f6d0081\ncalldata_ldoh_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ldoh_0: 0x11e0262000000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `AddContractAddress(address,bool,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xf9a98a8de24923f04c9d21294a7321baa3f44f2e.sol",
        "function": "AddContractAddress(address,bool,uint256,string)",
        "lineno": 47,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 20030,
        "code": "/*==============================\n    =            EVENTS            =\n    ==============================*/\n\t\n\tevent onAffiliateBonus(\n\t\t  address indexed hodler,\n\t\t  address indexed tokenAddress,\n\t      string tokenSymbol,\n\t\t  uint256 amount,\n\t\t  uint256 endtime\n\t\t);\n\t\t\n\tevent onClaimTokens(\n\t\t  address indexed hodler,\n\t\t  address indexed tokenAddress,\n\t      string tokenSymbol,\n\t\t  uint256 amount,\n\t\t  uint256 endtime\n\t\t);\t\t\n\t\t\n\tevent onHodlTokens(\n\t\t  address indexed hodler,\n\t\t  address indexed tokenAddress,\n\t      string tokenSymbol,\n\t\t  uint256 amount,\n\t\t  uint256 endtime\n\t\t);\t\t\t\t\n\t\t\n\tevent onAddContractAddress(\n\t\t  address indexed contracthodler,\n\t\t  bool contractstatus,\n\t      uint256 _maxcontribution,\n\t\t  string _ContractSymbol\n\t\t);\t\n\t\t\n\tevent onCashbackCode(\n\t\t  address indexed hodler,\n\t\t  address cashbackcode\n\t\t);\t\t\t\n\t\n\tevent onUnlockedTokens(\n\t      uint256 returned\n\t\t);\t\t\n\t\t\n\tevent onReturnAll( \n\t      uint256 returned   \t// Delete\n\t\t);\n\t\n\t\n\t\n\t/*==============================\n    =          VARIABLES           =\n    ==============================*/   \n\n\taddress internal DefaultToken;\t\t\n\t\n\t\t// Struct Database\n\n    struct Safe {\n        uint256 id;\t\t\t\t\t\t// 01 -- > Registration Number\n        uint256 amount;\t\t\t\t\t// 02 -- > Total amount of contribution to this transaction\n        uint256 endtime;\t\t\t\t// 03 -- > The Expiration Of A Hold Platform Based On Unix Time\n        address user;\t\t\t\t\t// 04 -- > The ETH address that you are using\n        address tokenAddress;\t\t\t// 05 -- > The Token Contract Address That You Are Using\n\t\tstring  tokenSymbol;\t\t\t// 06 -- > The Token Symbol That You Are Using\n\t\tuint256 amountbalance; \t\t\t// 07 -- > 88% from Contribution / 72% Without Cashback\n\t\tuint256 cashbackbalance; \t\t// 08 -- > 16% from Contribution / 0% Without Cashback\n\t\tuint256 lasttime; \t\t\t\t// 09 -- > The Last Time You Withdraw Based On Unix Time\n\t\tuint256 percentage; \t\t\t// 10 -- > The percentage of tokens that are unlocked every month ( Default = 3% )\n\t\tuint256 percentagereceive; \t\t// 11 -- > The Percentage You Have Received\n\t\tuint256 tokenreceive; \t\t\t// 12 -- > The Number Of Tokens You Have Received\n\t\tuint256 lastwithdraw; \t\t\t// 13 -- > The Last Amount You Withdraw\n\t\taddress referrer; \t\t\t\t// 14 -- > Your ETH referrer address\n    }\n\t\n\t\t// Uint256\n\t\n\tuint256 public \tpercent \t\t\t\t= 1200;        \t// 01 -- > Monthly Unlock Percentage (Default 3%)\n\tuint256 private constant affiliate \t\t= 12;        \t// 02 -- > Affiliate Bonus = 12% Of Total Contributions\n\tuint256 private constant cashback \t\t= 16;        \t// 03 -- > Cashback Bonus = 16% Of Total Contributions\n\tuint256 private constant nocashback \t= 28;        \t// 04 -- > Total % loss amount if you don't get cashback\n\tuint256 private constant totalreceive \t= 88;        \t// 05 -- > The total amount you will receive\n    uint256 private constant seconds30days \t= 2592000;  \t// 06 -- > Number Of Seconds In One Month\n\tuint256 public  hodlingTime;\t\t\t\t\t\t\t// 07 -- > Length of hold time in seconds\n\tuint256 private _currentIndex; \t\t\t\t\t\t\t// 08 -- > ID number ( Start from 500 )\t\t\t\t\t\t\t//IDNumber\n\tuint256 public  _countSafes; \t\t\t\t\t\t\t// 09 -- > Total Smart Contract User\t\t\t\t\t\t\t//TotalUser\n\t\n\t\t// Mapping\n\t\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// 01 -- > Contract Address \t\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// 02 -- > Cashback Code \t\t\t\t\t\t\t\n\tmapping(address => uint256) \t\tpublic _totalSaved; \t\t// 03 -- > Token Balance\t\t\t\t//TokenBalance\t\t\n\tmapping(address => uint256[]) \t\tpublic _userSafes;\t\t\t// 04 -- > Search ID by Address \t\t//IDAddress\n\tmapping(address => uint256) \t\tprivate EthereumVault;    \t// 05 -- > Reserve Funds\t\t\t\t\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// 06 -- > Struct safe database\t\t\t\n\tmapping(address => uint256) \t\tpublic maxcontribution; \t// 07 -- > Maximum Contribution\t\t\t\t\t//N\t\t\t\t\n\tmapping(address => uint256) \t\tpublic AllContribution; \t// 08 -- > Deposit amount for all members\t\t//N\t\n\tmapping(address => uint256) \t\tpublic AllPayments; \t\t// 09 -- > Withdraw amount for all members\t\t//N\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// 10 -- > Contract Address Symbol\t\t\t\t//N\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// 11 -- > Affiliate List by ID\t\t\t\t\t//N\n\t\n    \t// Double Mapping\n\n\tmapping (address => mapping (address => uint256)) public LifetimeContribution;\t// 01 -- > Total Deposit Amount Based On Address & Token  //N\n\tmapping (address => mapping (address => uint256)) public LifetimePayments;\t\t// 02 -- > Total Withdraw Amount Based On Address & Token //N\t\n\tmapping (address => mapping (address => uint256)) public Affiliatevault;\t\t// 02 -- > Affiliate Balance That Hasn't Been Withdrawn\t  //N\n\tmapping (address => mapping (address => uint256)) public Affiliateprofit;\t\t// 03 -- > The Amount Of Profit As An Affiliate\t\t\t  //N\n\t\n\t\n\t\n\t/*==============================\n    =          CONSTRUCTOR         =\n    ==============================*/  \t\n   \n    constructor() public {\n        \t \t\n        hodlingTime \t= 730 days;\n        _currentIndex \t= 500;\n    }\n    \n\t\n\t\n\t/*==============================\n    =    AVAILABLE FOR EVERYONE    =\n    ==============================*/  \n\n//** Function 01 - Fallback Function To Receive Donation In Eth\n    function () public payable {\n        require(msg.value > 0);       \n        EthereumVault[0x0] = add(EthereumVault[0x0], msg.value);\n    }\n\t\n//** Function 02 - Cashback Code  \n    function CashbackCode(address _cashbackcode) public {\n\t\trequire(_cashbackcode != msg.sender);\n\t\t\n\t\tif (cashbackcode[msg.sender] == 0) {\n\t\t\tcashbackcode[msg.sender] = _cashbackcode;\n\t\t\temit onCashbackCode(msg.sender, _cashbackcode);\n\t\t}\t\t             \n    } \n\t\n//** Function 03 - Contribute (Hodl Platform)\n    function HodlTokens(address tokenAddress, uint256 amount) public {\n        require(tokenAddress != 0x0);\n\t\trequire(amount > 0 && amount <= maxcontribution[tokenAddress] );\n\t\t\n\t\tif (contractaddress[tokenAddress] == false) {\n\t\t\trevert();\n\t\t}\n\t\telse {\n\t\t\t\n\t\t\n        ERC20Interface token = ERC20Interface(tokenAddress);       \n        require(token.transferFrom(msg.sender, address(this), amount));\n\t\t\n\t\tuint256 affiliatecomission \t\t= div(mul(amount, affiliate), 100); \t\n\t\tuint256 no_cashback \t\t\t= div(mul(amount, nocashback), 100); \t\n\t\t\n\t\t \tif (cashbackcode[msg.sender] == 0 ) { \t\t\t\t\n\t\t\tuint256 data_amountbalance \t\t= div(mul(amount, 72), 100);\t\n\t\t\tuint256 data_cashbackbalance \t= 0; \n\t\t\taddress data_referrer\t\t\t= EthereumNodes;\n\t\t\t\n\t\t\tcashbackcode[msg.sender] = EthereumNodes;\n\t\t\temit onCashbackCode(msg.sender, EthereumNodes);\n\t\t\t\n\t\t\tEthereumVault[tokenAddress] \t= add(EthereumVault[tokenAddress], no_cashback);\n\t\t\t\n\t\t\t} else { \t\n\t\t\tdata_amountbalance \t\t\t\t= sub(amount, affiliatecomission);\t\t\t\n\t\t\tdata_cashbackbalance \t\t\t= div(mul(amount, cashback), 100);\t\t\t\n\t\t\tdata_referrer\t\t\t\t\t= cashbackcode[msg.sender];\n\t\t\tuint256 referrer_contribution \t= LifetimeContribution[data_referrer][tokenAddress];\n\t\t\t\n\t\t\tuint256 mycontribution\t\t\t= add(LifetimeContribution[msg.sender][tokenAddress], amount);\n\n\t\t\t\tif (referrer_contribution >= mycontribution) {\n\t\t\n\t\t\t\t\tAffiliatevault[data_referrer][tokenAddress] \t= add(Affiliatevault[data_referrer][tokenAddress], affiliatecomission); \n\t\t\t\t\tAffiliateprofit[data_referrer][tokenAddress] \t= add(Affiliateprofit[data_referrer][tokenAddress], affiliatecomission); \n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tuint256 Newbie \t= div(mul(referrer_contribution, affiliate), 100); \n\t\t\t\t\t\n\t\t\t\t\tAffiliatevault[data_referrer][tokenAddress] \t= add(Affiliatevault[data_referrer][tokenAddress], Newbie); \n\t\t\t\t\tAffiliateprofit[data_referrer][tokenAddress] \t= add(Affiliateprofit[data_referrer][tokenAddress], Newbie); \n\t\t\t\t\t\n\t\t\t\t\tuint256 data_unusedfunds \t\t= sub(affiliatecomission, Newbie);\t\n\t\t\t\t\tEthereumVault[tokenAddress] \t= add(EthereumVault[tokenAddress], data_unusedfunds);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t} \t\n\t\t\t  \t\t  \t\t\t\t  \t\t\t\t\t  \n\t// Insert to Database  \t\t\n\t\n\t\tafflist[data_referrer].push(msg.sender);\t\n\t\t_userSafes[msg.sender].push(_currentIndex);\n\t\t_safes[_currentIndex] = \n\n\t\tSafe(\n\t\t_currentIndex, amount, now + hodlingTime, msg.sender, tokenAddress, token.symbol(), data_amountbalance, data_cashbackbalance, now, percent, 0, 0, 0, data_referrer);\t\n\n\t\tLifetimeContribution[msg.sender][tokenAddress] = add(LifetimeContribution[msg.sender][tokenAddress], amount); \t\t\n\t\t\n\t// Update AllContribution, _totalSaved, _currentIndex, _countSafes\n\t\tAllContribution[tokenAddress] \t= add(AllContribution[tokenAddress], amount);   \t\n        _totalSaved[tokenAddress] \t\t= add(_totalSaved[tokenAddress], amount);     \t\t\n        _currentIndex++;\n        _countSafes++;\n        \n        emit onHodlTokens(msg.sender, tokenAddress, token.symbol(), amount, now + hodlingTime);\n    }\t\n\t\t\t\n\t\t\t\n}\n\t\t\n\t\n//** Function 04 - Claim Token That Has Been Unlocked\n    function ClaimTokens(address tokenAddress, uint256 id) public {\n        require(tokenAddress != 0x0);\n        require(id != 0);        \n        \n        Safe storage s = _safes[id];\n        require(s.user == msg.sender);  \n\t\t\n\t\tif (s.amountbalance == 0) {\n\t\t\trevert();\n\t\t}\n\t\telse {\n\t\t\tUnlockToken(tokenAddress, id);\n\t\t}\n    }\n    \n    function UnlockToken(address tokenAddress, uint256 id) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == tokenAddress);\n\n        uint256 eventAmount;\n        address eventTokenAddress = s.tokenAddress;\n        string memory eventTokenSymbol = s.tokenSymbol;\t\t\n\t\t     \n        if(s.endtime < now) // Hodl Complete\n        {\n            PayToken(s.user, s.tokenAddress, s.amountbalance);\n            \n            eventAmount \t\t\t\t= s.amountbalance;\n\t\t   _totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], s.amountbalance); // *\n\t\t\n\t\ts.lastwithdraw \t\t= s.amountbalance;\n\t\ts.amountbalance \t= 0;\n\t\ts.lasttime \t\t\t= now;  \n\t\t\n\t\t    if(s.cashbackbalance > 0) {\n            s.tokenreceive \t\t\t\t\t= div(mul(s.amount, 88), 100) ;\n\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 88);\n            }\n\t\t\telse {\n\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 72), 100) ;\n\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 72);\n\t\t\t}\n\t\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n\t\t\n        }\n        else \n        {\n\t\t\t\n\t\t\tUpdateUserData1(s.tokenAddress, s.id);\n\t\t\t\t\n\t\t}\n        \n    }   \n\t\n\tfunction UpdateUserData1(address tokenAddress, uint256 id) private {\n\t\t\t\n\t\tSafe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == tokenAddress);\t\t\n\t\t\t\n\t\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \n\t\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), seconds30days); \n\t\t//\tuint256 CalculateWithdraw   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\n\t\t                         \n\t\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\n\t\t\t\n\t\t\t// Maximum withdraw before unlocked, Max 10% Accumulation\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { \t\t\t\t\n\t\t\tuint256 MaxAccumulation = MaxWithdraw; \n\t\t\t} else { MaxAccumulation = CalculateWithdraw; }\n\t\t\t\n\t\t\t// Maximum withdraw = User Amount Balance   \n\t\t\tif (MaxAccumulation > s.amountbalance) { \t\t\t     \t\n\t\t\tuint256 realAmount1 = s.amountbalance; \n\t\t\t} else { realAmount1 = MaxAccumulation; }\n\t\t\t\n\t\t\t// Including Cashback In The First Contribution\n\t\t\t\n\t\t\tuint256 amountbalance72 = div(mul(s.amount, 72), 100);\n\t\t\t\n\t\t\tif (s.amountbalance >= amountbalance72) { \t\t\t\t\n\t\t\tuint256 realAmount = add(realAmount1, s.cashbackbalance); \n\t\t\t} else { realAmount = realAmount1; }\t\n\t\t\t\n\t\t\ts.lastwithdraw = realAmount;  \t\t\t\n\t\t\tuint256 newamountbalance = sub(s.amountbalance, realAmount);\t   \t          \t\t\t\n\t\t\tUpdateUserData2(tokenAddress, id, newamountbalance, realAmount);\n\t\t\t\t\t\n    }   \n\n    function UpdateUserData2(address tokenAddress, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == tokenAddress);\n\n        uint256 eventAmount;\n        address eventTokenAddress = s.tokenAddress;\n        string memory eventTokenSymbol = s.tokenSymbol;\t\t\n\n\t\ts.amountbalance \t\t\t\t= newamountbalance;  \n\t\ts.lasttime \t\t\t\t\t\t= now;  \n\t\t\n\t\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, affiliate), 100) ; \n\t\t\tuint256 maxcashback \t\t= div(mul(s.amount, cashback), 100) ; \t\t\n\t\t\tuint256 tokenreceived \t\t= sub(add(sub(sub(s.amount, tokenaffiliate), newamountbalance), s.cashbackbalance), maxcashback) ;\t\t\n\t\t//\tuint256 tokenreceived \t\t= s.amount - tokenaffiliate - newamountbalance + s.cashbackbalance - maxcashback ;\n\t\t\t\n\t\t\t// Cashback = 100 - 12 - 88 + 16 - 16 = 0 ----> No_Cashback \t= 100 - 12 - 72 + 0 - 16 = 1\n\t\t\t\n\t\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\n\t\t\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\n\t\t_totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], realAmount); \n\t\t\n\t\t\n\t        PayToken(s.user, s.tokenAddress, realAmount);           \t\t\n            eventAmount = realAmount;\n\t\t\t\n\t\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \n\t\n\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\n\t\t\n\t\tAllPayments[tokenAddress] \t\t\t\t\t= add(AllPayments[tokenAddress], amount);\n\t\tLifetimePayments[msg.sender][tokenAddress] \t= add(LifetimePayments[user][tokenAddress], amount); \n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n    }   \t\n\t\n//** Function 05 - Get How Many Contribute ?\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\n        return _userSafes[hodler].length;\n    }\n\t\n\t\n//** Function 06 - Get How Many Affiliate ?\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\n        return afflist[hodler].length;\n    }\n    \n\t\n//** Function 07 - Get complete data from each user\n\tfunction GetSafe(uint256 _id) public view\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive, address referrer)\n    {\n        Safe storage s = _safes[_id];\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive, s.referrer);\n    }\n\t\n\t\n//** Function 08 - Get Tokens Reserved For Ethereum Vault\n    function GetTokenReserve(address tokenAddress) public view returns (uint256 amount) {\n        return EthereumVault[tokenAddress];\n    }    \n    \n\t\n//** Function 09 - Get Ethereum Contract's Balance  \n    function GetContractBalance() public view returns(uint256)\n    {\n        return address(this).balance;\n    } \t\n\t\n\t\n//** Function 10 - Withdraw Affiliate Bonus\n    function WithdrawAffiliate(address user, address tokenAddress) public {  \n\t\trequire(tokenAddress != 0x0);\n\t\t\n\t\trequire(Affiliatevault[user][tokenAddress] > 0 );\n\t\t\n\t\tuint256 amount = Affiliatevault[msg.sender][tokenAddress];\n\t\t\n\t\t_totalSaved[tokenAddress] \t\t= sub(_totalSaved[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t= add(AllPayments[tokenAddress], amount);\n\t\t\n\t\tuint256 eventAmount\t\t\t\t= amount;\n        address eventTokenAddress \t\t= tokenAddress;\n        string \tmemory eventTokenSymbol = ContractSymbol[tokenAddress];\t\n\t\t\n\t\tAffiliatevault[msg.sender][tokenAddress] = 0;\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\temit onAffiliateBonus(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \t\t\n\t\n\t\n//** Function 11 - Get User's Any Token Balance\n    function GetHodlTokensBalance(address tokenAddress) public view returns (uint256 balance) {\n        require(tokenAddress != 0x0);\n        \n        for(uint256 i = 1; i < _currentIndex; i++) {            \n            Safe storage s = _safes[i];\n            if(s.user == msg.sender && s.tokenAddress == tokenAddress)\n                balance += s.amount;\n        }\n        return balance;\n    }\n\t\n\t\n\t\n\t/*==============================\n    =          RESTRICTED          =\n    ==============================*/  \t\n\n//** 01 Add Contract Address\t\n    function AddContractAddress(address tokenAddress, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol) public restricted {\n        contractaddress[tokenAddress] \t= contractstatus;\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\n\t\tmaxcontribution[tokenAddress] \t= _maxcontribution;\n\t\t\n\t\tif (DefaultToken == 0) {\n\t\t\tDefaultToken = tokenAddress;\n\t\t}\n\t\t\n\t\tif (tokenAddress == DefaultToken && contractstatus == false) {\n\t\t\tcontractaddress[tokenAddress] \t= true;\n\t\t}\t\n\t\t\n\t\temit onAddContractAddress(tokenAddress, contractstatus, _maxcontribution, _ContractSymbol);\n    }\n\t\n\t\n//** 02 - Add Maximum Contribution\t\n    function AddMaxContribution(address tokenAddress, uint256 _maxcontribution) public restricted  {\n        maxcontribution[tokenAddress] = _maxcontribution;\t\n    }\n\t\n\t\n//** 03 - Unlock Tokens\n    function UnlockTokens(address tokenAddress, uint256 id) public restricted {\n        require(tokenAddress != 0x0);\n        require(id != 0);      \n        UnlockToken(tokenAddress, id);\n    }\n\t\n    \n//** 04 Change Hodling Time   \n    function ChangeHodlingTime(uint256 newHodlingDays) restricted public {\n        require(newHodlingDays >= 180);      \n        hodlingTime = newHodlingDays * 1 days;\n    }   \n\t\n//** 05 - Change Speed Distribution \n    function ChangeSpeedDistribution(uint256 newSpeed) restricted public {\n        require(newSpeed >= 3 && newSpeed <= 12);   \t\n\t\tpercent = newSpeed;\n    }\n\t\n\t\n//** 06 - Withdraw Ethereum Received Through Fallback Function   \n    function WithdrawEth(uint256 amount) restricted public {\n        require(amount > 0); \n        require(address(this).balance >= amount); \n        \n        msg.sender.transfer(amount);\n    }\n\t\n    \n//** 07 Ethereum Nodes Fees   \n    function EthereumNodesFees(address tokenAddress) restricted public {\n        require(EthereumVault[tokenAddress] > 0);\n        \n        uint256 amount = EthereumVault[tokenAddress];\n\t\t_totalSaved[tokenAddress] \t= sub(_totalSaved[tokenAddress], amount); \n        EthereumVault[tokenAddress] = 0;\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);\n        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(msg.sender, amount);\n    }\n\t\n\t\n//** 08 - Send All Tokens That Have Been Unlocked  \n    function SendUnlockedTokens() restricted public\n    {\n        uint256 returned;\n\n        for(uint256 i = 1; i < _currentIndex; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\tUpdateUserData1(s.tokenAddress, s.id);\n\t\t\t\tWithdrawAffiliate(s.user, s.tokenAddress);\t   \n            }\n        }\n\t\t\n        emit onUnlockedTokens(returned);\n    }   \t\n\t\n//** 09 - Return All Tokens To Their Respective Addresses    \n    function ReturnAllTokens() restricted public\n    {\n        uint256 returned;\n\n        for(uint256 i = 1; i < _currentIndex; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\t\tPayToken(s.user, s.tokenAddress, s.amountbalance);\n\t\t\t\t\t\n\t\t\t\t\ts.lastwithdraw \t\t\t\t\t= s.amountbalance;\n\t\t\t\t\ts.lasttime \t\t\t\t\t\t= now;  \n\t\t\t\t\t\n\t\t\t\t\tif(s.cashbackbalance > 0) {\n\t\t\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 88), 100) ;\n\t\t\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 88);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 72), 100) ;\n\t\t\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 72);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t_totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], s.amountbalance); \t\t\t\t\t\n\t\t\t\t\ts.amountbalance \t\t\t\t= 0;\n\n                    returned++;\n                \n            }\n        }\n\t\t\n        emit onReturnAll(returned);\n    }   \n\t\n\t\n\t\n\t/*==============================\n    =      SAFE MATH FUNCTIONS     =\n    ==============================*/  \t\n\t\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 c = a * b; \n\t\trequire(c / a == b);\n\t\treturn c;\n\t}\n\t\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); \n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\t\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\t\treturn c;\n\t}\n    \n}\n\n\n\t/*==============================\n    =        ERC20 Interface       =\n    ==============================*/ \n\ncontract ERC20Interface {\n\n    uint256 public totalSupply;\n    uint256 public decimals;\n    \n    function symbol() public view returns (string);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address ",
        "debug": "calldata_ldoh_4 + calldata_ldoh_32 + 68: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ldoh_0: 0x11e0262000000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `AddContractAddress(address,bool,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xf9a98a8de24923f04c9d21294a7321baa3f44f2e.sol",
        "function": "AddContractAddress(address,bool,uint256,string)",
        "lineno": 47,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 20044,
        "code": "/*==============================\n    =            EVENTS            =\n    ==============================*/\n\t\n\tevent onAffiliateBonus(\n\t\t  address indexed hodler,\n\t\t  address indexed tokenAddress,\n\t      string tokenSymbol,\n\t\t  uint256 amount,\n\t\t  uint256 endtime\n\t\t);\n\t\t\n\tevent onClaimTokens(\n\t\t  address indexed hodler,\n\t\t  address indexed tokenAddress,\n\t      string tokenSymbol,\n\t\t  uint256 amount,\n\t\t  uint256 endtime\n\t\t);\t\t\n\t\t\n\tevent onHodlTokens(\n\t\t  address indexed hodler,\n\t\t  address indexed tokenAddress,\n\t      string tokenSymbol,\n\t\t  uint256 amount,\n\t\t  uint256 endtime\n\t\t);\t\t\t\t\n\t\t\n\tevent onAddContractAddress(\n\t\t  address indexed contracthodler,\n\t\t  bool contractstatus,\n\t      uint256 _maxcontribution,\n\t\t  string _ContractSymbol\n\t\t);\t\n\t\t\n\tevent onCashbackCode(\n\t\t  address indexed hodler,\n\t\t  address cashbackcode\n\t\t);\t\t\t\n\t\n\tevent onUnlockedTokens(\n\t      uint256 returned\n\t\t);\t\t\n\t\t\n\tevent onReturnAll( \n\t      uint256 returned   \t// Delete\n\t\t);\n\t\n\t\n\t\n\t/*==============================\n    =          VARIABLES           =\n    ==============================*/   \n\n\taddress internal DefaultToken;\t\t\n\t\n\t\t// Struct Database\n\n    struct Safe {\n        uint256 id;\t\t\t\t\t\t// 01 -- > Registration Number\n        uint256 amount;\t\t\t\t\t// 02 -- > Total amount of contribution to this transaction\n        uint256 endtime;\t\t\t\t// 03 -- > The Expiration Of A Hold Platform Based On Unix Time\n        address user;\t\t\t\t\t// 04 -- > The ETH address that you are using\n        address tokenAddress;\t\t\t// 05 -- > The Token Contract Address That You Are Using\n\t\tstring  tokenSymbol;\t\t\t// 06 -- > The Token Symbol That You Are Using\n\t\tuint256 amountbalance; \t\t\t// 07 -- > 88% from Contribution / 72% Without Cashback\n\t\tuint256 cashbackbalance; \t\t// 08 -- > 16% from Contribution / 0% Without Cashback\n\t\tuint256 lasttime; \t\t\t\t// 09 -- > The Last Time You Withdraw Based On Unix Time\n\t\tuint256 percentage; \t\t\t// 10 -- > The percentage of tokens that are unlocked every month ( Default = 3% )\n\t\tuint256 percentagereceive; \t\t// 11 -- > The Percentage You Have Received\n\t\tuint256 tokenreceive; \t\t\t// 12 -- > The Number Of Tokens You Have Received\n\t\tuint256 lastwithdraw; \t\t\t// 13 -- > The Last Amount You Withdraw\n\t\taddress referrer; \t\t\t\t// 14 -- > Your ETH referrer address\n    }\n\t\n\t\t// Uint256\n\t\n\tuint256 public \tpercent \t\t\t\t= 1200;        \t// 01 -- > Monthly Unlock Percentage (Default 3%)\n\tuint256 private constant affiliate \t\t= 12;        \t// 02 -- > Affiliate Bonus = 12% Of Total Contributions\n\tuint256 private constant cashback \t\t= 16;        \t// 03 -- > Cashback Bonus = 16% Of Total Contributions\n\tuint256 private constant nocashback \t= 28;        \t// 04 -- > Total % loss amount if you don't get cashback\n\tuint256 private constant totalreceive \t= 88;        \t// 05 -- > The total amount you will receive\n    uint256 private constant seconds30days \t= 2592000;  \t// 06 -- > Number Of Seconds In One Month\n\tuint256 public  hodlingTime;\t\t\t\t\t\t\t// 07 -- > Length of hold time in seconds\n\tuint256 private _currentIndex; \t\t\t\t\t\t\t// 08 -- > ID number ( Start from 500 )\t\t\t\t\t\t\t//IDNumber\n\tuint256 public  _countSafes; \t\t\t\t\t\t\t// 09 -- > Total Smart Contract User\t\t\t\t\t\t\t//TotalUser\n\t\n\t\t// Mapping\n\t\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// 01 -- > Contract Address \t\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// 02 -- > Cashback Code \t\t\t\t\t\t\t\n\tmapping(address => uint256) \t\tpublic _totalSaved; \t\t// 03 -- > Token Balance\t\t\t\t//TokenBalance\t\t\n\tmapping(address => uint256[]) \t\tpublic _userSafes;\t\t\t// 04 -- > Search ID by Address \t\t//IDAddress\n\tmapping(address => uint256) \t\tprivate EthereumVault;    \t// 05 -- > Reserve Funds\t\t\t\t\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// 06 -- > Struct safe database\t\t\t\n\tmapping(address => uint256) \t\tpublic maxcontribution; \t// 07 -- > Maximum Contribution\t\t\t\t\t//N\t\t\t\t\n\tmapping(address => uint256) \t\tpublic AllContribution; \t// 08 -- > Deposit amount for all members\t\t//N\t\n\tmapping(address => uint256) \t\tpublic AllPayments; \t\t// 09 -- > Withdraw amount for all members\t\t//N\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// 10 -- > Contract Address Symbol\t\t\t\t//N\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// 11 -- > Affiliate List by ID\t\t\t\t\t//N\n\t\n    \t// Double Mapping\n\n\tmapping (address => mapping (address => uint256)) public LifetimeContribution;\t// 01 -- > Total Deposit Amount Based On Address & Token  //N\n\tmapping (address => mapping (address => uint256)) public LifetimePayments;\t\t// 02 -- > Total Withdraw Amount Based On Address & Token //N\t\n\tmapping (address => mapping (address => uint256)) public Affiliatevault;\t\t// 02 -- > Affiliate Balance That Hasn't Been Withdrawn\t  //N\n\tmapping (address => mapping (address => uint256)) public Affiliateprofit;\t\t// 03 -- > The Amount Of Profit As An Affiliate\t\t\t  //N\n\t\n\t\n\t\n\t/*==============================\n    =          CONSTRUCTOR         =\n    ==============================*/  \t\n   \n    constructor() public {\n        \t \t\n        hodlingTime \t= 730 days;\n        _currentIndex \t= 500;\n    }\n    \n\t\n\t\n\t/*==============================\n    =    AVAILABLE FOR EVERYONE    =\n    ==============================*/  \n\n//** Function 01 - Fallback Function To Receive Donation In Eth\n    function () public payable {\n        require(msg.value > 0);       \n        EthereumVault[0x0] = add(EthereumVault[0x0], msg.value);\n    }\n\t\n//** Function 02 - Cashback Code  \n    function CashbackCode(address _cashbackcode) public {\n\t\trequire(_cashbackcode != msg.sender);\n\t\t\n\t\tif (cashbackcode[msg.sender] == 0) {\n\t\t\tcashbackcode[msg.sender] = _cashbackcode;\n\t\t\temit onCashbackCode(msg.sender, _cashbackcode);\n\t\t}\t\t             \n    } \n\t\n//** Function 03 - Contribute (Hodl Platform)\n    function HodlTokens(address tokenAddress, uint256 amount) public {\n        require(tokenAddress != 0x0);\n\t\trequire(amount > 0 && amount <= maxcontribution[tokenAddress] );\n\t\t\n\t\tif (contractaddress[tokenAddress] == false) {\n\t\t\trevert();\n\t\t}\n\t\telse {\n\t\t\t\n\t\t\n        ERC20Interface token = ERC20Interface(tokenAddress);       \n        require(token.transferFrom(msg.sender, address(this), amount));\n\t\t\n\t\tuint256 affiliatecomission \t\t= div(mul(amount, affiliate), 100); \t\n\t\tuint256 no_cashback \t\t\t= div(mul(amount, nocashback), 100); \t\n\t\t\n\t\t \tif (cashbackcode[msg.sender] == 0 ) { \t\t\t\t\n\t\t\tuint256 data_amountbalance \t\t= div(mul(amount, 72), 100);\t\n\t\t\tuint256 data_cashbackbalance \t= 0; \n\t\t\taddress data_referrer\t\t\t= EthereumNodes;\n\t\t\t\n\t\t\tcashbackcode[msg.sender] = EthereumNodes;\n\t\t\temit onCashbackCode(msg.sender, EthereumNodes);\n\t\t\t\n\t\t\tEthereumVault[tokenAddress] \t= add(EthereumVault[tokenAddress], no_cashback);\n\t\t\t\n\t\t\t} else { \t\n\t\t\tdata_amountbalance \t\t\t\t= sub(amount, affiliatecomission);\t\t\t\n\t\t\tdata_cashbackbalance \t\t\t= div(mul(amount, cashback), 100);\t\t\t\n\t\t\tdata_referrer\t\t\t\t\t= cashbackcode[msg.sender];\n\t\t\tuint256 referrer_contribution \t= LifetimeContribution[data_referrer][tokenAddress];\n\t\t\t\n\t\t\tuint256 mycontribution\t\t\t= add(LifetimeContribution[msg.sender][tokenAddress], amount);\n\n\t\t\t\tif (referrer_contribution >= mycontribution) {\n\t\t\n\t\t\t\t\tAffiliatevault[data_referrer][tokenAddress] \t= add(Affiliatevault[data_referrer][tokenAddress], affiliatecomission); \n\t\t\t\t\tAffiliateprofit[data_referrer][tokenAddress] \t= add(Affiliateprofit[data_referrer][tokenAddress], affiliatecomission); \n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tuint256 Newbie \t= div(mul(referrer_contribution, affiliate), 100); \n\t\t\t\t\t\n\t\t\t\t\tAffiliatevault[data_referrer][tokenAddress] \t= add(Affiliatevault[data_referrer][tokenAddress], Newbie); \n\t\t\t\t\tAffiliateprofit[data_referrer][tokenAddress] \t= add(Affiliateprofit[data_referrer][tokenAddress], Newbie); \n\t\t\t\t\t\n\t\t\t\t\tuint256 data_unusedfunds \t\t= sub(affiliatecomission, Newbie);\t\n\t\t\t\t\tEthereumVault[tokenAddress] \t= add(EthereumVault[tokenAddress], data_unusedfunds);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t} \t\n\t\t\t  \t\t  \t\t\t\t  \t\t\t\t\t  \n\t// Insert to Database  \t\t\n\t\n\t\tafflist[data_referrer].push(msg.sender);\t\n\t\t_userSafes[msg.sender].push(_currentIndex);\n\t\t_safes[_currentIndex] = \n\n\t\tSafe(\n\t\t_currentIndex, amount, now + hodlingTime, msg.sender, tokenAddress, token.symbol(), data_amountbalance, data_cashbackbalance, now, percent, 0, 0, 0, data_referrer);\t\n\n\t\tLifetimeContribution[msg.sender][tokenAddress] = add(LifetimeContribution[msg.sender][tokenAddress], amount); \t\t\n\t\t\n\t// Update AllContribution, _totalSaved, _currentIndex, _countSafes\n\t\tAllContribution[tokenAddress] \t= add(AllContribution[tokenAddress], amount);   \t\n        _totalSaved[tokenAddress] \t\t= add(_totalSaved[tokenAddress], amount);     \t\t\n        _currentIndex++;\n        _countSafes++;\n        \n        emit onHodlTokens(msg.sender, tokenAddress, token.symbol(), amount, now + hodlingTime);\n    }\t\n\t\t\t\n\t\t\t\n}\n\t\t\n\t\n//** Function 04 - Claim Token That Has Been Unlocked\n    function ClaimTokens(address tokenAddress, uint256 id) public {\n        require(tokenAddress != 0x0);\n        require(id != 0);        \n        \n        Safe storage s = _safes[id];\n        require(s.user == msg.sender);  \n\t\t\n\t\tif (s.amountbalance == 0) {\n\t\t\trevert();\n\t\t}\n\t\telse {\n\t\t\tUnlockToken(tokenAddress, id);\n\t\t}\n    }\n    \n    function UnlockToken(address tokenAddress, uint256 id) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == tokenAddress);\n\n        uint256 eventAmount;\n        address eventTokenAddress = s.tokenAddress;\n        string memory eventTokenSymbol = s.tokenSymbol;\t\t\n\t\t     \n        if(s.endtime < now) // Hodl Complete\n        {\n            PayToken(s.user, s.tokenAddress, s.amountbalance);\n            \n            eventAmount \t\t\t\t= s.amountbalance;\n\t\t   _totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], s.amountbalance); // *\n\t\t\n\t\ts.lastwithdraw \t\t= s.amountbalance;\n\t\ts.amountbalance \t= 0;\n\t\ts.lasttime \t\t\t= now;  \n\t\t\n\t\t    if(s.cashbackbalance > 0) {\n            s.tokenreceive \t\t\t\t\t= div(mul(s.amount, 88), 100) ;\n\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 88);\n            }\n\t\t\telse {\n\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 72), 100) ;\n\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 72);\n\t\t\t}\n\t\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n\t\t\n        }\n        else \n        {\n\t\t\t\n\t\t\tUpdateUserData1(s.tokenAddress, s.id);\n\t\t\t\t\n\t\t}\n        \n    }   \n\t\n\tfunction UpdateUserData1(address tokenAddress, uint256 id) private {\n\t\t\t\n\t\tSafe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == tokenAddress);\t\t\n\t\t\t\n\t\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \n\t\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), seconds30days); \n\t\t//\tuint256 CalculateWithdraw   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\n\t\t                         \n\t\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\n\t\t\t\n\t\t\t// Maximum withdraw before unlocked, Max 10% Accumulation\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { \t\t\t\t\n\t\t\tuint256 MaxAccumulation = MaxWithdraw; \n\t\t\t} else { MaxAccumulation = CalculateWithdraw; }\n\t\t\t\n\t\t\t// Maximum withdraw = User Amount Balance   \n\t\t\tif (MaxAccumulation > s.amountbalance) { \t\t\t     \t\n\t\t\tuint256 realAmount1 = s.amountbalance; \n\t\t\t} else { realAmount1 = MaxAccumulation; }\n\t\t\t\n\t\t\t// Including Cashback In The First Contribution\n\t\t\t\n\t\t\tuint256 amountbalance72 = div(mul(s.amount, 72), 100);\n\t\t\t\n\t\t\tif (s.amountbalance >= amountbalance72) { \t\t\t\t\n\t\t\tuint256 realAmount = add(realAmount1, s.cashbackbalance); \n\t\t\t} else { realAmount = realAmount1; }\t\n\t\t\t\n\t\t\ts.lastwithdraw = realAmount;  \t\t\t\n\t\t\tuint256 newamountbalance = sub(s.amountbalance, realAmount);\t   \t          \t\t\t\n\t\t\tUpdateUserData2(tokenAddress, id, newamountbalance, realAmount);\n\t\t\t\t\t\n    }   \n\n    function UpdateUserData2(address tokenAddress, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == tokenAddress);\n\n        uint256 eventAmount;\n        address eventTokenAddress = s.tokenAddress;\n        string memory eventTokenSymbol = s.tokenSymbol;\t\t\n\n\t\ts.amountbalance \t\t\t\t= newamountbalance;  \n\t\ts.lasttime \t\t\t\t\t\t= now;  \n\t\t\n\t\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, affiliate), 100) ; \n\t\t\tuint256 maxcashback \t\t= div(mul(s.amount, cashback), 100) ; \t\t\n\t\t\tuint256 tokenreceived \t\t= sub(add(sub(sub(s.amount, tokenaffiliate), newamountbalance), s.cashbackbalance), maxcashback) ;\t\t\n\t\t//\tuint256 tokenreceived \t\t= s.amount - tokenaffiliate - newamountbalance + s.cashbackbalance - maxcashback ;\n\t\t\t\n\t\t\t// Cashback = 100 - 12 - 88 + 16 - 16 = 0 ----> No_Cashback \t= 100 - 12 - 72 + 0 - 16 = 1\n\t\t\t\n\t\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\n\t\t\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\n\t\t_totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], realAmount); \n\t\t\n\t\t\n\t        PayToken(s.user, s.tokenAddress, realAmount);           \t\t\n            eventAmount = realAmount;\n\t\t\t\n\t\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \n\t\n\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\n\t\t\n\t\tAllPayments[tokenAddress] \t\t\t\t\t= add(AllPayments[tokenAddress], amount);\n\t\tLifetimePayments[msg.sender][tokenAddress] \t= add(LifetimePayments[user][tokenAddress], amount); \n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n    }   \t\n\t\n//** Function 05 - Get How Many Contribute ?\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\n        return _userSafes[hodler].length;\n    }\n\t\n\t\n//** Function 06 - Get How Many Affiliate ?\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\n        return afflist[hodler].length;\n    }\n    \n\t\n//** Function 07 - Get complete data from each user\n\tfunction GetSafe(uint256 _id) public view\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive, address referrer)\n    {\n        Safe storage s = _safes[_id];\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive, s.referrer);\n    }\n\t\n\t\n//** Function 08 - Get Tokens Reserved For Ethereum Vault\n    function GetTokenReserve(address tokenAddress) public view returns (uint256 amount) {\n        return EthereumVault[tokenAddress];\n    }    \n    \n\t\n//** Function 09 - Get Ethereum Contract's Balance  \n    function GetContractBalance() public view returns(uint256)\n    {\n        return address(this).balance;\n    } \t\n\t\n\t\n//** Function 10 - Withdraw Affiliate Bonus\n    function WithdrawAffiliate(address user, address tokenAddress) public {  \n\t\trequire(tokenAddress != 0x0);\n\t\t\n\t\trequire(Affiliatevault[user][tokenAddress] > 0 );\n\t\t\n\t\tuint256 amount = Affiliatevault[msg.sender][tokenAddress];\n\t\t\n\t\t_totalSaved[tokenAddress] \t\t= sub(_totalSaved[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t= add(AllPayments[tokenAddress], amount);\n\t\t\n\t\tuint256 eventAmount\t\t\t\t= amount;\n        address eventTokenAddress \t\t= tokenAddress;\n        string \tmemory eventTokenSymbol = ContractSymbol[tokenAddress];\t\n\t\t\n\t\tAffiliatevault[msg.sender][tokenAddress] = 0;\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\temit onAffiliateBonus(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \t\t\n\t\n\t\n//** Function 11 - Get User's Any Token Balance\n    function GetHodlTokensBalance(address tokenAddress) public view returns (uint256 balance) {\n        require(tokenAddress != 0x0);\n        \n        for(uint256 i = 1; i < _currentIndex; i++) {            \n            Safe storage s = _safes[i];\n            if(s.user == msg.sender && s.tokenAddress == tokenAddress)\n                balance += s.amount;\n        }\n        return balance;\n    }\n\t\n\t\n\t\n\t/*==============================\n    =          RESTRICTED          =\n    ==============================*/  \t\n\n//** 01 Add Contract Address\t\n    function AddContractAddress(address tokenAddress, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol) public restricted {\n        contractaddress[tokenAddress] \t= contractstatus;\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\n\t\tmaxcontribution[tokenAddress] \t= _maxcontribution;\n\t\t\n\t\tif (DefaultToken == 0) {\n\t\t\tDefaultToken = tokenAddress;\n\t\t}\n\t\t\n\t\tif (tokenAddress == DefaultToken && contractstatus == false) {\n\t\t\tcontractaddress[tokenAddress] \t= true;\n\t\t}\t\n\t\t\n\t\temit onAddContractAddress(tokenAddress, contractstatus, _maxcontribution, _ContractSymbol);\n    }\n\t\n\t\n//** 02 - Add Maximum Contribution\t\n    function AddMaxContribution(address tokenAddress, uint256 _maxcontribution) public restricted  {\n        maxcontribution[tokenAddress] = _maxcontribution;\t\n    }\n\t\n\t\n//** 03 - Unlock Tokens\n    function UnlockTokens(address tokenAddress, uint256 id) public restricted {\n        require(tokenAddress != 0x0);\n        require(id != 0);      \n        UnlockToken(tokenAddress, id);\n    }\n\t\n    \n//** 04 Change Hodling Time   \n    function ChangeHodlingTime(uint256 newHodlingDays) restricted public {\n        require(newHodlingDays >= 180);      \n        hodlingTime = newHodlingDays * 1 days;\n    }   \n\t\n//** 05 - Change Speed Distribution \n    function ChangeSpeedDistribution(uint256 newSpeed) restricted public {\n        require(newSpeed >= 3 && newSpeed <= 12);   \t\n\t\tpercent = newSpeed;\n    }\n\t\n\t\n//** 06 - Withdraw Ethereum Received Through Fallback Function   \n    function WithdrawEth(uint256 amount) restricted public {\n        require(amount > 0); \n        require(address(this).balance >= amount); \n        \n        msg.sender.transfer(amount);\n    }\n\t\n    \n//** 07 Ethereum Nodes Fees   \n    function EthereumNodesFees(address tokenAddress) restricted public {\n        require(EthereumVault[tokenAddress] > 0);\n        \n        uint256 amount = EthereumVault[tokenAddress];\n\t\t_totalSaved[tokenAddress] \t= sub(_totalSaved[tokenAddress], amount); \n        EthereumVault[tokenAddress] = 0;\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);\n        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(msg.sender, amount);\n    }\n\t\n\t\n//** 08 - Send All Tokens That Have Been Unlocked  \n    function SendUnlockedTokens() restricted public\n    {\n        uint256 returned;\n\n        for(uint256 i = 1; i < _currentIndex; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\tUpdateUserData1(s.tokenAddress, s.id);\n\t\t\t\tWithdrawAffiliate(s.user, s.tokenAddress);\t   \n            }\n        }\n\t\t\n        emit onUnlockedTokens(returned);\n    }   \t\n\t\n//** 09 - Return All Tokens To Their Respective Addresses    \n    function ReturnAllTokens() restricted public\n    {\n        uint256 returned;\n\n        for(uint256 i = 1; i < _currentIndex; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\t\tPayToken(s.user, s.tokenAddress, s.amountbalance);\n\t\t\t\t\t\n\t\t\t\t\ts.lastwithdraw \t\t\t\t\t= s.amountbalance;\n\t\t\t\t\ts.lasttime \t\t\t\t\t\t= now;  \n\t\t\t\t\t\n\t\t\t\t\tif(s.cashbackbalance > 0) {\n\t\t\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 88), 100) ;\n\t\t\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 88);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 72), 100) ;\n\t\t\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 72);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t_totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], s.amountbalance); \t\t\t\t\t\n\t\t\t\t\ts.amountbalance \t\t\t\t= 0;\n\n                    returned++;\n                \n            }\n        }\n\t\t\n        emit onReturnAll(returned);\n    }   \n\t\n\t\n\t\n\t/*==============================\n    =      SAFE MATH FUNCTIONS     =\n    ==============================*/  \t\n\t\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 c = a * b; \n\t\trequire(c / a == b);\n\t\treturn c;\n\t}\n\t\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); \n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\t\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\t\treturn c;\n\t}\n    \n}\n\n\n\t/*==============================\n    =        ERC20 Interface       =\n    ==============================*/ \n\ncontract ERC20Interface {\n\n    uint256 public totalSupply;\n    uint256 public decimals;\n    \n    function symbol() public view returns (string);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address ",
        "debug": "calldata_ldoh_4 + calldata_ldoh_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ldoh_0: 0x11e0262000000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `AddContractAddress(address,bool,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xf9a98a8de24923f04c9d21294a7321baa3f44f2e.sol",
        "function": "AddContractAddress(address,bool,uint256,string)",
        "lineno": 47,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 20066,
        "code": "/*==============================\n    =            EVENTS            =\n    ==============================*/\n\t\n\tevent onAffiliateBonus(\n\t\t  address indexed hodler,\n\t\t  address indexed tokenAddress,\n\t      string tokenSymbol,\n\t\t  uint256 amount,\n\t\t  uint256 endtime\n\t\t);\n\t\t\n\tevent onClaimTokens(\n\t\t  address indexed hodler,\n\t\t  address indexed tokenAddress,\n\t      string tokenSymbol,\n\t\t  uint256 amount,\n\t\t  uint256 endtime\n\t\t);\t\t\n\t\t\n\tevent onHodlTokens(\n\t\t  address indexed hodler,\n\t\t  address indexed tokenAddress,\n\t      string tokenSymbol,\n\t\t  uint256 amount,\n\t\t  uint256 endtime\n\t\t);\t\t\t\t\n\t\t\n\tevent onAddContractAddress(\n\t\t  address indexed contracthodler,\n\t\t  bool contractstatus,\n\t      uint256 _maxcontribution,\n\t\t  string _ContractSymbol\n\t\t);\t\n\t\t\n\tevent onCashbackCode(\n\t\t  address indexed hodler,\n\t\t  address cashbackcode\n\t\t);\t\t\t\n\t\n\tevent onUnlockedTokens(\n\t      uint256 returned\n\t\t);\t\t\n\t\t\n\tevent onReturnAll( \n\t      uint256 returned   \t// Delete\n\t\t);\n\t\n\t\n\t\n\t/*==============================\n    =          VARIABLES           =\n    ==============================*/   \n\n\taddress internal DefaultToken;\t\t\n\t\n\t\t// Struct Database\n\n    struct Safe {\n        uint256 id;\t\t\t\t\t\t// 01 -- > Registration Number\n        uint256 amount;\t\t\t\t\t// 02 -- > Total amount of contribution to this transaction\n        uint256 endtime;\t\t\t\t// 03 -- > The Expiration Of A Hold Platform Based On Unix Time\n        address user;\t\t\t\t\t// 04 -- > The ETH address that you are using\n        address tokenAddress;\t\t\t// 05 -- > The Token Contract Address That You Are Using\n\t\tstring  tokenSymbol;\t\t\t// 06 -- > The Token Symbol That You Are Using\n\t\tuint256 amountbalance; \t\t\t// 07 -- > 88% from Contribution / 72% Without Cashback\n\t\tuint256 cashbackbalance; \t\t// 08 -- > 16% from Contribution / 0% Without Cashback\n\t\tuint256 lasttime; \t\t\t\t// 09 -- > The Last Time You Withdraw Based On Unix Time\n\t\tuint256 percentage; \t\t\t// 10 -- > The percentage of tokens that are unlocked every month ( Default = 3% )\n\t\tuint256 percentagereceive; \t\t// 11 -- > The Percentage You Have Received\n\t\tuint256 tokenreceive; \t\t\t// 12 -- > The Number Of Tokens You Have Received\n\t\tuint256 lastwithdraw; \t\t\t// 13 -- > The Last Amount You Withdraw\n\t\taddress referrer; \t\t\t\t// 14 -- > Your ETH referrer address\n    }\n\t\n\t\t// Uint256\n\t\n\tuint256 public \tpercent \t\t\t\t= 1200;        \t// 01 -- > Monthly Unlock Percentage (Default 3%)\n\tuint256 private constant affiliate \t\t= 12;        \t// 02 -- > Affiliate Bonus = 12% Of Total Contributions\n\tuint256 private constant cashback \t\t= 16;        \t// 03 -- > Cashback Bonus = 16% Of Total Contributions\n\tuint256 private constant nocashback \t= 28;        \t// 04 -- > Total % loss amount if you don't get cashback\n\tuint256 private constant totalreceive \t= 88;        \t// 05 -- > The total amount you will receive\n    uint256 private constant seconds30days \t= 2592000;  \t// 06 -- > Number Of Seconds In One Month\n\tuint256 public  hodlingTime;\t\t\t\t\t\t\t// 07 -- > Length of hold time in seconds\n\tuint256 private _currentIndex; \t\t\t\t\t\t\t// 08 -- > ID number ( Start from 500 )\t\t\t\t\t\t\t//IDNumber\n\tuint256 public  _countSafes; \t\t\t\t\t\t\t// 09 -- > Total Smart Contract User\t\t\t\t\t\t\t//TotalUser\n\t\n\t\t// Mapping\n\t\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// 01 -- > Contract Address \t\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// 02 -- > Cashback Code \t\t\t\t\t\t\t\n\tmapping(address => uint256) \t\tpublic _totalSaved; \t\t// 03 -- > Token Balance\t\t\t\t//TokenBalance\t\t\n\tmapping(address => uint256[]) \t\tpublic _userSafes;\t\t\t// 04 -- > Search ID by Address \t\t//IDAddress\n\tmapping(address => uint256) \t\tprivate EthereumVault;    \t// 05 -- > Reserve Funds\t\t\t\t\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// 06 -- > Struct safe database\t\t\t\n\tmapping(address => uint256) \t\tpublic maxcontribution; \t// 07 -- > Maximum Contribution\t\t\t\t\t//N\t\t\t\t\n\tmapping(address => uint256) \t\tpublic AllContribution; \t// 08 -- > Deposit amount for all members\t\t//N\t\n\tmapping(address => uint256) \t\tpublic AllPayments; \t\t// 09 -- > Withdraw amount for all members\t\t//N\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// 10 -- > Contract Address Symbol\t\t\t\t//N\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// 11 -- > Affiliate List by ID\t\t\t\t\t//N\n\t\n    \t// Double Mapping\n\n\tmapping (address => mapping (address => uint256)) public LifetimeContribution;\t// 01 -- > Total Deposit Amount Based On Address & Token  //N\n\tmapping (address => mapping (address => uint256)) public LifetimePayments;\t\t// 02 -- > Total Withdraw Amount Based On Address & Token //N\t\n\tmapping (address => mapping (address => uint256)) public Affiliatevault;\t\t// 02 -- > Affiliate Balance That Hasn't Been Withdrawn\t  //N\n\tmapping (address => mapping (address => uint256)) public Affiliateprofit;\t\t// 03 -- > The Amount Of Profit As An Affiliate\t\t\t  //N\n\t\n\t\n\t\n\t/*==============================\n    =          CONSTRUCTOR         =\n    ==============================*/  \t\n   \n    constructor() public {\n        \t \t\n        hodlingTime \t= 730 days;\n        _currentIndex \t= 500;\n    }\n    \n\t\n\t\n\t/*==============================\n    =    AVAILABLE FOR EVERYONE    =\n    ==============================*/  \n\n//** Function 01 - Fallback Function To Receive Donation In Eth\n    function () public payable {\n        require(msg.value > 0);       \n        EthereumVault[0x0] = add(EthereumVault[0x0], msg.value);\n    }\n\t\n//** Function 02 - Cashback Code  \n    function CashbackCode(address _cashbackcode) public {\n\t\trequire(_cashbackcode != msg.sender);\n\t\t\n\t\tif (cashbackcode[msg.sender] == 0) {\n\t\t\tcashbackcode[msg.sender] = _cashbackcode;\n\t\t\temit onCashbackCode(msg.sender, _cashbackcode);\n\t\t}\t\t             \n    } \n\t\n//** Function 03 - Contribute (Hodl Platform)\n    function HodlTokens(address tokenAddress, uint256 amount) public {\n        require(tokenAddress != 0x0);\n\t\trequire(amount > 0 && amount <= maxcontribution[tokenAddress] );\n\t\t\n\t\tif (contractaddress[tokenAddress] == false) {\n\t\t\trevert();\n\t\t}\n\t\telse {\n\t\t\t\n\t\t\n        ERC20Interface token = ERC20Interface(tokenAddress);       \n        require(token.transferFrom(msg.sender, address(this), amount));\n\t\t\n\t\tuint256 affiliatecomission \t\t= div(mul(amount, affiliate), 100); \t\n\t\tuint256 no_cashback \t\t\t= div(mul(amount, nocashback), 100); \t\n\t\t\n\t\t \tif (cashbackcode[msg.sender] == 0 ) { \t\t\t\t\n\t\t\tuint256 data_amountbalance \t\t= div(mul(amount, 72), 100);\t\n\t\t\tuint256 data_cashbackbalance \t= 0; \n\t\t\taddress data_referrer\t\t\t= EthereumNodes;\n\t\t\t\n\t\t\tcashbackcode[msg.sender] = EthereumNodes;\n\t\t\temit onCashbackCode(msg.sender, EthereumNodes);\n\t\t\t\n\t\t\tEthereumVault[tokenAddress] \t= add(EthereumVault[tokenAddress], no_cashback);\n\t\t\t\n\t\t\t} else { \t\n\t\t\tdata_amountbalance \t\t\t\t= sub(amount, affiliatecomission);\t\t\t\n\t\t\tdata_cashbackbalance \t\t\t= div(mul(amount, cashback), 100);\t\t\t\n\t\t\tdata_referrer\t\t\t\t\t= cashbackcode[msg.sender];\n\t\t\tuint256 referrer_contribution \t= LifetimeContribution[data_referrer][tokenAddress];\n\t\t\t\n\t\t\tuint256 mycontribution\t\t\t= add(LifetimeContribution[msg.sender][tokenAddress], amount);\n\n\t\t\t\tif (referrer_contribution >= mycontribution) {\n\t\t\n\t\t\t\t\tAffiliatevault[data_referrer][tokenAddress] \t= add(Affiliatevault[data_referrer][tokenAddress], affiliatecomission); \n\t\t\t\t\tAffiliateprofit[data_referrer][tokenAddress] \t= add(Affiliateprofit[data_referrer][tokenAddress], affiliatecomission); \n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\tuint256 Newbie \t= div(mul(referrer_contribution, affiliate), 100); \n\t\t\t\t\t\n\t\t\t\t\tAffiliatevault[data_referrer][tokenAddress] \t= add(Affiliatevault[data_referrer][tokenAddress], Newbie); \n\t\t\t\t\tAffiliateprofit[data_referrer][tokenAddress] \t= add(Affiliateprofit[data_referrer][tokenAddress], Newbie); \n\t\t\t\t\t\n\t\t\t\t\tuint256 data_unusedfunds \t\t= sub(affiliatecomission, Newbie);\t\n\t\t\t\t\tEthereumVault[tokenAddress] \t= add(EthereumVault[tokenAddress], data_unusedfunds);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t} \t\n\t\t\t  \t\t  \t\t\t\t  \t\t\t\t\t  \n\t// Insert to Database  \t\t\n\t\n\t\tafflist[data_referrer].push(msg.sender);\t\n\t\t_userSafes[msg.sender].push(_currentIndex);\n\t\t_safes[_currentIndex] = \n\n\t\tSafe(\n\t\t_currentIndex, amount, now + hodlingTime, msg.sender, tokenAddress, token.symbol(), data_amountbalance, data_cashbackbalance, now, percent, 0, 0, 0, data_referrer);\t\n\n\t\tLifetimeContribution[msg.sender][tokenAddress] = add(LifetimeContribution[msg.sender][tokenAddress], amount); \t\t\n\t\t\n\t// Update AllContribution, _totalSaved, _currentIndex, _countSafes\n\t\tAllContribution[tokenAddress] \t= add(AllContribution[tokenAddress], amount);   \t\n        _totalSaved[tokenAddress] \t\t= add(_totalSaved[tokenAddress], amount);     \t\t\n        _currentIndex++;\n        _countSafes++;\n        \n        emit onHodlTokens(msg.sender, tokenAddress, token.symbol(), amount, now + hodlingTime);\n    }\t\n\t\t\t\n\t\t\t\n}\n\t\t\n\t\n//** Function 04 - Claim Token That Has Been Unlocked\n    function ClaimTokens(address tokenAddress, uint256 id) public {\n        require(tokenAddress != 0x0);\n        require(id != 0);        \n        \n        Safe storage s = _safes[id];\n        require(s.user == msg.sender);  \n\t\t\n\t\tif (s.amountbalance == 0) {\n\t\t\trevert();\n\t\t}\n\t\telse {\n\t\t\tUnlockToken(tokenAddress, id);\n\t\t}\n    }\n    \n    function UnlockToken(address tokenAddress, uint256 id) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == tokenAddress);\n\n        uint256 eventAmount;\n        address eventTokenAddress = s.tokenAddress;\n        string memory eventTokenSymbol = s.tokenSymbol;\t\t\n\t\t     \n        if(s.endtime < now) // Hodl Complete\n        {\n            PayToken(s.user, s.tokenAddress, s.amountbalance);\n            \n            eventAmount \t\t\t\t= s.amountbalance;\n\t\t   _totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], s.amountbalance); // *\n\t\t\n\t\ts.lastwithdraw \t\t= s.amountbalance;\n\t\ts.amountbalance \t= 0;\n\t\ts.lasttime \t\t\t= now;  \n\t\t\n\t\t    if(s.cashbackbalance > 0) {\n            s.tokenreceive \t\t\t\t\t= div(mul(s.amount, 88), 100) ;\n\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 88);\n            }\n\t\t\telse {\n\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 72), 100) ;\n\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 72);\n\t\t\t}\n\t\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n\t\t\n        }\n        else \n        {\n\t\t\t\n\t\t\tUpdateUserData1(s.tokenAddress, s.id);\n\t\t\t\t\n\t\t}\n        \n    }   \n\t\n\tfunction UpdateUserData1(address tokenAddress, uint256 id) private {\n\t\t\t\n\t\tSafe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == tokenAddress);\t\t\n\t\t\t\n\t\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \n\t\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), seconds30days); \n\t\t//\tuint256 CalculateWithdraw   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\n\t\t                         \n\t\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\n\t\t\t\n\t\t\t// Maximum withdraw before unlocked, Max 10% Accumulation\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { \t\t\t\t\n\t\t\tuint256 MaxAccumulation = MaxWithdraw; \n\t\t\t} else { MaxAccumulation = CalculateWithdraw; }\n\t\t\t\n\t\t\t// Maximum withdraw = User Amount Balance   \n\t\t\tif (MaxAccumulation > s.amountbalance) { \t\t\t     \t\n\t\t\tuint256 realAmount1 = s.amountbalance; \n\t\t\t} else { realAmount1 = MaxAccumulation; }\n\t\t\t\n\t\t\t// Including Cashback In The First Contribution\n\t\t\t\n\t\t\tuint256 amountbalance72 = div(mul(s.amount, 72), 100);\n\t\t\t\n\t\t\tif (s.amountbalance >= amountbalance72) { \t\t\t\t\n\t\t\tuint256 realAmount = add(realAmount1, s.cashbackbalance); \n\t\t\t} else { realAmount = realAmount1; }\t\n\t\t\t\n\t\t\ts.lastwithdraw = realAmount;  \t\t\t\n\t\t\tuint256 newamountbalance = sub(s.amountbalance, realAmount);\t   \t          \t\t\t\n\t\t\tUpdateUserData2(tokenAddress, id, newamountbalance, realAmount);\n\t\t\t\t\t\n    }   \n\n    function UpdateUserData2(address tokenAddress, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == tokenAddress);\n\n        uint256 eventAmount;\n        address eventTokenAddress = s.tokenAddress;\n        string memory eventTokenSymbol = s.tokenSymbol;\t\t\n\n\t\ts.amountbalance \t\t\t\t= newamountbalance;  \n\t\ts.lasttime \t\t\t\t\t\t= now;  \n\t\t\n\t\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, affiliate), 100) ; \n\t\t\tuint256 maxcashback \t\t= div(mul(s.amount, cashback), 100) ; \t\t\n\t\t\tuint256 tokenreceived \t\t= sub(add(sub(sub(s.amount, tokenaffiliate), newamountbalance), s.cashbackbalance), maxcashback) ;\t\t\n\t\t//\tuint256 tokenreceived \t\t= s.amount - tokenaffiliate - newamountbalance + s.cashbackbalance - maxcashback ;\n\t\t\t\n\t\t\t// Cashback = 100 - 12 - 88 + 16 - 16 = 0 ----> No_Cashback \t= 100 - 12 - 72 + 0 - 16 = 1\n\t\t\t\n\t\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\n\t\t\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\n\t\t_totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], realAmount); \n\t\t\n\t\t\n\t        PayToken(s.user, s.tokenAddress, realAmount);           \t\t\n            eventAmount = realAmount;\n\t\t\t\n\t\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \n\t\n\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\n\t\t\n\t\tAllPayments[tokenAddress] \t\t\t\t\t= add(AllPayments[tokenAddress], amount);\n\t\tLifetimePayments[msg.sender][tokenAddress] \t= add(LifetimePayments[user][tokenAddress], amount); \n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n    }   \t\n\t\n//** Function 05 - Get How Many Contribute ?\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\n        return _userSafes[hodler].length;\n    }\n\t\n\t\n//** Function 06 - Get How Many Affiliate ?\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\n        return afflist[hodler].length;\n    }\n    \n\t\n//** Function 07 - Get complete data from each user\n\tfunction GetSafe(uint256 _id) public view\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive, address referrer)\n    {\n        Safe storage s = _safes[_id];\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive, s.referrer);\n    }\n\t\n\t\n//** Function 08 - Get Tokens Reserved For Ethereum Vault\n    function GetTokenReserve(address tokenAddress) public view returns (uint256 amount) {\n        return EthereumVault[tokenAddress];\n    }    \n    \n\t\n//** Function 09 - Get Ethereum Contract's Balance  \n    function GetContractBalance() public view returns(uint256)\n    {\n        return address(this).balance;\n    } \t\n\t\n\t\n//** Function 10 - Withdraw Affiliate Bonus\n    function WithdrawAffiliate(address user, address tokenAddress) public {  \n\t\trequire(tokenAddress != 0x0);\n\t\t\n\t\trequire(Affiliatevault[user][tokenAddress] > 0 );\n\t\t\n\t\tuint256 amount = Affiliatevault[msg.sender][tokenAddress];\n\t\t\n\t\t_totalSaved[tokenAddress] \t\t= sub(_totalSaved[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t= add(AllPayments[tokenAddress], amount);\n\t\t\n\t\tuint256 eventAmount\t\t\t\t= amount;\n        address eventTokenAddress \t\t= tokenAddress;\n        string \tmemory eventTokenSymbol = ContractSymbol[tokenAddress];\t\n\t\t\n\t\tAffiliatevault[msg.sender][tokenAddress] = 0;\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\temit onAffiliateBonus(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \t\t\n\t\n\t\n//** Function 11 - Get User's Any Token Balance\n    function GetHodlTokensBalance(address tokenAddress) public view returns (uint256 balance) {\n        require(tokenAddress != 0x0);\n        \n        for(uint256 i = 1; i < _currentIndex; i++) {            \n            Safe storage s = _safes[i];\n            if(s.user == msg.sender && s.tokenAddress == tokenAddress)\n                balance += s.amount;\n        }\n        return balance;\n    }\n\t\n\t\n\t\n\t/*==============================\n    =          RESTRICTED          =\n    ==============================*/  \t\n\n//** 01 Add Contract Address\t\n    function AddContractAddress(address tokenAddress, bool contractstatus, uint256 _maxcontribution, string _ContractSymbol) public restricted {\n        contractaddress[tokenAddress] \t= contractstatus;\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\n\t\tmaxcontribution[tokenAddress] \t= _maxcontribution;\n\t\t\n\t\tif (DefaultToken == 0) {\n\t\t\tDefaultToken = tokenAddress;\n\t\t}\n\t\t\n\t\tif (tokenAddress == DefaultToken && contractstatus == false) {\n\t\t\tcontractaddress[tokenAddress] \t= true;\n\t\t}\t\n\t\t\n\t\temit onAddContractAddress(tokenAddress, contractstatus, _maxcontribution, _ContractSymbol);\n    }\n\t\n\t\n//** 02 - Add Maximum Contribution\t\n    function AddMaxContribution(address tokenAddress, uint256 _maxcontribution) public restricted  {\n        maxcontribution[tokenAddress] = _maxcontribution;\t\n    }\n\t\n\t\n//** 03 - Unlock Tokens\n    function UnlockTokens(address tokenAddress, uint256 id) public restricted {\n        require(tokenAddress != 0x0);\n        require(id != 0);      \n        UnlockToken(tokenAddress, id);\n    }\n\t\n    \n//** 04 Change Hodling Time   \n    function ChangeHodlingTime(uint256 newHodlingDays) restricted public {\n        require(newHodlingDays >= 180);      \n        hodlingTime = newHodlingDays * 1 days;\n    }   \n\t\n//** 05 - Change Speed Distribution \n    function ChangeSpeedDistribution(uint256 newSpeed) restricted public {\n        require(newSpeed >= 3 && newSpeed <= 12);   \t\n\t\tpercent = newSpeed;\n    }\n\t\n\t\n//** 06 - Withdraw Ethereum Received Through Fallback Function   \n    function WithdrawEth(uint256 amount) restricted public {\n        require(amount > 0); \n        require(address(this).balance >= amount); \n        \n        msg.sender.transfer(amount);\n    }\n\t\n    \n//** 07 Ethereum Nodes Fees   \n    function EthereumNodesFees(address tokenAddress) restricted public {\n        require(EthereumVault[tokenAddress] > 0);\n        \n        uint256 amount = EthereumVault[tokenAddress];\n\t\t_totalSaved[tokenAddress] \t= sub(_totalSaved[tokenAddress], amount); \n        EthereumVault[tokenAddress] = 0;\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);\n        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(msg.sender, amount);\n    }\n\t\n\t\n//** 08 - Send All Tokens That Have Been Unlocked  \n    function SendUnlockedTokens() restricted public\n    {\n        uint256 returned;\n\n        for(uint256 i = 1; i < _currentIndex; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\tUpdateUserData1(s.tokenAddress, s.id);\n\t\t\t\tWithdrawAffiliate(s.user, s.tokenAddress);\t   \n            }\n        }\n\t\t\n        emit onUnlockedTokens(returned);\n    }   \t\n\t\n//** 09 - Return All Tokens To Their Respective Addresses    \n    function ReturnAllTokens() restricted public\n    {\n        uint256 returned;\n\n        for(uint256 i = 1; i < _currentIndex; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\t\tPayToken(s.user, s.tokenAddress, s.amountbalance);\n\t\t\t\t\t\n\t\t\t\t\ts.lastwithdraw \t\t\t\t\t= s.amountbalance;\n\t\t\t\t\ts.lasttime \t\t\t\t\t\t= now;  \n\t\t\t\t\t\n\t\t\t\t\tif(s.cashbackbalance > 0) {\n\t\t\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 88), 100) ;\n\t\t\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 88);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\ts.tokenreceive \t\t\t\t\t= div(mul(s.amount, 72), 100) ;\n\t\t\t\t\ts.percentagereceive \t\t\t= mul(1000000000000000000, 72);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t_totalSaved[s.tokenAddress] \t= sub(_totalSaved[s.tokenAddress], s.amountbalance); \t\t\t\t\t\n\t\t\t\t\ts.amountbalance \t\t\t\t= 0;\n\n                    returned++;\n                \n            }\n        }\n\t\t\n        emit onReturnAll(returned);\n    }   \n\t\n\t\n\t\n\t/*==============================\n    =      SAFE MATH FUNCTIONS     =\n    ==============================*/  \t\n\t\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 c = a * b; \n\t\trequire(c / a == b);\n\t\treturn c;\n\t}\n\t\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); \n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\t\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\t\treturn c;\n\t}\n    \n}\n\n\n\t/*==============================\n    =        ERC20 Interface       =\n    ==============================*/ \n\ncontract ERC20Interface {\n\n    uint256 public totalSupply;\n    uint256 public decimals;\n    \n    function symbol() public view returns (string);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address ",
        "debug": "keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ldoh_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ldoh_4 + calldata_ldoh_32 + 68: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ldoh_0: 0x11e0262000000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `AddContractAddress(address,bool,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xf9a98a8de24923f04c9d21294a7321baa3f44f2e.sol",
        "function": "AddContractAddress(address,bool,uint256,string)",
        "lineno": 47,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}