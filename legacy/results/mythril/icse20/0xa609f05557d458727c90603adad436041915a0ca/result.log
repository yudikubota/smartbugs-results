{"error": null, "issues": [{"address": 712, "code": "Check contract variables for valid initialization\n    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n\n    // Execute registerApp through AbstractStorage -\n    uint emitted;\n    uint paid;\n    uint stored;\n    (emitted, paid, stored) = StorageInterface(app_storage).exec(msg.sender, registry_exec_id, msg.data);\n\n    // Ensure zero values for emitted and paid, and nonzero value for stored -\n    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n  }\n\n  // Update instance selectors, index, and addresses\n  bytes4 internal constant UPDATE_INST_SEL = bytes4(keccak256('updateInstance(bytes32,bytes32,bytes32)'));\n\n  /*\n  Updates an application's implementations, selectors, and index address. Uses default app provider and registry app.\n  Uses latest app version by default.\n\n  @param _exec_id: The execution id of the application instanc", "debug": "calldata_StorageInterface_32 + 68: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_StorageInterface_0: 0x1f34d1d300000000000000000000000000000000000000000000000000000000\ncalldatasize_StorageInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerAppVersion(bytes32,bytes32,address,bytes4[],address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/30/0xa609f05557d458727c90603adad436041915a0ca.sol", "function": "registerAppVersion(bytes32,bytes32,address,bytes4[],address[])", "lineno": 377, "title": "Integer Overflow ", "type": "Warning"}, {"address": 736, "code": "Check contract variables for valid initialization\n    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n\n    // Execute registerApp through AbstractStorage -\n    uint emitted;\n    uint paid;\n    uint stored;\n    (emitted, paid, stored) = StorageInterface(app_storage).exec(msg.sender, registry_exec_id, msg.data);\n\n    // Ensure zero values for emitted and paid, and nonzero value for stored -\n    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n  }\n\n  // Update instance selectors, index, and addresses\n  bytes4 internal constant UPDATE_INST_SEL = bytes4(keccak256('updateInstance(bytes32,bytes32,bytes32)'));\n\n  /*\n  Updates an application's implementations, selectors, and index address. Uses default app provider and registry app.\n  Uses latest app version by default.\n\n  @param _exec_id: The execution id of the application instanc", "debug": "calldata_StorageInterface_32 + 100: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_StorageInterface_0: 0x1f34d1d300000000000000000000000000000000000000000000000000000000\ncalldatasize_StorageInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerAppVersion(bytes32,bytes32,address,bytes4[],address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/30/0xa609f05557d458727c90603adad436041915a0ca.sol", "function": "registerAppVersion(bytes32,bytes32,address,bytes4[],address[])", "lineno": 377, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1545, "code": "isterApp.selector &&\n      sel != this.registerAppVersion.selector &&\n      sel != UPDATE_INST_SEL &&\n      sel != UPDATE_EXEC_SEL\n    );\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the app exec id, and the calldata to forward -\n    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n      EXEC_SEL, msg.sender, _exec_id, _calldata\n    )) == false) {\n      // Call failed - emit error message from storage and return 'false'\n      checkErrors(_exec_id);\n      // Return unspent wei to sender\n      address(msg.sender).transfer(address(this).balance);\n      return false;\n    }\n\n    // Get returned data\n    success = checkReturn();\n    // If execution failed,\n    require(success, 'Execution failed');\n\n    // Transfer any returned wei back to the sender\n    address(msg.sender).transfer(address(this).balance);\n  }\n\n  // Returns the first 4 bytes of calldata\n  function getSelector(bytes memory _calldata) internal pure returns (bytes4 selector) {\n    assembly {\n      selector := and(\n        mload(add(0x20, _calldata)),\n        0xffffffff00000000000000000000000000000000000000000000000000000000\n      )\n   ", "debug": "calldata_StorageInterface_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_StorageInterface_0: 0x7fab541c00000000000000000000000000000000000000000000000000000000\ncalldatasize_StorageInterface: 0x4\n", "description": "A possible integer overflow exists in the function `exec(bytes32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/30/0xa609f05557d458727c90603adad436041915a0ca.sol", "function": "exec(bytes32,bytes)", "lineno": 272, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1847, "code": "r valid initialization\n    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n\n    // Execute registerApp through AbstractStorage -\n    uint emitted;\n    uint paid;\n    uint stored;\n    (emitted, paid, stored) = StorageInterface(app_storage).exec(msg.sender, registry_exec_id, msg.data);\n\n    // Ensure zero values for emitted and paid, and nonzero value for stored -\n    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n  }\n\n  /*\n  Registers a version of an application as the admin under the provider and registry exec id\n  @param _app_name: The name of the application under which the version will be registered\n  @param _version_name: The name of the version to register\n  @param _index: The index file of the application - holds the getters and init functions\n  @param _selectors: ", "debug": "calldata_StorageInterface_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_StorageInterface_0: 0x965be45700000000000000000000000000000000000000000000000000000000\ncalldatasize_StorageInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerApp(bytes32,address,bytes4[],address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/30/0xa609f05557d458727c90603adad436041915a0ca.sol", "function": "registerApp(bytes32,address,bytes4[],address[])", "lineno": 352, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1871, "code": "r valid initialization\n    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n\n    // Execute registerApp through AbstractStorage -\n    uint emitted;\n    uint paid;\n    uint stored;\n    (emitted, paid, stored) = StorageInterface(app_storage).exec(msg.sender, registry_exec_id, msg.data);\n\n    // Ensure zero values for emitted and paid, and nonzero value for stored -\n    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n  }\n\n  /*\n  Registers a version of an application as the admin under the provider and registry exec id\n  @param _app_name: The name of the application under which the version will be registered\n  @param _version_name: The name of the version to register\n  @param _index: The index file of the application - holds the getters and init functions\n  @param _selectors: ", "debug": "calldata_StorageInterface_32 + 68: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_StorageInterface_0: 0x965be45700000000000000000000000000000000000000000000000000000000\ncalldatasize_StorageInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerApp(bytes32,address,bytes4[],address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/30/0xa609f05557d458727c90603adad436041915a0ca.sol", "function": "registerApp(bytes32,address,bytes4[],address[])", "lineno": 352, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4377, "code": "s32,bytes32)'));\n\n  /*\n  Updates an application's implementations, selecto", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `configure(address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/30/0xa609f05557d458727c90603adad436041915a0ca.sol", "function": "registerAppVersion(bytes32,bytes32,address,bytes4[],address[])", "lineno": 391, "title": "Message call to external contract", "type": "Warning"}, {"address": 4377, "code": "s32,bytes32)'));\n\n  /*\n  Updates an application's implementations, selecto", "debug": "", "description": "A possible transaction order independence vulnerability exists in function registerAppVersion(bytes32,bytes32,address,bytes4[],address[]). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/30/0xa609f05557d458727c90603adad436041915a0ca.sol", "function": "registerAppVersion(bytes32,bytes32,address,bytes4[],address[])", "lineno": 391, "title": "Transaction order dependence", "type": "Warning"}, {"address": 8209, "code": "ec_id;\n\n    // Create Registry struct in memory -\n    Registry memory", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `configure(address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/30/0xa609f05557d458727c90603adad436041915a0ca.sol", "function": "createRegistryInstance(address,address)", "lineno": 328, "title": "Message call to external contract", "type": "Warning"}, {"address": 8209, "code": "ec_id;\n\n    // Create Registry struct in memory -\n    Registry memory", "debug": "", "description": "A possible transaction order independence vulnerability exists in function createRegistryInstance(address,address). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/30/0xa609f05557d458727c90603adad436041915a0ca.sol", "function": "createRegistryInstance(address,address)", "lineno": 328, "title": "Transaction order dependence", "type": "Warning"}, {"address": 9343, "code": "c' in AbstractStorage,", "debug": "calldata_StorageInterface_4 + calldata_StorageInterface_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_StorageInterface_0: 0x7fab541c00000000000000000000000000000000000000000000000000000000\ncalldatasize_StorageInterface: 0x4\n", "description": "A possible integer overflow exists in the function `exec(bytes32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/30/0xa609f05557d458727c90603adad436041915a0ca.sol", "function": "exec(bytes32,bytes)", "lineno": 278, "title": "Integer Overflow ", "type": "Warning"}, {"address": 9352, "code": "c' in AbstractStorage,", "debug": "calldata_StorageInterface_4 + calldata_StorageInterface_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_StorageInterface_0: 0x7fab541c00000000000000000000000000000000000000000000000000000000\ncalldatasize_StorageInterface: 0x4\n", "description": "A possible integer overflow exists in the function `exec(bytes32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/30/0xa609f05557d458727c90603adad436041915a0ca.sol", "function": "exec(bytes32,bytes)", "lineno": 278, "title": "Integer Overflow ", "type": "Warning"}, {"address": 9358, "code": "c' in AbstractStorage,", "debug": "calldata_StorageInterface_4 + calldata_StorageInterface_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_StorageInterface_0: 0x7fab541c00000000000000000000000000000000000000000000000000000000\ncalldatasize_StorageInterface: 0x4\n", "description": "A possible integer overflow exists in the function `exec(bytes32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/30/0xa609f05557d458727c90603adad436041915a0ca.sol", "function": "exec(bytes32,bytes)", "lineno": 278, "title": "Integer Overflow ", "type": "Warning"}, {"address": 9693, "code": " function updateAppInstance(bytes32 _exec_id) extern", "debug": "calldata_StorageInterface_4 + calldata_StorageInterface_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21\ncalldata_StorageInterface_cpy: 0x9f34d1d300000000000000000000000000000000000000000000000000000000\ncalldata_StorageInterface_0: 0x7fab541c00000000000000000000000000000000000000000000000000000000\ncalldatasize_StorageInterface: 0x4\n", "description": "A possible integer overflow exists in the function `exec(bytes32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/30/0xa609f05557d458727c90603adad436041915a0ca.sol", "function": "exec(bytes32,bytes)", "lineno": 400, "title": "Integer Overflow ", "type": "Warning"}, {"address": 11993, "code": " bytes4 internal constant EXEC_SEL = bytes4(keccak256('exec(addres", "debug": "The exception is triggered under the following conditions:\n\ncalldata_StorageInterface_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_StorageInterface_4: 0x0\ncalldata_StorageInterface_0: 0xb094010400000000000000000000000000000000000000000000000000000000\ncalldatasize_StorageInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/30/0xa609f05557d458727c90603adad436041915a0ca.sol", "function": "_function_0xb0940104", "lineno": 258, "title": "Exception state", "type": "Informational"}, {"address": 12255, "code": "hose functions that make up an application under the giv", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `configure(address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/30/0xa609f05557d458727c90603adad436041915a0ca.sol", "function": "getRegistryImplementation()", "lineno": 224, "title": "Message call to external contract", "type": "Warning"}, {"address": 12255, "code": "hose functions that make up an application under the giv", "debug": "", "description": "A possible transaction order independence vulnerability exists in function getRegistryImplementation(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/30/0xa609f05557d458727c90603adad436041915a0ca.sol", "function": "getRegistryImplementation()", "lineno": 224, "title": "Transaction order dependence", "type": "Warning"}], "success": true}