{"error": null, "issues": [{"address": 4285, "code": "gate.delegateIncreaseApproval(spender, addedValue, m", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/18/0xcf9a1a3a30d859ab8964e6db596a8d2edd449c0b.sol", "function": "approve(address,uint256)", "lineno": 825, "title": "Message call to external contract", "type": "Informational"}, {"address": 4285, "code": "gate.delegateIncreaseApproval(spender, addedValue, m", "debug": "", "description": "A possible transaction order independence vulnerability exists in function approve(address,uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/18/0xcf9a1a3a30d859ab8964e6db596a8d2edd449c0b.sol", "function": "approve(address,uint256)", "lineno": 825, "title": "Transaction order dependence", "type": "Warning"}, {"address": 4608, "code": "**\n   * @dev Modifier", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/18/0xcf9a1a3a30d859ab8964e6db596a8d2edd449c0b.sol", "function": "_function_0x17ffc320", "lineno": 148, "title": "Message call to external contract", "type": "Warning"}, {"address": 4608, "code": "**\n   * @dev Modifier", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 13788\n", "filename": "/unique_chucks/18/0xcf9a1a3a30d859ab8964e6db596a8d2edd449c0b.sol", "function": "_function_0x17ffc320", "lineno": 148, "title": "Multiple Calls", "type": "Information"}, {"address": 4987, "code": "6 oldValue = balanceOf(account", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/18/0xcf9a1a3a30d859ab8964e6db596a8d2edd449c0b.sol", "function": "totalSupply()", "lineno": 839, "title": "Message call to external contract", "type": "Informational"}, {"address": 4987, "code": "6 oldValue = balanceOf(account", "debug": "", "description": "A possible transaction order independence vulnerability exists in function totalSupply(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/18/0xcf9a1a3a30d859ab8964e6db596a8d2edd449c0b.sol", "function": "totalSupply()", "lineno": 839, "title": "Transaction order dependence", "type": "Warning"}, {"address": 5471, "code": "pender, value);\n      ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/18/0xcf9a1a3a30d859ab8964e6db596a8d2edd449c0b.sol", "function": "transferFrom(address,address,uint256)", "lineno": 799, "title": "Message call to external contract", "type": "Informational"}, {"address": 5471, "code": "pender, value);\n      ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6273\nCall at address: 5731\n", "filename": "/unique_chucks/18/0xcf9a1a3a30d859ab8964e6db596a8d2edd449c0b.sol", "function": "transferFrom(address,address,uint256)", "lineno": 799, "title": "Multiple Calls", "type": "Information"}, {"address": 5731, "code": "  return delegate.de", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/18/0xcf9a1a3a30d859ab8964e6db596a8d2edd449c0b.sol", "function": "transferFrom(address,address,uint256)", "lineno": 801, "title": "Message call to external contract", "type": "Informational"}, {"address": 5731, "code": "  return delegate.de", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6273\n", "filename": "/unique_chucks/18/0xcf9a1a3a30d859ab8964e6db596a8d2edd449c0b.sol", "function": "transferFrom(address,address,uint256)", "lineno": 801, "title": "Multiple Calls", "type": "Information"}, {"address": 6273, "code": "      return delegate.delegateAllowance(_owner, spender);\n", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/18/0xcf9a1a3a30d859ab8964e6db596a8d2edd449c0b.sol", "function": "transferFrom(address,address,uint256)", "lineno": 809, "title": "Message call to external contract", "type": "Informational"}, {"address": 6629, "code": "ithout compiler warning. If we\n  * le", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/18/0xcf9a1a3a30d859ab8964e6db596a8d2edd449c0b.sol", "function": "reclaimContract(address)", "lineno": 211, "title": "Message call to external contract", "type": "Warning"}, {"address": 7135, "code": "changeBurnBounds(uint newMin, uint ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/18/0xcf9a1a3a30d859ab8964e6db596a8d2edd449c0b.sol", "function": "mint(address,uint256)", "lineno": 758, "title": "Message call to external contract", "type": "Informational"}, {"address": 7819, "code": "o, _amount);\n        Transfer(addre", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/18/0xcf9a1a3a30d859ab8964e6db596a8d2edd449c0b.sol", "function": "burn(uint256)", "lineno": 747, "title": "Message call to external contract", "type": "Informational"}, {"address": 13788, "code": "aram _to address The addr", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/18/0xcf9a1a3a30d859ab8964e6db596a8d2edd449c0b.sol", "function": "_function_0x17ffc320", "lineno": 589, "title": "Message call to external contract", "type": "Warning"}, {"address": 14088, "code": "ble {\n  addres", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x1\ncalldata_TrueUSD_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_7135: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncaller: 0x0\ncalldata_TrueUSD_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_TrueUSD: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/18/0xcf9a1a3a30d859ab8964e6db596a8d2edd449c0b.sol", "function": "mint(address,uint256)", "lineno": 56, "title": "Exception state", "type": "Informational"}], "success": true}