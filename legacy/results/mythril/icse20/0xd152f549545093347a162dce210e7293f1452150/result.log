{"error": null, "issues": [{"address": 158, "code": "e(IERC20 token, address[] recipients, uint256[] values) external {\n        for (uint256 i = 0; i < recipients.length; i++)\n            require(token.transferFrom(msg.sender, recipients[i], values[i]));\n    }\n}", "debug": "calldata_IERC20_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_IERC20_0: 0x51ba162c00000000000000000000000000000000000000000000000000000000\ncalldatasize_IERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x51ba162c`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xd152f549545093347a162dce210e7293f1452150.sol", "function": "_function_0x51ba162c", "lineno": 28, "title": "Integer Overflow ", "type": "Warning"}, {"address": 273, "code": "oken(IERC20 token, address[] recipients, uint256[] values) external {\n        uint256 total = 0;\n        for (uint256 i = 0; i < recipients.length; i++)\n            total += values[i];\n        require(token.transferFrom(msg.sender, address(this), total));\n        for (i = 0; i < recipients.length; i++)\n            require(token.transfer(recipients[i], values[i]));\n    }\n\n    function disperseTo", "debug": "calldata_IERC20_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_IERC20_0: 0xc73a2d6000000000000000000000000000000000000000000000000000000000\ncalldatasize_IERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0xc73a2d60`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xd152f549545093347a162dce210e7293f1452150.sol", "function": "_function_0xc73a2d60", "lineno": 19, "title": "Integer Overflow ", "type": "Warning"}, {"address": 343, "code": "isperseEther(address[] recipients, uint256[] values) external payable {\n        for (uint256 i = 0; i < recipients.length; i++)\n            recipients[i].transfer(values[i]);\n        uint256 balance = address(this).balance;\n        if (balance > 0)\n            msg.sender.transfer(balance);\n    }\n\n    function d", "debug": "calldata_IERC20_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_IERC20_0: 0xe63d38ed00000000000000000000000000000000000000000000000000000000\ncalldatasize_IERC20: 0x4\n", "description": "A possible integer overflow exists in the function `disperseEther(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xd152f549545093347a162dce210e7293f1452150.sol", "function": "disperseEther(address[],uint256[])", "lineno": 11, "title": "Integer Overflow ", "type": "Warning"}, {"address": 494, "debug": "The exception is triggered under the following conditions:\n\ncalldata_IERC20_4 + calldata_IERC20_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_IERC20_0: 0x51ba162c00000000000000000000000000000000000000000000000000000000\ncalldatasize_IERC20: 0x4\ncalldata_IERC20_4 + calldata_IERC20_32 + 36: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0xd152f549545093347a162dce210e7293f1452150.sol", "function": "_function_0x51ba162c", "lineno": 32, "title": "Exception state", "type": "Informational"}, {"address": 689, "code": ", recipients[i], values[i]));\n    }\n}", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/7/0xd152f549545093347a162dce210e7293f1452150.sol", "function": "_function_0x51ba162c", "lineno": 30, "title": "Message call to external contract", "type": "Warning"}, {"address": 689, "code": ", recipients[i], values[i]));\n    }\n}", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 689\n", "filename": "/unique_chucks/7/0xd152f549545093347a162dce210e7293f1452150.sol", "function": "_function_0x51ba162c", "lineno": 30, "title": "Multiple Calls", "type": "Information"}, {"address": 813, "code": "quire(tok", "debug": "The exception is triggered under the following conditions:\n\ncalldata_IERC20_4 + calldata_IERC20_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_IERC20_0: 0xc73a2d6000000000000000000000000000000000000000000000000000000000\ncalldatasize_IERC20: 0x4\ncalldata_IERC20_4 + calldata_IERC20_32 + 36: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0xd152f549545093347a162dce210e7293f1452150.sol", "function": "_function_0xc73a2d60", "lineno": 23, "title": "Exception state", "type": "Informational"}, {"address": 1056, "code": ".sender, address(this), total));\n        for (i = 0;", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/7/0xd152f549545093347a162dce210e7293f1452150.sol", "function": "_function_0xc73a2d60", "lineno": 23, "title": "Message call to external contract", "type": "Warning"}, {"address": 1056, "code": ".sender, address(this), total));\n        for (i = 0;", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1367\n", "filename": "/unique_chucks/7/0xd152f549545093347a162dce210e7293f1452150.sol", "function": "_function_0xc73a2d60", "lineno": 23, "title": "Multiple Calls", "type": "Information"}, {"address": 1367, "code": "s[i], values[i]));\n    }\n\n    function d", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/7/0xd152f549545093347a162dce210e7293f1452150.sol", "function": "_function_0xc73a2d60", "lineno": 25, "title": "Message call to external contract", "type": "Warning"}, {"address": 1367, "code": "s[i], values[i]));\n    }\n\n    function d", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1367\n", "filename": "/unique_chucks/7/0xd152f549545093347a162dce210e7293f1452150.sol", "function": "_function_0xc73a2d60", "lineno": 25, "title": "Multiple Calls", "type": "Information"}, {"address": 1556, "code": "        u", "debug": "The exception is triggered under the following conditions:\n\ncalldata_IERC20_4 + calldata_IERC20_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_IERC20_0: 0xe63d38ed00000000000000000000000000000000000000000000000000000000\ncalldatasize_IERC20: 0x4\ncalldata_IERC20_4 + calldata_IERC20_32 + 4: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0xd152f549545093347a162dce210e7293f1452150.sol", "function": "disperseEther(address[],uint256[])", "lineno": 14, "title": "Exception state", "type": "Informational"}, {"address": 1585, "code": "].transfer(values[i]);\n        ui", "debug": "SOLVER OUTPUT:\ncalldata_IERC20_4 + calldata_IERC20_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_IERC20_4 + calldata_IERC20_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_IERC20_0: 0xe63d38ed00000000000000000000000000000000000000000000000000000000\ncalldatasize_IERC20: 0x4\n", "description": "In the function `disperseEther(address[],uint256[])` a non-zero amount of Ether is sent to an address taken from function arguments.\nIt seems that this function can be called without restrictions.", "filename": "/unique_chucks/7/0xd152f549545093347a162dce210e7293f1452150.sol", "function": "disperseEther(address[],uint256[])", "lineno": 13, "title": "Ether send", "type": "Warning"}, {"address": 1585, "code": "].transfer(values[i]);\n        ui", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1704\nCall at address: 1704\nCall at address: 1704\nCall at address: 1585\nCall at address: 1585\n", "filename": "/unique_chucks/7/0xd152f549545093347a162dce210e7293f1452150.sol", "function": "disperseEther(address[],uint256[])", "lineno": 13, "title": "Multiple Calls", "type": "Information"}, {"address": 1704, "code": "sfer(balance);\n    }\n\n    fu", "debug": "SOLVER OUTPUT:\ncalldata_IERC20_4 + calldata_IERC20_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_IERC20_4 + calldata_IERC20_4: 0x3\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_1585: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_IERC20_0: 0xe63d38ed00000000000000000000000000000000000000000000000000000000\ncalldatasize_IERC20: 0x4\n", "description": "In the function `disperseEther(address[],uint256[])` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "filename": "/unique_chucks/7/0xd152f549545093347a162dce210e7293f1452150.sol", "function": "disperseEther(address[],uint256[])", "lineno": 16, "title": "Ether send", "type": "Warning"}], "success": true}