{
  "contract": "0x81a47e985b7a133728e97efc7f9ec3654b6e73f0",
  "tool": "mythril",
  "start": 1563769752.4291162,
  "end": 1563770517.8697863,
  "duration": 765.4406700134277,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 280,
        "debug": "calldata_Omnipurse_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Omnipurse_0: 0x39dea53700000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `registerNickname(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "registerNickname(string)",
        "lineno": 102,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 527,
        "code": "ress(address creator) constant returns (uint[] ids) {\n    ids = pursesByCreator[creator];\n  }\n\n  function getPurseDetails",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Omnipurse_4: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_Omnipurse_0: 0xc908f30200000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `searchPursesByAddress(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "searchPursesByAddress(address)",
        "lineno": 27,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1451,
        "code": "nickname) {\n    nicknames[msg.send",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function finishPurse(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "finishPurse(uint256)",
        "lineno": 98,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1652,
        "code": "+] = Contribution(msg.sender, m",
        "debug": "callvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_5 + keccac_calldata_Omnipurse_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_3 + keccac_calldata_Omnipurse_4: 0x100\ncalldata_Omnipurse_0: 0x4ee16aba00000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\n",
        "description": "A possible integer overflow exists in the function `contributeToPurse(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "contributeToPurse(uint256)",
        "lineno": 74,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1739,
        "code": "                    ",
        "debug": "storage_4 + keccac_calldata_Omnipurse_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3 + keccac_calldata_Omnipurse_4: 0x100\ncalldata_Omnipurse_0: 0x4ee16aba00000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\n",
        "description": "A possible integer overflow exists in the function `contributeToPurse(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "contributeToPurse(uint256)",
        "lineno": 75,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2229,
        "code": "tatus = success ? 3 : ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2229\nCall at address: 2229\nCall at address: 2229\nCall at address: 2229\nCall at address: 2229\n",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "dissmisPurse(uint256)",
        "lineno": 89,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2229,
        "code": "tatus = success ? 3 : ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function dissmisPurse(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "dissmisPurse(uint256)",
        "lineno": 89,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2229,
        "code": "tatus = success ? 3 : ",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "dissmisPurse(uint256)",
        "lineno": 89,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 2459,
        "code": "or];\n  }\n\n  function getPurseD",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Omnipurse_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_Omnipurse_0: 0xc908f30200000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `searchPursesByAddress(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "searchPursesByAddress(address)",
        "lineno": 28,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2461,
        "code": "or];\n  }\n\n  function getPurseD",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Omnipurse_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_Omnipurse_0: 0xc908f30200000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `searchPursesByAddress(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "searchPursesByAddress(address)",
        "lineno": 28,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2519,
        "code": "amp, title",
        "debug": "storage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Omnipurse_0: 0xcba2c73500000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createPurse(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "createPurse(string)",
        "lineno": 66,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2715,
        "code": " 0);\n    pursesByCreator[msg.sender].push(purseId);\n  }\n\n  function ",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Omnipurse_4 + calldata_Omnipurse_4)) +\n64: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_Omnipurse_0: 0xcba2c73500000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createPurse(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "createPurse(string)",
        "lineno": 66,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2855,
        "code": "\n\ncontract Omnipur",
        "debug": "keccac_2_+_keccac_storage_0: 0x11ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2 + keccac_storage_0: 0x80\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Omnipurse_4 + calldata_Omnipurse_4)) +\n64: 0x0\ncalldata_Omnipurse_0: 0xcba2c73500000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createPurse(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "createPurse(string)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3609,
        "code": "ntract Omnipurse {\n\n  struct Contribution {\n    address sender;\n    uint value;\n    bool refunded;\n    uint256 timestamp;\n  }\n\n  struct Purse {\n    address creator;\n    uint256 timestamp;\n    string title;\n    uint8 status;\n    uint numContributions;\n    uint totalContributed;\n    mapping (uint => Contribution) contributions;\n  }\n\n  uint public numPurse;\n  mapping (uint => Purse) purses;\n  mapping (address => uint[]) pursesByCreator;\n  mapping (address => string) nicknames;\n\n  function searchPursesByAddress(address creator) constant returns (uint[] ids) {\n    ids = pursesByCreator[creator];\n  }\n\n  function getPurseDetails(uint purseId) constant returns (\n    address creator,\n    uint256 timestamp,\n    string title,\n    uint8 status,\n    uint numContributions,\n    uint totalContributed\n  ) {\n    Purse p = purses[purseId];\n    creator = p.creator;\n    timestamp = p.timestamp;\n    title = p.title;\n    status = p.status;\n    numContributions = p.numContributions;\n    totalContributed = p.totalContributed;\n  }\n\n  function getPurseContributions(uint purseId, uint contributionId) constant returns (\n    address sender,\n    uint value,\n    bool refunded,\n    string nickname,\n    uint timestamp\n  ) {\n    Purse p = purses[purseId];\n    Contribution c = p.contributions[contributionId];\n    sender = c.sender;\n    value = c.value;\n    refunded = c.refunded;\n    nickname = nicknames[c.sender];\n    timestamp = c.timestamp;\n  }\n\n  function createPurse(string title) returns (uint purseId) {\n    purseId = numPurse++;\n    purses[purseId] = Purse(msg.sender, block.timestamp, title, 1, 0, 0);\n    pursesByCreator[msg.sender].push(purseId);\n  }\n\n  function contributeToPurse(uint purseId) payable {\n    Purse p = purses[purseId];\n    if (p.status != 1) { throw; }\n    p.totalContributed += msg.value;\n    p.contributions[p.numContributions++] = Contribution(msg.sender, msg.value,\n                                                        false, block.timestamp);\n  }\n\n  function dissmisPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || (p.status != 1 && p.status != 4)) { throw; }\n    bool success = true;\n    for (uint i=0; i<p.numContributions; i++) {\n      Contribution c = p.contributions[i];\n      if(!c.refunded) {\n        c.refunded = c.sender.send(c.value);\n      }\n      success = success && c.refunded;\n    }\n    p.status = success ? 3 : 4;\n  }\n\n  function finishPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || p.status != 1) { throw; }\n    if (p.creator.send(p.totalContributed)) { p.status = 2; }\n  }\n\n  function registerNickname(string nickname) {\n    nicknames[msg.sender] = nickname;\n  }\n\n}",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\ncalldata_Omnipurse_0: 0x39dea53700000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `registerNickname(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "registerNickname(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3638,
        "code": "ntract Omnipurse {\n\n  struct Contribution {\n    address sender;\n    uint value;\n    bool refunded;\n    uint256 timestamp;\n  }\n\n  struct Purse {\n    address creator;\n    uint256 timestamp;\n    string title;\n    uint8 status;\n    uint numContributions;\n    uint totalContributed;\n    mapping (uint => Contribution) contributions;\n  }\n\n  uint public numPurse;\n  mapping (uint => Purse) purses;\n  mapping (address => uint[]) pursesByCreator;\n  mapping (address => string) nicknames;\n\n  function searchPursesByAddress(address creator) constant returns (uint[] ids) {\n    ids = pursesByCreator[creator];\n  }\n\n  function getPurseDetails(uint purseId) constant returns (\n    address creator,\n    uint256 timestamp,\n    string title,\n    uint8 status,\n    uint numContributions,\n    uint totalContributed\n  ) {\n    Purse p = purses[purseId];\n    creator = p.creator;\n    timestamp = p.timestamp;\n    title = p.title;\n    status = p.status;\n    numContributions = p.numContributions;\n    totalContributed = p.totalContributed;\n  }\n\n  function getPurseContributions(uint purseId, uint contributionId) constant returns (\n    address sender,\n    uint value,\n    bool refunded,\n    string nickname,\n    uint timestamp\n  ) {\n    Purse p = purses[purseId];\n    Contribution c = p.contributions[contributionId];\n    sender = c.sender;\n    value = c.value;\n    refunded = c.refunded;\n    nickname = nicknames[c.sender];\n    timestamp = c.timestamp;\n  }\n\n  function createPurse(string title) returns (uint purseId) {\n    purseId = numPurse++;\n    purses[purseId] = Purse(msg.sender, block.timestamp, title, 1, 0, 0);\n    pursesByCreator[msg.sender].push(purseId);\n  }\n\n  function contributeToPurse(uint purseId) payable {\n    Purse p = purses[purseId];\n    if (p.status != 1) { throw; }\n    p.totalContributed += msg.value;\n    p.contributions[p.numContributions++] = Contribution(msg.sender, msg.value,\n                                                        false, block.timestamp);\n  }\n\n  function dissmisPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || (p.status != 1 && p.status != 4)) { throw; }\n    bool success = true;\n    for (uint i=0; i<p.numContributions; i++) {\n      Contribution c = p.contributions[i];\n      if(!c.refunded) {\n        c.refunded = c.sender.send(c.value);\n      }\n      success = success && c.refunded;\n    }\n    p.status = success ? 3 : 4;\n  }\n\n  function finishPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || p.status != 1) { throw; }\n    if (p.creator.send(p.totalContributed)) { p.status = 2; }\n  }\n\n  function registerNickname(string nickname) {\n    nicknames[msg.sender] = nickname;\n  }\n\n}",
        "debug": "calldata_Omnipurse_4 + calldata_Omnipurse_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_Omnipurse_0: 0x39dea53700000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `registerNickname(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "registerNickname(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3652,
        "code": "ntract Omnipurse {\n\n  struct Contribution {\n    address sender;\n    uint value;\n    bool refunded;\n    uint256 timestamp;\n  }\n\n  struct Purse {\n    address creator;\n    uint256 timestamp;\n    string title;\n    uint8 status;\n    uint numContributions;\n    uint totalContributed;\n    mapping (uint => Contribution) contributions;\n  }\n\n  uint public numPurse;\n  mapping (uint => Purse) purses;\n  mapping (address => uint[]) pursesByCreator;\n  mapping (address => string) nicknames;\n\n  function searchPursesByAddress(address creator) constant returns (uint[] ids) {\n    ids = pursesByCreator[creator];\n  }\n\n  function getPurseDetails(uint purseId) constant returns (\n    address creator,\n    uint256 timestamp,\n    string title,\n    uint8 status,\n    uint numContributions,\n    uint totalContributed\n  ) {\n    Purse p = purses[purseId];\n    creator = p.creator;\n    timestamp = p.timestamp;\n    title = p.title;\n    status = p.status;\n    numContributions = p.numContributions;\n    totalContributed = p.totalContributed;\n  }\n\n  function getPurseContributions(uint purseId, uint contributionId) constant returns (\n    address sender,\n    uint value,\n    bool refunded,\n    string nickname,\n    uint timestamp\n  ) {\n    Purse p = purses[purseId];\n    Contribution c = p.contributions[contributionId];\n    sender = c.sender;\n    value = c.value;\n    refunded = c.refunded;\n    nickname = nicknames[c.sender];\n    timestamp = c.timestamp;\n  }\n\n  function createPurse(string title) returns (uint purseId) {\n    purseId = numPurse++;\n    purses[purseId] = Purse(msg.sender, block.timestamp, title, 1, 0, 0);\n    pursesByCreator[msg.sender].push(purseId);\n  }\n\n  function contributeToPurse(uint purseId) payable {\n    Purse p = purses[purseId];\n    if (p.status != 1) { throw; }\n    p.totalContributed += msg.value;\n    p.contributions[p.numContributions++] = Contribution(msg.sender, msg.value,\n                                                        false, block.timestamp);\n  }\n\n  function dissmisPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || (p.status != 1 && p.status != 4)) { throw; }\n    bool success = true;\n    for (uint i=0; i<p.numContributions; i++) {\n      Contribution c = p.contributions[i];\n      if(!c.refunded) {\n        c.refunded = c.sender.send(c.value);\n      }\n      success = success && c.refunded;\n    }\n    p.status = success ? 3 : 4;\n  }\n\n  function finishPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || p.status != 1) { throw; }\n    if (p.creator.send(p.totalContributed)) { p.status = 2; }\n  }\n\n  function registerNickname(string nickname) {\n    nicknames[msg.sender] = nickname;\n  }\n\n}",
        "debug": "calldata_Omnipurse_4 + calldata_Omnipurse_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_Omnipurse_0: 0x39dea53700000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `registerNickname(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "registerNickname(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3674,
        "code": "ntract Omnipurse {\n\n  struct Contribution {\n    address sender;\n    uint value;\n    bool refunded;\n    uint256 timestamp;\n  }\n\n  struct Purse {\n    address creator;\n    uint256 timestamp;\n    string title;\n    uint8 status;\n    uint numContributions;\n    uint totalContributed;\n    mapping (uint => Contribution) contributions;\n  }\n\n  uint public numPurse;\n  mapping (uint => Purse) purses;\n  mapping (address => uint[]) pursesByCreator;\n  mapping (address => string) nicknames;\n\n  function searchPursesByAddress(address creator) constant returns (uint[] ids) {\n    ids = pursesByCreator[creator];\n  }\n\n  function getPurseDetails(uint purseId) constant returns (\n    address creator,\n    uint256 timestamp,\n    string title,\n    uint8 status,\n    uint numContributions,\n    uint totalContributed\n  ) {\n    Purse p = purses[purseId];\n    creator = p.creator;\n    timestamp = p.timestamp;\n    title = p.title;\n    status = p.status;\n    numContributions = p.numContributions;\n    totalContributed = p.totalContributed;\n  }\n\n  function getPurseContributions(uint purseId, uint contributionId) constant returns (\n    address sender,\n    uint value,\n    bool refunded,\n    string nickname,\n    uint timestamp\n  ) {\n    Purse p = purses[purseId];\n    Contribution c = p.contributions[contributionId];\n    sender = c.sender;\n    value = c.value;\n    refunded = c.refunded;\n    nickname = nicknames[c.sender];\n    timestamp = c.timestamp;\n  }\n\n  function createPurse(string title) returns (uint purseId) {\n    purseId = numPurse++;\n    purses[purseId] = Purse(msg.sender, block.timestamp, title, 1, 0, 0);\n    pursesByCreator[msg.sender].push(purseId);\n  }\n\n  function contributeToPurse(uint purseId) payable {\n    Purse p = purses[purseId];\n    if (p.status != 1) { throw; }\n    p.totalContributed += msg.value;\n    p.contributions[p.numContributions++] = Contribution(msg.sender, msg.value,\n                                                        false, block.timestamp);\n  }\n\n  function dissmisPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || (p.status != 1 && p.status != 4)) { throw; }\n    bool success = true;\n    for (uint i=0; i<p.numContributions; i++) {\n      Contribution c = p.contributions[i];\n      if(!c.refunded) {\n        c.refunded = c.sender.send(c.value);\n      }\n      success = success && c.refunded;\n    }\n    p.status = success ? 3 : 4;\n  }\n\n  function finishPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || p.status != 1) { throw; }\n    if (p.creator.send(p.totalContributed)) { p.status = 2; }\n  }\n\n  function registerNickname(string nickname) {\n    nicknames[msg.sender] = nickname;\n  }\n\n}",
        "debug": "calldata_Omnipurse_4 + calldata_Omnipurse_4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Omnipurse_0: 0x39dea53700000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `registerNickname(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "registerNickname(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3737,
        "code": "ntract Omnipurse {\n\n  struct Contribution {\n    address sender;\n    uint value;\n    bool refunded;\n    uint256 timestamp;\n  }\n\n  struct Purse {\n    address creator;\n    uint256 timestamp;\n    string title;\n    uint8 status;\n    uint numContributions;\n    uint totalContributed;\n    mapping (uint => Contribution) contributions;\n  }\n\n  uint public numPurse;\n  mapping (uint => Purse) purses;\n  mapping (address => uint[]) pursesByCreator;\n  mapping (address => string) nicknames;\n\n  function searchPursesByAddress(address creator) constant returns (uint[] ids) {\n    ids = pursesByCreator[creator];\n  }\n\n  function getPurseDetails(uint purseId) constant returns (\n    address creator,\n    uint256 timestamp,\n    string title,\n    uint8 status,\n    uint numContributions,\n    uint totalContributed\n  ) {\n    Purse p = purses[purseId];\n    creator = p.creator;\n    timestamp = p.timestamp;\n    title = p.title;\n    status = p.status;\n    numContributions = p.numContributions;\n    totalContributed = p.totalContributed;\n  }\n\n  function getPurseContributions(uint purseId, uint contributionId) constant returns (\n    address sender,\n    uint value,\n    bool refunded,\n    string nickname,\n    uint timestamp\n  ) {\n    Purse p = purses[purseId];\n    Contribution c = p.contributions[contributionId];\n    sender = c.sender;\n    value = c.value;\n    refunded = c.refunded;\n    nickname = nicknames[c.sender];\n    timestamp = c.timestamp;\n  }\n\n  function createPurse(string title) returns (uint purseId) {\n    purseId = numPurse++;\n    purses[purseId] = Purse(msg.sender, block.timestamp, title, 1, 0, 0);\n    pursesByCreator[msg.sender].push(purseId);\n  }\n\n  function contributeToPurse(uint purseId) payable {\n    Purse p = purses[purseId];\n    if (p.status != 1) { throw; }\n    p.totalContributed += msg.value;\n    p.contributions[p.numContributions++] = Contribution(msg.sender, msg.value,\n                                                        false, block.timestamp);\n  }\n\n  function dissmisPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || (p.status != 1 && p.status != 4)) { throw; }\n    bool success = true;\n    for (uint i=0; i<p.numContributions; i++) {\n      Contribution c = p.contributions[i];\n      if(!c.refunded) {\n        c.refunded = c.sender.send(c.value);\n      }\n      success = success && c.refunded;\n    }\n    p.status = success ? 3 : 4;\n  }\n\n  function finishPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || p.status != 1) { throw; }\n    if (p.creator.send(p.totalContributed)) { p.status = 2; }\n  }\n\n  function registerNickname(string nickname) {\n    nicknames[msg.sender] = nickname;\n  }\n\n}",
        "debug": "keccac_2_+_keccac_storage_0: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_2 + keccac_storage_0: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncalldata_Omnipurse_0: 0xcba2c73500000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createPurse(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "createPurse(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3766,
        "code": "ntract Omnipurse {\n\n  struct Contribution {\n    address sender;\n    uint value;\n    bool refunded;\n    uint256 timestamp;\n  }\n\n  struct Purse {\n    address creator;\n    uint256 timestamp;\n    string title;\n    uint8 status;\n    uint numContributions;\n    uint totalContributed;\n    mapping (uint => Contribution) contributions;\n  }\n\n  uint public numPurse;\n  mapping (uint => Purse) purses;\n  mapping (address => uint[]) pursesByCreator;\n  mapping (address => string) nicknames;\n\n  function searchPursesByAddress(address creator) constant returns (uint[] ids) {\n    ids = pursesByCreator[creator];\n  }\n\n  function getPurseDetails(uint purseId) constant returns (\n    address creator,\n    uint256 timestamp,\n    string title,\n    uint8 status,\n    uint numContributions,\n    uint totalContributed\n  ) {\n    Purse p = purses[purseId];\n    creator = p.creator;\n    timestamp = p.timestamp;\n    title = p.title;\n    status = p.status;\n    numContributions = p.numContributions;\n    totalContributed = p.totalContributed;\n  }\n\n  function getPurseContributions(uint purseId, uint contributionId) constant returns (\n    address sender,\n    uint value,\n    bool refunded,\n    string nickname,\n    uint timestamp\n  ) {\n    Purse p = purses[purseId];\n    Contribution c = p.contributions[contributionId];\n    sender = c.sender;\n    value = c.value;\n    refunded = c.refunded;\n    nickname = nicknames[c.sender];\n    timestamp = c.timestamp;\n  }\n\n  function createPurse(string title) returns (uint purseId) {\n    purseId = numPurse++;\n    purses[purseId] = Purse(msg.sender, block.timestamp, title, 1, 0, 0);\n    pursesByCreator[msg.sender].push(purseId);\n  }\n\n  function contributeToPurse(uint purseId) payable {\n    Purse p = purses[purseId];\n    if (p.status != 1) { throw; }\n    p.totalContributed += msg.value;\n    p.contributions[p.numContributions++] = Contribution(msg.sender, msg.value,\n                                                        false, block.timestamp);\n  }\n\n  function dissmisPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || (p.status != 1 && p.status != 4)) { throw; }\n    bool success = true;\n    for (uint i=0; i<p.numContributions; i++) {\n      Contribution c = p.contributions[i];\n      if(!c.refunded) {\n        c.refunded = c.sender.send(c.value);\n      }\n      success = success && c.refunded;\n    }\n    p.status = success ? 3 : 4;\n  }\n\n  function finishPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || p.status != 1) { throw; }\n    if (p.creator.send(p.totalContributed)) { p.status = 2; }\n  }\n\n  function registerNickname(string nickname) {\n    nicknames[msg.sender] = nickname;\n  }\n\n}",
        "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Omnipurse_4 + calldata_Omnipurse_4)) +\n64: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_Omnipurse_0: 0xcba2c73500000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createPurse(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "createPurse(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3780,
        "code": "ntract Omnipurse {\n\n  struct Contribution {\n    address sender;\n    uint value;\n    bool refunded;\n    uint256 timestamp;\n  }\n\n  struct Purse {\n    address creator;\n    uint256 timestamp;\n    string title;\n    uint8 status;\n    uint numContributions;\n    uint totalContributed;\n    mapping (uint => Contribution) contributions;\n  }\n\n  uint public numPurse;\n  mapping (uint => Purse) purses;\n  mapping (address => uint[]) pursesByCreator;\n  mapping (address => string) nicknames;\n\n  function searchPursesByAddress(address creator) constant returns (uint[] ids) {\n    ids = pursesByCreator[creator];\n  }\n\n  function getPurseDetails(uint purseId) constant returns (\n    address creator,\n    uint256 timestamp,\n    string title,\n    uint8 status,\n    uint numContributions,\n    uint totalContributed\n  ) {\n    Purse p = purses[purseId];\n    creator = p.creator;\n    timestamp = p.timestamp;\n    title = p.title;\n    status = p.status;\n    numContributions = p.numContributions;\n    totalContributed = p.totalContributed;\n  }\n\n  function getPurseContributions(uint purseId, uint contributionId) constant returns (\n    address sender,\n    uint value,\n    bool refunded,\n    string nickname,\n    uint timestamp\n  ) {\n    Purse p = purses[purseId];\n    Contribution c = p.contributions[contributionId];\n    sender = c.sender;\n    value = c.value;\n    refunded = c.refunded;\n    nickname = nicknames[c.sender];\n    timestamp = c.timestamp;\n  }\n\n  function createPurse(string title) returns (uint purseId) {\n    purseId = numPurse++;\n    purses[purseId] = Purse(msg.sender, block.timestamp, title, 1, 0, 0);\n    pursesByCreator[msg.sender].push(purseId);\n  }\n\n  function contributeToPurse(uint purseId) payable {\n    Purse p = purses[purseId];\n    if (p.status != 1) { throw; }\n    p.totalContributed += msg.value;\n    p.contributions[p.numContributions++] = Contribution(msg.sender, msg.value,\n                                                        false, block.timestamp);\n  }\n\n  function dissmisPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || (p.status != 1 && p.status != 4)) { throw; }\n    bool success = true;\n    for (uint i=0; i<p.numContributions; i++) {\n      Contribution c = p.contributions[i];\n      if(!c.refunded) {\n        c.refunded = c.sender.send(c.value);\n      }\n      success = success && c.refunded;\n    }\n    p.status = success ? 3 : 4;\n  }\n\n  function finishPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || p.status != 1) { throw; }\n    if (p.creator.send(p.totalContributed)) { p.status = 2; }\n  }\n\n  function registerNickname(string nickname) {\n    nicknames[msg.sender] = nickname;\n  }\n\n}",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Omnipurse_4 + calldata_Omnipurse_4)) +\n64: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Omnipurse_4 + calldata_Omnipurse_4)) +\n64: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\ncalldata_Omnipurse_0: 0xcba2c73500000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createPurse(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "createPurse(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3797,
        "code": "ntract Omnipurse {\n\n  struct Contribution {\n    address sender;\n    uint value;\n    bool refunded;\n    uint256 timestamp;\n  }\n\n  struct Purse {\n    address creator;\n    uint256 timestamp;\n    string title;\n    uint8 status;\n    uint numContributions;\n    uint totalContributed;\n    mapping (uint => Contribution) contributions;\n  }\n\n  uint public numPurse;\n  mapping (uint => Purse) purses;\n  mapping (address => uint[]) pursesByCreator;\n  mapping (address => string) nicknames;\n\n  function searchPursesByAddress(address creator) constant returns (uint[] ids) {\n    ids = pursesByCreator[creator];\n  }\n\n  function getPurseDetails(uint purseId) constant returns (\n    address creator,\n    uint256 timestamp,\n    string title,\n    uint8 status,\n    uint numContributions,\n    uint totalContributed\n  ) {\n    Purse p = purses[purseId];\n    creator = p.creator;\n    timestamp = p.timestamp;\n    title = p.title;\n    status = p.status;\n    numContributions = p.numContributions;\n    totalContributed = p.totalContributed;\n  }\n\n  function getPurseContributions(uint purseId, uint contributionId) constant returns (\n    address sender,\n    uint value,\n    bool refunded,\n    string nickname,\n    uint timestamp\n  ) {\n    Purse p = purses[purseId];\n    Contribution c = p.contributions[contributionId];\n    sender = c.sender;\n    value = c.value;\n    refunded = c.refunded;\n    nickname = nicknames[c.sender];\n    timestamp = c.timestamp;\n  }\n\n  function createPurse(string title) returns (uint purseId) {\n    purseId = numPurse++;\n    purses[purseId] = Purse(msg.sender, block.timestamp, title, 1, 0, 0);\n    pursesByCreator[msg.sender].push(purseId);\n  }\n\n  function contributeToPurse(uint purseId) payable {\n    Purse p = purses[purseId];\n    if (p.status != 1) { throw; }\n    p.totalContributed += msg.value;\n    p.contributions[p.numContributions++] = Contribution(msg.sender, msg.value,\n                                                        false, block.timestamp);\n  }\n\n  function dissmisPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || (p.status != 1 && p.status != 4)) { throw; }\n    bool success = true;\n    for (uint i=0; i<p.numContributions; i++) {\n      Contribution c = p.contributions[i];\n      if(!c.refunded) {\n        c.refunded = c.sender.send(c.value);\n      }\n      success = success && c.refunded;\n    }\n    p.status = success ? 3 : 4;\n  }\n\n  function finishPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || p.status != 1) { throw; }\n    if (p.creator.send(p.totalContributed)) { p.status = 2; }\n  }\n\n  function registerNickname(string nickname) {\n    nicknames[msg.sender] = nickname;\n  }\n\n}",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Omnipurse_4 + calldata_Omnipurse_4)) +\n64: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Omnipurse_4 + calldata_Omnipurse_4)) +\n64: 0x25\ncalldata_Omnipurse_0: 0xcba2c73500000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createPurse(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "createPurse(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3802,
        "code": "ntract Omnipurse {\n\n  struct Contribution {\n    address sender;\n    uint value;\n    bool refunded;\n    uint256 timestamp;\n  }\n\n  struct Purse {\n    address creator;\n    uint256 timestamp;\n    string title;\n    uint8 status;\n    uint numContributions;\n    uint totalContributed;\n    mapping (uint => Contribution) contributions;\n  }\n\n  uint public numPurse;\n  mapping (uint => Purse) purses;\n  mapping (address => uint[]) pursesByCreator;\n  mapping (address => string) nicknames;\n\n  function searchPursesByAddress(address creator) constant returns (uint[] ids) {\n    ids = pursesByCreator[creator];\n  }\n\n  function getPurseDetails(uint purseId) constant returns (\n    address creator,\n    uint256 timestamp,\n    string title,\n    uint8 status,\n    uint numContributions,\n    uint totalContributed\n  ) {\n    Purse p = purses[purseId];\n    creator = p.creator;\n    timestamp = p.timestamp;\n    title = p.title;\n    status = p.status;\n    numContributions = p.numContributions;\n    totalContributed = p.totalContributed;\n  }\n\n  function getPurseContributions(uint purseId, uint contributionId) constant returns (\n    address sender,\n    uint value,\n    bool refunded,\n    string nickname,\n    uint timestamp\n  ) {\n    Purse p = purses[purseId];\n    Contribution c = p.contributions[contributionId];\n    sender = c.sender;\n    value = c.value;\n    refunded = c.refunded;\n    nickname = nicknames[c.sender];\n    timestamp = c.timestamp;\n  }\n\n  function createPurse(string title) returns (uint purseId) {\n    purseId = numPurse++;\n    purses[purseId] = Purse(msg.sender, block.timestamp, title, 1, 0, 0);\n    pursesByCreator[msg.sender].push(purseId);\n  }\n\n  function contributeToPurse(uint purseId) payable {\n    Purse p = purses[purseId];\n    if (p.status != 1) { throw; }\n    p.totalContributed += msg.value;\n    p.contributions[p.numContributions++] = Contribution(msg.sender, msg.value,\n                                                        false, block.timestamp);\n  }\n\n  function dissmisPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || (p.status != 1 && p.status != 4)) { throw; }\n    bool success = true;\n    for (uint i=0; i<p.numContributions; i++) {\n      Contribution c = p.contributions[i];\n      if(!c.refunded) {\n        c.refunded = c.sender.send(c.value);\n      }\n      success = success && c.refunded;\n    }\n    p.status = success ? 3 : 4;\n  }\n\n  function finishPurse(uint purseId) {\n    Purse p = purses[purseId];\n    if (p.creator != msg.sender || p.status != 1) { throw; }\n    if (p.creator.send(p.totalContributed)) { p.status = 2; }\n  }\n\n  function registerNickname(string nickname) {\n    nicknames[msg.sender] = nickname;\n  }\n\n}",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Omnipurse_4 + calldata_Omnipurse_4)) +\n64: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\nkeccac_2_+_keccac_storage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Omnipurse_4 + calldata_Omnipurse_4)) +\n64: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\ncalldata_Omnipurse_0: 0xcba2c73500000000000000000000000000000000000000000000000000000000\ncalldatasize_Omnipurse: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createPurse(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x81a47e985b7a133728e97efc7f9ec3654b6e73f0.sol",
        "function": "createPurse(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}