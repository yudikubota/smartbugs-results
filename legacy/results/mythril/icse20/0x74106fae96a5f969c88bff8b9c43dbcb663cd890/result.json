{
  "contract": "0x74106fae96a5f969c88bff8b9c43dbcb663cd890",
  "tool": "mythril",
  "start": 1563817824.4836657,
  "end": 1563818028.5995297,
  "duration": 204.1158640384674,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1810,
        "code": "\n    address public rng;\n\n ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_iRNG: 0xa0\ncalldata_iRNG_4: 0x0\nstorage_2: 0x0\ncalldata_iRNG_0: 0x141961bc00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "_function_0x141961bc",
        "lineno": 60,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2124,
        "code": "ID, c, consumer);\n    ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_iRNG: 0xa0\ncalldata_iRNG_4: 0x0\nstorage_2: 0x0\ncalldata_iRNG_0: 0x384b139300000000000000000000000000000000000000000000000000000000\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "follow(uint256)",
        "lineno": 127,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2571,
        "code": "      _;\n    }\n\n    fu",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_iRNG: 0xa0\ncalldata_iRNG_4: 0x0\nstorage_2: 0x0\ncalldata_iRNG_0: 0x58b1f29c00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "refundBounty(uint256)",
        "lineno": 302,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2774,
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_iRNG: 0xa0\ncalldata_iRNG_4: 0x0\nstorage_2: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_iRNG_0: 0x65e0b5c200000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "sendRandomToRNg(uint256)",
        "lineno": 340,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3019,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "sendRandomToRNg(uint256)",
        "lineno": 340,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3019,
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function sendRandomToRNg(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "sendRandomToRNg(uint256)",
        "lineno": 340,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3097,
        "code": "uint16 _commitDeadline",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_iRNG: 0x4000000000000000000000000000000000000000000000000000000000000040\ncalldata_iRNG_4: 0x0\nstorage_2: 0x0\ncalldata_iRNG_0: 0x9348cef700000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "reveal(uint256,uint256)",
        "lineno": 189,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3400,
        "code": "c.bnum = _bnum;\n  ",
        "debug": "block_number: 0x0\ncalldatasize_iRNG: 0x800000000000000000000000000000000000000000000000000\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_iRNG_32 + 4: 0xffffffffffffffffffffffff\ncalldata_iRNG_32 + 68: 0x8000\ncalldata_iRNG_32 + 36: 0x8001\ncalldata_iRNG_4: 0x7fffffff\ncalldata_iRNG_0: 0xba487e6200000000000000000000000000000000000000000000000000000000\n",
        "description": "A possible integer overflow exists in the function `newCampaign(uint32,uint96,uint16,uint16)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "newCampaign(uint32,uint96,uint16,uint16)",
        "lineno": 109,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3458,
        "code": "kline;\n       ",
        "debug": "calldatasize_iRNG: 0x200000000000000000000000000000\nstorage_2: 0x8ae6cc3d81aba80000000000000000000000000000000000000000000000000\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nblock_number: 0x43fff11a\ncalldata_iRNG_32 + 4: 0xffffffffffffffffffffffff\ncalldata_iRNG_32 + 68: 0x270e\ncalldata_iRNG_32 + 36: 0xcead\ncalldata_iRNG_4: 0x84002134\ncalldata_iRNG_0: 0xba487e6200000000000000000000000000000000000000000000000000000000\n",
        "description": "A possible integer overflow exists in the function `newCampaign(uint32,uint96,uint16,uint16)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "newCampaign(uint32,uint96,uint16,uint16)",
        "lineno": 111,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4038,
        "code": "            return c.r",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_iRNG: 0xa0\ncalldata_iRNG_4: 0x0\nstorage_2: 0x0\ncalldata_iRNG_0: 0xcd4b691400000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "getRandom(uint256)",
        "lineno": 228,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4088,
        "code": "num)\n        beFalse(p",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_iRNG: 0xa0\ncalldata_iRNG_4: 0x0\nstorage_2: 0x0\ncalldata_iRNG_0: 0xcfb3a49300000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "getMyBounty(uint256)",
        "lineno": 247,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4258,
        "code": "revert(); _; }\n\n    mo",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_iRNG: 0x4000000000000000000000000000000000000000000000000000000000000040\ncalldata_iRNG_4: 0x0\nstorage_2: 0x0\ncalldata_iRNG_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_iRNG_0: 0xf2f0387700000000000000000000000000000000000000000000000000000000\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "commit(uint256,bytes32)",
        "lineno": 158,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4820,
        "code": ".value);\n        return ",
        "debug": "calldatasize_iRNG: 0x3dfff97fb12d5271794a8447c00485e9688cac904000000000000000000000\ncallvalue: 0x923b4088888a15314ab609621b77cdcc7e3919feab1dfdfaeb6dfa6f4bf400ac\nstorage_0 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n7*calldata_iRNG_4: 0x0\nstorage_3 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n7*calldata_iRNG_4: 0xb23187bbbbe6dc944207aa705367ad2779a338810ab101d2e36183806207df4b\ncalldata_iRNG_4: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nblock_number: 0x0\nstorage_2: 0x1\ncalldata_iRNG_0: 0x384b139300000000000000000000000000000000000000000000000000000000\n",
        "description": "A possible integer overflow exists in the function `follow(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "follow(uint256)",
        "lineno": 147,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5588,
        "code": " public pure returns (byte",
        "debug": "",
        "description": "In the function `refundBounty(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.number\n",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "refundBounty(uint256)",
        "lineno": 322,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 5588,
        "code": " public pure returns (byte",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function refundBounty(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "refundBounty(uint256)",
        "lineno": 322,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 7585,
        "code": ", the consumers can get back the bo",
        "debug": "",
        "description": "In the function `getMyBounty(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.number\n",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "getMyBounty(uint256)",
        "lineno": 289,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 7585,
        "code": ", the consumers can get back the bo",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function getMyBounty(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/44/0x74106fae96a5f969c88bff8b9c43dbcb663cd890.sol",
        "function": "getMyBounty(uint256)",
        "lineno": 289,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}