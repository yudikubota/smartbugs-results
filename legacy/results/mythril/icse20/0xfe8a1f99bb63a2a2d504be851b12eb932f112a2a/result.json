{
  "contract": "0xfe8a1f99bb63a2a2d504be851b12eb932f112a2a",
  "tool": "mythril",
  "start": 1563817790.1895595,
  "end": 1563818128.239414,
  "duration": 338.04985451698303,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 292,
        "code": "     onlyOwner\n    {\n        require( newSigs.length <= maxSigs ); // bound array\n\n        docHash = newDocHash;\n        numSigs = newSigs.length;\n\n        for( uint i = 0; i < numSigs; i++ ){\n            signatories[i] = newSigs[i];\n        }\n    }\n\n    /*\n      This is the function used by signatories to confirm\n      their agreement over the document has",
        "debug": "calldata_DocSigner_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_DocSigner_0: 0x4fd6194d00000000000000000000000000000000000000000000000000000000\ncalldatasize_DocSigner: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setup(string,address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xfe8a1f99bb63a2a2d504be851b12eb932f112a2a.sol",
        "function": "setup(string,address[])",
        "lineno": 101,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 298,
        "code": "     onlyOwner\n    {\n        require( newSigs.length <= maxSigs ); // bound array\n\n        docHash = newDocHash;\n        numSigs = newSigs.length;\n\n        for( uint i = 0; i < numSigs; i++ ){\n            signatories[i] = newSigs[i];\n        }\n    }\n\n    /*\n      This is the function used by signatories to confirm\n      their agreement over the document has",
        "debug": "calldata_DocSigner_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_DocSigner_0: 0x4fd6194d00000000000000000000000000000000000000000000000000000000\ncalldatasize_DocSigner: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setup(string,address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xfe8a1f99bb63a2a2d504be851b12eb932f112a2a.sol",
        "function": "setup(string,address[])",
        "lineno": 101,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 316,
        "code": "     onlyOwner\n    {\n        require( newSigs.length <= maxSigs ); // bound array\n\n        docHash = newDocHash;\n        numSigs = newSigs.length;\n\n        for( uint i = 0; i < numSigs; i++ ){\n            signatories[i] = newSigs[i];\n        }\n    }\n\n    /*\n      This is the function used by signatories to confirm\n      their agreement over the document has",
        "debug": "calldata_DocSigner_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_DocSigner_0: 0x4fd6194d00000000000000000000000000000000000000000000000000000000\ncalldatasize_DocSigner: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setup(string,address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xfe8a1f99bb63a2a2d504be851b12eb932f112a2a.sol",
        "function": "setup(string,address[])",
        "lineno": 101,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 322,
        "code": "     onlyOwner\n    {\n        require( newSigs.length <= maxSigs ); // bound array\n\n        docHash = newDocHash;\n        numSigs = newSigs.length;\n\n        for( uint i = 0; i < numSigs; i++ ){\n            signatories[i] = newSigs[i];\n        }\n    }\n\n    /*\n      This is the function used by signatories to confirm\n      their agreement over the document has",
        "debug": "calldata_DocSigner_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_DocSigner_0: 0x4fd6194d00000000000000000000000000000000000000000000000000000000\ncalldatasize_DocSigner: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setup(string,address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xfe8a1f99bb63a2a2d504be851b12eb932f112a2a.sol",
        "function": "setup(string,address[])",
        "lineno": 101,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 650,
        "code": "    require(keccak256(signingHash) == keccak256(docHash));\n\n        // save the message to state so that it can be easily queried\n        messages[msg.sender] = message;\n\n        Signature(msg.sender, docHash, message);\n    }\n\n    /*\n      Check if the address is within the approved signatories list.\n    */\n\n    function checkSig(address addr)\n       ",
        "debug": "calldata_DocSigner_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_DocSigner_0: 0xe601dd1200000000000000000000000000000000000000000000000000000000\ncalldatasize_DocSigner: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `sign(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xfe8a1f99bb63a2a2d504be851b12eb932f112a2a.sol",
        "function": "sign(string,string)",
        "lineno": 123,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 674,
        "code": "    require(keccak256(signingHash) == keccak256(docHash));\n\n        // save the message to state so that it can be easily queried\n        messages[msg.sender] = message;\n\n        Signature(msg.sender, docHash, message);\n    }\n\n    /*\n      Check if the address is within the approved signatories list.\n    */\n\n    function checkSig(address addr)\n       ",
        "debug": "calldata_DocSigner_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_DocSigner_0: 0xe601dd1200000000000000000000000000000000000000000000000000000000\ncalldatasize_DocSigner: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `sign(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xfe8a1f99bb63a2a2d504be851b12eb932f112a2a.sol",
        "function": "sign(string,string)",
        "lineno": 123,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 680,
        "code": "    require(keccak256(signingHash) == keccak256(docHash));\n\n        // save the message to state so that it can be easily queried\n        messages[msg.sender] = message;\n\n        Signature(msg.sender, docHash, message);\n    }\n\n    /*\n      Check if the address is within the approved signatories list.\n    */\n\n    function checkSig(address addr)\n       ",
        "debug": "calldata_DocSigner_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_DocSigner_0: 0xe601dd1200000000000000000000000000000000000000000000000000000000\ncalldatasize_DocSigner: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `sign(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xfe8a1f99bb63a2a2d504be851b12eb932f112a2a.sol",
        "function": "sign(string,string)",
        "lineno": 123,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1032,
        "code": "reement ov",
        "debug": "calldata_DocSigner_4 + calldata_DocSigner_32 + 4: 0x4\nstorage_2: 0x0\ncalldata_DocSigner_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc\ncalldata_DocSigner_4 + calldata_DocSigner_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_DocSigner_0: 0x4fd6194d00000000000000000000000000000000000000000000000000000000\ncalldatasize_DocSigner: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setup(string,address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xfe8a1f99bb63a2a2d504be851b12eb932f112a2a.sol",
        "function": "setup(string,address[])",
        "lineno": 115,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1510,
        "code": "    messages[msg.sende",
        "debug": "storage_2: 0x20\ncalldata_DocSigner_4 + calldata_DocSigner_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80\ncaller: 0x0\nstorage_3: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_DocSigner_0: 0xe601dd1200000000000000000000000000000000000000000000000000000000\ncalldatasize_DocSigner: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `sign(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xfe8a1f99bb63a2a2d504be851b12eb932f112a2a.sol",
        "function": "sign(string,string)",
        "lineno": 126,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1523,
        "code": "    messages[msg.sende",
        "debug": "storage_2: 0x20\ncalldata_DocSigner_4 + calldata_DocSigner_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nstorage_3: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_DocSigner_0: 0xe601dd1200000000000000000000000000000000000000000000000000000000\ncalldatasize_DocSigner: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `sign(string,string)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/16/0xfe8a1f99bb63a2a2d504be851b12eb932f112a2a.sol",
        "function": "sign(string,string)",
        "lineno": 126,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 2088,
        "code": "----------------------------\n// STATE DECLARATION\n// -------------------------------------------------------------\n\n    address public owner;// Redenbach-Lee address\n    uint constant maxSigs = 10; // maximum number of counterparties\n    uint numSigs = 0; // number of signatures for the next signing\n    string public docHash; // current document hash\n    address[10] signatories; // signatory addresses\n    mapping(address => string) public messages;\n\n// -------------------------------------------------------------\n// CONSTRUCTOR\n// -------------------------------------------------------------\n\n    function DocSigner()\n        public\n    {\n        owner = msg.sender;\n    }\n\n// -------------------------------------------------------------\n// EVENTS\n// -------------------------------------------------------------\n\n    event Signature(address signer, string docHash, string message);\n\n// -------------------------------------------------------------\n// FUNCTIONS\n// -------------------------------------------------------------\n\n    /*\n      This is the initialisation function for a new legal contract.\n      The contract owner sets the new agreement hash and the\n      number of signatories.\n    */\n\n    function setup( string   newDocHash,\n                    address[] newSigs )\n        external\n        onlyOwner\n    {\n        require( newSigs.length <= maxSigs ); // bound array\n\n        docHash = newDocHash;\n        numSigs = newSigs.length;\n\n        for( uint i = 0; i < numSigs; i++ ){\n            signatories[i] = newSigs[i];\n        }\n    }\n\n    /*\n      This is the function used by signatories to confirm\n      their agreement over the document hash.\n    */\n\n    function sign( string signingHash,\n                   string message )\n        external\n        onlySigner\n    {\n        require(keccak256(signingHash) == keccak256(docHash));\n\n        // save the message to state so that it can be easily queried\n        messages[msg.sender] = message;\n\n        Signature(msg.sender, docHash, message);\n    }\n\n    /*\n      Check if the address is within the approved signatories list.\n    */\n\n    function checkSig(address addr)\n        internal\n        view\n        returns (bool)\n    {\n        for( uint i = 0; i < numSigs; i++ ){\n            if( signatories[i] == addr )\n                return true;\n        }\n\n        return false;\n    }\n\n// -------------------------------------------------------------\n// MODIFIERS\n// -------------------------------------------------------------\n\n    modifier onlyOwner\n    {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlySigner\n    {\n        require(checkSig(msg.sender));\n        _;\n    }\n}",
        "debug": "storage_2: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xecf2ddf987c47607c730abb83fa26addddaecaa0742fbdffffffffffffffffe1\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff1b2f77e8dfedf7dfc0c2add3b0019922428288182d36f2fcd8fffa6b263461\ncaller: 0x0\nstorage_3: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_DocSigner_0: 0xe601dd1200000000000000000000000000000000000000000000000000000000\ncalldatasize_DocSigner: 0x4\nKECCAC_mem_128): 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `sign(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xfe8a1f99bb63a2a2d504be851b12eb932f112a2a.sol",
        "function": "sign(string,string)",
        "lineno": 61,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2117,
        "code": "----------------------------\n// STATE DECLARATION\n// -------------------------------------------------------------\n\n    address public owner;// Redenbach-Lee address\n    uint constant maxSigs = 10; // maximum number of counterparties\n    uint numSigs = 0; // number of signatures for the next signing\n    string public docHash; // current document hash\n    address[10] signatories; // signatory addresses\n    mapping(address => string) public messages;\n\n// -------------------------------------------------------------\n// CONSTRUCTOR\n// -------------------------------------------------------------\n\n    function DocSigner()\n        public\n    {\n        owner = msg.sender;\n    }\n\n// -------------------------------------------------------------\n// EVENTS\n// -------------------------------------------------------------\n\n    event Signature(address signer, string docHash, string message);\n\n// -------------------------------------------------------------\n// FUNCTIONS\n// -------------------------------------------------------------\n\n    /*\n      This is the initialisation function for a new legal contract.\n      The contract owner sets the new agreement hash and the\n      number of signatories.\n    */\n\n    function setup( string   newDocHash,\n                    address[] newSigs )\n        external\n        onlyOwner\n    {\n        require( newSigs.length <= maxSigs ); // bound array\n\n        docHash = newDocHash;\n        numSigs = newSigs.length;\n\n        for( uint i = 0; i < numSigs; i++ ){\n            signatories[i] = newSigs[i];\n        }\n    }\n\n    /*\n      This is the function used by signatories to confirm\n      their agreement over the document hash.\n    */\n\n    function sign( string signingHash,\n                   string message )\n        external\n        onlySigner\n    {\n        require(keccak256(signingHash) == keccak256(docHash));\n\n        // save the message to state so that it can be easily queried\n        messages[msg.sender] = message;\n\n        Signature(msg.sender, docHash, message);\n    }\n\n    /*\n      Check if the address is within the approved signatories list.\n    */\n\n    function checkSig(address addr)\n        internal\n        view\n        returns (bool)\n    {\n        for( uint i = 0; i < numSigs; i++ ){\n            if( signatories[i] == addr )\n                return true;\n        }\n\n        return false;\n    }\n\n// -------------------------------------------------------------\n// MODIFIERS\n// -------------------------------------------------------------\n\n    modifier onlyOwner\n    {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlySigner\n    {\n        require(checkSig(msg.sender));\n        _;\n    }\n}",
        "debug": "storage_2: 0x20\ncalldata_DocSigner_4 + calldata_DocSigner_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_3: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_DocSigner_0: 0xe601dd1200000000000000000000000000000000000000000000000000000000\ncalldatasize_DocSigner: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `sign(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xfe8a1f99bb63a2a2d504be851b12eb932f112a2a.sol",
        "function": "sign(string,string)",
        "lineno": 61,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2131,
        "code": "----------------------------\n// STATE DECLARATION\n// -------------------------------------------------------------\n\n    address public owner;// Redenbach-Lee address\n    uint constant maxSigs = 10; // maximum number of counterparties\n    uint numSigs = 0; // number of signatures for the next signing\n    string public docHash; // current document hash\n    address[10] signatories; // signatory addresses\n    mapping(address => string) public messages;\n\n// -------------------------------------------------------------\n// CONSTRUCTOR\n// -------------------------------------------------------------\n\n    function DocSigner()\n        public\n    {\n        owner = msg.sender;\n    }\n\n// -------------------------------------------------------------\n// EVENTS\n// -------------------------------------------------------------\n\n    event Signature(address signer, string docHash, string message);\n\n// -------------------------------------------------------------\n// FUNCTIONS\n// -------------------------------------------------------------\n\n    /*\n      This is the initialisation function for a new legal contract.\n      The contract owner sets the new agreement hash and the\n      number of signatories.\n    */\n\n    function setup( string   newDocHash,\n                    address[] newSigs )\n        external\n        onlyOwner\n    {\n        require( newSigs.length <= maxSigs ); // bound array\n\n        docHash = newDocHash;\n        numSigs = newSigs.length;\n\n        for( uint i = 0; i < numSigs; i++ ){\n            signatories[i] = newSigs[i];\n        }\n    }\n\n    /*\n      This is the function used by signatories to confirm\n      their agreement over the document hash.\n    */\n\n    function sign( string signingHash,\n                   string message )\n        external\n        onlySigner\n    {\n        require(keccak256(signingHash) == keccak256(docHash));\n\n        // save the message to state so that it can be easily queried\n        messages[msg.sender] = message;\n\n        Signature(msg.sender, docHash, message);\n    }\n\n    /*\n      Check if the address is within the approved signatories list.\n    */\n\n    function checkSig(address addr)\n        internal\n        view\n        returns (bool)\n    {\n        for( uint i = 0; i < numSigs; i++ ){\n            if( signatories[i] == addr )\n                return true;\n        }\n\n        return false;\n    }\n\n// -------------------------------------------------------------\n// MODIFIERS\n// -------------------------------------------------------------\n\n    modifier onlyOwner\n    {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlySigner\n    {\n        require(checkSig(msg.sender));\n        _;\n    }\n}",
        "debug": "storage_2: 0x0\ncalldata_DocSigner_4 + calldata_DocSigner_32 + 4: 0x7ff900d5ebfcfeff1f7ddfe9fc045516e08000078affffffffffffffffffffff\ncalldata_DocSigner_32 + 4: 0xe18a3d1c393c760111059c91fbfb6ae91f7ffff874ffffffffffffffffffffdf\ncaller: 0x0\nstorage_3: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_DocSigner_0: 0xe601dd1200000000000000000000000000000000000000000000000000000000\ncalldatasize_DocSigner: 0x4\nKECCAC_mem_128): 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `sign(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xfe8a1f99bb63a2a2d504be851b12eb932f112a2a.sol",
        "function": "sign(string,string)",
        "lineno": 61,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2148,
        "code": "----------------------------\n// STATE DECLARATION\n// -------------------------------------------------------------\n\n    address public owner;// Redenbach-Lee address\n    uint constant maxSigs = 10; // maximum number of counterparties\n    uint numSigs = 0; // number of signatures for the next signing\n    string public docHash; // current document hash\n    address[10] signatories; // signatory addresses\n    mapping(address => string) public messages;\n\n// -------------------------------------------------------------\n// CONSTRUCTOR\n// -------------------------------------------------------------\n\n    function DocSigner()\n        public\n    {\n        owner = msg.sender;\n    }\n\n// -------------------------------------------------------------\n// EVENTS\n// -------------------------------------------------------------\n\n    event Signature(address signer, string docHash, string message);\n\n// -------------------------------------------------------------\n// FUNCTIONS\n// -------------------------------------------------------------\n\n    /*\n      This is the initialisation function for a new legal contract.\n      The contract owner sets the new agreement hash and the\n      number of signatories.\n    */\n\n    function setup( string   newDocHash,\n                    address[] newSigs )\n        external\n        onlyOwner\n    {\n        require( newSigs.length <= maxSigs ); // bound array\n\n        docHash = newDocHash;\n        numSigs = newSigs.length;\n\n        for( uint i = 0; i < numSigs; i++ ){\n            signatories[i] = newSigs[i];\n        }\n    }\n\n    /*\n      This is the function used by signatories to confirm\n      their agreement over the document hash.\n    */\n\n    function sign( string signingHash,\n                   string message )\n        external\n        onlySigner\n    {\n        require(keccak256(signingHash) == keccak256(docHash));\n\n        // save the message to state so that it can be easily queried\n        messages[msg.sender] = message;\n\n        Signature(msg.sender, docHash, message);\n    }\n\n    /*\n      Check if the address is within the approved signatories list.\n    */\n\n    function checkSig(address addr)\n        internal\n        view\n        returns (bool)\n    {\n        for( uint i = 0; i < numSigs; i++ ){\n            if( signatories[i] == addr )\n                return true;\n        }\n\n        return false;\n    }\n\n// -------------------------------------------------------------\n// MODIFIERS\n// -------------------------------------------------------------\n\n    modifier onlyOwner\n    {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlySigner\n    {\n        require(checkSig(msg.sender));\n        _;\n    }\n}",
        "debug": "calldata_DocSigner_4 + calldata_DocSigner_32 + 4: 0x3\ncalldata_DocSigner_4 + calldata_DocSigner_4: 0x21\ncalldata_DocSigner_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_DocSigner_0: 0x4fd6194d00000000000000000000000000000000000000000000000000000000\ncalldatasize_DocSigner: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setup(string,address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xfe8a1f99bb63a2a2d504be851b12eb932f112a2a.sol",
        "function": "setup(string,address[])",
        "lineno": 61,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}