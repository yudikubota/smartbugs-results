{"error": null, "issues": [{"address": 201, "code": "holder, just add them\n            allTokenHolders.length++;\n            allTokenHolders[allTokenHolders.length - 1] = _addr;\n            balances[_addr] = _newBalance;\n        }\n        else if (_newBalance > 0) {\n            // Existing holder we're updating\n            balances[_addr] = _newBalance;\n        } else {\n            // Existing holder, we're deleting\n            balances[_addr] = 0;\n\n            /* Find out where in our array they are */\n            uint256 tokenHolderCount = allTokenHolders.length;\n            uint256 foundIndex = 0;\n            bool found = false;\n            uint256 i;\n            for (i = 0; i < tokenHolderCount; i++)\n                if (allTokenHolders[i] == _addr) {\n                    foundIndex = i;\n                    found = true;\n                    break;\n                }\n            \n            /* We now need to shuffle down the array */\n            if (found) {\n                for (i = foundIndex; i < tokenHolderCount - 1; i++)\n                    allTokenHolders[i] = allTokenHolders[i + 1];\n                allTokenHolders.length--;\n            }\n        }\n\n        // Audit it\n        SnapshotUpdated(_addr, existingBalance, _newBalance, _details);\n    }\n\n    /* Gets the balance of a specified account */\n    function balanceOf(address addr) accountReaderOnly constant returns (uint256) {\n        return balances[addr];\n    }\n\n    /* Returns the total number of holders of this currency. */\n    function tokenHolderCount() accountReaderOnly constant returns (uint256) {\n        return allTokenHolders.length;\n    }\n\n    /* Gets the token holder at the specified index. */\n    function tokenHolder(uint256 _index) accountReaderOnly constant returns (address) {\n        return allTokenHolders[_index];\n    }\n \n\n}", "debug": "calldata_TokenHolderSnapshotter_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenHolderSnapshotter_0: 0x3d3c3f2d00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenHolderSnapshotter: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `snapshotUpdate(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x4dcc8e092fc1ad29d98b3c36c2460b3153d0b7ec.sol", "function": "snapshotUpdate(address,uint256,string)", "lineno": 636, "title": "Integer Overflow ", "type": "Warning"}, {"address": 777, "code": "tFundToken(_siftContractAddress);\n        if (si", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/38/0x4dcc8e092fc1ad29d98b3c36c2460b3153d0b7ec.sol", "function": "snapshotUpdate(address,uint256,string)", "lineno": 593, "title": "Message call to external contract", "type": "Informational"}, {"address": 941, "code": "       if (allTokenHolde", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenHolderSnapshotter_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_TokenHolderSnapshotter_4 + calldata_TokenHolderSnapshotter_32 + 36)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_777: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenHolderSnapshotter_0: 0x3d3c3f2d00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenHolderSnapshotter: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenHolderSnapshotter_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `snapshotUpdate(address,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x4dcc8e092fc1ad29d98b3c36c2460b3153d0b7ec.sol", "function": "snapshotUpdate(address,uint256,string)", "lineno": 654, "title": "Integer Overflow ", "type": "Warning"}, {"address": 975, "code": " {\n                    foundIndex = i;\n    ", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenHolderSnapshotter_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_TokenHolderSnapshotter_4 + calldata_TokenHolderSnapshotter_32 + 36)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_777: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenHolderSnapshotter_0: 0x3d3c3f2d00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenHolderSnapshotter: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenHolderSnapshotter_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/38/0x4dcc8e092fc1ad29d98b3c36c2460b3153d0b7ec.sol", "function": "snapshotUpdate(address,uint256,string)", "lineno": 654, "title": "Exception state", "type": "Informational"}, {"address": 1268, "code": "[i] = allTokenHolde", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/38/0x4dcc8e092fc1ad29d98b3c36c2460b3153d0b7ec.sol", "function": "snapshotUpdate(address,uint256,string)", "lineno": 663, "title": "State change after external call", "type": "Warning"}, {"address": 2068, "code": " authenticationManager = AuthenticationManager(_authenti", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/38/0x4dcc8e092fc1ad29d98b3c36c2460b3153d0b7ec.sol", "function": "balanceOf(address)", "lineno": 598, "title": "Message call to external contract", "type": "Informational"}, {"address": 2399, "code": " authenticationManager = AuthenticationManager(_authenti", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/38/0x4dcc8e092fc1ad29d98b3c36c2460b3153d0b7ec.sol", "function": "tokenHolder(uint256)", "lineno": 598, "title": "Message call to external contract", "type": "Informational"}, {"address": 2480, "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenHolderSnapshotter_4: 0x0\nstorage_3: 0x0\nreturndatasize: 0x20\nretval_2399: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenHolderSnapshotter_0: 0x862a4bf200000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenHolderSnapshotter: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/38/0x4dcc8e092fc1ad29d98b3c36c2460b3153d0b7ec.sol", "function": "tokenHolder(uint256)", "lineno": 688, "title": "Exception state", "type": "Informational"}, {"address": 2726, "code": "tFundToken(_siftContractAddress);\n        if (si", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/38/0x4dcc8e092fc1ad29d98b3c36c2460b3153d0b7ec.sol", "function": "snapshot()", "lineno": 593, "title": "Message call to external contract", "type": "Informational"}, {"address": 2726, "code": "tFundToken(_siftContractAddress);\n        if (si", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3322\nCall at address: 3086\nCall at address: 3086\nCall at address: 3086\nCall at address: 3086\n", "filename": "/unique_chucks/38/0x4dcc8e092fc1ad29d98b3c36c2460b3153d0b7ec.sol", "function": "snapshot()", "lineno": 593, "title": "Multiple Calls", "type": "Information"}, {"address": 3086, "code": "ance == _newBalance)\n          ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/38/0x4dcc8e092fc1ad29d98b3c36c2460b3153d0b7ec.sol", "function": "snapshot()", "lineno": 631, "title": "Message call to external contract", "type": "Informational"}, {"address": 3086, "code": "ance == _newBalance)\n          ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3322\n", "filename": "/unique_chucks/38/0x4dcc8e092fc1ad29d98b3c36c2460b3153d0b7ec.sol", "function": "snapshot()", "lineno": 631, "title": "Multiple Calls", "type": "Information"}, {"address": 3322, "code": " a holder add to our list a", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/38/0x4dcc8e092fc1ad29d98b3c36c2460b3153d0b7ec.sol", "function": "snapshot()", "lineno": 634, "title": "Message call to external contract", "type": "Informational"}, {"address": 4052, "code": " authenticationManager = AuthenticationManager(_authenti", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/38/0x4dcc8e092fc1ad29d98b3c36c2460b3153d0b7ec.sol", "function": "tokenHolderCount()", "lineno": 598, "title": "Message call to external contract", "type": "Informational"}, {"address": 4135, "code": "int256 oldBalance, uint256 newBalance, string details);\n\n    /* This modifier allows a method to only be called by current admins */\n    modifier adminOnly {\n        if (!authenticationManager.isCurrentAdmin(msg.sender)) throw;\n        _;\n    }\n    /* This modifier allows a method to only be called by account readers */\n    modifier accountReaderOnly {\n        if (!authenticationManager.isCurrentAccountReader(msg.sender)) throw;\n        _;\n    }\n\n    /* Create our contract with references to other contracts as required. */\n    function TokenHolderSnapshotter(address _siftContractAddress, address _authenticationManagerAddress) {\n        /* Setup access to our other contracts and validate their versions */\n        siftContract = SmartInvestmentFundToken(_siftContractAddress);\n        if (siftContract.contractVersion() != 500201707171440)\n            throw;\n\n        /* Setup access to our other contracts and validate their versions */\n        authenticationManager = AuthenticationManager(_authenticationManagerAddress);\n        if (authenticationManager.contractVersion() != 100201707171503)\n            throw;\n    }\n\n    /* Gets the contract version for validation */\n    function contractVersion() constant returns(uint256) {\n        /* Dividend contract identifies as 700YYYYMMDDHHMM */\n        return 700201709192119;\n    }\n\n    /* Snapshot to current state of contract*/\n    function snapshot() adminOnly {\n        // First delete existing holder balances\n        uint256 i;\n        for (i = 0; i < allTokenHolders.length; i++)\n            balances[allTokenHolders[i]] = 0;\n\n        // Now clone our contract to match\n        allTokenHolders.length = siftContract.tokenHolderCount();\n        for (i = 0; i < allTokenHolders.length; i++) {\n            address addr = siftContract.tokenHolder(i);\n            allTokenHolders[i] = addr;\n            balances[addr] = siftContract.balanceOf(addr);\n        }\n\n        // Update\n        SnapshotTaken();\n    }\n\n    function snapshotUpdate(address _addr, uint256 _newBalance, string _details) adminOnly {\n        // Are they already a holder?  If not and no new balance then we're making no change so leave now, or if they are and balance is the same\n        uint256 existingBalance = balances[_addr];\n        if (existingBalance == _newBalance)\n            return;\n        \n        // So we definitely have a change to make.  If they are not a holder add to our list and update balance.  If they are a holder who maintains balance update balance.  Otherwise set balance to 0 and delete.\n        if (existingBalance == 0) {\n            // New holder, just add them\n            allTokenHolders.length++;\n            allTokenHolders[allTokenHolders.length - 1] = _addr;\n            balances[_addr] = _newBalance;\n        }\n        else if (_newBalance > 0) {\n            // Existing holder we're updating\n            balances[_addr] = _newBalance;\n        } else {\n            // Existing holder, we're deleting\n            balances[_addr] = 0;\n\n            /* Find out where in our array they are */\n            uint256 tokenHolderCount = allTokenHolders.length;\n            uint256 foundIndex = 0;\n            bool found = false;\n            uint256 i;\n            for (i = 0; i < tokenHolderCount; i++)\n                if (allTokenHolders[i] == _addr) {\n                    foundIndex = i;\n                    found = true;\n                    break;\n                }\n            \n            /* We now need to shuffle down the array */\n            if (found) {\n                for (i = foundIndex; i < tokenHolderCount - 1; i++)\n                    allTokenHolders[i] = allTokenHolders[i + 1];\n                allTokenHolders.length--;\n            }\n        }\n\n        // Audit it\n        SnapshotUpdated(_addr, existingBalance, _newBalance, _details);\n    }\n\n    /* Gets the balance of a specified account */\n    function balanceOf(address addr) accountReaderOnly constant returns (uint256) {\n        return balances[addr];\n    }\n\n    /* Returns the total number of holders of this currency. */\n    function tokenHolderCount() accountReaderOnly constant returns (uint256) {\n        return allTokenHolders.length;\n    }\n\n    /* Gets the token holder at the specified index. */\n    function tokenHolder(uint256 _index) accountReaderOnly constant returns (address) {\n        return allTokenHolders[_index];\n    }\n \n\n}", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/38/0x4dcc8e092fc1ad29d98b3c36c2460b3153d0b7ec.sol", "function": "snapshot()", "lineno": 577, "title": "State change after external call", "type": "Warning"}], "success": true}