{
  "contract": "0x22222c1944efcc38ca46489f96c3a372c4db74e6",
  "tool": "mythril",
  "start": 1563585005.4943235,
  "end": 1563585161.0519266,
  "duration": 155.55760312080383,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 585,
        "code": "ontract,\n            it can be used to deprecate this Oracle\n\n        @dev The fallback is only used if is not addre",
        "debug": "calldata_RipioOracle_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_RipioOracle_0: 0x252498a200000000000000000000000000000000000000000000000000000000\ncalldatasize_RipioOracle: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setUrl(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x22222c1944efcc38ca46489f96c3a372c4db74e6.sol",
        "function": "setUrl(string)",
        "lineno": 215,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 920,
        "code": "   require(timestamp <= block.timestamp);\n\n        uint256 expirationTime = block.timestamp - expiration;\n\n        if (cache[currency].timestamp >= timestamp && cache[currency].timestamp >= expirationTime) {\n            return (cache[currency].rate, cache[currency].decimals);\n        } else {\n            require(timestamp >= expirationTime);\n            uint256 rate = uint256(readBytes32(data, INDEX_RATE));\n            uint256 decimals = uint256(readBytes32(data, INDEX_DECIMALS));\n            uint8 v = uint8(readBytes32(data, INDEX_V));\n            bytes32 r = readBytes32(data, INDEX_R);\n            bytes32 s = readBytes32(data, INDEX_S);\n            \n            bytes32 _hash = keccak256(this, currency, rate, decimals, timestamp);\n            address signer = ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", _hash),v,r,s);\n\n            require(isDelegate(signer));\n\n            cache[currency] = RateCache(timestamp, rate, decimals);\n\n            return (rate, decimals);\n        }\n    }\n}",
        "debug": "calldata_RipioOracle_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_RipioOracle_0: 0x3ae26afa00000000000000000000000000000000000000000000000000000000\ncalldatasize_RipioOracle: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getRate(bytes32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x22222c1944efcc38ca46489f96c3a372c4db74e6.sol",
        "function": "getRate(bytes32,bytes)",
        "lineno": 278,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2622,
        "code": "dd(ns, ",
        "debug": "calldata_RipioOracle_4: 0x100000000000000000000000000000000000000000000000000000000000000\ncalldata_RipioOracle_0: 0x1b962c6500000000000000000000000000000000000000000000000000000000\ncalldatasize_RipioOracle: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `decodeCurrency(bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x22222c1944efcc38ca46489f96c3a372c4db74e6.sol",
        "function": "decodeCurrency(bytes32)",
        "lineno": 156,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3522,
        "code": "mp >= timestamp && cache[currency].times",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x22222c1944efcc38ca46489f96c3a372c4db74e6.sol",
        "function": "getRate(bytes32,bytes)",
        "lineno": 282,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3522,
        "code": "mp >= timestamp && cache[currency].times",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function getRate(bytes32,bytes). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/23/0x22222c1944efcc38ca46489f96c3a372c4db74e6.sol",
        "function": "getRate(bytes32,bytes)",
        "lineno": 282,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3634,
        "code": " uint256 rate = uint256(read",
        "debug": "timestamp: 0x0\nstorage_4: 0x1\ncalldata_RipioOracle_cpy: 0x0\ncalldata_RipioOracle_4 + calldata_RipioOracle_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_7: 0x0\ncalldata_RipioOracle_0: 0x3ae26afa00000000000000000000000000000000000000000000000000000000\ncalldatasize_RipioOracle: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `getRate(bytes32,bytes)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/23/0x22222c1944efcc38ca46489f96c3a372c4db74e6.sol",
        "function": "getRate(bytes32,bytes)",
        "lineno": 286,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 6115,
        "code": "NDEX_RATE = 1;\n    uint constant private INDEX_DECIMALS = 2;\n    uint constant private INDEX_V = 3;\n    uint constant private INDEX_R = 4;\n    uint constant private INDEX_S = 5;\n\n    string private infoUrl;\n\n    mapping(bytes32 => RateCache) private cache;\n\n    address public fallback;\n\n    struct RateCache {\n        uint256 timestamp;\n        uint256 rate;\n        uint256 decimals;\n    }\n\n    function url() public view returns (string) {\n        return infoUrl;\n    }\n\n    /**\n        @notice Sets the time window of the validity of the signed rates.\n        \n        @param time Duration of the window\n\n        @return true is the time was set correctly\n    */\n    function setExpirationTime(uint256 time) public onlyOwner returns (bool) {\n        expiration = time;\n        return true;\n    }\n\n    /**\n        @notice Sets the URL where the oracleData can be retrieved\n\n        @param _url The URL\n\n        @return true if it was set correctly\n    */\n    function setUrl(string _url) public onlyOwner returns (bool) {\n        infoUrl = _url;\n        return true;\n    }\n\n    /**\n        @notice Sets the address of another contract to handle the requests of this contract,\n            it can be used to deprecate this Oracle\n\n        @dev The fallback is only used if is not address(0)\n\n        @param _fallback The address of the contract\n\n        @return true if it was set correctly\n    */\n    function setFallback(address _fallback) public onlyOwner returns (bool) {\n        fallback = _fallback;\n        return true;\n    }\n\n    /**\n        @notice Reads a bytes32 word of a bytes array\n\n        @param data The bytes array\n        @param index The index of the word, in chunks of 32 bytes\n\n        @return o The bytes32 word readed, or 0x0 if index out of bounds\n    */\n    function readBytes32(bytes data, uint256 index) internal pure returns (bytes32 o) {\n        if(data.length / 32 > index) {\n            assembly {\n                o := mload(add(data, add(32, mul(32, index))))\n            }\n        }\n    }\n\n    /**\n        @notice Executes a transaction from this contract\n\n        @dev It can be used to retrieve lost tokens or ETH\n\n        @param to Address to call\n        @param value Ethers to send\n        @param data Data for the call\n\n        @return true If the call didn't throw an exception\n    */\n    function sendTransaction(address to, uint256 value, bytes data) public onlyOwner returns (bool) {\n        return to.call.value(value)(data);\n    }\n\n\n    /**\n        @dev Retrieves the convertion rate of a given currency, the information of the rate is carried over the \n        data field. If there is a newer rate on the cache, that rate is delivered and the data field is ignored.\n\n        If the data contains a more recent rate than the cache, the cache is updated.\n\n        @param currency Hash of the currency\n        @param data Data with the rate signed by a delegate\n\n        @return the rate and decimals of the currency convertion\n    */\n    function getRate(bytes32 currency, bytes data) public returns (uint256, uint256) {\n        if (fallback != address(0)) {\n            return Oracle(fallback).getRate(currency, data);\n        }\n\n        uint256 timestamp = uint256(readBytes32(data, INDEX_TIMESTAMP));\n        require(timestamp <= block.timestamp);\n\n        uint256 expirationTime = block.timestamp - expiration;\n\n        if (cache[currency].timestamp >= timestamp && cache[currency].timestamp >= expirationTime) {\n            return (cache[currency].rate, cache[currency].decimals);\n        } else {\n            require(timestamp >= expirationTime);\n            uint256 rate = uint256(readBytes32(data, INDEX_RATE));\n            uint256 decimals = uint256(readBytes32(data, INDEX_DECIMALS));\n            uint8 v = uint8(readBytes32(data, INDEX_V));\n            bytes32 r = readBytes32(data, INDEX_R);\n            bytes32 s = readBytes32(data, INDEX_S);\n            \n            bytes32 _hash = keccak256(this, currency, rate, decimals, timestamp);\n            address signer = ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", _hash),v,r,s);\n\n            require(isDelegate(signer));\n\n            cache[currency] = RateCache(timestamp, rate, decimals);\n\n            return (rate, decimals);\n        }\n    }\n}",
        "debug": "calldata_RipioOracle_4 + calldata_RipioOracle_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_RipioOracle_0: 0x252498a200000000000000000000000000000000000000000000000000000000\ncalldatasize_RipioOracle: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setUrl(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x22222c1944efcc38ca46489f96c3a372c4db74e6.sol",
        "function": "setUrl(string)",
        "lineno": 168,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6129,
        "code": "NDEX_RATE = 1;\n    uint constant private INDEX_DECIMALS = 2;\n    uint constant private INDEX_V = 3;\n    uint constant private INDEX_R = 4;\n    uint constant private INDEX_S = 5;\n\n    string private infoUrl;\n\n    mapping(bytes32 => RateCache) private cache;\n\n    address public fallback;\n\n    struct RateCache {\n        uint256 timestamp;\n        uint256 rate;\n        uint256 decimals;\n    }\n\n    function url() public view returns (string) {\n        return infoUrl;\n    }\n\n    /**\n        @notice Sets the time window of the validity of the signed rates.\n        \n        @param time Duration of the window\n\n        @return true is the time was set correctly\n    */\n    function setExpirationTime(uint256 time) public onlyOwner returns (bool) {\n        expiration = time;\n        return true;\n    }\n\n    /**\n        @notice Sets the URL where the oracleData can be retrieved\n\n        @param _url The URL\n\n        @return true if it was set correctly\n    */\n    function setUrl(string _url) public onlyOwner returns (bool) {\n        infoUrl = _url;\n        return true;\n    }\n\n    /**\n        @notice Sets the address of another contract to handle the requests of this contract,\n            it can be used to deprecate this Oracle\n\n        @dev The fallback is only used if is not address(0)\n\n        @param _fallback The address of the contract\n\n        @return true if it was set correctly\n    */\n    function setFallback(address _fallback) public onlyOwner returns (bool) {\n        fallback = _fallback;\n        return true;\n    }\n\n    /**\n        @notice Reads a bytes32 word of a bytes array\n\n        @param data The bytes array\n        @param index The index of the word, in chunks of 32 bytes\n\n        @return o The bytes32 word readed, or 0x0 if index out of bounds\n    */\n    function readBytes32(bytes data, uint256 index) internal pure returns (bytes32 o) {\n        if(data.length / 32 > index) {\n            assembly {\n                o := mload(add(data, add(32, mul(32, index))))\n            }\n        }\n    }\n\n    /**\n        @notice Executes a transaction from this contract\n\n        @dev It can be used to retrieve lost tokens or ETH\n\n        @param to Address to call\n        @param value Ethers to send\n        @param data Data for the call\n\n        @return true If the call didn't throw an exception\n    */\n    function sendTransaction(address to, uint256 value, bytes data) public onlyOwner returns (bool) {\n        return to.call.value(value)(data);\n    }\n\n\n    /**\n        @dev Retrieves the convertion rate of a given currency, the information of the rate is carried over the \n        data field. If there is a newer rate on the cache, that rate is delivered and the data field is ignored.\n\n        If the data contains a more recent rate than the cache, the cache is updated.\n\n        @param currency Hash of the currency\n        @param data Data with the rate signed by a delegate\n\n        @return the rate and decimals of the currency convertion\n    */\n    function getRate(bytes32 currency, bytes data) public returns (uint256, uint256) {\n        if (fallback != address(0)) {\n            return Oracle(fallback).getRate(currency, data);\n        }\n\n        uint256 timestamp = uint256(readBytes32(data, INDEX_TIMESTAMP));\n        require(timestamp <= block.timestamp);\n\n        uint256 expirationTime = block.timestamp - expiration;\n\n        if (cache[currency].timestamp >= timestamp && cache[currency].timestamp >= expirationTime) {\n            return (cache[currency].rate, cache[currency].decimals);\n        } else {\n            require(timestamp >= expirationTime);\n            uint256 rate = uint256(readBytes32(data, INDEX_RATE));\n            uint256 decimals = uint256(readBytes32(data, INDEX_DECIMALS));\n            uint8 v = uint8(readBytes32(data, INDEX_V));\n            bytes32 r = readBytes32(data, INDEX_R);\n            bytes32 s = readBytes32(data, INDEX_S);\n            \n            bytes32 _hash = keccak256(this, currency, rate, decimals, timestamp);\n            address signer = ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", _hash),v,r,s);\n\n            require(isDelegate(signer));\n\n            cache[currency] = RateCache(timestamp, rate, decimals);\n\n            return (rate, decimals);\n        }\n    }\n}",
        "debug": "calldata_RipioOracle_4 + calldata_RipioOracle_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_RipioOracle_0: 0x252498a200000000000000000000000000000000000000000000000000000000\ncalldatasize_RipioOracle: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setUrl(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x22222c1944efcc38ca46489f96c3a372c4db74e6.sol",
        "function": "setUrl(string)",
        "lineno": 168,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}