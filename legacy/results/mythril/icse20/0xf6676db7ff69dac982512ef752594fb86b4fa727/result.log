{"error": null, "issues": [{"address": 1043, "code": "factoryId", "debug": "", "description": "Function buyPremiumFactory(uint256) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "buyPremiumFactory(uint256)", "lineno": 79, "title": "Use of tx.origin", "type": "Warning"}, {"address": 1596, "code": "   if (msg.value > PREMIUM_FACTORY_PRI", "debug": "", "description": "In the function `buyPremiumFactory(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "buyPremiumFactory(uint256)", "lineno": 88, "title": "Dependence on predictable environment variable", "type": "Warning"}, {"address": 1596, "code": "   if (msg.value > PREMIUM_FACTORY_PRI", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1693\n", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "buyPremiumFactory(uint256)", "lineno": 88, "title": "Multiple Calls", "type": "Information"}, {"address": 2059, "code": "      // Refund extra sent\n        i", "debug": "", "description": "In the function `buySupporterPack()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "buySupporterPack()", "lineno": 52, "title": "Dependence on predictable environment variable", "type": "Warning"}, {"address": 2059, "code": "      // Refund extra sent\n        i", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2156\n", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "buySupporterPack()", "lineno": 52, "title": "Multiple Calls", "type": "Information"}, {"address": 2206, "code": "- factoryIdStart;\n        add", "debug": "storage_4: 0x0\nstorage_3: 0x1\ncalldata_WWGPreLaunch_0: 0x8e42799200000000000000000000000000000000000000000000000000000000\ncalldatasize_WWGPreLaunch: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `getFactoryOwners()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "getFactoryOwners()", "lineno": 122, "title": "Integer Underflow", "type": "Warning"}, {"address": 2226, "code": "Id = factoryIdSt", "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncalldata_WWGPreLaunch_0: 0x8e42799200000000000000000000000000000000000000000000000000000000\ncalldatasize_WWGPreLaunch: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getFactoryOwners()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "getFactoryOwners()", "lineno": 125, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2227, "code": "Id = factoryIdStart;\n        for ", "debug": "storage_4: 0x58030001fffffffff9800000000000000000000000000000079c020600007fff\nstorage_3: 0x5803000248070042018000000000000000000000000000000800020600020000\ncalldata_WWGPreLaunch_0: 0x8e42799200000000000000000000000000000000000000000000000000000000\ncalldatasize_WWGPreLaunch: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `getFactoryOwners()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "getFactoryOwners()", "lineno": 125, "title": "Integer Underflow", "type": "Warning"}, {"address": 2499, "code": "re(validC", "debug": "", "description": "Function buyCryptoClan(uint256) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "buyCryptoClan(uint256)", "lineno": 63, "title": "Use of tx.origin", "type": "Warning"}, {"address": 2793, "code": "r(CRYPTO_CLAN_PRICE);\n        \n        /", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "buyCryptoClan(uint256)", "lineno": 66, "title": "Message call to external contract", "type": "Informational"}, {"address": 2793, "code": "r(CRYPTO_CLAN_PRICE);\n        \n        /", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2904\n", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "buyCryptoClan(uint256)", "lineno": 66, "title": "Multiple Calls", "type": "Information"}, {"address": 2904, "code": "tra sent\n        if (msg.value > C", "debug": "", "description": "In the function `buyCryptoClan(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "buyCryptoClan(uint256)", "lineno": 68, "title": "Dependence on predictable environment variable", "type": "Warning"}, {"address": 3046, "code": "nIdEnd - clanIdStart;\n ", "debug": "storage_2: 0x0\nstorage_1: 0x1\ncalldata_WWGPreLaunch_0: 0xc092f7bf00000000000000000000000000000000000000000000000000000000\ncalldatasize_WWGPreLaunch: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `getClanOwners()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "getClanOwners()", "lineno": 106, "title": "Integer Underflow", "type": "Warning"}, {"address": 3066, "code": "clanId = clan", "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncalldata_WWGPreLaunch_0: 0xc092f7bf00000000000000000000000000000000000000000000000000000000\ncalldatasize_WWGPreLaunch: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getClanOwners()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "getClanOwners()", "lineno": 109, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3067, "code": "clanId = clanIdStart;\n     ", "debug": "storage_2: 0x58030001fffffffff9800000000000000000000000000000079c020600007fff\nstorage_1: 0x5803000248070042018000000000000000000000000000000800020600020000\ncalldata_WWGPreLaunch_0: 0xc092f7bf00000000000000000000000000000000000000000000000000000000\ncalldatasize_WWGPreLaunch: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `getClanOwners()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "getClanOwners()", "lineno": 109, "title": "Integer Underflow", "type": "Warning"}, {"address": 3285, "code": "n getFactoryOwners() public", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "getClanOwners()", "lineno": 117, "title": "Message call to external contract", "type": "Informational"}, {"address": 3285, "code": "n getFactoryOwners() public", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3285\n", "filename": "/unique_chucks/10/0xf6676db7ff69dac982512ef752594fb86b4fa727.sol", "function": "getClanOwners()", "lineno": 117, "title": "Multiple Calls", "type": "Information"}], "success": true}