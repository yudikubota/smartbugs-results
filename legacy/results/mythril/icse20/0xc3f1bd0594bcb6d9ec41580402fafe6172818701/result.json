{
  "contract": "0xc3f1bd0594bcb6d9ec41580402fafe6172818701",
  "tool": "mythril",
  "start": 1563591078.3435152,
  "end": 1563591224.855385,
  "duration": 146.51186990737915,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 680,
        "code": "(_days[i] > 0);\n      require(_prices[i] > 0);\n      app.prices.push(Pricing({\n        day : _days[i],\n        price : _prices[i]\n        }));\n    }\n  }\n\n  /// @dev Set fee percent for Carboneum team.\n  function setFee(uint _fee) external onlyOwner {\n    fee = _fee;\n  }\n\n  function getExpiration(uint256 _appId, uint256 _userId) public view returns (uint256) {\n    Application storage app = applications[_appId];\n    ret",
        "debug": "calldata_Subscription_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Subscription_0: 0xa243b6c100000000000000000000000000000000000000000000000000000000\ncalldatasize_Subscription: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setPrice(uint256,uint256[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xc3f1bd0594bcb6d9ec41580402fafe6172818701.sol",
        "function": "setPrice(uint256,uint256[],uint256[])",
        "lineno": 263,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 686,
        "code": "(_days[i] > 0);\n      require(_prices[i] > 0);\n      app.prices.push(Pricing({\n        day : _days[i],\n        price : _prices[i]\n        }));\n    }\n  }\n\n  /// @dev Set fee percent for Carboneum team.\n  function setFee(uint _fee) external onlyOwner {\n    fee = _fee;\n  }\n\n  function getExpiration(uint256 _appId, uint256 _userId) public view returns (uint256) {\n    Application storage app = applications[_appId];\n    ret",
        "debug": "calldata_Subscription_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_Subscription_0: 0xa243b6c100000000000000000000000000000000000000000000000000000000\ncalldatasize_Subscription: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setPrice(uint256,uint256[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xc3f1bd0594bcb6d9ec41580402fafe6172818701.sol",
        "function": "setPrice(uint256,uint256[],uint256[])",
        "lineno": 263,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 704,
        "code": "(_days[i] > 0);\n      require(_prices[i] > 0);\n      app.prices.push(Pricing({\n        day : _days[i],\n        price : _prices[i]\n        }));\n    }\n  }\n\n  /// @dev Set fee percent for Carboneum team.\n  function setFee(uint _fee) external onlyOwner {\n    fee = _fee;\n  }\n\n  function getExpiration(uint256 _appId, uint256 _userId) public view returns (uint256) {\n    Application storage app = applications[_appId];\n    ret",
        "debug": "calldata_Subscription_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Subscription_0: 0xa243b6c100000000000000000000000000000000000000000000000000000000\ncalldatasize_Subscription: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setPrice(uint256,uint256[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xc3f1bd0594bcb6d9ec41580402fafe6172818701.sol",
        "function": "setPrice(uint256,uint256[],uint256[])",
        "lineno": 263,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 710,
        "code": "(_days[i] > 0);\n      require(_prices[i] > 0);\n      app.prices.push(Pricing({\n        day : _days[i],\n        price : _prices[i]\n        }));\n    }\n  }\n\n  /// @dev Set fee percent for Carboneum team.\n  function setFee(uint _fee) external onlyOwner {\n    fee = _fee;\n  }\n\n  function getExpiration(uint256 _appId, uint256 _userId) public view returns (uint256) {\n    Application storage app = applications[_appId];\n    ret",
        "debug": "calldata_Subscription_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_Subscription_0: 0xa243b6c100000000000000000000000000000000000000000000000000000000\ncalldatasize_Subscription: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setPrice(uint256,uint256[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xc3f1bd0594bcb6d9ec41580402fafe6172818701.sol",
        "function": "setPrice(uint256,uint256[],uint256[])",
        "lineno": 263,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2714,
        "code": "ion(uint25",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_5 + keccac_calldata_Subscription_4: 0x68da2e606355ba785a0419b1a048aa1eb56fc819f0a700000000000000000000\nkeccac_5_+_keccac_calldata_Subscription_4: 0x7f13ac3a479574a0300036e28081c0042ac6802020dc1ea1144e540734368802\ncalldata_Subscription_0 + 36 + calldata_Subscription_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Subscription_4 + calldata_Subscription_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nstorage_3 + keccac_calldata_Subscription_4: 0x0\ncalldata_Subscription_0: 0xa243b6c100000000000000000000000000000000000000000000000000000000\ncalldatasize_Subscription: 0x4\ncalldata_Subscription_4 + calldata_Subscription_32 + 36: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0xc3f1bd0594bcb6d9ec41580402fafe6172818701.sol",
        "function": "setPrice(uint256,uint256[],uint256[])",
        "lineno": 277,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3237,
        "code": ";\n\n// File: zeppel",
        "debug": "storage_5 + keccac_storage_5_+_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x8dc98438bf765037be8540000000000000000000000000000000000000000000\ncalldata_Subscription_32 + 36: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Subscription_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Subscription_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Subscription_0: 0xdfef58a600000000000000000000000000000000000000000000000000000000\ncalldatasize_Subscription: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `registration(bytes32,uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xc3f1bd0594bcb6d9ec41580402fafe6172818701.sol",
        "function": "registration(bytes32,uint256,address)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3962,
        "code": " * c ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Subscription_32 + 36: 0xfffffffffbffffffffffffffe000000000000000000000000000000000000000\nstorage_5 + keccac_calldata_Subscription_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Subscription_0: 0x7462beec00000000000000000000000000000000000000000000000000000000\ncalldatasize_Subscription: 0x4\nstorage_0 + keccac_5_+_keccac_calldata_Subscription_4: 0x0\ncalldata_Subscription_4: 0x0\nstorage_0 + keccac_calldata_Subscription_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0xc3f1bd0594bcb6d9ec41580402fafe6172818701.sol",
        "function": "renewSubscriptionByDays(uint256,uint256,uint256)",
        "lineno": 29,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4041,
        "code": "\n}\n\n/",
        "debug": "storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Subscription_32 + 36: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Subscription_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Subscription_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Subscription_0: 0xdfef58a600000000000000000000000000000000000000000000000000000000\ncalldatasize_Subscription: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `registration(bytes32,uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xc3f1bd0594bcb6d9ec41580402fafe6172818701.sol",
        "function": "registration(bytes32,uint256,address)",
        "lineno": 48,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4054,
        "code": " zeppelin-soli",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Subscription_32 + 36: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Subscription_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Subscription_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Subscription_0: 0xdfef58a600000000000000000000000000000000000000000000000000000000\ncalldatasize_Subscription: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0xc3f1bd0594bcb6d9ec41580402fafe6172818701.sol",
        "function": "registration(bytes32,uint256,address)",
        "lineno": 51,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4513,
        "code": "v The token being use (C8)\n  ERC20 public token;\n\n  /// @dev Address where fee are collected\n  address public wallet;\n\n  /// @dev Cost per day of membership for C8 token\n  uint256 public subscriptionRate;\n\n  uint public fee;\n\n  uint256 lastAppId;\n\n  struct Pricing {\n    uint256 day;\n    uint256 price;\n  }\n\n  struct Application {\n    /// @dev Application Id.\n    uint256 appId;\n\n    /// @dev Application name.\n    bytes32 appName;\n\n    /// @dev Beneficiary address.\n    address beneficiary;\n\n    /// @dev Owner address.\n    address owner;\n\n    /// @dev Timestamp of when Membership expires UserId=>timestamp of expire.\n    mapping(uint256 => uint256) subscriptionExpiration;\n\n    Pricing[] prices;\n  }\n\n  mapping(uint256 => Application) public applications;\n\n  /**\n   * Event for subscription purchase logging\n   * @param purchaser who paid for the subscription\n   * @param userId user id who will benefit from purchase\n   * @param day day of subscription purchased\n   * @param amount amount of subscription purchased in wei\n   * @param expiration expiration of user subscription.\n   */\n  event SubscriptionPurchase(\n    address indexed purchaser,\n    uint256 indexed _appId,\n    uint256 indexed userId,\n    uint256 day,\n    uint256 amount,\n    uint256 expiration\n  );\n\n  event Registration(\n    address indexed creator,\n    uint256 _appId,\n    bytes32 _appName,\n    uint256 _price,\n    address _beneficiary\n  );\n\n  function Subscription(\n    uint _fee,\n    address _fundWallet,\n    ERC20 _token) public\n  {\n    require(_token != address(0));\n    require(_fundWallet != address(0));\n    require(_fee > 0);\n    token = _token;\n    wallet = _fundWallet;\n    fee = _fee;\n    lastAppId = 0;\n  }\n\n  function renewSubscriptionByDays(uint256 _appId, uint256 _userId, uint _day) external {\n    Application storage app = applications[_appId];\n    require(app.appId == _appId);\n    require(_day >= 1);\n    uint256 amount = getPrice(_appId, _day);\n    require(amount > 0);\n\n    uint256 currentExpiration = app.subscriptionExpiration[_userId];\n    // If their membership already expired...\n    if (currentExpiration < now) {\n      // ...use `now` as the starting point of their new subscription\n      currentExpiration = now;\n    }\n    uint256 newExpiration = currentExpiration.add(_day.mul(1 days));\n    app.subscriptionExpiration[_userId] = newExpiration;\n    uint256 txFee = processFee(amount);\n    uint256 toAppOwner = amount.sub(txFee);\n    require(token.transferFrom(msg.sender, app.beneficiary, toAppOwner));\n    emit SubscriptionPurchase(\n      msg.sender,\n      _appId,\n      _userId,\n      _day,\n      amount,\n      newExpiration);\n  }\n\n  function registration(\n    bytes32 _appName,\n    uint256 _price,\n    address _beneficiary)\n  external\n  {\n    require(_appName != \"\");\n    require(_price > 0);\n    require(_beneficiary != address(0));\n    lastAppId = lastAppId.add(1);\n    Application storage app = applications[lastAppId];\n    app.appId = lastAppId;\n    app.appName = _appName;\n    app.beneficiary = _beneficiary;\n    app.owner = msg.sender;\n    app.prices.push(Pricing({\n      day : 1,\n      price : _price\n      }));\n    emit Registration(\n      msg.sender,\n      lastAppId,\n      _appName,\n      _price,\n      _beneficiary);\n  }\n\n  function setPrice(uint256 _appId, uint256[] _days, uint256[] _prices) external {\n    Application storage app = applications[_appId];\n    require(app.owner == msg.sender);\n    app.prices.length = 0;\n    for (uint i = 0; i < _days.length; i++) {\n      require(_days[i] > 0);\n      require(_prices[i] > 0);\n      app.prices.push(Pricing({\n        day : _days[i],\n        price : _prices[i]\n        }));\n    }\n  }\n\n  /// @dev Set fee percent for Carboneum team.\n  function setFee(uint _fee) external onlyOwner {\n    fee = _fee;\n  }\n\n  function getExpiration(uint256 _appId, uint256 _userId) public view returns (uint256) {\n    Application storage app = applications[_appId];\n    return app.subscriptionExpiration[_userId];\n  }\n\n  function getPrice(uint256 _appId, uint256 _day) public view returns (uint256) {\n    Application storage app = applications[_appId];\n    uint256 amount = UINT256_MAX;\n    for (uint i = 0; i < app.prices.length; i++) {\n      if (_day == app.prices[i].day) {\n        amount = app.prices[i].price;\n        return amount;\n      } else if (_day > app.prices[i].day) {\n        uint256 rate = app.prices[i].price.div(app.prices[i].day);\n        uint256 amountInPrice = _day.mul(rate);\n        if (amountInPrice < amount) {\n          amount = amountInPrice;\n        }\n      }\n    }\n    if (amount == UINT256_MAX) {\n      amount = 0;\n    }\n    return amount;\n  }\n\n  function processFee(uint256 _weiAmount) internal returns (uint256) {\n    uint256 txFee = _weiAmount.mul(fee).div(100);\n    require(token.transferFrom(msg.sender, wallet, txFee));\n    return txFee;\n  }\n}",
        "debug": "storage_5 + keccac_calldata_Subscription_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_3 + keccac_calldata_Subscription_4: 0x0\ncalldata_Subscription_0: 0xa243b6c100000000000000000000000000000000000000000000000000000000\ncalldatasize_Subscription: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setPrice(uint256,uint256[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xc3f1bd0594bcb6d9ec41580402fafe6172818701.sol",
        "function": "setPrice(uint256,uint256[],uint256[])",
        "lineno": 126,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4529,
        "code": "v The token being use (C8)\n  ERC20 public token;\n\n  /// @dev Address where fee are collected\n  address public wallet;\n\n  /// @dev Cost per day of membership for C8 token\n  uint256 public subscriptionRate;\n\n  uint public fee;\n\n  uint256 lastAppId;\n\n  struct Pricing {\n    uint256 day;\n    uint256 price;\n  }\n\n  struct Application {\n    /// @dev Application Id.\n    uint256 appId;\n\n    /// @dev Application name.\n    bytes32 appName;\n\n    /// @dev Beneficiary address.\n    address beneficiary;\n\n    /// @dev Owner address.\n    address owner;\n\n    /// @dev Timestamp of when Membership expires UserId=>timestamp of expire.\n    mapping(uint256 => uint256) subscriptionExpiration;\n\n    Pricing[] prices;\n  }\n\n  mapping(uint256 => Application) public applications;\n\n  /**\n   * Event for subscription purchase logging\n   * @param purchaser who paid for the subscription\n   * @param userId user id who will benefit from purchase\n   * @param day day of subscription purchased\n   * @param amount amount of subscription purchased in wei\n   * @param expiration expiration of user subscription.\n   */\n  event SubscriptionPurchase(\n    address indexed purchaser,\n    uint256 indexed _appId,\n    uint256 indexed userId,\n    uint256 day,\n    uint256 amount,\n    uint256 expiration\n  );\n\n  event Registration(\n    address indexed creator,\n    uint256 _appId,\n    bytes32 _appName,\n    uint256 _price,\n    address _beneficiary\n  );\n\n  function Subscription(\n    uint _fee,\n    address _fundWallet,\n    ERC20 _token) public\n  {\n    require(_token != address(0));\n    require(_fundWallet != address(0));\n    require(_fee > 0);\n    token = _token;\n    wallet = _fundWallet;\n    fee = _fee;\n    lastAppId = 0;\n  }\n\n  function renewSubscriptionByDays(uint256 _appId, uint256 _userId, uint _day) external {\n    Application storage app = applications[_appId];\n    require(app.appId == _appId);\n    require(_day >= 1);\n    uint256 amount = getPrice(_appId, _day);\n    require(amount > 0);\n\n    uint256 currentExpiration = app.subscriptionExpiration[_userId];\n    // If their membership already expired...\n    if (currentExpiration < now) {\n      // ...use `now` as the starting point of their new subscription\n      currentExpiration = now;\n    }\n    uint256 newExpiration = currentExpiration.add(_day.mul(1 days));\n    app.subscriptionExpiration[_userId] = newExpiration;\n    uint256 txFee = processFee(amount);\n    uint256 toAppOwner = amount.sub(txFee);\n    require(token.transferFrom(msg.sender, app.beneficiary, toAppOwner));\n    emit SubscriptionPurchase(\n      msg.sender,\n      _appId,\n      _userId,\n      _day,\n      amount,\n      newExpiration);\n  }\n\n  function registration(\n    bytes32 _appName,\n    uint256 _price,\n    address _beneficiary)\n  external\n  {\n    require(_appName != \"\");\n    require(_price > 0);\n    require(_beneficiary != address(0));\n    lastAppId = lastAppId.add(1);\n    Application storage app = applications[lastAppId];\n    app.appId = lastAppId;\n    app.appName = _appName;\n    app.beneficiary = _beneficiary;\n    app.owner = msg.sender;\n    app.prices.push(Pricing({\n      day : 1,\n      price : _price\n      }));\n    emit Registration(\n      msg.sender,\n      lastAppId,\n      _appName,\n      _price,\n      _beneficiary);\n  }\n\n  function setPrice(uint256 _appId, uint256[] _days, uint256[] _prices) external {\n    Application storage app = applications[_appId];\n    require(app.owner == msg.sender);\n    app.prices.length = 0;\n    for (uint i = 0; i < _days.length; i++) {\n      require(_days[i] > 0);\n      require(_prices[i] > 0);\n      app.prices.push(Pricing({\n        day : _days[i],\n        price : _prices[i]\n        }));\n    }\n  }\n\n  /// @dev Set fee percent for Carboneum team.\n  function setFee(uint _fee) external onlyOwner {\n    fee = _fee;\n  }\n\n  function getExpiration(uint256 _appId, uint256 _userId) public view returns (uint256) {\n    Application storage app = applications[_appId];\n    return app.subscriptionExpiration[_userId];\n  }\n\n  function getPrice(uint256 _appId, uint256 _day) public view returns (uint256) {\n    Application storage app = applications[_appId];\n    uint256 amount = UINT256_MAX;\n    for (uint i = 0; i < app.prices.length; i++) {\n      if (_day == app.prices[i].day) {\n        amount = app.prices[i].price;\n        return amount;\n      } else if (_day > app.prices[i].day) {\n        uint256 rate = app.prices[i].price.div(app.prices[i].day);\n        uint256 amountInPrice = _day.mul(rate);\n        if (amountInPrice < amount) {\n          amount = amountInPrice;\n        }\n      }\n    }\n    if (amount == UINT256_MAX) {\n      amount = 0;\n    }\n    return amount;\n  }\n\n  function processFee(uint256 _weiAmount) internal returns (uint256) {\n    uint256 txFee = _weiAmount.mul(fee).div(100);\n    require(token.transferFrom(msg.sender, wallet, txFee));\n    return txFee;\n  }\n}",
        "debug": "storage_5 + keccac_calldata_Subscription_4: 0x5dc43f1a483401c0aa3ff7f2d3df3030088017691be5f07dbafd117c960f2c4b\nkeccac_5_+_keccac_calldata_Subscription_4: 0x521df086832ac8e2687fcff786313c7f9dc4a66107ec36d807e5aaa48b97d73c\ncaller: 0x0\nstorage_3 + keccac_calldata_Subscription_4: 0x0\ncalldata_Subscription_0: 0xa243b6c100000000000000000000000000000000000000000000000000000000\ncalldatasize_Subscription: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setPrice(uint256,uint256[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xc3f1bd0594bcb6d9ec41580402fafe6172818701.sol",
        "function": "setPrice(uint256,uint256[],uint256[])",
        "lineno": 126,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}