{
  "contract": "0x358d0e04f512c4d5f43b84f7d2b18923a51aa861",
  "tool": "mythril",
  "start": 1563658235.5183833,
  "end": 1563658409.8879712,
  "duration": 174.3695878982544,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 794,
        "code": "    = new uint[](pixels.length);\n        uint[]    memory price        = new uint[](pixels.length);\n        address[] memory owner        = new address[](pixels.length);\n\n        for (uint i = 0; i < pixels.length; i++) {\n            Pixel storage pixel = pixels[i];\n            \n            id[i]           = i;\n            price[i]        = pixel.price;\n            owner[i]        = pixelToOwner[i];\n        }\n\n        return (id, price, owner);\n    }\n\n    function _checkPixelIdExists(uint id) private constant returns(bool) {\n        if(id < pixels.length) return true;\n",
        "debug": "mem_128 + 32 + 32*storage_6: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_PixelFactory_0: 0x70d72d6300000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelFactory: 0x4\nstorage_6: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getAllPixels()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0x358d0e04f512c4d5f43b84f7d2b18923a51aa861.sol",
        "function": "getAllPixels()",
        "lineno": 109,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 860,
        "code": "    = new uint[](pixels.length);\n        uint[]    memory price        = new uint[](pixels.length);\n        address[] memory owner        = new address[](pixels.length);\n\n        for (uint i = 0; i < pixels.length; i++) {\n            Pixel storage pixel = pixels[i];\n            \n            id[i]           = i;\n            price[i]        = pixel.price;\n            owner[i]        = pixelToOwner[i];\n        }\n\n        return (id, price, owner);\n    }\n\n    function _checkPixelIdExists(uint id) private constant returns(bool) {\n        if(id < pixels.length) return true;\n",
        "debug": "mem_160 + 32*storage_6 + 32 + 32*storage_6: 0x800000000000000000000000000000000000000000000000000000000000000\nmem_128 + 32 + 32*storage_6: 0x1\ncalldata_PixelFactory_0: 0x70d72d6300000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelFactory: 0x4\nstorage_6: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getAllPixels()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0x358d0e04f512c4d5f43b84f7d2b18923a51aa861.sol",
        "function": "getAllPixels()",
        "lineno": 109,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1224,
        "code": "name) public {\n        ownerToUsername[msg.sender] = username;\n        emit Username(username);\n    }\n    \n    function getUsername() pu",
        "debug": "calldata_PixelFactory_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_PixelFactory_0: 0xed59313a00000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setUsername(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0x358d0e04f512c4d5f43b84f7d2b18923a51aa861.sol",
        "function": "setUsername(string)",
        "lineno": 33,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1636,
        "code": ";\n\ncontract PixelF",
        "debug": "storage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PixelFactory_4: 0x180\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PixelFactory_0: 0x45680e0900000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createPixels(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0x358d0e04f512c4d5f43b84f7d2b18923a51aa861.sol",
        "function": "createPixels(uint256)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2497,
        "code": "owner);\n",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PixelFactory_0: 0x70d72d6300000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelFactory: 0x4\nmem_128 + 32 + 32*storage_6: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/25/0x358d0e04f512c4d5f43b84f7d2b18923a51aa861.sol",
        "function": "getAllPixels()",
        "lineno": 121,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2577,
        "code": "sts(uint",
        "debug": "The exception is triggered under the following conditions:\n\nmem_128 + 32 + 32*storage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PixelFactory_0: 0x70d72d6300000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelFactory: 0x4\nmem_160 + 32*storage_6 + 32 + 32*storage_6: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/25/0x358d0e04f512c4d5f43b84f7d2b18923a51aa861.sol",
        "function": "getAllPixels()",
        "lineno": 124,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2684,
        "code": "    mapping(uint => a",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_PixelFactory_4: 0x0\nstorage_6: 0x0\ncalldata_PixelFactory_0: 0x8da7f23200000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/25/0x358d0e04f512c4d5f43b84f7d2b18923a51aa861.sol",
        "function": "_function_0x8da7f232",
        "lineno": 27,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3247,
        "code": "Commission(",
        "debug": "timestamp: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeff00\nstorage_2: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PixelFactory_0: 0xd65ab5f200000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `startGame()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0x358d0e04f512c4d5f43b84f7d2b18923a51aa861.sol",
        "function": "startGame()",
        "lineno": 50,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4411,
        "code": "ntract PixelFactory {\n    address public contractOwner;\n    uint    public startPrice = 0.1 ether;\n    bool    public isInGame = false;\n    uint    public finishTime;\n    \n    uint    public lastWinnerId;\n    address public lastWinnerAddress;\n\n    constructor() public {\n        contractOwner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    struct Pixel {\n        uint price;\n    }\n\n    Pixel[] public pixels;\n\n    mapping(uint => address) pixelToOwner;\n    mapping(address => string) ownerToUsername;\n\n    /** ACCOUNT FUNCTIONS **/\n    event Username(string username);\n    \n    function setUsername(string username) public {\n        ownerToUsername[msg.sender] = username;\n        emit Username(username);\n    }\n    \n    function getUsername() public view returns(string) {\n        return ownerToUsername[msg.sender];\n    }\n\n    /** GAME FUNCTIONS **/\n    // this function is triggered manually by owner after all pixels sold\n    function startGame() public onlyOwner {\n        require(isInGame == false);\n        isInGame = true;\n        finishTime = 86400 + now;\n    }\n    \n    function sendOwnerCommission() public payable onlyOwner {\n        contractOwner.transfer(msg.value);\n    } \n     \n    function _sendWinnerJackpot(address winner) private {\n        uint jackpot = 10 ether;\n        winner.transfer(jackpot);\n    } \n    \n    // this function is called to calculate countdown on the front side\n    function getFinishTime() public view returns(uint) {\n        return finishTime;\n    }\n    \n    function getLastWinner() public view returns(uint id, address addr) {\n        id = lastWinnerId;\n        addr = lastWinnerAddress;\n    }\n    \n    function _rand(uint min, uint max) private view returns(uint) {\n        return uint(keccak256(abi.encodePacked(now)))%(min+max)-min;\n    }\n    \n    // this function is triggered manually by owner to finish game after countdown stops\n    function finisGame() public onlyOwner {\n        require(isInGame == true);\n        isInGame = false;\n        finishTime = 0;\n\n        // get winner id\n        uint winnerId = _rand(0, 399);\n        lastWinnerId = winnerId;\n        \n        // get winner address\n        address winnerAddress = pixelToOwner[winnerId];\n        lastWinnerAddress = winnerAddress;\n        \n        // transfer jackpot amount to winner\n        _sendWinnerJackpot(winnerAddress);\n        \n        // reset pixels\n        delete pixels;\n    }\n    \n    /** PIXEL FUNCTIONS **/\n    function createPixels(uint amount) public onlyOwner {\n        // it can be max 400 pixels\n        require(pixels.length + amount <= 400);\n        \n        // P.S. creating 400 pixels in one time is costing too much gas that's why we are using amount\n        \n        // system is creating pixels\n        for(uint i=0; i<amount; i++) {\n            uint id = pixels.push(Pixel(startPrice)) - 1;\n            pixelToOwner[id] = msg.sender;\n        }\n    }\n\n    function getAllPixels() public view returns(uint[], uint[], address[]) {\n        uint[]    memory id           = new uint[](pixels.length);\n        uint[]    memory price        = new uint[](pixels.length);\n        address[] memory owner        = new address[](pixels.length);\n\n        for (uint i = 0; i < pixels.length; i++) {\n            Pixel storage pixel = pixels[i];\n            \n            id[i]           = i;\n            price[i]        = pixel.price;\n            owner[i]        = pixelToOwner[i];\n        }\n\n        return (id, price, owner);\n    }\n\n    function _checkPixelIdExists(uint id) private constant returns(bool) {\n        if(id < pixels.length) return true;\n        return false;\n    }\n\n    function _transfer(address to, uint id) private {\n        pixelToOwner[id] = to;\n    }\n\n    function buy(uint id) external payable {\n        // checking pixel id exists before buying\n        require(_checkPixelIdExists(id) == true);\n\n        // preparing pixel data\n        Pixel storage pixel = pixels[id];\n        uint currentPrice = pixel.price;\n        address currentOwner = pixelToOwner[id];\n        address newOwner = msg.sender;\n        \n        // cheking buyer is sending correct price for pixel\n        require(currentPrice == msg.value);\n        \n        // cheking buyer is not at the same time owner of pixel \n        require(currentOwner != msg.sender);\n\n        // calculating new price of pixel\n        uint newPrice = currentPrice * 2;\n        pixel.price = newPrice;\n\n        // transfering money to current owner if current is not contractOwner, otherweise pot is collected in contract address\n        if(currentOwner != contractOwner) {\n            currentOwner.transfer(msg.value);\n        }\n        \n        // transfering pixel to new owner\n        _transfer(newOwner, id);\n    }\n}",
        "debug": "calldata_PixelFactory_4 + calldata_PixelFactory_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_PixelFactory_0: 0xed59313a00000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setUsername(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0x358d0e04f512c4d5f43b84f7d2b18923a51aa861.sol",
        "function": "setUsername(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4425,
        "code": "ntract PixelFactory {\n    address public contractOwner;\n    uint    public startPrice = 0.1 ether;\n    bool    public isInGame = false;\n    uint    public finishTime;\n    \n    uint    public lastWinnerId;\n    address public lastWinnerAddress;\n\n    constructor() public {\n        contractOwner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    struct Pixel {\n        uint price;\n    }\n\n    Pixel[] public pixels;\n\n    mapping(uint => address) pixelToOwner;\n    mapping(address => string) ownerToUsername;\n\n    /** ACCOUNT FUNCTIONS **/\n    event Username(string username);\n    \n    function setUsername(string username) public {\n        ownerToUsername[msg.sender] = username;\n        emit Username(username);\n    }\n    \n    function getUsername() public view returns(string) {\n        return ownerToUsername[msg.sender];\n    }\n\n    /** GAME FUNCTIONS **/\n    // this function is triggered manually by owner after all pixels sold\n    function startGame() public onlyOwner {\n        require(isInGame == false);\n        isInGame = true;\n        finishTime = 86400 + now;\n    }\n    \n    function sendOwnerCommission() public payable onlyOwner {\n        contractOwner.transfer(msg.value);\n    } \n     \n    function _sendWinnerJackpot(address winner) private {\n        uint jackpot = 10 ether;\n        winner.transfer(jackpot);\n    } \n    \n    // this function is called to calculate countdown on the front side\n    function getFinishTime() public view returns(uint) {\n        return finishTime;\n    }\n    \n    function getLastWinner() public view returns(uint id, address addr) {\n        id = lastWinnerId;\n        addr = lastWinnerAddress;\n    }\n    \n    function _rand(uint min, uint max) private view returns(uint) {\n        return uint(keccak256(abi.encodePacked(now)))%(min+max)-min;\n    }\n    \n    // this function is triggered manually by owner to finish game after countdown stops\n    function finisGame() public onlyOwner {\n        require(isInGame == true);\n        isInGame = false;\n        finishTime = 0;\n\n        // get winner id\n        uint winnerId = _rand(0, 399);\n        lastWinnerId = winnerId;\n        \n        // get winner address\n        address winnerAddress = pixelToOwner[winnerId];\n        lastWinnerAddress = winnerAddress;\n        \n        // transfer jackpot amount to winner\n        _sendWinnerJackpot(winnerAddress);\n        \n        // reset pixels\n        delete pixels;\n    }\n    \n    /** PIXEL FUNCTIONS **/\n    function createPixels(uint amount) public onlyOwner {\n        // it can be max 400 pixels\n        require(pixels.length + amount <= 400);\n        \n        // P.S. creating 400 pixels in one time is costing too much gas that's why we are using amount\n        \n        // system is creating pixels\n        for(uint i=0; i<amount; i++) {\n            uint id = pixels.push(Pixel(startPrice)) - 1;\n            pixelToOwner[id] = msg.sender;\n        }\n    }\n\n    function getAllPixels() public view returns(uint[], uint[], address[]) {\n        uint[]    memory id           = new uint[](pixels.length);\n        uint[]    memory price        = new uint[](pixels.length);\n        address[] memory owner        = new address[](pixels.length);\n\n        for (uint i = 0; i < pixels.length; i++) {\n            Pixel storage pixel = pixels[i];\n            \n            id[i]           = i;\n            price[i]        = pixel.price;\n            owner[i]        = pixelToOwner[i];\n        }\n\n        return (id, price, owner);\n    }\n\n    function _checkPixelIdExists(uint id) private constant returns(bool) {\n        if(id < pixels.length) return true;\n        return false;\n    }\n\n    function _transfer(address to, uint id) private {\n        pixelToOwner[id] = to;\n    }\n\n    function buy(uint id) external payable {\n        // checking pixel id exists before buying\n        require(_checkPixelIdExists(id) == true);\n\n        // preparing pixel data\n        Pixel storage pixel = pixels[id];\n        uint currentPrice = pixel.price;\n        address currentOwner = pixelToOwner[id];\n        address newOwner = msg.sender;\n        \n        // cheking buyer is sending correct price for pixel\n        require(currentPrice == msg.value);\n        \n        // cheking buyer is not at the same time owner of pixel \n        require(currentOwner != msg.sender);\n\n        // calculating new price of pixel\n        uint newPrice = currentPrice * 2;\n        pixel.price = newPrice;\n\n        // transfering money to current owner if current is not contractOwner, otherweise pot is collected in contract address\n        if(currentOwner != contractOwner) {\n            currentOwner.transfer(msg.value);\n        }\n        \n        // transfering pixel to new owner\n        _transfer(newOwner, id);\n    }\n}",
        "debug": "calldata_PixelFactory_4 + calldata_PixelFactory_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_PixelFactory_0: 0xed59313a00000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setUsername(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0x358d0e04f512c4d5f43b84f7d2b18923a51aa861.sol",
        "function": "setUsername(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}