{
  "contract": "0xe4ea6ee13b34faf2f4c7915f161665630a9fdadb",
  "tool": "mythril",
  "start": 1563724566.6262121,
  "end": 1563724666.2931445,
  "duration": 99.66693234443665,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1436,
        "code": "Refund);\n            }\n        }\n    }\n    \n    \n    /**\n     * Allows for the distribution of an ERC20 token to be transferred to up to 100 recipients at \n     * a time. This function only facilitates batch transfers of constant values (i.e., all recipients\n     * will receive the same amount of tokens).\n     * \n     * @param _addressOfToken The contract address of an ERC20 token.\n     * @param _recipients The list of addresses which will receive tokens. \n     * @param _value The ",
        "debug": "calldata_topscoin_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_topscoin_0: 0x528976de00000000000000000000000000000000000000000000000000000000\ncalldatasize_topscoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `issueRefunds(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/40/0xe4ea6ee13b34faf2f4c7915f161665630a9fdadb.sol",
        "function": "issueRefunds(address[])",
        "lineno": 446,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1811,
        "code": "     );\n        for(uint i = 0; i < _recipients.length; i++) {\n            if(_recipients[i] != address(0) && _values[i] > 0) {\n                token.transferFrom(msg.sender, _recipients[i], _values[i]);\n            }\n        }\n        if(tokenHasFreeTrial(_addressOfToken)) {\n            trialDrops[_addressOfToken] = trialDrops[_addressOfToken].add(_recipients.length);\n        } else {\n            updateMsgSenderBonusDrops(_recipients.length);\n        }\n        AirdropInvoked(msg.sender, _recipients.length);\n        return true;\n    }\n    \n    \n    /**\n     * Invoked internally by the airdrop functions. The purpose of thie function is to grant bonus \n     * drops to users who spend their ETH airdropping tokens, and to remove bonus drops when users \n     * no longer have ETH in their account but do have some bonus drops when airdropping tokens.\n     * \n     * @param _drops The amount of recipients which received tokens from the airdrop.\n     * */\n    function updateMsgSenderBonusDrops(uint256 _drops) internal {\n        if(_drops <= getDropsOf(msg",
        "debug": "calldata_topscoin_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_topscoin_0: 0x724ef94c00000000000000000000000000000000000000000000000000000000\ncalldatasize_topscoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `multiValueAirdrop(address,address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/40/0xe4ea6ee13b34faf2f4c7915f161665630a9fdadb.sol",
        "function": "multiValueAirdrop(address,address[],uint256[])",
        "lineno": 509,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3588,
        "code": " c;\n ",
        "debug": "calldata_topscoin_32 + 4: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_topscoin_4: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\ncalldata_topscoin_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_topscoin_0: 0x2a501a4300000000000000000000000000000000000000000000000000000000\ncalldatasize_topscoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `grantBonusDrops(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/40/0xe4ea6ee13b34faf2f4c7915f161665630a9fdadb.sol",
        "function": "grantBonusDrops(address,uint256)",
        "lineno": 48,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3601,
        "code": "ontract Ownabl",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_topscoin_32 + 4: 0xd2bd697b67b8b7eebcef8ebaf405ca6a0b728a06c347eda3d5dbebfeffbdb977\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_topscoin_4: 0xc63a21246c99b000ea0030728005ea6909080a424a47ca48059be3c0ff803205\ncalldata_topscoin_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_topscoin_0: 0x2a501a4300000000000000000000000000000000000000000000000000000000\ncalldatasize_topscoin: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/40/0xe4ea6ee13b34faf2f4c7915f161665630a9fdadb.sol",
        "function": "grantBonusDrops(address,uint256)",
        "lineno": 54,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}