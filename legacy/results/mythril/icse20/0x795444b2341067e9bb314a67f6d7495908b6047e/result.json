{
  "contract": "0x795444b2341067e9bb314a67f6d7495908b6047e",
  "tool": "mythril",
  "start": 1563638756.9011412,
  "end": 1563638774.4557762,
  "duration": 17.554635047912598,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 159,
        "code": " contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract Crowdsale is Ownable {\n    using SafeMath for uint256;\n    //",
        "debug": "calldata_Whitelist_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Whitelist_0: 0x2957d84800000000000000000000000000000000000000000000000000000000\ncalldatasize_Whitelist: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `batchWhitelistAddresses(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0x795444b2341067e9bb314a67f6d7495908b6047e.sol",
        "function": "batchWhitelistAddresses(address[])",
        "lineno": 330,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 799,
        "code": "re forwarded to a wallet\n * as they arrive.",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Whitelist_0_+_36_+_calldata_Whitelist_4: 0xff00\ncalldata_Whitelist_4 + calldata_Whitelist_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Whitelist_0: 0x2957d84800000000000000000000000000000000000000000000000000000000\ncalldatasize_Whitelist: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/28/0x795444b2341067e9bb314a67f6d7495908b6047e.sol",
        "function": "batchWhitelistAddresses(address[])",
        "lineno": 332,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}