{
  "contract": "0xcb58a0bddb9c972d1020d3f9e94c3401960a12d8",
  "tool": "mythril",
  "start": 1563547111.327007,
  "end": 1563547324.9546797,
  "duration": 213.62767267227173,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2873,
        "code": "   return targetToken != ad",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/14/0xcb58a0bddb9c972d1020d3f9e94c3401960a12d8.sol",
        "function": "canExchangeNum()",
        "lineno": 371,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2873,
        "code": "   return targetToken != ad",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function canExchangeNum(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/14/0xcb58a0bddb9c972d1020d3f9e94c3401960a12d8.sol",
        "function": "canExchangeNum()",
        "lineno": 371,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3660,
        "code": "\n    function updateTargetTok",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/14/0xcb58a0bddb9c972d1020d3f9e94c3401960a12d8.sol",
        "function": "balanceOfTarget(address)",
        "lineno": 364,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3660,
        "code": "\n    function updateTargetTok",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function balanceOfTarget(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/14/0xcb58a0bddb9c972d1020d3f9e94c3401960a12d8.sol",
        "function": "balanceOfTarget(address)",
        "lineno": 364,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 6135,
        "code": "== b);\n        ret",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8: 0x7fffffffffff80002001000000000000000000000000000000000000ff1f0100\nretval_2873: 0x8adb6e47803cdf67e629dee2bb67d38580826d2167ef37d825c156c784040\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_9: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_TokenImpl_0: 0x230d346900000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenImpl: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/14/0xcb58a0bddb9c972d1020d3f9e94c3401960a12d8.sol",
        "function": "canExchangeNum()",
        "lineno": 14,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6690,
        "code": "\n    ",
        "debug": "calldata_TokenImpl_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_3: 0x0\ncaller: 0x0\ncalldata_TokenImpl_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenImpl: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `mint(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0xcb58a0bddb9c972d1020d3f9e94c3401960a12d8.sol",
        "function": "mint(address,uint256)",
        "lineno": 32,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6703,
        "code": "c;\n    }\n}\n\nco",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nstorage_0: 0x1\ncalldata_TokenImpl_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\ncalldata_TokenImpl_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenImpl: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/14/0xcb58a0bddb9c972d1020d3f9e94c3401960a12d8.sol",
        "function": "mint(address,uint256)",
        "lineno": 33,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}