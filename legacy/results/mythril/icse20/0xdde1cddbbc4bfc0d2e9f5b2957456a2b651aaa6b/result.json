{
  "contract": "0xdde1cddbbc4bfc0d2e9f5b2957456a2b651aaa6b",
  "tool": "mythril",
  "start": 1563616075.933746,
  "end": 1563616284.4566796,
  "duration": 208.52293348312378,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 503,
        "code": "rn(i);\n    }\n\n}\n\n// File: contracts/CycleSet.sol\n\n// DEPLOYED BY JURY.ONLINE\ncontract ICO {\n    // GENERAL ICO PARAMS ------------------------------------------------------\n\n    string public name;\n\n    address public operator; // the ICO o",
        "debug": "calldata_TokenWithoutStart_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenWithoutStart_0: 0x14004ef300000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenWithoutStart: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x14004ef3`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xdde1cddbbc4bfc0d2e9f5b2957456a2b651aaa6b.sol",
        "function": "_function_0x14004ef3",
        "lineno": 228,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2272,
        "code": "-\n\n    st",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenWithoutStart_4 + calldata_TokenWithoutStart_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenWithoutStart_0: 0x14004ef300000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenWithoutStart: 0x4\nmem_128 +\n32 +\n32*\ncalldata_TokenWithoutStart_4 + calldata_TokenWithoutStart_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/24/0xdde1cddbbc4bfc0d2e9f5b2957456a2b651aaa6b.sol",
        "function": "_function_0x14004ef3",
        "lineno": 237,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5243,
        "code": "   return a - ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_TokenWithoutStart_32 + 4: 0x1\ncalldata_TokenWithoutStart_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenWithoutStart_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenWithoutStart: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/24/0xdde1cddbbc4bfc0d2e9f5b2957456a2b651aaa6b.sol",
        "function": "transfer(address,uint256)",
        "lineno": 19,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5261,
        "code": " a);\n",
        "debug": "storage_7: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_TokenWithoutStart_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenWithoutStart_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenWithoutStart: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `mint(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xdde1cddbbc4bfc0d2e9f5b2957456a2b651aaa6b.sol",
        "function": "mint(address,uint256)",
        "lineno": 24,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5274,
        "code": "urn c;\n  }\n}\n\n",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenWithoutStart_32 + 4: 0x6218000d800000000000000000000000039800002005500633e06f771baff7fc\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenWithoutStart_4: 0xbd5dfeabad0efffffffffeffffffffffd599ffefbfe6f24271e80e64322c0700\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x6218000d800000000000000000000000039800002005500633e06f771baff7fc\ncalldata_TokenWithoutStart_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenWithoutStart_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenWithoutStart: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/24/0xdde1cddbbc4bfc0d2e9f5b2957456a2b651aaa6b.sol",
        "function": "transfer(address,uint256)",
        "lineno": 25,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}