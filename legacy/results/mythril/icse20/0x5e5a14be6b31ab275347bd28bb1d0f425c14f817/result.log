{"error": null, "issues": [{"address": 3398, "code": "er; //the one who creat", "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSigWallet_4: 0x0\nstorage_3: 0x0\ncalldata_MultiSigWallet_0: 0x25e7c2700000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/30/0x5e5a14be6b31ab275347bd28bb1d0f425c14f817.sol", "function": "_function_0x025e7c27", "lineno": 42, "title": "Exception state", "type": "Informational"}, {"address": 4878, "code": ";\n    }\n\n    /// ", "debug": "storage_3: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `removeOwner(address)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/30/0x5e5a14be6b31ab275347bd28bb1d0f425c14f817.sol", "function": "removeOwner(address)", "lineno": 309, "title": "Integer Underflow", "type": "Warning"}, {"address": 4922, "code": "n owner w", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/30/0x5e5a14be6b31ab275347bd28bb1d0f425c14f817.sol", "function": "removeOwner(address)", "lineno": 312, "title": "Exception state", "type": "Informational"}, {"address": 7731, "code": ") public onlyWall", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0x0\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x7065cb4800000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/30/0x5e5a14be6b31ab275347bd28bb1d0f425c14f817.sol", "function": "addOwner(address)", "lineno": 299, "title": "Integer Overflow ", "type": "Warning"}, {"address": 15223, "code": "t constant public MAX_OWNER_COUNT = 50;\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    address owner; //the one who creates the contract, only this person can set the token\n    uint public required;\n    uint public transactionCount;\n\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n   \n    IToken public token;\n\n    struct SettingsRequest {\n        uint amount;\n        uint minimalContribution;\n        uint partContributor;\n        uint partProject;\n        uint partFounders;\n        uint blocksPerStage;\n        uint partContributorIncreasePerStage;\n        uint maxStages;\n        bool executed;\n        mapping(address => bool) confirmations;\n    }\n\n    uint settingsRequestsCount = 0;\n    mapping(uint => SettingsRequest) settingsRequests;\n\n    struct Transaction { \n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier ownerDoesNotExist(address _owner) {\n        require(!isOwner[_owner]);\n        _;\n    }\n    \n    modifier ownerExists(address _owner) {\n        require(isOwner[_owner]);\n        _;\n    }\n\n    modifier transactionExists(uint _transactionId) {\n        require(transactions[_transactionId].destination != 0);\n        _;\n    }\n\n    modifier confirmed(uint _transactionId, address _owner) {\n        require(confirmations[_transactionId][_owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint _transactionId, address _owner) {\n        require(!confirmations[_transactionId][_owner]);\n        _;\n    }\n\n    modifier notExecuted(uint _transactionId) {\n        require(!transactions[_transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n\n    modifier validRequirement(uint _ownerCount, uint _required) {\n        require(_ownerCount < MAX_OWNER_COUNT\n            && _required <= _ownerCount\n            && _required != 0\n            && _ownerCount != 0);\n        _;\n    }\n\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    constructor(address[] _owners, uint _required) public validRequirement(_owners.length, _required) {\n        for (uint i=0; i<_owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n        owner = msg.sender;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function() public payable {\n        if (msg.value > 0)\n            emit Deposit(msg.sender, msg.value);\n    }\n\n    function setToken(address _token) public onlyOwner {\n        require(token == address(0));\n        token = IToken(_token);\n    }\n\n    //---------------- TGR SETTINGS -----------\n    /// @dev Sends request to change settings\n    /// @return Transaction ID\n    function tgrSettingsChangeRequest(\n        uint amount, \n        uint minimalContribution,\n        uint partContributor,\n        uint partProject, \n        uint partFounders, \n        uint blocksPerStage, \n        uint partContributorIncreasePerStage,\n        uint maxStages\n    ) \n    public\n    ownerExists(msg.sender)\n    returns (uint _txIndex) \n    {\n        assert(amount*partContributor*partProject*blocksPerStage*partContributorIncreasePerStage*maxStages != 0); //asserting no parameter is zero except partFounders\n        assert(amount >= 1 ether);\n        _txIndex = settingsRequestsCount;\n        settingsRequests[_txIndex] = SettingsRequest({\n            amount: amount,\n            minimalContribution: minimalContribution,\n            partContributor: partContributor,\n            partProject: partProject,\n            partFounders: partFounders,\n            blocksPerStage: blocksPerStage,\n            partContributorIncreasePerStage: partContributorIncreasePerStage,\n            maxStages: maxStages,\n            executed: false\n        });\n        settingsRequestsCount++;\n        confirmSettingsChange(_txIndex);\n        return _txIndex;\n    }\n\n    /// @dev Allows an owner to confirm a change settings request.\n    /// @param _txIndex Transaction ID.\n    function confirmSettingsChange(uint _txIndex) public ownerExists(msg.sender) returns(bool success) {\n        require(settingsRequests[_txIndex].executed == false);\n        settingsRequests[_txIndex].confirmations[msg.sender] = true;\n        if(isConfirmedSettingsRequest(_txIndex)){\n            SettingsRequest storage request = settingsRequests[_txIndex];\n            request.executed = true;\n            IToken(token).executeSettingsChange(\n                request.amount, \n                request.minimalContribution, \n                request.partContributor,\n                request.partProject,\n                request.partFounders,\n                request.blocksPerStage,\n                request.partContributorIncreasePerStage,\n                request.maxStages\n            );\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function setFinishedTx() public ownerExists(msg.sender) returns(uint transactionId) {\n        transactionId = addTransaction(token, 0, hex\"ce5e6393\");\n        confirmTransaction(transactionId);\n    }\n\n    function setLiveTx() public ownerExists(msg.sender) returns(uint transactionId) {\n        transactionId = addTransaction(token, 0, hex\"29745306\");\n        confirmTransaction(transactionId);\n    }\n\n    function setFreezeTx() public ownerExists(msg.sender) returns(uint transactionId) {\n        transactionId = addTransaction(token, 0, hex\"2c8cbe40\");\n        confirmTransaction(transactionId);\n    }\n\n    function transferTx(address _to, uint _value) public ownerExists(msg.sender) returns(uint transactionId) {\n        //I rather seldom wish pain to other people, but solidity developers may be an exception.\n        bytes memory calldata = new bytes(68); \n        calldata[0] = byte(hex\"a9\");\n        calldata[1] = byte(hex\"05\");\n        calldata[2] = byte(hex\"9c\");\n        calldata[3] = byte(hex\"bb\");\n        //When I wrote these lines my eyes were bleeding.\n        bytes32 val = bytes32(_value);\n        bytes32 dest = bytes32(_to);\n        //I spent a day for this function, because my fingers made a fist.\n        for(uint j=0; j<32; j++) {\n            calldata[j+4]=dest[j];\n        }\n        //Oh, reader! I hope you forget it like a bad nightmare.\n        for(uint i=0; i<32; i++) {\n            calldata[i+36]=val[i];\n        }\n        //Stil the ghost of this code will haunt you.\n        transactionId = addTransaction(token, 0, calldata);\n        confirmTransaction(transactionId);\n        //I haven't mentioned that it's the most elegant solution for 0.4.20 compiler, which doesn't require rewriting all this shitty code.\n        //Enjoy.\n    }\n\n    function setWhitelistTx(address _whitelist) public ownerExists(msg.sender) returns(uint transactionId) {\n        bytes memory calldata = new bytes(36);\n        calldata[0] = byte(hex\"85\");\n        calldata[1] = byte(hex\"4c\");\n        calldata[2] = byte(hex\"ff\");\n        calldata[3] = byte(hex\"2f\");\n        bytes32 dest = bytes32(_whitelist);\n        for(uint j=0; j<32; j++) {\n            calldata[j+4]=dest[j];\n        }\n        transactionId = addTransaction(token, 0, calldata);\n        confirmTransaction(transactionId);\n    }\n\n    //adds this address to the whitelist\n    function whitelistTx(address _address) public ownerExists(msg.sender) returns(uint transactionId) {\n        bytes memory calldata = new bytes(36);\n        calldata[0] = byte(hex\"0a\");\n        calldata[1] = byte(hex\"3b\");\n        calldata[2] = byte(hex\"0a\");\n        calldata[3] = byte(hex\"4f\");\n        bytes32 dest = bytes32(_address);\n        for(uint j=0; j<32; j++) {\n            calldata[j+4]=dest[j];\n        }\n        transactionId = addTransaction(token.whitelist(), 0, calldata);\n        confirmTransaction(transactionId);\n\n    }\n\n//--------------------------Usual multisig functions for handling owners and transactions.\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param _owner Address of new owner.\n    function addOwner(address _owner) public onlyWallet ownerDoesNotExist(_owner) notNull(_owner) validRequirement(owners.length + 1, required) {\n        isOwner[_owner] = true;\n        owners.push(_owner);\n        emit OwnerAddition(_owner);\n    }\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param _owner Address of owner.\n    function removeOwner(address _owner) public onlyWallet ownerExists(_owner) {\n        isOwner[_owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == _owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        emit OwnerRemoval(_owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param _owner Address of owner to be replaced.\n    /// @param _newOwner Address of new owner.\n    function replaceOwner(address _owner, address _newOwner) public onlyWallet ownerExists(_owner) ownerDoesNotExist(_newOwner) {\n        for (uint i=0; i<owners.length; i++)\n            if (owners[i] == _owner) {\n                owners[i] = _newOwner;\n                break;\n            }\n        isOwner[_owner] = false;\n        isOwner[_newOwner] = true;\n        emit OwnerRemoval(_owner);\n        emit OwnerAddition(_newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required) public onlyWallet validRequirement(owners.length, _required) {\n        required = _required;\n        emit RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data) public ownerExists(msg.sender) notNull(destination) returns (uint transactionId) {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data) internal returns (uint transactionId) {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param _transactionId Transaction ID.\n    function confirmTransaction(uint _transactionId) public ownerExists(msg.sender) transactionExists(_transactionId) notConfirmed(_transactionId, msg.sender) {\n        confirmations[_transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, _transactionId);\n        executeTransaction(_transactionId);\n    }\n\n    //Will fail if calldata less than 4 bytes long. It's a feature, not a bug.\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param _transactionId Transaction ID.\n    function executeTransaction(uint _transactionId) public notExecuted(_transactionId) {\n        if (isConfirmed(_transactionId)) {\n            Transaction storage trx = transactions[_transactionId];\n            trx.executed = true;\n            //Just don't ask questions. It's needed. Believe me.\n\t\t\tbytes memory data = trx.data;\n            bytes memory calldata;\n            if (trx.data.length >= 4) {\n                bytes4 signature;\n                assembly {\n                    signature := mload(add(data, 32))\n                }\n                calldata = new bytes(trx.data.length-4);\n                for (uint i = 0; i<calldata.length; i++) {\n                    calldata[i] = trx.data[i+4];\n                }\n            }\n            else {\n                calldata = new bytes(0);\n            }\n            if (trx.destination.call.value(trx.value)(signature, calldata))\n                emit Execution(_transactionId);\n            else {\n                emit ExecutionFailure(_transactionId);\n                trx.executed = false;\n            }\n        }\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param _transactionId Transaction ID.\n    function revokeConfirmation(uint _transactionId) public ownerExists(msg.sender) confirmed(_transactionId, msg.sender) notExecuted(_transactionId) {\n        confirmations[_transactionId][msg.sender] = false;\n        emit Revocation(msg.sender, _transactionId);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param _transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint _transactionId) public view returns (bool) {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[_transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n        return false;\n    }\n\n\tfunction isConfirmedSettingsRequest(uint _transactionId) public view returns (bool) {\n\t\tuint count = 0;\n\t\tfor (uint i = 0; i < owners.length; i++) {\n\t\t\tif (settingsRequests[_transactionId].confirmations[owners[i]])\n\t\t\t\tcount += 1;\n\t\t\tif (count == required)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n    }\n\n    /// @dev Shows what settings were requested in a settings change request\n    function viewSettingsChange(uint _txIndex) public constant \n    returns (uint amount, uint minimalContribution, uint partContributor, uint partProject, uint partFounders, uint blocksPerStage, uint partContributorIncreasePerStage, uint maxStages) {\n        SettingsRequest memory request = settingsRequests[_txIndex];\n        return (\n            request.amount,\n            request.minimalContribution,\n            request.partContributor, \n            request.partProject,\n            request.partFounders,\n            request.blocksPerStage,\n            request.partContributorIncreasePerStage,\n            request.maxStages\n        );\n    }\n\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param _transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint _transactionId) public view returns (uint count) {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[_transactionId][owners[i]])\n                count += 1;\n    }\n\n    function getSettingsChangeConfirmationCount(uint _txIndex) public view returns (uint count) {\n        for (uint i=0; i<owners.length; i++)\n            if (settingsRequests[_txIndex].confirmations[owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed) public view returns (uint count) {\n        for (uint i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners() public view returns (address[]) {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param _transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint _transactionId) public view returns (address[] _confirmations) {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[_transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed) public view returns (uint[] _transactionIds) {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=from; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n\n}", "debug": "storage_3: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe2000\ncalldata_MultiSigWallet_4: 0x0\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/30/0x5e5a14be6b31ab275347bd28bb1d0f425c14f817.sol", "function": "removeOwner(address)", "lineno": 37, "title": "Integer Overflow ", "type": "Warning"}, {"address": 15225, "code": "t constant public MAX_OWNER_COUNT = 50;\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    address owner; //the one who creates the contract, only this person can set the token\n    uint public required;\n    uint public transactionCount;\n\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n   \n    IToken public token;\n\n    struct SettingsRequest {\n        uint amount;\n        uint minimalContribution;\n        uint partContributor;\n        uint partProject;\n        uint partFounders;\n        uint blocksPerStage;\n        uint partContributorIncreasePerStage;\n        uint maxStages;\n        bool executed;\n        mapping(address => bool) confirmations;\n    }\n\n    uint settingsRequestsCount = 0;\n    mapping(uint => SettingsRequest) settingsRequests;\n\n    struct Transaction { \n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier ownerDoesNotExist(address _owner) {\n        require(!isOwner[_owner]);\n        _;\n    }\n    \n    modifier ownerExists(address _owner) {\n        require(isOwner[_owner]);\n        _;\n    }\n\n    modifier transactionExists(uint _transactionId) {\n        require(transactions[_transactionId].destination != 0);\n        _;\n    }\n\n    modifier confirmed(uint _transactionId, address _owner) {\n        require(confirmations[_transactionId][_owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint _transactionId, address _owner) {\n        require(!confirmations[_transactionId][_owner]);\n        _;\n    }\n\n    modifier notExecuted(uint _transactionId) {\n        require(!transactions[_transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n\n    modifier validRequirement(uint _ownerCount, uint _required) {\n        require(_ownerCount < MAX_OWNER_COUNT\n            && _required <= _ownerCount\n            && _required != 0\n            && _ownerCount != 0);\n        _;\n    }\n\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    constructor(address[] _owners, uint _required) public validRequirement(_owners.length, _required) {\n        for (uint i=0; i<_owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n        owner = msg.sender;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function() public payable {\n        if (msg.value > 0)\n            emit Deposit(msg.sender, msg.value);\n    }\n\n    function setToken(address _token) public onlyOwner {\n        require(token == address(0));\n        token = IToken(_token);\n    }\n\n    //---------------- TGR SETTINGS -----------\n    /// @dev Sends request to change settings\n    /// @return Transaction ID\n    function tgrSettingsChangeRequest(\n        uint amount, \n        uint minimalContribution,\n        uint partContributor,\n        uint partProject, \n        uint partFounders, \n        uint blocksPerStage, \n        uint partContributorIncreasePerStage,\n        uint maxStages\n    ) \n    public\n    ownerExists(msg.sender)\n    returns (uint _txIndex) \n    {\n        assert(amount*partContributor*partProject*blocksPerStage*partContributorIncreasePerStage*maxStages != 0); //asserting no parameter is zero except partFounders\n        assert(amount >= 1 ether);\n        _txIndex = settingsRequestsCount;\n        settingsRequests[_txIndex] = SettingsRequest({\n            amount: amount,\n            minimalContribution: minimalContribution,\n            partContributor: partContributor,\n            partProject: partProject,\n            partFounders: partFounders,\n            blocksPerStage: blocksPerStage,\n            partContributorIncreasePerStage: partContributorIncreasePerStage,\n            maxStages: maxStages,\n            executed: false\n        });\n        settingsRequestsCount++;\n        confirmSettingsChange(_txIndex);\n        return _txIndex;\n    }\n\n    /// @dev Allows an owner to confirm a change settings request.\n    /// @param _txIndex Transaction ID.\n    function confirmSettingsChange(uint _txIndex) public ownerExists(msg.sender) returns(bool success) {\n        require(settingsRequests[_txIndex].executed == false);\n        settingsRequests[_txIndex].confirmations[msg.sender] = true;\n        if(isConfirmedSettingsRequest(_txIndex)){\n            SettingsRequest storage request = settingsRequests[_txIndex];\n            request.executed = true;\n            IToken(token).executeSettingsChange(\n                request.amount, \n                request.minimalContribution, \n                request.partContributor,\n                request.partProject,\n                request.partFounders,\n                request.blocksPerStage,\n                request.partContributorIncreasePerStage,\n                request.maxStages\n            );\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function setFinishedTx() public ownerExists(msg.sender) returns(uint transactionId) {\n        transactionId = addTransaction(token, 0, hex\"ce5e6393\");\n        confirmTransaction(transactionId);\n    }\n\n    function setLiveTx() public ownerExists(msg.sender) returns(uint transactionId) {\n        transactionId = addTransaction(token, 0, hex\"29745306\");\n        confirmTransaction(transactionId);\n    }\n\n    function setFreezeTx() public ownerExists(msg.sender) returns(uint transactionId) {\n        transactionId = addTransaction(token, 0, hex\"2c8cbe40\");\n        confirmTransaction(transactionId);\n    }\n\n    function transferTx(address _to, uint _value) public ownerExists(msg.sender) returns(uint transactionId) {\n        //I rather seldom wish pain to other people, but solidity developers may be an exception.\n        bytes memory calldata = new bytes(68); \n        calldata[0] = byte(hex\"a9\");\n        calldata[1] = byte(hex\"05\");\n        calldata[2] = byte(hex\"9c\");\n        calldata[3] = byte(hex\"bb\");\n        //When I wrote these lines my eyes were bleeding.\n        bytes32 val = bytes32(_value);\n        bytes32 dest = bytes32(_to);\n        //I spent a day for this function, because my fingers made a fist.\n        for(uint j=0; j<32; j++) {\n            calldata[j+4]=dest[j];\n        }\n        //Oh, reader! I hope you forget it like a bad nightmare.\n        for(uint i=0; i<32; i++) {\n            calldata[i+36]=val[i];\n        }\n        //Stil the ghost of this code will haunt you.\n        transactionId = addTransaction(token, 0, calldata);\n        confirmTransaction(transactionId);\n        //I haven't mentioned that it's the most elegant solution for 0.4.20 compiler, which doesn't require rewriting all this shitty code.\n        //Enjoy.\n    }\n\n    function setWhitelistTx(address _whitelist) public ownerExists(msg.sender) returns(uint transactionId) {\n        bytes memory calldata = new bytes(36);\n        calldata[0] = byte(hex\"85\");\n        calldata[1] = byte(hex\"4c\");\n        calldata[2] = byte(hex\"ff\");\n        calldata[3] = byte(hex\"2f\");\n        bytes32 dest = bytes32(_whitelist);\n        for(uint j=0; j<32; j++) {\n            calldata[j+4]=dest[j];\n        }\n        transactionId = addTransaction(token, 0, calldata);\n        confirmTransaction(transactionId);\n    }\n\n    //adds this address to the whitelist\n    function whitelistTx(address _address) public ownerExists(msg.sender) returns(uint transactionId) {\n        bytes memory calldata = new bytes(36);\n        calldata[0] = byte(hex\"0a\");\n        calldata[1] = byte(hex\"3b\");\n        calldata[2] = byte(hex\"0a\");\n        calldata[3] = byte(hex\"4f\");\n        bytes32 dest = bytes32(_address);\n        for(uint j=0; j<32; j++) {\n            calldata[j+4]=dest[j];\n        }\n        transactionId = addTransaction(token.whitelist(), 0, calldata);\n        confirmTransaction(transactionId);\n\n    }\n\n//--------------------------Usual multisig functions for handling owners and transactions.\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param _owner Address of new owner.\n    function addOwner(address _owner) public onlyWallet ownerDoesNotExist(_owner) notNull(_owner) validRequirement(owners.length + 1, required) {\n        isOwner[_owner] = true;\n        owners.push(_owner);\n        emit OwnerAddition(_owner);\n    }\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param _owner Address of owner.\n    function removeOwner(address _owner) public onlyWallet ownerExists(_owner) {\n        isOwner[_owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == _owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        emit OwnerRemoval(_owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param _owner Address of owner to be replaced.\n    /// @param _newOwner Address of new owner.\n    function replaceOwner(address _owner, address _newOwner) public onlyWallet ownerExists(_owner) ownerDoesNotExist(_newOwner) {\n        for (uint i=0; i<owners.length; i++)\n            if (owners[i] == _owner) {\n                owners[i] = _newOwner;\n                break;\n            }\n        isOwner[_owner] = false;\n        isOwner[_newOwner] = true;\n        emit OwnerRemoval(_owner);\n        emit OwnerAddition(_newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required) public onlyWallet validRequirement(owners.length, _required) {\n        required = _required;\n        emit RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data) public ownerExists(msg.sender) notNull(destination) returns (uint transactionId) {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data) internal returns (uint transactionId) {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param _transactionId Transaction ID.\n    function confirmTransaction(uint _transactionId) public ownerExists(msg.sender) transactionExists(_transactionId) notConfirmed(_transactionId, msg.sender) {\n        confirmations[_transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, _transactionId);\n        executeTransaction(_transactionId);\n    }\n\n    //Will fail if calldata less than 4 bytes long. It's a feature, not a bug.\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param _transactionId Transaction ID.\n    function executeTransaction(uint _transactionId) public notExecuted(_transactionId) {\n        if (isConfirmed(_transactionId)) {\n            Transaction storage trx = transactions[_transactionId];\n            trx.executed = true;\n            //Just don't ask questions. It's needed. Believe me.\n\t\t\tbytes memory data = trx.data;\n            bytes memory calldata;\n            if (trx.data.length >= 4) {\n                bytes4 signature;\n                assembly {\n                    signature := mload(add(data, 32))\n                }\n                calldata = new bytes(trx.data.length-4);\n                for (uint i = 0; i<calldata.length; i++) {\n                    calldata[i] = trx.data[i+4];\n                }\n            }\n            else {\n                calldata = new bytes(0);\n            }\n            if (trx.destination.call.value(trx.value)(signature, calldata))\n                emit Execution(_transactionId);\n            else {\n                emit ExecutionFailure(_transactionId);\n                trx.executed = false;\n            }\n        }\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param _transactionId Transaction ID.\n    function revokeConfirmation(uint _transactionId) public ownerExists(msg.sender) confirmed(_transactionId, msg.sender) notExecuted(_transactionId) {\n        confirmations[_transactionId][msg.sender] = false;\n        emit Revocation(msg.sender, _transactionId);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param _transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint _transactionId) public view returns (bool) {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[_transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n        return false;\n    }\n\n\tfunction isConfirmedSettingsRequest(uint _transactionId) public view returns (bool) {\n\t\tuint count = 0;\n\t\tfor (uint i = 0; i < owners.length; i++) {\n\t\t\tif (settingsRequests[_transactionId].confirmations[owners[i]])\n\t\t\t\tcount += 1;\n\t\t\tif (count == required)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n    }\n\n    /// @dev Shows what settings were requested in a settings change request\n    function viewSettingsChange(uint _txIndex) public constant \n    returns (uint amount, uint minimalContribution, uint partContributor, uint partProject, uint partFounders, uint blocksPerStage, uint partContributorIncreasePerStage, uint maxStages) {\n        SettingsRequest memory request = settingsRequests[_txIndex];\n        return (\n            request.amount,\n            request.minimalContribution,\n            request.partContributor, \n            request.partProject,\n            request.partFounders,\n            request.blocksPerStage,\n            request.partContributorIncreasePerStage,\n            request.maxStages\n        );\n    }\n\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param _transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint _transactionId) public view returns (uint count) {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[_transactionId][owners[i]])\n                count += 1;\n    }\n\n    function getSettingsChangeConfirmationCount(uint _txIndex) public view returns (uint count) {\n        for (uint i=0; i<owners.length; i++)\n            if (settingsRequests[_txIndex].confirmations[owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed) public view returns (uint count) {\n        for (uint i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners() public view returns (address[]) {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param _transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint _transactionId) public view returns (address[] _confirmations) {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[_transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed) public view returns (uint[] _transactionIds) {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=from; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n\n}", "debug": "storage_3: 0x7ffff9f100000000000000000000000000000000000000000000000000000000\ncalldata_MultiSigWallet_4: 0x0\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/30/0x5e5a14be6b31ab275347bd28bb1d0f425c14f817.sol", "function": "removeOwner(address)", "lineno": 37, "title": "Integer Overflow ", "type": "Warning"}], "success": true}