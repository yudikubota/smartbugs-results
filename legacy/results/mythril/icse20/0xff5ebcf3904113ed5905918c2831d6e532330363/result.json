{
  "contract": "0xff5ebcf3904113ed5905918c2831d6e532330363",
  "tool": "mythril",
  "start": 1563646666.7731686,
  "end": 1563646882.6950238,
  "duration": 215.92185521125793,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 749,
        "code": "ues[i]);\n        }\n        return true;\n    }\n}\n\n/******************************************/\n/*       XLToken TOKEN STARTS HERE       */\n/******************************************/\n\ncontract XLToken is TokenERC20 {\n    /* Initializes contract with initial supply tokens to the crea",
        "debug": "calldata_XLToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_XLToken_0: 0x3b3e672f00000000000000000000000000000000000000000000000000000000\ncalldatasize_XLToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferBatch(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/27/0xff5ebcf3904113ed5905918c2831d6e532330363.sol",
        "function": "transferBatch(address[],uint256[])",
        "lineno": 236,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4287,
        "code": "  }\n\n  /**\n  *",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_XLToken: 0x48\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_XLToken_32 + 4: 0x1\ncalldata_XLToken_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_XLToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/27/0xff5ebcf3904113ed5905918c2831d6e532330363.sol",
        "function": "transfer(address,uint256)",
        "lineno": 37,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4304,
        "code": " }\n}\n",
        "debug": "storage_4: 0x548543c0f9777d89b1fa5aabab620881104be4a2efce5f97f7cfbe78d1e0401d\ncalldata_XLToken_32 + 4: 0xa0096ab48914027d5012890fb3c003fe96d897159c7000d49854c6904cc201c1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_XLToken_4: 0xd91b79e8c6d03c7dfb0eb003460963fa628c5f15dc23809a193254cb2ea23d8f\nstorage_5: 0xf48eae75828b8007020ce3bb5f220c7fa7247bb88c3e606c902485091ea241de\nstorage_0: 0x0\ncaller: 0x0\ncalldata_XLToken_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_XLToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `mint(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/27/0xff5ebcf3904113ed5905918c2831d6e532330363.sol",
        "function": "mint(address,uint256)",
        "lineno": 46,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4317,
        "code": "act Ownable {\n",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x1\ncalldata_XLToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_XLToken_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_XLToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/27/0xff5ebcf3904113ed5905918c2831d6e532330363.sol",
        "function": "mint(address,uint256)",
        "lineno": 50,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}