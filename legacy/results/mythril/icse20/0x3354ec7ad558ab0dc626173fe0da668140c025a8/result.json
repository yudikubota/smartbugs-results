{
  "contract": "0x3354ec7ad558ab0dc626173fe0da668140c025a8",
  "tool": "mythril",
  "start": 1563614381.773667,
  "end": 1563614634.233624,
  "duration": 252.45995688438416,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1180,
        "code": "_string;\n    }\n    \n    function setRecipientString(string _string)\n    public\n    onlyRecipient()\n    {\n        r",
        "debug": "calldata_BurnableOpenPayment_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_BurnableOpenPayment_0: 0x9472eb7600000000000000000000000000000000000000000000000000000000\ncalldatasize_BurnableOpenPayment: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setPayerString(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x3354ec7ad558ab0dc626173fe0da668140c025a8.sol",
        "function": "setPayerString(string)",
        "lineno": 100,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1429,
        "code": "ng = _string;\n    }\n}",
        "debug": "calldata_BurnableOpenPayment_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_BurnableOpenPayment_0: 0xc75e8d5500000000000000000000000000000000000000000000000000000000\ncalldatasize_BurnableOpenPayment: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setRecipientString(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x3354ec7ad558ab0dc626173fe0da668140c025a8.sol",
        "function": "setRecipientString(string)",
        "lineno": 107,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2232,
        "code": "  onlyPayer()\n    {\n  ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function release(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/22/0x3354ec7ad558ab0dc626173fe0da668140c025a8.sol",
        "function": "release(uint256)",
        "lineno": 98,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2232,
        "code": "  onlyPayer()\n    {\n  ",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/22/0x3354ec7ad558ab0dc626173fe0da668140c025a8.sol",
        "function": "release(uint256)",
        "lineno": 98,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 2686,
        "code": "   onlyPayer()\n    onlyW",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/22/0x3354ec7ad558ab0dc626173fe0da668140c025a8.sol",
        "function": "burn(uint256)",
        "lineno": 89,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 3575,
        "code": "eOpenPayment {\n    address public payer;\n    address public recipient;\n    address public burnAddress = 0xdead;\n    string public payerString;\n    string public recipientString;\n    uint public commitThreshold;\n    \n    modifier onlyPayer() {\n        if (msg.sender != payer) throw;\n        _;\n    }\n    \n    modifier onlyRecipient() {\n        if (msg.sender != recipient) throw;\n        _;\n    }\n    \n    modifier onlyWithRecipient() {\n        if (recipient == address(0x0)) throw;\n        _;\n    }\n    \n    modifier onlyWithoutRecipient() {\n        if (recipient != address(0x0)) throw;\n        _;\n    }\n    \n    function () payable {}\n    \n    function BurnableOpenPayment(address _payer, uint _commitThreshold)\n    public\n    payable {\n        payer = _payer;\n        commitThreshold = _commitThreshold;\n    }\n    \n    function getPayer()\n    public returns (address) { return payer; }\n    \n    function getRecipient()\n    public returns (address) { return recipient; }\n    \n    function getCommitThreshold()\n    public returns (uint) { return commitThreshold; }\n    \n    function getPayerString()\n    public returns (string) { return payerString; }\n    \n    function getRecipientString()\n    public returns (string) { return recipientString; }\n    \n    function commit()\n    public\n    onlyWithoutRecipient()\n    payable\n    {\n        if (msg.value < commitThreshold) throw;\n        recipient = msg.sender;\n    }\n    \n    function burn(uint amount)\n    public\n    onlyPayer()\n    onlyWithRecipient()\n    returns (bool)\n    {\n        return burnAddress.send(amount);\n    }\n    \n    function release(uint amount)\n    public\n    onlyPayer()\n    onlyWithRecipient()\n    returns (bool)\n    {\n        return recipient.send(amount);\n    }\n    \n    function setPayerString(string _string)\n    public\n    onlyPayer()\n    {\n        payerString = _string;\n    }\n    \n    function setRecipientString(string _string)\n    public\n    onlyRecipient()\n    {\n        recipientString = _string;\n    }\n}",
        "debug": "calldata_BurnableOpenPayment_4 + calldata_BurnableOpenPayment_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_1: 0x0\ncaller: 0x0\ncalldata_BurnableOpenPayment_0: 0xc75e8d5500000000000000000000000000000000000000000000000000000000\ncalldatasize_BurnableOpenPayment: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setRecipientString(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x3354ec7ad558ab0dc626173fe0da668140c025a8.sol",
        "function": "setRecipientString(string)",
        "lineno": 17,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3589,
        "code": "eOpenPayment {\n    address public payer;\n    address public recipient;\n    address public burnAddress = 0xdead;\n    string public payerString;\n    string public recipientString;\n    uint public commitThreshold;\n    \n    modifier onlyPayer() {\n        if (msg.sender != payer) throw;\n        _;\n    }\n    \n    modifier onlyRecipient() {\n        if (msg.sender != recipient) throw;\n        _;\n    }\n    \n    modifier onlyWithRecipient() {\n        if (recipient == address(0x0)) throw;\n        _;\n    }\n    \n    modifier onlyWithoutRecipient() {\n        if (recipient != address(0x0)) throw;\n        _;\n    }\n    \n    function () payable {}\n    \n    function BurnableOpenPayment(address _payer, uint _commitThreshold)\n    public\n    payable {\n        payer = _payer;\n        commitThreshold = _commitThreshold;\n    }\n    \n    function getPayer()\n    public returns (address) { return payer; }\n    \n    function getRecipient()\n    public returns (address) { return recipient; }\n    \n    function getCommitThreshold()\n    public returns (uint) { return commitThreshold; }\n    \n    function getPayerString()\n    public returns (string) { return payerString; }\n    \n    function getRecipientString()\n    public returns (string) { return recipientString; }\n    \n    function commit()\n    public\n    onlyWithoutRecipient()\n    payable\n    {\n        if (msg.value < commitThreshold) throw;\n        recipient = msg.sender;\n    }\n    \n    function burn(uint amount)\n    public\n    onlyPayer()\n    onlyWithRecipient()\n    returns (bool)\n    {\n        return burnAddress.send(amount);\n    }\n    \n    function release(uint amount)\n    public\n    onlyPayer()\n    onlyWithRecipient()\n    returns (bool)\n    {\n        return recipient.send(amount);\n    }\n    \n    function setPayerString(string _string)\n    public\n    onlyPayer()\n    {\n        payerString = _string;\n    }\n    \n    function setRecipientString(string _string)\n    public\n    onlyRecipient()\n    {\n        recipientString = _string;\n    }\n}",
        "debug": "calldata_BurnableOpenPayment_4 + calldata_BurnableOpenPayment_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_1: 0x0\ncaller: 0x0\ncalldata_BurnableOpenPayment_0: 0xc75e8d5500000000000000000000000000000000000000000000000000000000\ncalldatasize_BurnableOpenPayment: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setRecipientString(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x3354ec7ad558ab0dc626173fe0da668140c025a8.sol",
        "function": "setRecipientString(string)",
        "lineno": 17,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}