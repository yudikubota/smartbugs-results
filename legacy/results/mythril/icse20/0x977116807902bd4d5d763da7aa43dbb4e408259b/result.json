{
  "contract": "0x977116807902bd4d5d763da7aa43dbb4e408259b",
  "tool": "mythril",
  "start": 1563596934.7678053,
  "end": 1563597418.794306,
  "duration": 484.0265007019043,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 308,
        "code": "message) payable public {\n        require(msg.value > 0);\n        donations.push(Donation(msg.sender, _message, msg.value));\n        charity.transfer(msg.value);\n        raised += msg.value;\n        emit Donate(msg.sender, msg.value, _message);\n    }\n\n    function getDonation(uint _index)",
        "debug": "calldata_BlockchainForPeace_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_BlockchainForPeace_0: 0xa9b5ae8300000000000000000000000000000000000000000000000000000000\ncalldatasize_BlockchainForPeace: 0x4\n",
        "description": "A possible integer overflow exists in the function `messageForPeace(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x977116807902bd4d5d763da7aa43dbb4e408259b.sol",
        "function": "messageForPeace(string)",
        "lineno": 34,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 934,
        "code": "charity.transfer(ms",
        "debug": "callvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_BlockchainForPeace_0: 0x552079dc00000000000000000000000000000000000000000000000000000000\ncalldatasize_BlockchainForPeace: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x977116807902bd4d5d763da7aa43dbb4e408259b.sol",
        "function": "fallback()",
        "lineno": 31,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1160,
        "code": ";\n\ncontract Blockc",
        "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_BlockchainForPeace_0: 0xa9b5ae8300000000000000000000000000000000000000000000000000000000\ncalldatasize_BlockchainForPeace: 0x4\n",
        "description": "A possible integer overflow exists in the function `messageForPeace(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x977116807902bd4d5d763da7aa43dbb4e408259b.sol",
        "function": "messageForPeace(string)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1283,
        "code": " _message, msg.value));\n        charity.transfer(msg.valu",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BlockchainForPeace_4 + calldata_BlockchainForPeace_4)) +\n32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_BlockchainForPeace_0: 0xa9b5ae8300000000000000000000000000000000000000000000000000000000\ncalldatasize_BlockchainForPeace: 0x4\n",
        "description": "A possible integer overflow exists in the function `messageForPeace(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x977116807902bd4d5d763da7aa43dbb4e408259b.sol",
        "function": "messageForPeace(string)",
        "lineno": 36,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1422,
        "code": "ate(msg.sender, msg",
        "debug": "callvalue: 0x8000086408000000000000000000000000000000000000000000000000000000\nkeccac_1_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n3*storage_2: 0x3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\nstorage_1 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n3*storage_2: 0x88\nstorage_0: 0x80000d6dfffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nretval_1391: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BlockchainForPeace_4 + calldata_BlockchainForPeace_4)) +\n32: 0x0\ncalldata_BlockchainForPeace_0: 0xa9b5ae8300000000000000000000000000000000000000000000000000000000\ncalldatasize_BlockchainForPeace: 0x4\n",
        "description": "A possible integer overflow exists in the function `messageForPeace(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x977116807902bd4d5d763da7aa43dbb4e408259b.sol",
        "function": "messageForPeace(string)",
        "lineno": 39,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1656,
        "code": "or, don.message, ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_BlockchainForPeace_4: 0x0\nstorage_2: 0x0\ncalldata_BlockchainForPeace_0: 0xef07a81f00000000000000000000000000000000000000000000000000000000\ncalldatasize_BlockchainForPeace: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0x977116807902bd4d5d763da7aa43dbb4e408259b.sol",
        "function": "getDonation(uint256)",
        "lineno": 44,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1995,
        "code": "c donations; \n    \n    //ma",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_BlockchainForPeace_4: 0x0\nstorage_2: 0x0\ncalldata_BlockchainForPeace_0: 0xf8626af800000000000000000000000000000000000000000000000000000000\ncalldatasize_BlockchainForPeace: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0x977116807902bd4d5d763da7aa43dbb4e408259b.sol",
        "function": "_function_0xf8626af8",
        "lineno": 17,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2261,
        "code": "ntract BlockchainForPeace {\n    \n\n    // to see the total raised \n    uint public raised;\n    address public charity; \n    \n    //struct for the donation \n    struct Donation {\n        address donor; \n        string message; \n        uint value; \n    }\n    \n    Donation[] public donations; \n    \n    //mapping an address to the donation struct \n    //mapping (address => donation) public donors;\n    event Donate(address indexed from, uint amount, string message);\n    \n    //constructor to initiate the address of the charity being donated to\n    constructor () public {\n        charity = 0xaf208FF43D2A265E047D52C9F54c753DB86D9D11;\n    }\n   \n    // payable function which auto transfers money to charity address, collects the value and increases the total value counter. Also allows for anonoymous donations\n     function fallback() payable public {\n        raised += msg.value;\n        charity.transfer(msg.value);\n     }\n    // optional message to be sent with donation, peace message.\n    function messageForPeace(string _message) payable public {\n        require(msg.value > 0);\n        donations.push(Donation(msg.sender, _message, msg.value));\n        charity.transfer(msg.value);\n        raised += msg.value;\n        emit Donate(msg.sender, msg.value, _message);\n    }\n\n    function getDonation(uint _index) public view returns (address, string, uint) {\n        Donation memory don = donations[_index];\n        return (don.donor, don.message, don.value);\n    }\n    \n    function getDonationLength() public view returns (uint){\n        return donations.length;\n    }\n\n     function getRaised() public view returns (uint){\n        return raised;\n    }\n}",
        "debug": "keccac_1_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n3*storage_2: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_1 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n3*storage_2: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_BlockchainForPeace_0: 0xa9b5ae8300000000000000000000000000000000000000000000000000000000\ncalldatasize_BlockchainForPeace: 0x4\n",
        "description": "A possible integer overflow exists in the function `messageForPeace(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x977116807902bd4d5d763da7aa43dbb4e408259b.sol",
        "function": "messageForPeace(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2290,
        "code": "ntract BlockchainForPeace {\n    \n\n    // to see the total raised \n    uint public raised;\n    address public charity; \n    \n    //struct for the donation \n    struct Donation {\n        address donor; \n        string message; \n        uint value; \n    }\n    \n    Donation[] public donations; \n    \n    //mapping an address to the donation struct \n    //mapping (address => donation) public donors;\n    event Donate(address indexed from, uint amount, string message);\n    \n    //constructor to initiate the address of the charity being donated to\n    constructor () public {\n        charity = 0xaf208FF43D2A265E047D52C9F54c753DB86D9D11;\n    }\n   \n    // payable function which auto transfers money to charity address, collects the value and increases the total value counter. Also allows for anonoymous donations\n     function fallback() payable public {\n        raised += msg.value;\n        charity.transfer(msg.value);\n     }\n    // optional message to be sent with donation, peace message.\n    function messageForPeace(string _message) payable public {\n        require(msg.value > 0);\n        donations.push(Donation(msg.sender, _message, msg.value));\n        charity.transfer(msg.value);\n        raised += msg.value;\n        emit Donate(msg.sender, msg.value, _message);\n    }\n\n    function getDonation(uint _index) public view returns (address, string, uint) {\n        Donation memory don = donations[_index];\n        return (don.donor, don.message, don.value);\n    }\n    \n    function getDonationLength() public view returns (uint){\n        return donations.length;\n    }\n\n     function getRaised() public view returns (uint){\n        return raised;\n    }\n}",
        "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BlockchainForPeace_4 + calldata_BlockchainForPeace_4)) +\n32: 0x8000000000000000000000000000000000000000000000000000000000000000\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_BlockchainForPeace_0: 0xa9b5ae8300000000000000000000000000000000000000000000000000000000\ncalldatasize_BlockchainForPeace: 0x4\n",
        "description": "A possible integer overflow exists in the function `messageForPeace(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x977116807902bd4d5d763da7aa43dbb4e408259b.sol",
        "function": "messageForPeace(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2304,
        "code": "ntract BlockchainForPeace {\n    \n\n    // to see the total raised \n    uint public raised;\n    address public charity; \n    \n    //struct for the donation \n    struct Donation {\n        address donor; \n        string message; \n        uint value; \n    }\n    \n    Donation[] public donations; \n    \n    //mapping an address to the donation struct \n    //mapping (address => donation) public donors;\n    event Donate(address indexed from, uint amount, string message);\n    \n    //constructor to initiate the address of the charity being donated to\n    constructor () public {\n        charity = 0xaf208FF43D2A265E047D52C9F54c753DB86D9D11;\n    }\n   \n    // payable function which auto transfers money to charity address, collects the value and increases the total value counter. Also allows for anonoymous donations\n     function fallback() payable public {\n        raised += msg.value;\n        charity.transfer(msg.value);\n     }\n    // optional message to be sent with donation, peace message.\n    function messageForPeace(string _message) payable public {\n        require(msg.value > 0);\n        donations.push(Donation(msg.sender, _message, msg.value));\n        charity.transfer(msg.value);\n        raised += msg.value;\n        emit Donate(msg.sender, msg.value, _message);\n    }\n\n    function getDonation(uint _index) public view returns (address, string, uint) {\n        Donation memory don = donations[_index];\n        return (don.donor, don.message, don.value);\n    }\n    \n    function getDonationLength() public view returns (uint){\n        return donations.length;\n    }\n\n     function getRaised() public view returns (uint){\n        return raised;\n    }\n}",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BlockchainForPeace_4 + calldata_BlockchainForPeace_4)) +\n32: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BlockchainForPeace_4 + calldata_BlockchainForPeace_4)) +\n32: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_BlockchainForPeace_0: 0xa9b5ae8300000000000000000000000000000000000000000000000000000000\ncalldatasize_BlockchainForPeace: 0x4\n",
        "description": "A possible integer overflow exists in the function `messageForPeace(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x977116807902bd4d5d763da7aa43dbb4e408259b.sol",
        "function": "messageForPeace(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2321,
        "code": "ntract BlockchainForPeace {\n    \n\n    // to see the total raised \n    uint public raised;\n    address public charity; \n    \n    //struct for the donation \n    struct Donation {\n        address donor; \n        string message; \n        uint value; \n    }\n    \n    Donation[] public donations; \n    \n    //mapping an address to the donation struct \n    //mapping (address => donation) public donors;\n    event Donate(address indexed from, uint amount, string message);\n    \n    //constructor to initiate the address of the charity being donated to\n    constructor () public {\n        charity = 0xaf208FF43D2A265E047D52C9F54c753DB86D9D11;\n    }\n   \n    // payable function which auto transfers money to charity address, collects the value and increases the total value counter. Also allows for anonoymous donations\n     function fallback() payable public {\n        raised += msg.value;\n        charity.transfer(msg.value);\n     }\n    // optional message to be sent with donation, peace message.\n    function messageForPeace(string _message) payable public {\n        require(msg.value > 0);\n        donations.push(Donation(msg.sender, _message, msg.value));\n        charity.transfer(msg.value);\n        raised += msg.value;\n        emit Donate(msg.sender, msg.value, _message);\n    }\n\n    function getDonation(uint _index) public view returns (address, string, uint) {\n        Donation memory don = donations[_index];\n        return (don.donor, don.message, don.value);\n    }\n    \n    function getDonationLength() public view returns (uint){\n        return donations.length;\n    }\n\n     function getRaised() public view returns (uint){\n        return raised;\n    }\n}",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BlockchainForPeace_4 + calldata_BlockchainForPeace_4)) +\n32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BlockchainForPeace_4 + calldata_BlockchainForPeace_4)) +\n32: 0x25\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_BlockchainForPeace_0: 0xa9b5ae8300000000000000000000000000000000000000000000000000000000\ncalldatasize_BlockchainForPeace: 0x4\n",
        "description": "A possible integer overflow exists in the function `messageForPeace(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x977116807902bd4d5d763da7aa43dbb4e408259b.sol",
        "function": "messageForPeace(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2326,
        "code": "ntract BlockchainForPeace {\n    \n\n    // to see the total raised \n    uint public raised;\n    address public charity; \n    \n    //struct for the donation \n    struct Donation {\n        address donor; \n        string message; \n        uint value; \n    }\n    \n    Donation[] public donations; \n    \n    //mapping an address to the donation struct \n    //mapping (address => donation) public donors;\n    event Donate(address indexed from, uint amount, string message);\n    \n    //constructor to initiate the address of the charity being donated to\n    constructor () public {\n        charity = 0xaf208FF43D2A265E047D52C9F54c753DB86D9D11;\n    }\n   \n    // payable function which auto transfers money to charity address, collects the value and increases the total value counter. Also allows for anonoymous donations\n     function fallback() payable public {\n        raised += msg.value;\n        charity.transfer(msg.value);\n     }\n    // optional message to be sent with donation, peace message.\n    function messageForPeace(string _message) payable public {\n        require(msg.value > 0);\n        donations.push(Donation(msg.sender, _message, msg.value));\n        charity.transfer(msg.value);\n        raised += msg.value;\n        emit Donate(msg.sender, msg.value, _message);\n    }\n\n    function getDonation(uint _index) public view returns (address, string, uint) {\n        Donation memory don = donations[_index];\n        return (don.donor, don.message, don.value);\n    }\n    \n    function getDonationLength() public view returns (uint){\n        return donations.length;\n    }\n\n     function getRaised() public view returns (uint){\n        return raised;\n    }\n}",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BlockchainForPeace_4 + calldata_BlockchainForPeace_4)) +\n32: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\nkeccac_1_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n3*storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BlockchainForPeace_4 + calldata_BlockchainForPeace_4)) +\n32: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_BlockchainForPeace_0: 0xa9b5ae8300000000000000000000000000000000000000000000000000000000\ncalldatasize_BlockchainForPeace: 0x4\n",
        "description": "A possible integer overflow exists in the function `messageForPeace(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x977116807902bd4d5d763da7aa43dbb4e408259b.sol",
        "function": "messageForPeace(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}