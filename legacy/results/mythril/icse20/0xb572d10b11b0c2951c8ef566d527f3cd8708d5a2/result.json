{
  "contract": "0xb572d10b11b0c2951c8ef566d527f3cd8708d5a2",
  "tool": "mythril",
  "start": 1563643946.9455845,
  "end": 1563644209.5531578,
  "duration": 262.60757327079773,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2050,
        "code": "    mapping (address => uint256) balances;\n",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_ZTToken: 0x4\ncalldata_ZTToken_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/30/0xb572d10b11b0c2951c8ef566d527f3cd8708d5a2.sol",
        "function": "approve(address,uint256)",
        "lineno": 97,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2322,
        "code": "    mapping (address => uint256) balances;\n",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_ZTToken: 0x4\ncalldata_ZTToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/30/0xb572d10b11b0c2951c8ef566d527f3cd8708d5a2.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 97,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3458,
        "code": "    mapping (address => uint256) balances;\n",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_ZTToken: 0x4\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ZTToken_0: 0x867904b400000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/30/0xb572d10b11b0c2951c8ef566d527f3cd8708d5a2.sol",
        "function": "issue(address,uint256)",
        "lineno": 97,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3544,
        "code": "evert();\n    }\n}",
        "debug": "calldata_ZTToken_32 + 4: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ZTToken_4: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ZTToken_0: 0x867904b400000000000000000000000000000000000000000000000000000000\ncalldatasize_ZTToken: 0x44\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `issue(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/30/0xb572d10b11b0c2951c8ef566d527f3cd8708d5a2.sol",
        "function": "issue(address,uint256)",
        "lineno": 306,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3560,
        "debug": "calldata_ZTToken_32 + 4: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\nstorage_1: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ZTToken_0: 0x867904b400000000000000000000000000000000000000000000000000000000\ncalldatasize_ZTToken: 0x44\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `issue(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/30/0xb572d10b11b0c2951c8ef566d527f3cd8708d5a2.sol",
        "function": "issue(address,uint256)",
        "lineno": 308,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4063,
        "code": "    mapping (address => uint256) balances;\n",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_ZTToken: 0x4\ncalldata_ZTToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/30/0xb572d10b11b0c2951c8ef566d527f3cd8708d5a2.sol",
        "function": "transfer(address,uint256)",
        "lineno": 97,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5216,
        "code": "    totalSupply = 0;\n        ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ZTToken_4: 0x0\nstorage_10: 0x0\ncalldata_ZTToken_0: 0xe121c10200000000000000000000000000000000000000000000000000000000\ncalldatasize_ZTToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/30/0xb572d10b11b0c2951c8ef566d527f3cd8708d5a2.sol",
        "function": "_function_0xe121c102",
        "lineno": 244,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}