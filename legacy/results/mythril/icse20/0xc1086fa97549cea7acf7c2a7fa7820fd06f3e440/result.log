{"error": null, "issues": [{"address": 1763, "code": "\n        }\n    ", "debug": "The exception is triggered under the following conditions:\n\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Dividends_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Dividends_0: 0x5c6c890300000000000000000000000000000000000000000000000000000000\ncalldatasize_Dividends: 0x4\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Dividends_4: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xc1086fa97549cea7acf7c2a7fa7820fd06f3e440.sol", "function": "Buy(address)", "lineno": 106, "title": "Exception state", "type": "Informational"}, {"address": 3412, "code": "6[2]) public SellOrder;\n    \n    // web \n    //", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Dividends_32 + 4: 0x2\ncalldata_Dividends_0: 0xa03286cd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Dividends: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xc1086fa97549cea7acf7c2a7fa7820fd06f3e440.sol", "function": "_function_0xa03286cd", "lineno": 26, "title": "Exception state", "type": "Informational"}, {"address": 3706, "code": "ent SellOrderPlace", "debug": "", "description": "A possible transaction order independence vulnerability exists in function Withdraw(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_contracts/0xc1086fa97549cea7acf7c2a7fa7820fd06f3e440.sol", "function": "Withdraw()", "lineno": 162, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3768, "code": "t256 price) public {\n        // r", "debug": "balance_at_1461501637330902918203684832716283019655932542975 & 0: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nretval_3706: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Dividends_0: 0x57ea89b600000000000000000000000000000000000000000000000000000000\ncalldatasize_Dividends: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `Withdraw()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0xc1086fa97549cea7acf7c2a7fa7820fd06f3e440.sol", "function": "Withdraw()", "lineno": 163, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3853, "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Dividends_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_Dividends_0: 0xa2f6e5fb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Dividends: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xc1086fa97549cea7acf7c2a7fa7820fd06f3e440.sol", "function": "ViewMyDivs(address)", "lineno": 189, "title": "Exception state", "type": "Informational"}, {"address": 3915, "code": " so we never pay too much\n       ", "debug": "balance_at_1461501637330902918203684832716283019655932542975 & 0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_0: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Dividends_0: 0x57ea89b600000000000000000000000000000000000000000000000000000000\ncalldatasize_Dividends: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `Withdraw()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0xc1086fa97549cea7acf7c2a7fa7820fd06f3e440.sol", "function": "Withdraw()", "lineno": 68, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4025, "code": "vidends{\n    // 10 million token supply \n    uint256 constant TokenSupply = 10000000;\n    \n    uint256 public TotalPaid = 0;\n    \n    uint16 public Tax = 1250; \n    \n    address dev;\n    \n    mapping (address => uint256) public MyTokens;\n    mapping (address => uint256) public DividendCollectSince;\n    \n    // TKNS / PRICE \n    mapping(address => uint256[2]) public SellOrder;\n    \n    // web \n    // returns tokens + price (in wei)\n    function GetSellOrderDetails(address who) public view returns (uint256, uint256){\n        return (SellOrder[who][0], SellOrder[who][1]);\n    }\n    \n    function ViewMyTokens(address who) public view returns (uint256){\n        return MyTokens[who];\n    }\n    \n    function ViewMyDivs(address who) public view returns (uint256){\n        uint256 tkns = MyTokens[who];\n        if (tkns==0){\n            return 0;\n        }\n        return (GetDividends(who, tkns));\n    }\n    \n    function Bal() public view returns (uint256){\n        return (address(this).balance);\n    }\n    \n    // >MINT IT\n    function Dividends() public {\n        dev = msg.sender;\n        // EG\n        MyTokens[msg.sender] = TokenSupply - 400000;\n        // HE\n        MyTokens[address(0x83c0Efc6d8B16D87BFe1335AB6BcAb3Ed3960285)] = 200000;\n        // PG\n        MyTokens[address(0x26581d1983ced8955C170eB4d3222DCd3845a092)] = 200000;\n        //MyTokens[address(0x0)] = 400000;\n        PlaceSellOrder(1600000, (0.5 szabo)); // 1 token per 0.5 szabo / 500 gwei or 1000 tokens per 0.5 finney / 0.0005 ether or 1M tokens per 0.5 ETH \n    }\n    \n    function GetDividends(address who, uint256 TokenAmount) internal view  returns(uint256){\n        if (TokenAmount == 0){\n            return 0;\n        }\n        uint256 TotalContractIn = address(this).balance + TotalPaid;\n        // division rounds DOWN so we never pay too much\n        // no revert errors due to this. \n        \n        uint256 MyBalance = sub(TotalContractIn, DividendCollectSince[who]);\n        \n        return  ((MyBalance * TokenAmount) / (TokenSupply));\n    }\n    \n\n    event Sold(address Buyer, address Seller, uint256 price, uint256 tokens);\n    function Buy(address who) public payable {\n       // require(msg.value >= (1 szabo)); // normal amounts pls \n        // lookup order by addr \n        uint256[2] memory order = SellOrder[who];\n        uint256 amt_available = order[0];\n        uint256 price = order[1];\n        \n        uint256 excess = 0;\n        \n        // nothing to sell \n        if (amt_available == 0){\n            revert();\n        }\n        \n        uint256 max = amt_available * price; \n        uint256 currval = msg.value;\n        // more than max buy value \n        if (currval > max){\n            excess = (currval-max);\n            currval = max;\n        }\n        \n\n\n\n        uint256 take = currval / price;\n        \n        if (take == 0){\n            revert(); // very high price apparently \n        }\n        excess = excess + sub(currval, take * price); \n\n        \n        if (excess > 0){\n            msg.sender.transfer(excess);\n        }\n        \n        currval = sub(currval,excess);\n        \n        // pay fees \n\n        uint256 fee = (Tax * currval)/10000;\n        dev.transfer(fee);\n        who.transfer(currval-fee);\n        \n        // the person with these tokens will also receive dividend over this buy order (this.balance)\n        // however the excess is removed, see the excess transfer above \n     //   if (msg.value > (excess+currval+fee)){\n      //      msg.sender.transfer(msg.value-excess-currval-fee);\n     //   }\n        _withdraw(who, MyTokens[who]);\n        if (MyTokens[msg.sender] > 0){\n            \n            _withdraw(msg.sender, MyTokens[msg.sender]);\n        }\n        MyTokens[who] = MyTokens[who] - take; \n        SellOrder[who][0] = SellOrder[who][0]-take; \n        MyTokens[msg.sender] = MyTokens[msg.sender] + take;\n    //    MyPayouts[msg.sender] = MyPayouts[msg.sender] + GetDividends(msg.sender, take);\n        DividendCollectSince[msg.sender] = (address(this).balance) + TotalPaid;\n        \n        emit Sold(msg.sender, who, price, take);\n       // push((excess + currval)/(1 finney), (msg.value)/(1 finney));\n    }\n    \n    function Withdraw() public {\n        _withdraw(msg.sender, MyTokens[msg.sender]);\n    }\n    \n    function _withdraw(address who, uint256 amt) internal{\n        // withdraws from amt. \n        // (amt not used in current code, always same value)\n        if (MyTokens[who] < amt){\n            revert(); // ??? security check \n        }\n        \n        uint256 divs = GetDividends(who, amt);\n        \n        who.transfer(divs);\n        TotalPaid = TotalPaid + divs;\n        \n        DividendCollectSince[who] = TotalPaid + address(this).balance;\n    }\n    \n    event SellOrderPlaced(address who, uint256 amt, uint256 price);\n    function PlaceSellOrder(uint256 amt, uint256 price) public {\n        // replaces old order \n        if (amt > MyTokens[msg.sender]){\n            revert(); // ?? more sell than you got \n        }\n        SellOrder[msg.sender] = [amt,price];\n        emit SellOrderPlaced(msg.sender, amt, price);\n    }\n    \n    function ChangeTax(uint16 amt) public {\n        require (amt <= 2500);\n        require(msg.sender == dev);\n        Tax=amt;\n    }\n    \n    \n    // dump divs in contract \n    function() public payable {\n        \n    }\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    } \n    \n}", "debug": "keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_Dividends_4: 0x0\ncalldata_Dividends_0: 0x1bd983a400000000000000000000000000000000000000000000000000000000\ncalldatasize_Dividends: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `PlaceSellOrder(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0xc1086fa97549cea7acf7c2a7fa7820fd06f3e440.sol", "function": "PlaceSellOrder(uint256,uint256)", "lineno": 12, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4060, "code": "vidends{\n    // 10 million token supply \n    uint256 constant TokenSupply = 10000000;\n    \n    uint256 public TotalPaid = 0;\n    \n    uint16 public Tax = 1250; \n    \n    address dev;\n    \n    mapping (address => uint256) public MyTokens;\n    mapping (address => uint256) public DividendCollectSince;\n    \n    // TKNS / PRICE \n    mapping(address => uint256[2]) public SellOrder;\n    \n    // web \n    // returns tokens + price (in wei)\n    function GetSellOrderDetails(address who) public view returns (uint256, uint256){\n        return (SellOrder[who][0], SellOrder[who][1]);\n    }\n    \n    function ViewMyTokens(address who) public view returns (uint256){\n        return MyTokens[who];\n    }\n    \n    function ViewMyDivs(address who) public view returns (uint256){\n        uint256 tkns = MyTokens[who];\n        if (tkns==0){\n            return 0;\n        }\n        return (GetDividends(who, tkns));\n    }\n    \n    function Bal() public view returns (uint256){\n        return (address(this).balance);\n    }\n    \n    // >MINT IT\n    function Dividends() public {\n        dev = msg.sender;\n        // EG\n        MyTokens[msg.sender] = TokenSupply - 400000;\n        // HE\n        MyTokens[address(0x83c0Efc6d8B16D87BFe1335AB6BcAb3Ed3960285)] = 200000;\n        // PG\n        MyTokens[address(0x26581d1983ced8955C170eB4d3222DCd3845a092)] = 200000;\n        //MyTokens[address(0x0)] = 400000;\n        PlaceSellOrder(1600000, (0.5 szabo)); // 1 token per 0.5 szabo / 500 gwei or 1000 tokens per 0.5 finney / 0.0005 ether or 1M tokens per 0.5 ETH \n    }\n    \n    function GetDividends(address who, uint256 TokenAmount) internal view  returns(uint256){\n        if (TokenAmount == 0){\n            return 0;\n        }\n        uint256 TotalContractIn = address(this).balance + TotalPaid;\n        // division rounds DOWN so we never pay too much\n        // no revert errors due to this. \n        \n        uint256 MyBalance = sub(TotalContractIn, DividendCollectSince[who]);\n        \n        return  ((MyBalance * TokenAmount) / (TokenSupply));\n    }\n    \n\n    event Sold(address Buyer, address Seller, uint256 price, uint256 tokens);\n    function Buy(address who) public payable {\n       // require(msg.value >= (1 szabo)); // normal amounts pls \n        // lookup order by addr \n        uint256[2] memory order = SellOrder[who];\n        uint256 amt_available = order[0];\n        uint256 price = order[1];\n        \n        uint256 excess = 0;\n        \n        // nothing to sell \n        if (amt_available == 0){\n            revert();\n        }\n        \n        uint256 max = amt_available * price; \n        uint256 currval = msg.value;\n        // more than max buy value \n        if (currval > max){\n            excess = (currval-max);\n            currval = max;\n        }\n        \n\n\n\n        uint256 take = currval / price;\n        \n        if (take == 0){\n            revert(); // very high price apparently \n        }\n        excess = excess + sub(currval, take * price); \n\n        \n        if (excess > 0){\n            msg.sender.transfer(excess);\n        }\n        \n        currval = sub(currval,excess);\n        \n        // pay fees \n\n        uint256 fee = (Tax * currval)/10000;\n        dev.transfer(fee);\n        who.transfer(currval-fee);\n        \n        // the person with these tokens will also receive dividend over this buy order (this.balance)\n        // however the excess is removed, see the excess transfer above \n     //   if (msg.value > (excess+currval+fee)){\n      //      msg.sender.transfer(msg.value-excess-currval-fee);\n     //   }\n        _withdraw(who, MyTokens[who]);\n        if (MyTokens[msg.sender] > 0){\n            \n            _withdraw(msg.sender, MyTokens[msg.sender]);\n        }\n        MyTokens[who] = MyTokens[who] - take; \n        SellOrder[who][0] = SellOrder[who][0]-take; \n        MyTokens[msg.sender] = MyTokens[msg.sender] + take;\n    //    MyPayouts[msg.sender] = MyPayouts[msg.sender] + GetDividends(msg.sender, take);\n        DividendCollectSince[msg.sender] = (address(this).balance) + TotalPaid;\n        \n        emit Sold(msg.sender, who, price, take);\n       // push((excess + currval)/(1 finney), (msg.value)/(1 finney));\n    }\n    \n    function Withdraw() public {\n        _withdraw(msg.sender, MyTokens[msg.sender]);\n    }\n    \n    function _withdraw(address who, uint256 amt) internal{\n        // withdraws from amt. \n        // (amt not used in current code, always same value)\n        if (MyTokens[who] < amt){\n            revert(); // ??? security check \n        }\n        \n        uint256 divs = GetDividends(who, amt);\n        \n        who.transfer(divs);\n        TotalPaid = TotalPaid + divs;\n        \n        DividendCollectSince[who] = TotalPaid + address(this).balance;\n    }\n    \n    event SellOrderPlaced(address who, uint256 amt, uint256 price);\n    function PlaceSellOrder(uint256 amt, uint256 price) public {\n        // replaces old order \n        if (amt > MyTokens[msg.sender]){\n            revert(); // ?? more sell than you got \n        }\n        SellOrder[msg.sender] = [amt,price];\n        emit SellOrderPlaced(msg.sender, amt, price);\n    }\n    \n    function ChangeTax(uint16 amt) public {\n        require (amt <= 2500);\n        require(msg.sender == dev);\n        Tax=amt;\n    }\n    \n    \n    // dump divs in contract \n    function() public payable {\n        \n    }\n    \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    } \n    \n}", "debug": "keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_Dividends_4: 0x0\ncalldata_Dividends_0: 0x1bd983a400000000000000000000000000000000000000000000000000000000\ncalldatasize_Dividends: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `PlaceSellOrder(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0xc1086fa97549cea7acf7c2a7fa7820fd06f3e440.sol", "function": "PlaceSellOrder(uint256,uint256)", "lineno": 12, "title": "Integer Overflow ", "type": "Warning"}], "success": true}