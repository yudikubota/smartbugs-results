{
  "contract": "0x6da9b79cd36c8787ebd38de8e0c7767a4d7110b0",
  "tool": "mythril",
  "start": 1563644234.6489568,
  "end": 1563644536.6862957,
  "duration": 302.0373389720917,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 399,
        "code": " gasRef",
        "debug": "storage_0: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7\ncalldata_GasRefundToken_0: 0x23f2cbb000000000000000000000000000000000000000000000000000000000\ncalldatasize_GasRefundToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `sponsorGas()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/27/0x6da9b79cd36c8787ebd38de8e0c7767a4d7110b0.sol",
        "function": "sponsorGas()",
        "lineno": 18,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 428,
        "code": "] = refundPrice;\n ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_GasRefundToken_0: 0x23f2cbb000000000000000000000000000000000000000000000000000000000\ncalldatasize_GasRefundToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/27/0x6da9b79cd36c8787ebd38de8e0c7767a4d7110b0.sol",
        "function": "sponsorGas()",
        "lineno": 18,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1048,
        "code": "public gasRefundPool;\n    \n   ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_GasRefundToken_4: 0x0\nstorage_0: 0x0\ncalldata_GasRefundToken_0: 0xef286e9600000000000000000000000000000000000000000000000000000000\ncalldatasize_GasRefundToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/27/0x6da9b79cd36c8787ebd38de8e0c7767a4d7110b0.sol",
        "function": "_function_0xef286e96",
        "lineno": 11,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1095,
        "code": "GasRefundToken  {\n    uint256[] public gasRefundPool;\n    \n    function sponsorGas() external {\n        uint256 len = gasRefundPool.length;\n        uint256 refundPrice = 1;\n        require(refundPrice > 0);\n        gasRefundPool.length = len + 9;\n        gasRefundPool[len] = refundPrice;\n        gasRefundPool[len + 1] = refundPrice;\n        gasRefundPool[len + 2] = refundPrice;\n        gasRefundPool[len + 3] = refundPrice;\n        gasRefundPool[len + 4] = refundPrice;\n        gasRefundPool[len + 5] = refundPrice;\n        gasRefundPool[len + 6] = refundPrice;\n        gasRefundPool[len + 7] = refundPrice;\n        gasRefundPool[len + 8] = refundPrice;\n    }\n    \n\n    function minimumGasPriceForRefund() public view returns (uint256) {\n        uint256 len = gasRefundPool.length;\n        if (len > 0) {\n          return gasRefundPool[len - 1] + 1;\n        }\n        return uint256(-1);\n    }\n\n    /**  \n    @dev refund 45,000 gas for functions with gasRefund modifier.\n    */\n    function gasRefund() public {\n        uint256 len = gasRefundPool.length;\n        if (len > 2 && tx.gasprice > gasRefundPool[len-1]) {\n            gasRefundPool[--len] = 0;\n            gasRefundPool[--len] = 0;\n            gasRefundPool[--len] = 0;\n            gasRefundPool.length = len;\n        }   \n    }\n    \n\n    /**  \n    *@dev Return the remaining sponsored gas slots\n    */\n    function remainingGasRefundPool() public view returns (uint) {\n        return gasRefundPool.length;\n    }\n\n    function remainingSponsoredTransactions() public view returns (uint) {\n        return gasRefundPool.length / 3;\n    }\n}",
        "debug": "storage_0: 0xfb7df9e3e1bc6f53f8fddffbbc00000000000000000000000000000000000000\nstorage_18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n115792089237316195423570985008687907853269984665640564039457584007913129639935 +\nstorage_0: 0x0\ngasprice: 0x1\ncalldata_GasRefundToken_0: 0x5bc758e200000000000000000000000000000000000000000000000000000000\ncalldatasize_GasRefundToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `gasRefund()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/27/0x6da9b79cd36c8787ebd38de8e0c7767a4d7110b0.sol",
        "function": "gasRefund()",
        "lineno": 10,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1097,
        "code": "GasRefundToken  {\n    uint256[] public gasRefundPool;\n    \n    function sponsorGas() external {\n        uint256 len = gasRefundPool.length;\n        uint256 refundPrice = 1;\n        require(refundPrice > 0);\n        gasRefundPool.length = len + 9;\n        gasRefundPool[len] = refundPrice;\n        gasRefundPool[len + 1] = refundPrice;\n        gasRefundPool[len + 2] = refundPrice;\n        gasRefundPool[len + 3] = refundPrice;\n        gasRefundPool[len + 4] = refundPrice;\n        gasRefundPool[len + 5] = refundPrice;\n        gasRefundPool[len + 6] = refundPrice;\n        gasRefundPool[len + 7] = refundPrice;\n        gasRefundPool[len + 8] = refundPrice;\n    }\n    \n\n    function minimumGasPriceForRefund() public view returns (uint256) {\n        uint256 len = gasRefundPool.length;\n        if (len > 0) {\n          return gasRefundPool[len - 1] + 1;\n        }\n        return uint256(-1);\n    }\n\n    /**  \n    @dev refund 45,000 gas for functions with gasRefund modifier.\n    */\n    function gasRefund() public {\n        uint256 len = gasRefundPool.length;\n        if (len > 2 && tx.gasprice > gasRefundPool[len-1]) {\n            gasRefundPool[--len] = 0;\n            gasRefundPool[--len] = 0;\n            gasRefundPool[--len] = 0;\n            gasRefundPool.length = len;\n        }   \n    }\n    \n\n    /**  \n    *@dev Return the remaining sponsored gas slots\n    */\n    function remainingGasRefundPool() public view returns (uint) {\n        return gasRefundPool.length;\n    }\n\n    function remainingSponsoredTransactions() public view returns (uint) {\n        return gasRefundPool.length / 3;\n    }\n}",
        "debug": "storage_0: 0xfffffffffffffffffffffffffffffffffffffffffffffeffffffffe9f0fffff8\nstorage_18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n115792089237316195423570985008687907853269984665640564039457584007913129639935 +\nstorage_0: 0x0\ngasprice: 0x1\ncalldata_GasRefundToken_0: 0x5bc758e200000000000000000000000000000000000000000000000000000000\ncalldatasize_GasRefundToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `gasRefund()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/27/0x6da9b79cd36c8787ebd38de8e0c7767a4d7110b0.sol",
        "function": "gasRefund()",
        "lineno": 10,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}