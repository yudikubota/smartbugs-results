{
  "contract": "0xa010cfd6e52336eb25adacafb005c516645193dd",
  "tool": "mythril",
  "start": 1563768614.8641589,
  "end": 1563768832.1537347,
  "duration": 217.2895758152008,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2471,
        "code": "s Ownable {\n\n  /**\n  ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/43/0xa010cfd6e52336eb25adacafb005c516645193dd.sol",
        "function": "_function_0x17ffc320",
        "lineno": 99,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2471,
        "code": "s Ownable {\n\n  /**\n  ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6693\n",
        "filename": "/unique_chucks/43/0xa010cfd6e52336eb25adacafb005c516645193dd.sol",
        "function": "_function_0x17ffc320",
        "lineno": 99,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4855,
        "code": "kens\n  * @param from_ ad",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function reclaimEther(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/43/0xa010cfd6e52336eb25adacafb005c516645193dd.sol",
        "function": "reclaimEther()",
        "lineno": 129,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4867,
        "code": "ible tokens\n  * @param from_ add",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\ncaller: 0x0\ncalldata_WIZE_0: 0x9f727c2700000000000000000000000000000000000000000000000000000000\ncalldatasize_WIZE: 0x4\nretval_4855: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/43/0xa010cfd6e52336eb25adacafb005c516645193dd.sol",
        "function": "reclaimEther()",
        "lineno": 129,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6693,
        "code": " safeApprove(ERC20 token,",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/43/0xa010cfd6e52336eb25adacafb005c516645193dd.sol",
        "function": "_function_0x17ffc320",
        "lineno": 198,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 6793,
        "code": ";\n   ",
        "debug": "calldata_WIZE_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WIZE_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_WIZE_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_WIZE: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `increaseApproval(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/43/0xa010cfd6e52336eb25adacafb005c516645193dd.sol",
        "function": "increaseApproval(address,uint256)",
        "lineno": 27,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6806,
        "code": " c;\n  }\n}\n\ncon",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WIZE_4: 0x1\ncalldata_WIZE_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WIZE_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_WIZE: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/43/0xa010cfd6e52336eb25adacafb005c516645193dd.sol",
        "function": "increaseApproval(address,uint256)",
        "lineno": 28,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}