{"error": null, "issues": [{"address": 377, "code": "blisher) {\n            publisherMessage = message;\n        }\n    }\n\n    function betBlueCoin() public payable {\n        uint256 betAmount = get", "debug": "calldata_TwoCoinsOneMoonGame_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TwoCoinsOneMoonGame_0: 0x26eda1ac00000000000000000000000000000000000000000000000000000000\ncalldatasize_TwoCoinsOneMoonGame: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `putMessage(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "putMessage(string)", "lineno": 75, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1860, "code": "e[msg.sender] = 0;\n        msg", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "withdraw()", "lineno": 108, "title": "Message call to external contract", "type": "Informational"}, {"address": 1860, "code": "e[msg.sender] = 0;\n        msg", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2049\n", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "withdraw()", "lineno": 108, "title": "Multiple Calls", "type": "Information"}, {"address": 1860, "code": "e[msg.sender] = 0;\n        msg", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "withdraw()", "lineno": 108, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 2000, "code": "nner) private {\n       ", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "withdraw()", "lineno": 112, "title": "State change after external call", "type": "Warning"}, {"address": 2097, "code": "unt}));\n        endBetRed", "debug": "storage_4: 0x9813292147a0cf8e9ee492eedd75d65bd85ec2bbdbeb7ca63f6bc63d37df665d\ncallvalue: 0xe1e56345972e282e40d6984ec270165bdf9c9b221b8d60353e49773db6087557\nreturndatasize: 0x20\nretval_3206: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TwoCoinsOneMoonGame_0: 0x46ff4ce600000000000000000000000000000000000000000000000000000000\ncalldatasize_TwoCoinsOneMoonGame: 0x4\n", "description": "A possible integer overflow exists in the function `betRedCoin()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "betRedCoin()", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2103, "code": "unt}));\n        endBetRed", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "betRedCoin()", "lineno": 94, "title": "State change after external call", "type": "Warning"}, {"address": 2156, "code": ";\n\ncontract Discou", "debug": "storage_10: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_3206: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x16345785d8a0000\ncalldata_TwoCoinsOneMoonGame_0: 0x46ff4ce600000000000000000000000000000000000000000000000000000000\ncalldatasize_TwoCoinsOneMoonGame: 0x4\n", "description": "A possible integer overflow exists in the function `betRedCoin()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "betRedCoin()", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2159, "code": "ken { mapping (address ", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "betRedCoin()", "lineno": 3, "title": "State change after external call", "type": "Warning"}, {"address": 2262, "code": "ed.length;\n\n        checkMoon();\n    }\n\n    function withdraw()", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "betRedCoin()", "lineno": 95, "title": "State change after external call", "type": "Warning"}, {"address": 2273, "code": "ed.length;\n\n        checkMoon();\n    }\n\n    function withdraw()", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "betRedCoin()", "lineno": 95, "title": "State change after external call", "type": "Warning"}, {"address": 2287, "code": "       if (balance[feeCollect", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "betRedCoin()", "lineno": 101, "title": "State change after external call", "type": "Warning"}, {"address": 2325, "code": "ing (address => uint) ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TwoCoinsOneMoonGame_4: 0x0\nstorage_11: 0x0\ncalldata_TwoCoinsOneMoonGame_0: 0xa7a38f0b00000000000000000000000000000000000000000000000000000000\ncalldatasize_TwoCoinsOneMoonGame: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "_function_0xa7a38f0b", "lineno": 36, "title": "Exception state", "type": "Informational"}, {"address": 2406, "code": "  Event[] public history;\n", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TwoCoinsOneMoonGame_4: 0x0\nstorage_10: 0x0\ncalldata_TwoCoinsOneMoonGame_0: 0xc55f2b1d00000000000000000000000000000000000000000000000000000000\ncalldatasize_TwoCoinsOneMoonGame: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "_function_0xc55f2b1d", "lineno": 34, "title": "Exception state", "type": "Informational"}, {"address": 2912, "code": "   Bettor[] public bettorsR", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TwoCoinsOneMoonGame_4: 0x0\nstorage_9: 0x0\ncalldata_TwoCoinsOneMoonGame_0: 0xfff31ae000000000000000000000000000000000000000000000000000000000\ncalldatasize_TwoCoinsOneMoonGame: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "_function_0xfff31ae0", "lineno": 32, "title": "Exception state", "type": "Informational"}, {"address": 3206, "code": "comission = betAmount * 48 / 1000;\n", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "betBlueCoin()", "lineno": 66, "title": "Message call to external contract", "type": "Informational"}, {"address": 3420, "code": "l || marketCapRed >= moonLevel) {\n ", "debug": "block_number: 0x0\nstorage_0: 0x1\nreturndatasize: 0x20\nretval_3206: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x16345785d8a0000\ncalldata_TwoCoinsOneMoonGame_0: 0x46ff4ce600000000000000000000000000000000000000000000000000000000\ncalldatasize_TwoCoinsOneMoonGame: 0x4\n", "description": "A possible integer underflow exists in the function `betRedCoin()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "betRedCoin()", "lineno": 161, "title": "Integer Underflow", "type": "Warning"}, {"address": 3551, "code": ";\n\ncontract Discou", "debug": "storage_0: 0x600000000000000000080000000000001c0000000000000000000000000000\nstorage_11: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nblock_number: 0x7fd041ffffffffffffefffffffffffffffb000000000000000000000001ea800\nreturndatasize: 0x20\nretval_3206: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x16345785d8a0000\ncalldata_TwoCoinsOneMoonGame_0: 0x46ff4ce600000000000000000000000000000000000000000000000000000000\ncalldatasize_TwoCoinsOneMoonGame: 0x4\n", "description": "A possible integer overflow exists in the function `betRedCoin()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "betRedCoin()", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3649, "code": "er;\n        if (ma", "debug": "storage_0: 0x200000000000000000000000000000000000000040\nblock_number: 0x20000000000000000000000000000000000080a451\nstorage_11: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_3206: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x16345785d8a0000\ncalldata_TwoCoinsOneMoonGame_0: 0x46ff4ce600000000000000000000000000000000000000000000000000000000\ncalldatasize_TwoCoinsOneMoonGame: 0x4\n", "description": "A possible integer underflow exists in the function `betRedCoin()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "betRedCoin()", "lineno": 135, "title": "Integer Underflow", "type": "Warning"}, {"address": 4734, "code": "ract TwoCoinsOneMoonGame {\n    struct Bettor {\n        address account;\n        uint256 amount;\n    }\n\n    struct Event {\n        uint256 winner; //0 - blue; 1 - red\n        uint256 newMoonLevel;\n        uint256 block;\n        uint256 blueCap;\n        uint256 redCap;\n    }\n\n    uint256 public lastLevelChangeBlock;\n    uint256 public lastEventId;\n    uint256 public moonLevel;\n\n    uint256 public marketCapBlue;\n    uint256 public marketCapRed;\n    \n    uint256 public startBetBlue;\n    uint256 public endBetBlue;\n    uint256 public startBetRed;\n    uint256 public endBetRed;\n\n    Bettor[] public bettorsBlue;\n    Bettor[] public bettorsRed;\n\n    Event[] public history;\n\n    mapping (address => uint) public balance;\n\n    address private feeCollector;\n\n    DiscountToken discountToken;\n\n    string public publisherMessage;\n    address publisher;\n\n    constructor() public {\n        marketCapBlue = 0;\n        marketCapRed = 0;\n        \n        startBetBlue = 0;\n        startBetRed = 0;\n        endBetBlue = 0;\n        endBetRed = 0;\n\n        publisher = msg.sender;\n        feeCollector = 0xfD4e7B9F4F97330356F7d1b5DDB9843F2C3e9d87;\n        discountToken = DiscountToken(0x25a803EC5d9a14D41F1Af5274d3f2C77eec80CE9);\n        lastLevelChangeBlock = block.number;\n        moonLevel = 500 finney;\n    }\n\n    function getBetAmount() private returns (uint256) {\n        require (msg.value >= 100 finney);\n\n        uint256 betAmount = msg.value;\n        if (discountToken.balanceOf(msg.sender) == 0) {\n            uint256 comission = betAmount * 48 / 1000;\n            betAmount -= comission;\n            balance[feeCollector] += comission;\n        }\n\n        return betAmount;\n    }\n\n    function putMessage(string message) public {\n        if (msg.sender == publisher) {\n            publisherMessage = message;\n        }\n    }\n\n    function betBlueCoin() public payable {\n        uint256 betAmount = getBetAmount();\n\n        marketCapBlue += betAmount;\n        bettorsBlue.push(Bettor({account:msg.sender, amount:betAmount}));\n        endBetBlue = bettorsBlue.length;\n\n        checkMoon();\n    }\n\n    function betRedCoin() public payable {\n        uint256 betAmount = getBetAmount();\n\n        marketCapRed += betAmount;\n        bettorsRed.push(Bettor({account:msg.sender, amount:betAmount}));\n        endBetRed = bettorsRed.length;\n\n        checkMoon();\n    }\n\n    function withdraw() public {\n        if (balance[feeCollector] != 0) {\n            uint256 fee = balance[feeCollector];\n            balance[feeCollector] = 0;\n            feeCollector.call.value(fee)();\n        }\n\n        uint256 amount = balance[msg.sender];\n        balance[msg.sender] = 0;\n        msg.sender.transfer(amount);\n    }\n\n    function depositBalance(uint256 winner) private {\n        uint256 i;\n        if (winner == 0) {\n            for (i = startBetBlue; i < bettorsBlue.length; i++) {\n                balance[bettorsBlue[i].account] += bettorsBlue[i].amount;\n                balance[bettorsBlue[i].account] += 10**18 * bettorsBlue[i].amount / marketCapBlue * marketCapRed / 10**18;\n            }\n        }\n        else {\n            for (i = startBetRed; i < bettorsRed.length; i++) {\n                balance[bettorsRed[i].account] += bettorsRed[i].amount;\n                balance[bettorsRed[i].account] += 10**18 * bettorsRed[i].amount / marketCapRed * marketCapBlue / 10**18;\n            }\n        }\n    }\n\n    function addEvent(uint256 winner) private {\n        history.push(Event({winner: winner, newMoonLevel: moonLevel, block: block.number, blueCap: marketCapBlue, redCap: marketCapRed}));\n        lastEventId = history.length - 1;\n        lastLevelChangeBlock = block.number;\n    }\n\n    function burstBubble() private {\n        uint256 winner;\n        if (marketCapBlue == marketCapRed) {\n            winner = block.number % 2;\n        }\n        else if (marketCapBlue > marketCapRed) {\n            winner = 0;\n        }\n        else {\n            winner = 1;\n        }\n        depositBalance(winner);\n        moonLevel = moonLevel * 2;\n        addEvent(winner);\n\n        marketCapBlue = 0;\n        marketCapRed = 0;\n        \n        startBetBlue = bettorsBlue.length;\n        startBetRed = bettorsRed.length;\n    }\n\n    function checkMoon() private {\n        if (block.number - lastLevelChangeBlock > 42000) {\n           moonLevel = moonLevel / 2;\n           addEvent(2);\n        }\n        if (marketCapBlue >= moonLevel || marketCapRed >= moonLevel) {\n            burstBubble();\n        }\n    }\n}", "debug": "calldata_TwoCoinsOneMoonGame_4 + calldata_TwoCoinsOneMoonGame_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_16: 0x0\ncaller: 0x0\ncalldata_TwoCoinsOneMoonGame_0: 0x26eda1ac00000000000000000000000000000000000000000000000000000000\ncalldatasize_TwoCoinsOneMoonGame: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `putMessage(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "putMessage(string)", "lineno": 5, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4748, "code": "ract TwoCoinsOneMoonGame {\n    struct Bettor {\n        address account;\n        uint256 amount;\n    }\n\n    struct Event {\n        uint256 winner; //0 - blue; 1 - red\n        uint256 newMoonLevel;\n        uint256 block;\n        uint256 blueCap;\n        uint256 redCap;\n    }\n\n    uint256 public lastLevelChangeBlock;\n    uint256 public lastEventId;\n    uint256 public moonLevel;\n\n    uint256 public marketCapBlue;\n    uint256 public marketCapRed;\n    \n    uint256 public startBetBlue;\n    uint256 public endBetBlue;\n    uint256 public startBetRed;\n    uint256 public endBetRed;\n\n    Bettor[] public bettorsBlue;\n    Bettor[] public bettorsRed;\n\n    Event[] public history;\n\n    mapping (address => uint) public balance;\n\n    address private feeCollector;\n\n    DiscountToken discountToken;\n\n    string public publisherMessage;\n    address publisher;\n\n    constructor() public {\n        marketCapBlue = 0;\n        marketCapRed = 0;\n        \n        startBetBlue = 0;\n        startBetRed = 0;\n        endBetBlue = 0;\n        endBetRed = 0;\n\n        publisher = msg.sender;\n        feeCollector = 0xfD4e7B9F4F97330356F7d1b5DDB9843F2C3e9d87;\n        discountToken = DiscountToken(0x25a803EC5d9a14D41F1Af5274d3f2C77eec80CE9);\n        lastLevelChangeBlock = block.number;\n        moonLevel = 500 finney;\n    }\n\n    function getBetAmount() private returns (uint256) {\n        require (msg.value >= 100 finney);\n\n        uint256 betAmount = msg.value;\n        if (discountToken.balanceOf(msg.sender) == 0) {\n            uint256 comission = betAmount * 48 / 1000;\n            betAmount -= comission;\n            balance[feeCollector] += comission;\n        }\n\n        return betAmount;\n    }\n\n    function putMessage(string message) public {\n        if (msg.sender == publisher) {\n            publisherMessage = message;\n        }\n    }\n\n    function betBlueCoin() public payable {\n        uint256 betAmount = getBetAmount();\n\n        marketCapBlue += betAmount;\n        bettorsBlue.push(Bettor({account:msg.sender, amount:betAmount}));\n        endBetBlue = bettorsBlue.length;\n\n        checkMoon();\n    }\n\n    function betRedCoin() public payable {\n        uint256 betAmount = getBetAmount();\n\n        marketCapRed += betAmount;\n        bettorsRed.push(Bettor({account:msg.sender, amount:betAmount}));\n        endBetRed = bettorsRed.length;\n\n        checkMoon();\n    }\n\n    function withdraw() public {\n        if (balance[feeCollector] != 0) {\n            uint256 fee = balance[feeCollector];\n            balance[feeCollector] = 0;\n            feeCollector.call.value(fee)();\n        }\n\n        uint256 amount = balance[msg.sender];\n        balance[msg.sender] = 0;\n        msg.sender.transfer(amount);\n    }\n\n    function depositBalance(uint256 winner) private {\n        uint256 i;\n        if (winner == 0) {\n            for (i = startBetBlue; i < bettorsBlue.length; i++) {\n                balance[bettorsBlue[i].account] += bettorsBlue[i].amount;\n                balance[bettorsBlue[i].account] += 10**18 * bettorsBlue[i].amount / marketCapBlue * marketCapRed / 10**18;\n            }\n        }\n        else {\n            for (i = startBetRed; i < bettorsRed.length; i++) {\n                balance[bettorsRed[i].account] += bettorsRed[i].amount;\n                balance[bettorsRed[i].account] += 10**18 * bettorsRed[i].amount / marketCapRed * marketCapBlue / 10**18;\n            }\n        }\n    }\n\n    function addEvent(uint256 winner) private {\n        history.push(Event({winner: winner, newMoonLevel: moonLevel, block: block.number, blueCap: marketCapBlue, redCap: marketCapRed}));\n        lastEventId = history.length - 1;\n        lastLevelChangeBlock = block.number;\n    }\n\n    function burstBubble() private {\n        uint256 winner;\n        if (marketCapBlue == marketCapRed) {\n            winner = block.number % 2;\n        }\n        else if (marketCapBlue > marketCapRed) {\n            winner = 0;\n        }\n        else {\n            winner = 1;\n        }\n        depositBalance(winner);\n        moonLevel = moonLevel * 2;\n        addEvent(winner);\n\n        marketCapBlue = 0;\n        marketCapRed = 0;\n        \n        startBetBlue = bettorsBlue.length;\n        startBetRed = bettorsRed.length;\n    }\n\n    function checkMoon() private {\n        if (block.number - lastLevelChangeBlock > 42000) {\n           moonLevel = moonLevel / 2;\n           addEvent(2);\n        }\n        if (marketCapBlue >= moonLevel || marketCapRed >= moonLevel) {\n            burstBubble();\n        }\n    }\n}", "debug": "calldata_TwoCoinsOneMoonGame_4 + calldata_TwoCoinsOneMoonGame_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_16: 0x0\ncaller: 0x0\ncalldata_TwoCoinsOneMoonGame_0: 0x26eda1ac00000000000000000000000000000000000000000000000000000000\ncalldatasize_TwoCoinsOneMoonGame: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `putMessage(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/16/0x6b62f10b1d042d3ed601899ca25f80f9dbc92644.sol", "function": "putMessage(string)", "lineno": 5, "title": "Integer Overflow ", "type": "Warning"}], "success": true}