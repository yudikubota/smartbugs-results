{
  "contract": "0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9",
  "tool": "mythril",
  "start": 1563641011.0737996,
  "end": 1563641082.6192644,
  "duration": 71.54546475410461,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1460,
        "code": "+ totalPaid)/tot",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/27/0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol",
        "function": "ICOaddress(address)",
        "lineno": 335,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1531,
        "code": "this).balance + totalPaid)/totalSupply)*Ownes)",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/27/0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol",
        "function": "ICOaddress(address)",
        "lineno": 335,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 1702,
        "code": "g (uint => Ticket) T",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_dividendsContract_4: 0xedd4845132f87ad080b673c4f3ba775fb2edfe75bc44bf4cb1897a67a52ac8\nstorage_8: 0x0\ncaller: 0x0\ncalldata_dividendsContract_0: 0xd349aea00000000000000000000000000000000000000000000000000000000\ncalldatasize_dividendsContract: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updatePaid(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/27/0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol",
        "function": "updatePaid(address,address,uint256)",
        "lineno": 375,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1710,
        "code": "ng (uint => Ticket) Tickets;\n",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8: 0x0\ncaller: 0x0\ncalldata_dividendsContract_0: 0xd349aea00000000000000000000000000000000000000000000000000000000\ncalldatasize_dividendsContract: 0x4\ncalldata_dividendsContract_32 + 36: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/27/0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol",
        "function": "updatePaid(address,address,uint256)",
        "lineno": 375,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2944,
        "code": " function th",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/27/0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol",
        "function": "collectDividends(address)",
        "lineno": 342,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2944,
        "code": " function th",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3437\nCall at address: 3211\n",
        "filename": "/unique_chucks/27/0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol",
        "function": "collectDividends(address)",
        "lineno": 342,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2944,
        "code": " function th",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function collectDividends(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/27/0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol",
        "function": "collectDividends(address)",
        "lineno": 342,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3211,
        "code": "int){\n        return",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/27/0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol",
        "function": "collectDividends(address)",
        "lineno": 342,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3211,
        "code": "int){\n        return",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3437\n",
        "filename": "/unique_chucks/27/0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol",
        "function": "collectDividends(address)",
        "lineno": 342,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3211,
        "code": "int){\n        return",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function collectDividends(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/27/0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol",
        "function": "collectDividends(address)",
        "lineno": 342,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3383,
        "code": "tePaid(address from, address to, uint perc) {\n ",
        "debug": "The exception is triggered under the following conditions:\n\nretval_2944: 0x1\nretval_3211: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0x2\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_dividendsContract_4: 0x0\ncaller: 0x0\ncalldata_dividendsContract_0: 0xc93ceec800000000000000000000000000000000000000000000000000000000\ncalldatasize_dividendsContract: 0x4\nstorage_6: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/27/0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol",
        "function": "collectDividends(address)",
        "lineno": 346,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3437,
        "code": "ddress);\n        uint v",
        "debug": "",
        "description": "In the function `collectDividends(address)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/27/0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol",
        "function": "collectDividends(address)",
        "lineno": 347,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 3437,
        "code": "ddress);\n        uint v",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function collectDividends(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/27/0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol",
        "function": "collectDividends(address)",
        "lineno": 347,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3592,
        "code": "[from] * 1000000) / perc) / 1000;\n  ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/27/0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol",
        "function": "collectDividends(address)",
        "lineno": 348,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3603,
        "code": "from] = paid[from] - val;\n    ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/27/0x0e9186d1d0c7aa2212e3f42405eda1bc35d826a9.sol",
        "function": "collectDividends(address)",
        "lineno": 349,
        "title": "State change after external call",
        "type": "Warning"
      }
    ],
    "success": true
  }
}