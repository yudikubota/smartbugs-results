{"error": null, "issues": [{"address": 647, "code": "sages[index].timestamp;\n    }", "debug": "The exception is triggered under the following conditions:\n\ncalldata_InternetWall_4: 0x0\nstorage_31: 0x0\ncalldata_InternetWall_0: 0x5cfb4aa400000000000000000000000000000000000000000000000000000000\ncalldatasize_InternetWall: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/31/0xe8ac5be8c5be3efb86197d32d03598395113229f.sol", "function": "getMessageTimestamp(uint256)", "lineno": 51, "title": "Exception state", "type": "Informational"}, {"address": 662, "code": " closeWall(){\n ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_InternetWall_4: 0xa\nstorage_31: 0xb\ncalldata_InternetWall_0: 0x5cfb4aa400000000000000000000000000000000000000000000000000000000\ncalldatasize_InternetWall: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/31/0xe8ac5be8c5be3efb86197d32d03598395113229f.sol", "function": "getMessageTimestamp(uint256)", "lineno": 54, "title": "Exception state", "type": "Informational"}, {"address": 778, "code": "sg;\n        messagesInd", "debug": "The exception is triggered under the following conditions:\n\nstorage_31: 0xa\ncalldata_InternetWall_0: 0x6a226a4900000000000000000000000000000000000000000000000000000000\ncalldatasize_InternetWall: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/31/0xe8ac5be8c5be3efb86197d32d03598395113229f.sol", "function": "addMessage(string)", "lineno": 31, "title": "Exception state", "type": "Informational"}, {"address": 799, "code": "sg;\n        messagesIndex += 1;\n", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_InternetWall_4 + calldata_InternetWall_4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_31: 0x9\ncalldata_InternetWall_0: 0x6a226a4900000000000000000000000000000000000000000000000000000000\ncalldatasize_InternetWall: 0x4\n", "description": "A possible integer overflow exists in the function `addMessage(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/31/0xe8ac5be8c5be3efb86197d32d03598395113229f.sol", "function": "addMessage(string)", "lineno": 31, "title": "Integer Overflow ", "type": "Warning"}, {"address": 947, "code": "function getMess", "debug": "storage_32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nkeccac_0_+_1_+_3*storage_31: 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 + 1 + 3*storage_31: 0x48\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_InternetWall_4 + calldata_InternetWall_4)) +\n0: 0x0\nstorage_31: 0x9\ncalldata_InternetWall_0: 0x6a226a4900000000000000000000000000000000000000000000000000000000\ncalldatasize_InternetWall: 0x4\n", "description": "A possible integer overflow exists in the function `addMessage(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/31/0xe8ac5be8c5be3efb86197d32d03598395113229f.sol", "function": "addMessage(string)", "lineno": 37, "title": "Integer Overflow ", "type": "Warning"}, {"address": 970, "code": "turn messages[index].message;", "debug": "The exception is triggered under the following conditions:\n\ncalldata_InternetWall_4: 0x0\nstorage_31: 0x0\ncalldata_InternetWall_0: 0x86f79edb00000000000000000000000000000000000000000000000000000000\ncalldatasize_InternetWall: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/31/0xe8ac5be8c5be3efb86197d32d03598395113229f.sol", "function": "getMessage(uint256)", "lineno": 43, "title": "Exception state", "type": "Informational"}, {"address": 985, "code": "n getMessageSen", "debug": "The exception is triggered under the following conditions:\n\ncalldata_InternetWall_4: 0xa\nstorage_31: 0xb\ncalldata_InternetWall_0: 0x86f79edb00000000000000000000000000000000000000000000000000000000\ncalldatasize_InternetWall: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/31/0xe8ac5be8c5be3efb86197d32d03598395113229f.sol", "function": "getMessage(uint256)", "lineno": 45, "title": "Exception state", "type": "Informational"}, {"address": 1240, "code": "   }\n    \n}", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_InternetWall_0: 0x996f324700000000000000000000000000000000000000000000000000000000\ncalldatasize_InternetWall: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/31/0xe8ac5be8c5be3efb86197d32d03598395113229f.sol", "function": "closeWall()", "lineno": 57, "title": "Exception state", "type": "Informational"}, {"address": 1313, "code": " messages[index].from;\n    }\n", "debug": "The exception is triggered under the following conditions:\n\ncalldata_InternetWall_4: 0x0\nstorage_31: 0x0\ncalldata_InternetWall_0: 0xd208fd6000000000000000000000000000000000000000000000000000000000\ncalldatasize_InternetWall: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/31/0xe8ac5be8c5be3efb86197d32d03598395113229f.sol", "function": "getMessageSender(uint256)", "lineno": 47, "title": "Exception state", "type": "Informational"}, {"address": 1328, "code": "ssageTimestamp(", "debug": "The exception is triggered under the following conditions:\n\ncalldata_InternetWall_4: 0xa\nstorage_31: 0xb\ncalldata_InternetWall_0: 0xd208fd6000000000000000000000000000000000000000000000000000000000\ncalldatasize_InternetWall: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/31/0xe8ac5be8c5be3efb86197d32d03598395113229f.sol", "function": "getMessageSender(uint256)", "lineno": 49, "title": "Exception state", "type": "Informational"}, {"address": 1471, "code": "tract InternetWall {\n\n    address owner;\n\n    struct Message{\n        string message;\n        address from;\n        uint timestamp;\n    }\n    \n    Message[10] messages;\n    uint messagesIndex;\n    \n    uint postedMessages;\n\n\n    function InternetWall() {\n        owner = msg.sender;\n        messagesIndex = 0;\n        postedMessages = 0;\n    }\n    \n    function addMessage(string msgStr) payable {\n        Message memory newMsg;\n        newMsg.message = msgStr;\n        newMsg.from = msg.sender;\n        newMsg.timestamp = block.timestamp;\n        messages[messagesIndex] = newMsg;\n        messagesIndex += 1;\n        messagesIndex = messagesIndex % 10;\n        postedMessages++;\n    }\n    \n    function getMessagesCount() constant returns (uint) {\n        return messagesIndex;\n    }\n    \n    function getMessage(uint index) constant returns(string) {\n        assert(index < messagesIndex);\n        return messages[index].message;\n    }\n    function getMessageSender(uint index) constant returns(address) {\n        assert(index < messagesIndex);\n        return messages[index].from;\n    }\n    function getMessageTimestamp(uint index) constant returns(uint) {\n        assert(index < messagesIndex);\n        return messages[index].timestamp;\n    }\n    \n    function closeWall(){\n        assert(msg.sender == owner);\n        suicide(owner);\n    }\n    \n}", "debug": "keccac_0_+_1_+_3*storage_31: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_0 + 1 + 3*storage_31: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_31: 0x9\ncalldata_InternetWall_0: 0x6a226a4900000000000000000000000000000000000000000000000000000000\ncalldatasize_InternetWall: 0x4\n", "description": "A possible integer overflow exists in the function `addMessage(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/31/0xe8ac5be8c5be3efb86197d32d03598395113229f.sol", "function": "addMessage(string)", "lineno": 4, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1500, "code": "tract InternetWall {\n\n    address owner;\n\n    struct Message{\n        string message;\n        address from;\n        uint timestamp;\n    }\n    \n    Message[10] messages;\n    uint messagesIndex;\n    \n    uint postedMessages;\n\n\n    function InternetWall() {\n        owner = msg.sender;\n        messagesIndex = 0;\n        postedMessages = 0;\n    }\n    \n    function addMessage(string msgStr) payable {\n        Message memory newMsg;\n        newMsg.message = msgStr;\n        newMsg.from = msg.sender;\n        newMsg.timestamp = block.timestamp;\n        messages[messagesIndex] = newMsg;\n        messagesIndex += 1;\n        messagesIndex = messagesIndex % 10;\n        postedMessages++;\n    }\n    \n    function getMessagesCount() constant returns (uint) {\n        return messagesIndex;\n    }\n    \n    function getMessage(uint index) constant returns(string) {\n        assert(index < messagesIndex);\n        return messages[index].message;\n    }\n    function getMessageSender(uint index) constant returns(address) {\n        assert(index < messagesIndex);\n        return messages[index].from;\n    }\n    function getMessageTimestamp(uint index) constant returns(uint) {\n        assert(index < messagesIndex);\n        return messages[index].timestamp;\n    }\n    \n    function closeWall(){\n        assert(msg.sender == owner);\n        suicide(owner);\n    }\n    \n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_InternetWall_4 + calldata_InternetWall_4)) +\n0: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_31: 0x9\ncalldata_InternetWall_0: 0x6a226a4900000000000000000000000000000000000000000000000000000000\ncalldatasize_InternetWall: 0x4\n", "description": "A possible integer overflow exists in the function `addMessage(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/31/0xe8ac5be8c5be3efb86197d32d03598395113229f.sol", "function": "addMessage(string)", "lineno": 4, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1514, "code": "tract InternetWall {\n\n    address owner;\n\n    struct Message{\n        string message;\n        address from;\n        uint timestamp;\n    }\n    \n    Message[10] messages;\n    uint messagesIndex;\n    \n    uint postedMessages;\n\n\n    function InternetWall() {\n        owner = msg.sender;\n        messagesIndex = 0;\n        postedMessages = 0;\n    }\n    \n    function addMessage(string msgStr) payable {\n        Message memory newMsg;\n        newMsg.message = msgStr;\n        newMsg.from = msg.sender;\n        newMsg.timestamp = block.timestamp;\n        messages[messagesIndex] = newMsg;\n        messagesIndex += 1;\n        messagesIndex = messagesIndex % 10;\n        postedMessages++;\n    }\n    \n    function getMessagesCount() constant returns (uint) {\n        return messagesIndex;\n    }\n    \n    function getMessage(uint index) constant returns(string) {\n        assert(index < messagesIndex);\n        return messages[index].message;\n    }\n    function getMessageSender(uint index) constant returns(address) {\n        assert(index < messagesIndex);\n        return messages[index].from;\n    }\n    function getMessageTimestamp(uint index) constant returns(uint) {\n        assert(index < messagesIndex);\n        return messages[index].timestamp;\n    }\n    \n    function closeWall(){\n        assert(msg.sender == owner);\n        suicide(owner);\n    }\n    \n}", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_InternetWall_4 + calldata_InternetWall_4)) +\n0: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_InternetWall_4 + calldata_InternetWall_4)) +\n0: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nstorage_31: 0x9\ncalldata_InternetWall_0: 0x6a226a4900000000000000000000000000000000000000000000000000000000\ncalldatasize_InternetWall: 0x4\n", "description": "A possible integer overflow exists in the function `addMessage(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/31/0xe8ac5be8c5be3efb86197d32d03598395113229f.sol", "function": "addMessage(string)", "lineno": 4, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1531, "code": "tract InternetWall {\n\n    address owner;\n\n    struct Message{\n        string message;\n        address from;\n        uint timestamp;\n    }\n    \n    Message[10] messages;\n    uint messagesIndex;\n    \n    uint postedMessages;\n\n\n    function InternetWall() {\n        owner = msg.sender;\n        messagesIndex = 0;\n        postedMessages = 0;\n    }\n    \n    function addMessage(string msgStr) payable {\n        Message memory newMsg;\n        newMsg.message = msgStr;\n        newMsg.from = msg.sender;\n        newMsg.timestamp = block.timestamp;\n        messages[messagesIndex] = newMsg;\n        messagesIndex += 1;\n        messagesIndex = messagesIndex % 10;\n        postedMessages++;\n    }\n    \n    function getMessagesCount() constant returns (uint) {\n        return messagesIndex;\n    }\n    \n    function getMessage(uint index) constant returns(string) {\n        assert(index < messagesIndex);\n        return messages[index].message;\n    }\n    function getMessageSender(uint index) constant returns(address) {\n        assert(index < messagesIndex);\n        return messages[index].from;\n    }\n    function getMessageTimestamp(uint index) constant returns(uint) {\n        assert(index < messagesIndex);\n        return messages[index].timestamp;\n    }\n    \n    function closeWall(){\n        assert(msg.sender == owner);\n        suicide(owner);\n    }\n    \n}", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_InternetWall_4 + calldata_InternetWall_4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_InternetWall_4 + calldata_InternetWall_4)) +\n0: 0x25\nstorage_31: 0x9\ncalldata_InternetWall_0: 0x6a226a4900000000000000000000000000000000000000000000000000000000\ncalldatasize_InternetWall: 0x4\n", "description": "A possible integer overflow exists in the function `addMessage(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/31/0xe8ac5be8c5be3efb86197d32d03598395113229f.sol", "function": "addMessage(string)", "lineno": 4, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1536, "code": "tract InternetWall {\n\n    address owner;\n\n    struct Message{\n        string message;\n        address from;\n        uint timestamp;\n    }\n    \n    Message[10] messages;\n    uint messagesIndex;\n    \n    uint postedMessages;\n\n\n    function InternetWall() {\n        owner = msg.sender;\n        messagesIndex = 0;\n        postedMessages = 0;\n    }\n    \n    function addMessage(string msgStr) payable {\n        Message memory newMsg;\n        newMsg.message = msgStr;\n        newMsg.from = msg.sender;\n        newMsg.timestamp = block.timestamp;\n        messages[messagesIndex] = newMsg;\n        messagesIndex += 1;\n        messagesIndex = messagesIndex % 10;\n        postedMessages++;\n    }\n    \n    function getMessagesCount() constant returns (uint) {\n        return messagesIndex;\n    }\n    \n    function getMessage(uint index) constant returns(string) {\n        assert(index < messagesIndex);\n        return messages[index].message;\n    }\n    function getMessageSender(uint index) constant returns(address) {\n        assert(index < messagesIndex);\n        return messages[index].from;\n    }\n    function getMessageTimestamp(uint index) constant returns(uint) {\n        assert(index < messagesIndex);\n        return messages[index].timestamp;\n    }\n    \n    function closeWall(){\n        assert(msg.sender == owner);\n        suicide(owner);\n    }\n    \n}", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_InternetWall_4 + calldata_InternetWall_4)) +\n0: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\nkeccac_0_+_1_+_3*storage_31: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_InternetWall_4 + calldata_InternetWall_4)) +\n0: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\nstorage_31: 0x9\ncalldata_InternetWall_0: 0x6a226a4900000000000000000000000000000000000000000000000000000000\ncalldatasize_InternetWall: 0x4\n", "description": "A possible integer overflow exists in the function `addMessage(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/31/0xe8ac5be8c5be3efb86197d32d03598395113229f.sol", "function": "addMessage(string)", "lineno": 4, "title": "Integer Overflow ", "type": "Warning"}], "success": true}