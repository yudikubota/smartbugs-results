{
  "contract": "0x92949bd74c4d21852a3d9f7dfb841fad2833302b",
  "tool": "mythril",
  "start": 1563631032.5312183,
  "end": 1563631256.4320743,
  "duration": 223.9008560180664,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 335,
        "code": " uint256 _amount)\n        pu",
        "debug": "SOLVER OUTPUT:\ncalldata_basisneuro_0: 0x6fdde1300000000000000000000000000000000000000000000000000000000\ncalldatasize_basisneuro: 0x4\n",
        "description": "In the function `fallback` a non-zero amount of Ether is sent to an address taken from storage slot 6.\nThere is a check on storage index 6. This storage slot can be written to by calling the function `JUST()`.\nIt seems that this function can be called without restrictions.",
        "filename": "/unique_chucks/28/0x92949bd74c4d21852a3d9f7dfb841fad2833302b.sol",
        "function": "fallback",
        "lineno": 206,
        "title": "Ether send",
        "type": "Warning"
      },
      {
        "address": 335,
        "code": " uint256 _amount)\n        pu",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/28/0x92949bd74c4d21852a3d9f7dfb841fad2833302b.sol",
        "function": "fallback",
        "lineno": 206,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1807,
        "code": " msg.sender);\n        name = _name;\n        symbol = _symbol;\n        stdBalance = _stdBalance;\n        totalSupply = _totalSupply;\n        JUSTed = _JUSTed;\n    }\n\n\n    /**\n     * Everyone has tokens!\n     * ... until we decide you don't.\n     */\n    function balanceOf(address _owner)\n        public\n        view \n    ",
        "debug": "calldata_basisneuro_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_basisneuro_0: 0xfdbb9fdb00000000000000000000000000000000000000000000000000000000\ncalldatasize_basisneuro: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `UNJUST(string,string,uint256,uint256,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0x92949bd74c4d21852a3d9f7dfb841fad2833302b.sol",
        "function": "UNJUST(string,string,uint256,uint256,bool)",
        "lineno": 152,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2251,
        "code": "\n    /**\n     * Once we ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffff0ffffe3c0c0000\ncalldata_basisneuro_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_basisneuro: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0x92949bd74c4d21852a3d9f7dfb841fad2833302b.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 144,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2755,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/28/0x92949bd74c4d21852a3d9f7dfb841fad2833302b.sol",
        "function": "rescueTokens(address,uint256)",
        "lineno": 212,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3413,
        "code": "rue;\n    }\n    \n    /**\n",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffff0ffffe3c0c0000\ncalldata_basisneuro_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_basisneuro: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0x92949bd74c4d21852a3d9f7dfb841fad2833302b.sol",
        "function": "transfer(address,uint256)",
        "lineno": 127,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3983,
        "code": "name = \"http://payments.basisneuro.com/guard/register?referal=315\";\n    uint8 public decimals = 18;                \n    string public symbol = \"http://payments.basisneuro.com/guard/register?referal=315\";\n    \n    // Default balance\n    uint256 public stdBalance;\n    mapping (address => uint256) public bonus;\n    \n    // Owner\n    address public owner;\n    bool public JUSTed;\n    \n    // PSA\n    event Message(string message);\n    \n\n    function JUST()\n        public\n    {\n        owner = msg.sender;\n        totalSupply = 1337 * 1e18;\n        stdBalance = 232 * 1e18;\n        JUSTed = true;\n    }\n    \n    /**\n     * Due to the presence of this function, it is considered a valid ERC20 token.\n     * However, due to a lack of actual functionality to support this function, you can never remove this token from your balance.\n     * RIP.\n     */\n   function transfer(address _to, uint256 _value)\n        public\n        returns (bool success)\n    {\n        bonus[msg.sender] = bonus[msg.sender] + 1e18;\n        Message(\"+1 token for you.\");\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    /**\n     * Due to the presence of this function, it is considered a valid ERC20 token.\n     * However, due to a lack of actual functionality to support this function, you can never remove this token from your balance.\n     * RIP.\n     */\n   function transferFrom(address _from, address _to, uint256 _value)\n        public\n        returns (bool success)\n    {\n        bonus[msg.sender] = bonus[msg.sender] + 1e18;\n        Message(\"+1 token for you.\");\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    /**\n     * Once we have sufficiently demonstrated how this 'exploit' is detrimental to Etherescan, we can disable the token and remove it from everyone's balance.\n     * Our intention for this \"token\" is to prevent a similar but more harmful project in the future that doesn't have your best intentions in mind.\n     */\n    function UNJUST(string _name, string _symbol, uint256 _stdBalance, uint256 _totalSupply, bool _JUSTed)\n        public\n    {\n        require(owner == msg.sender);\n        name = _name;\n        symbol = _symbol;\n        stdBalance = _stdBalance;\n        totalSupply = _totalSupply;\n        JUSTed = _JUSTed;\n    }\n\n\n    /**\n     * Everyone has tokens!\n     * ... until we decide you don't.\n     */\n    function balanceOf(address _owner)\n        public\n        view \n        returns (uint256 balance)\n    {\n        if(JUSTed){\n            if(bonus[_owner] > 0){\n                return stdBalance + bonus[_owner];\n            } else {\n                return stdBalance;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    function approve(address _spender, uint256 _value)\n        public\n        returns (bool success) \n    {\n        return true;\n    }\n\n    function allowance(address _owner, address _spender)\n        public\n        view\n        returns (uint256 remaining)\n    {\n        return 0;\n    }\n    \n    // in case someone accidentally sends ETH to this contract.\n    function()\n        public\n        payable\n    {\n        owner.transfer(this.balance);\n        Message(\"Thanks for your donation.\");\n    }\n    \n    // in case some accidentally sends other tokens to this contract.\n    function rescueTokens(address _address, uint256 _amount)\n        public\n        returns (bool)\n    {\n        return ERC20Interface(_address).transfer(owner, _amount);\n    }\n}",
        "debug": "calldata_basisneuro_4 + calldata_basisneuro_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_6: 0x0\ncalldata_basisneuro_0: 0xfdbb9fdb00000000000000000000000000000000000000000000000000000000\ncalldatasize_basisneuro: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `UNJUST(string,string,uint256,uint256,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0x92949bd74c4d21852a3d9f7dfb841fad2833302b.sol",
        "function": "UNJUST(string,string,uint256,uint256,bool)",
        "lineno": 90,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}