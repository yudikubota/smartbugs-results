{"error": null, "issues": [{"address": 2105, "code": "  \n    function _addExtraGasLimit() internal view {\n        uint256 start", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/21/0x223fe3c346bf47334eaccf1400717cb00d403372.sol", "function": "_function_0x1e1401f8", "lineno": 200, "title": "Message call to external contract", "type": "Informational"}, {"address": 2560, "code": "t[i - 1] = converters", "debug": "storage_1: 0x0\ncalldata_TokenConverterRouter_0: 0x56f0912500000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenConverterRouter: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `getConverters()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/21/0x223fe3c346bf47334eaccf1400717cb00d403372.sol", "function": "getConverters()", "lineno": 102, "title": "Integer Underflow", "type": "Warning"}, {"address": 3302, "code": "/ Send almost all gas\n       ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/21/0x223fe3c346bf47334eaccf1400717cb00d403372.sol", "function": "_function_0x5e35359e", "lineno": 328, "title": "Message call to external contract", "type": "Warning"}, {"address": 3381, "code": "> uint256) private converterToInde", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenConverterRouter_4: 0x0\nstorage_1: 0x0\ncalldata_TokenConverterRouter_0: 0x60a6e23a00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenConverterRouter: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/21/0x223fe3c346bf47334eaccf1400717cb00d403372.sol", "function": "_function_0x60a6e23a", "lineno": 65, "title": "Exception state", "type": "Informational"}, {"address": 3765, "code": ";\n\n// File: contra", "debug": "storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenConverterRouter_0: 0x6ce1c4dc00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenConverterRouter: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenConverterRouter_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x6ce1c4dc`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/21/0x223fe3c346bf47334eaccf1400717cb00d403372.sol", "function": "_function_0x6ce1c4dc", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3857, "code": "ter);\n        return true;\n    ", "debug": "storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenConverterRouter_0: 0x6ce1c4dc00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenConverterRouter: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenConverterRouter_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `_function_0x6ce1c4dc`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/21/0x223fe3c346bf47334eaccf1400717cb00d403372.sol", "function": "_function_0x6ce1c4dc", "lineno": 117, "title": "Integer Underflow", "type": "Warning"}, {"address": 7269, "code": "      converters.length--;\n      ", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenConverterRouter_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenConverterRouter_0: 0x9e76a00700000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenConverterRouter: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/21/0x223fe3c346bf47334eaccf1400717cb00d403372.sol", "function": "removeConverter(address)", "lineno": 133, "title": "Exception state", "type": "Informational"}, {"address": 7398, "code": "nverter(_converte", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenConverterRouter_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x10000000000000000000000000000000001000001\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenConverterRouter_0: 0x9e76a00700000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenConverterRouter: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/21/0x223fe3c346bf47334eaccf1400717cb00d403372.sol", "function": "removeConverter(address)", "lineno": 135, "title": "Exception state", "type": "Informational"}, {"address": 10740, "code": "                         x,                    // Store the ouput on x\n                            0x20                  // Output is a single bytes32, has 32 bytes\n                        )\n\n            result := mload(x)\n        }\n    }\n\n    function _safeCall(\n        address _contract,\n        bytes _data\n    ) internal returns (uint256 success, bytes32 result) {\n        assembly {\n            let x := mload(0x40)\n            success := call(\n                            gas,                  // Send almost all gas", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2105\nCall at address: 2105\n", "filename": "/unique_chucks/21/0x223fe3c346bf47334eaccf1400717cb00d403372.sol", "function": "_function_0x1e1401f8", "lineno": 332, "title": "Multiple Calls", "type": "Information"}, {"address": 11818, "code": " Input size is the lenght of data\n                            x,                    // Store the ouput on x\n                            0x20                  // Output is a single bytes32, has 32 bytes\n                        )\n\n            result := mload(x)\n        }\n    }\n\n    function() external payable {}\n}", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/21/0x223fe3c346bf47334eaccf1400717cb00d403372.sol", "function": "_function_0x75892cf1", "lineno": 351, "title": "Message call to external contract", "type": "Informational"}, {"address": 11818, "code": " Input size is the lenght of data\n                            x,                    // Store the ouput on x\n                            0x20                  // Output is a single bytes32, has 32 bytes\n                        )\n\n            result := mload(x)\n        }\n    }\n\n    function() external payable {}\n}", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 11818\n", "filename": "/unique_chucks/21/0x223fe3c346bf47334eaccf1400717cb00d403372.sol", "function": "_function_0x75892cf1", "lineno": 351, "title": "Multiple Calls", "type": "Information"}, {"address": 11818, "code": " Input size is the lenght of data\n                            x,                    // Store the ouput on x\n                            0x20                  // Output is a single bytes32, has 32 bytes\n                        )\n\n            result := mload(x)\n        }\n    }\n\n    function() external payable {}\n}", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_chucks/21/0x223fe3c346bf47334eaccf1400717cb00d403372.sol", "function": "_function_0x75892cf1", "lineno": 351, "title": "Unchecked CALL return value", "type": "Informational"}], "success": true}