{"error": null, "issues": [{"address": 156, "code": "blic {\n    require(bytes(_nick).length > 2);\n    require(ownerOf(_nick) == address(0));\n\n    address owner = msg.sender;\n    string storage oldNick = nickOfOwner[owner];\n\n    if (bytes(oldNick).length > 0) {\n      emit Unset(oldNick, owner);\n      delete ownerOfNick[oldNick];\n    }\n\n    nickOfOwner[owner] = _nick;\n    ownerOfNick[_nick] = owner;\n    emit Set(_nick, owner);\n  }\n\n  function unset () public {\n    require(by", "debug": "calldata_Nicks_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Nicks_0: 0x4ed3885e00000000000000000000000000000000000000000000000000000000\ncalldatasize_Nicks: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x4ed3885e`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x4a261669208347bf4f47a565edd166c609b84797.sol", "function": "_function_0x4ed3885e", "lineno": 31, "title": "Integer Overflow ", "type": "Warning"}, {"address": 168, "code": "blic {\n    require(bytes(_nick).length > 2);\n    require(ownerOf(_nick) == address(0));\n\n    address owner = msg.sender;\n    string storage oldNick = nickOfOwner[owner];\n\n    if (bytes(oldNick).length > 0) {\n      emit Unset(oldNick, owner);\n      delete ownerOfNick[oldNick];\n    }\n\n    nickOfOwner[owner] = _nick;\n    ownerOfNick[_nick] = owner;\n    emit Set(_nick, owner);\n  }\n\n  function unset () public {\n    require(by", "debug": "calldata_Nicks_4 + calldata_Nicks_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_Nicks_0: 0x4ed3885e00000000000000000000000000000000000000000000000000000000\ncalldatasize_Nicks: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x4ed3885e`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x4a261669208347bf4f47a565edd166c609b84797.sol", "function": "_function_0x4ed3885e", "lineno": 31, "title": "Integer Overflow ", "type": "Warning"}, {"address": 177, "code": "blic {\n    require(bytes(_nick).length > 2);\n    require(ownerOf(_nick) == address(0));\n\n    address owner = msg.sender;\n    string storage oldNick = nickOfOwner[owner];\n\n    if (bytes(oldNick).length > 0) {\n      emit Unset(oldNick, owner);\n      delete ownerOfNick[oldNick];\n    }\n\n    nickOfOwner[owner] = _nick;\n    ownerOfNick[_nick] = owner;\n    emit Set(_nick, owner);\n  }\n\n  function unset () public {\n    require(by", "debug": "calldata_Nicks_4 + calldata_Nicks_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_Nicks_0: 0x4ed3885e00000000000000000000000000000000000000000000000000000000\ncalldatasize_Nicks: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x4ed3885e`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x4a261669208347bf4f47a565edd166c609b84797.sol", "function": "_function_0x4ed3885e", "lineno": 31, "title": "Integer Overflow ", "type": "Warning"}, {"address": 183, "code": "blic {\n    require(bytes(_nick).length > 2);\n    require(ownerOf(_nick) == address(0));\n\n    address owner = msg.sender;\n    string storage oldNick = nickOfOwner[owner];\n\n    if (bytes(oldNick).length > 0) {\n      emit Unset(oldNick, owner);\n      delete ownerOfNick[oldNick];\n    }\n\n    nickOfOwner[owner] = _nick;\n    ownerOfNick[_nick] = owner;\n    emit Set(_nick, owner);\n  }\n\n  function unset () public {\n    require(by", "debug": "calldata_Nicks_4 + calldata_Nicks_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_Nicks_0: 0x4ed3885e00000000000000000000000000000000000000000000000000000000\ncalldatasize_Nicks: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x4ed3885e`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x4a261669208347bf4f47a565edd166c609b84797.sol", "function": "_function_0x4ed3885e", "lineno": 31, "title": "Integer Overflow ", "type": "Warning"}, {"address": 284, "code": "nick) public view returns (address _owner) {\n    return ownerOfNick[_nick];\n  }\n\n  function set (string _ni", "debug": "calldata_Nicks_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Nicks_0: 0x920ffa2600000000000000000000000000000000000000000000000000000000\ncalldatasize_Nicks: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x920ffa26`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x4a261669208347bf4f47a565edd166c609b84797.sol", "function": "_function_0x920ffa26", "lineno": 27, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2920, "code": "ntract Nicks {\n  mapping (address => string) private nickOfOwner;\n  mapping (string => address) private ownerOfNick;\n\n  event Set (string indexed _nick, address indexed _owner);\n  event Unset (string indexed _nick, address indexed _owner);\n\n  constructor () public {\n\tcontractOwner = msg.sender;\n  }\n  \n  address public contractOwner; \n  \n\nmodifier onlyOwner() {\n\t\trequire(contractOwner == msg.sender);\n\t\t_;\n\t}\n\n\t\n  function nickOf (address _owner) public view returns (string _nick) {\n    return nickOfOwner[_owner];\n  }\n\n  function ownerOf (string _nick) public view returns (address _owner) {\n    return ownerOfNick[_nick];\n  }\n\n  function set (string _nick) public {\n    require(bytes(_nick).length > 2);\n    require(ownerOf(_nick) == address(0));\n\n    address owner = msg.sender;\n    string storage oldNick = nickOfOwner[owner];\n\n    if (bytes(oldNick).length > 0) {\n      emit Unset(oldNick, owner);\n      delete ownerOfNick[oldNick];\n    }\n\n    nickOfOwner[owner] = _nick;\n    ownerOfNick[_nick] = owner;\n    emit Set(_nick, owner);\n  }\n\n  function unset () public {\n    require(bytes(nickOfOwner[msg.sender]).length > 0);\n\n    address owner = msg.sender;\n    string storage oldNick = nickOfOwner[owner];\n\n    emit Unset(oldNick, owner);\n\n    delete ownerOfNick[oldNick];\n    delete nickOfOwner[owner];\n  }\n\n  \n  \n\n/////////////////////////////////\n/// USEFUL FUNCTIONS ///\n////////////////////////////////\n\n/* Fallback function to accept all ether sent directly to the contract */\n\n    function() payable public\n    {    }\n\t\n\t\n\tfunction withdrawEther() public onlyOwner {\n\t\trequire(address(this).balance > 0);\n\t\t\n        contractOwner.transfer(address(this).balance);\n    }\n\t\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x20\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Nicks_4 + calldata_Nicks_4: 0x3\nstorage_KECCAC_mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Nicks_4 + calldata_Nicks_4))): 0x0\ncalldata_Nicks_0: 0x4ed3885e00000000000000000000000000000000000000000000000000000000\ncalldatasize_Nicks: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x4ed3885e`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x4a261669208347bf4f47a565edd166c609b84797.sol", "function": "_function_0x4ed3885e", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2985, "code": "ntract Nicks {\n  mapping (address => string) private nickOfOwner;\n  mapping (string => address) private ownerOfNick;\n\n  event Set (string indexed _nick, address indexed _owner);\n  event Unset (string indexed _nick, address indexed _owner);\n\n  constructor () public {\n\tcontractOwner = msg.sender;\n  }\n  \n  address public contractOwner; \n  \n\nmodifier onlyOwner() {\n\t\trequire(contractOwner == msg.sender);\n\t\t_;\n\t}\n\n\t\n  function nickOf (address _owner) public view returns (string _nick) {\n    return nickOfOwner[_owner];\n  }\n\n  function ownerOf (string _nick) public view returns (address _owner) {\n    return ownerOfNick[_nick];\n  }\n\n  function set (string _nick) public {\n    require(bytes(_nick).length > 2);\n    require(ownerOf(_nick) == address(0));\n\n    address owner = msg.sender;\n    string storage oldNick = nickOfOwner[owner];\n\n    if (bytes(oldNick).length > 0) {\n      emit Unset(oldNick, owner);\n      delete ownerOfNick[oldNick];\n    }\n\n    nickOfOwner[owner] = _nick;\n    ownerOfNick[_nick] = owner;\n    emit Set(_nick, owner);\n  }\n\n  function unset () public {\n    require(bytes(nickOfOwner[msg.sender]).length > 0);\n\n    address owner = msg.sender;\n    string storage oldNick = nickOfOwner[owner];\n\n    emit Unset(oldNick, owner);\n\n    delete ownerOfNick[oldNick];\n    delete nickOfOwner[owner];\n  }\n\n  \n  \n\n/////////////////////////////////\n/// USEFUL FUNCTIONS ///\n////////////////////////////////\n\n/* Fallback function to accept all ether sent directly to the contract */\n\n    function() payable public\n    {    }\n\t\n\t\n\tfunction withdrawEther() public onlyOwner {\n\t\trequire(address(this).balance > 0);\n\t\t\n        contractOwner.transfer(address(this).balance);\n    }\n\t\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Nicks_4 + calldata_Nicks_4: 0x40\nstorage_KECCAC_mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Nicks_4 + calldata_Nicks_4))): 0x0\ncalldata_Nicks_0: 0x4ed3885e00000000000000000000000000000000000000000000000000000000\ncalldatasize_Nicks: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x4ed3885e`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x4a261669208347bf4f47a565edd166c609b84797.sol", "function": "_function_0x4ed3885e", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3066, "code": "ntract Nicks {\n  mapping (address => string) private nickOfOwner;\n  mapping (string => address) private ownerOfNick;\n\n  event Set (string indexed _nick, address indexed _owner);\n  event Unset (string indexed _nick, address indexed _owner);\n\n  constructor () public {\n\tcontractOwner = msg.sender;\n  }\n  \n  address public contractOwner; \n  \n\nmodifier onlyOwner() {\n\t\trequire(contractOwner == msg.sender);\n\t\t_;\n\t}\n\n\t\n  function nickOf (address _owner) public view returns (string _nick) {\n    return nickOfOwner[_owner];\n  }\n\n  function ownerOf (string _nick) public view returns (address _owner) {\n    return ownerOfNick[_nick];\n  }\n\n  function set (string _nick) public {\n    require(bytes(_nick).length > 2);\n    require(ownerOf(_nick) == address(0));\n\n    address owner = msg.sender;\n    string storage oldNick = nickOfOwner[owner];\n\n    if (bytes(oldNick).length > 0) {\n      emit Unset(oldNick, owner);\n      delete ownerOfNick[oldNick];\n    }\n\n    nickOfOwner[owner] = _nick;\n    ownerOfNick[_nick] = owner;\n    emit Set(_nick, owner);\n  }\n\n  function unset () public {\n    require(bytes(nickOfOwner[msg.sender]).length > 0);\n\n    address owner = msg.sender;\n    string storage oldNick = nickOfOwner[owner];\n\n    emit Unset(oldNick, owner);\n\n    delete ownerOfNick[oldNick];\n    delete nickOfOwner[owner];\n  }\n\n  \n  \n\n/////////////////////////////////\n/// USEFUL FUNCTIONS ///\n////////////////////////////////\n\n/* Fallback function to accept all ether sent directly to the contract */\n\n    function() payable public\n    {    }\n\t\n\t\n\tfunction withdrawEther() public onlyOwner {\n\t\trequire(address(this).balance > 0);\n\t\t\n        contractOwner.transfer(address(this).balance);\n    }\n\t\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x40\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Nicks_0: 0xbbcbefd000000000000000000000000000000000000000000000000000000000\ncalldatasize_Nicks: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0xbbcbefd0`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x4a261669208347bf4f47a565edd166c609b84797.sol", "function": "_function_0xbbcbefd0", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}