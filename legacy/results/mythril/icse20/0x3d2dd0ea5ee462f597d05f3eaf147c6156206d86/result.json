{
  "contract": "0x3d2dd0ea5ee462f597d05f3eaf147c6156206d86",
  "tool": "mythril",
  "start": 1563566928.149539,
  "end": 1563567128.8939476,
  "duration": 200.7444086074829,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 827,
        "code": "ount);\n        totalUpgraded = totalUpgraded.add(_amount);\n\n        // Upgrade agent reissues the tokens\n        upgradeAgent.upgradeFrom(_holder, _amount);\n        Upgrade(_holder, upgradeAgent, _amount);\n    }\n\n}\n\n/**\n * @title QNTU 1.0 token\n */\ncontract QNTU is UpgradableToken, CappedToken, PausableToken {\n\n    /**\n\t * @dev Constructor\n\t */\n    function QNTU()\n        public",
        "debug": "calldata_UpgradeAgent_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_UpgradeAgent_0: 0x3c3ad01600000000000000000000000000000000000000000000000000000000\ncalldatasize_UpgradeAgent: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `forceUpgrade(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x3d2dd0ea5ee462f597d05f3eaf147c6156206d86.sol",
        "function": "forceUpgrade(address[])",
        "lineno": 621,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1251,
        "code": "mbol;\n        ChangeTokenInformation(_name, _symbol);\n    }\n\n\t/**\n\t * @dev Transfer token for a specified address\n\t * @param _to The address to transfer to.\n\t * @param _value The amount to be transferred.\n\t */",
        "debug": "calldata_UpgradeAgent_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_UpgradeAgent_0: 0x6e5320d100000000000000000000000000000000000000000000000000000000\ncalldatasize_UpgradeAgent: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeTokenInformation(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x3d2dd0ea5ee462f597d05f3eaf147c6156206d86.sol",
        "function": "changeTokenInformation(string,string)",
        "lineno": 149,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5497,
        "code": " their tokens to a new smart ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/17/0x3d2dd0ea5ee462f597d05f3eaf147c6156206d86.sol",
        "function": "changeUpgradeAgent(address)",
        "lineno": 580,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 7871,
        "code": " on overflow.\n  ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UpgradeAgent_cpy: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_UpgradeAgent_4 + calldata_UpgradeAgent_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0xff00\nstorage_7: 0x0\ncaller: 0x0\ncalldata_UpgradeAgent_0: 0x3c3ad01600000000000000000000000000000000000000000000000000000000\ncalldatasize_UpgradeAgent: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x3d2dd0ea5ee462f597d05f3eaf147c6156206d86.sol",
        "function": "forceUpgrade(address[])",
        "lineno": 99,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7889,
        "code": "ract St",
        "debug": "calldata_UpgradeAgent_32 + 36: 0xb135d1e4a0020a903239033aa9b45a69384c906b52a71e0575829626809581fd\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UpgradeAgent_32_+_4: 0xa7e6e147bc0ca40011bf9bbaadf7593cb8cc90b17cb7d73775f0d8eb1435e9c1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UpgradeAgent_4: 0xb135d1e4a0020a903239033aa9b45a69384c906b52a71e0575829626809581fd\ncalldata_UpgradeAgent_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_UpgradeAgent_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_UpgradeAgent: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x3d2dd0ea5ee462f597d05f3eaf147c6156206d86.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 116,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7902,
        "code": " is Ownable {\n\n",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_UpgradeAgent_32 + 36: 0x950dff78e666f73fd36ffedf5fe656f42f732f95edbafb7bf77fedeee4c653a9\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UpgradeAgent_32_+_4: 0xf71ca024c4e4c48edb080090575702d73908a831c1b8c07b8480010000f10f3b\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UpgradeAgent_4: 0x950dff78e666f73fd36ffedf5fe656f42f732f95edbafb7bf77fedeee4c653a9\ncalldata_UpgradeAgent_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_UpgradeAgent_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_UpgradeAgent: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x3d2dd0ea5ee462f597d05f3eaf147c6156206d86.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 116,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8544,
        "code": " Upgrade(address indexed from, address indexed to, uint value);\n\n    modifier onlyUpgradeMaster() {\n\t\trequire(msg.sender == upgradeMaster);\n\t\t_;\n\t}\n\n    modifier canUpgrade() {\n\t\trequire(isUpgradable);\n\t\t_;\n\t}\n\n    /**\n     * Change the upgrade master.\n     * @param _newMaster New upgrade master.\n     */\n    function changeUpgradeMaster(address _newMaster)\n        public\n        onlyOwner\n    {\n        require(_newMaster != 0);\n\n        upgradeMaster = _newMaster;\n        ChangeUpgradeMaster(_newMaster);\n    }\n\n    /**\n     * Change the upgrade agent.\n     * @param _newAgent New upgrade agent.\n     */\n    function changeUpgradeAgent(address _newAgent)\n        public\n        onlyOwner\n    {\n        require(totalUpgraded == 0);\n\n        upgradeAgent = UpgradeAgent(_newAgent);\n\n        // Bad interface\n        if (!upgradeAgent.isUpgradeAgent()) {\n            revert();\n        }\n\n        ChangeUpgradeAgent(_newAgent);\n    }\n\n    /**\n     * Disallow to upgrade token to new smart contract\n     */\n    function freezeUpgrade()\n        public\n        onlyOwner\n    {\n        isUpgradable = false;\n        FreezeUpgrade();\n    }\n\n    /**\n     * Allow to upgrade token to new smart contract\n     */\n    function unfreezeUpgrade()\n        public\n        onlyOwner\n    {\n        isUpgradable = true;\n        UnfreezeUpgrade();\n    }\n\n    /**\n     * Token holder upgrade their tokens to a new smart contract.\n     */\n    function upgrade()\n        public\n        canUpgrade\n    {\n        uint amount = balanceOf[msg.sender];\n\n        require(amount > 0);\n\n        processUpgrade(msg.sender, amount);\n    }\n\n    /**\n     * Upgrader upgrade tokens of holder to a new smart contract.\n     * @param _holders List of token holder.\n     */\n    function forceUpgrade(address[] _holders)\n        public\n        onlyUpgradeMaster\n        canUpgrade\n    {\n        uint amount;\n\n        for (uint i = 0; i < _holders.length; i++) {\n            amount = balanceOf[_holders[i]];\n\n            if (amount == 0) {\n                continue;\n            }\n\n            processUpgrade(_holders[i], amount);\n        }\n    }\n\n    function processUpgrade(address _holder, uint _amount)\n        private\n    {\n        balanceOf[_holder] = balanceOf[_holder].sub(_amount);\n\n        // Take tokens out from circulation\n        totalSupply = totalSupply.sub(_amount);\n        totalUpgraded = totalUpgraded.add(_amount);\n\n        // Upgrade agent reissues the tokens\n        upgradeAgent.upgradeFrom(_holder, _amount);\n        Upgrade(_holder, upgradeAgent, _amount);\n    }\n\n}\n\n/**\n * @title QNTU 1.0 token\n */\ncontract QNTU is UpgradableToken, CappedToken, PausableToken {\n\n    /**\n\t * @dev Constructor\n\t */\n    function QNTU()\n        public\n    {\n        symbol = \"QNTU\";\n        name = \"QNTU Token\";\n        decimals = 18;\n\n        uint multiplier = 10 ** uint(decimals);\n\n        cap = 120000000000 * multiplier;\n        totalSupply = 72000000000 * multiplier;\n\n        // 40%\n        balanceOf[0xd83ef0076580e595b3be39d654da97184623b9b5] = 4800000000 * multiplier;\n        balanceOf[0xd4e40860b41f666fbc6c3007f3d1434e353063d8] = 4800000000 * multiplier;\n        balanceOf[0x84dd4187a87055495d0c08fe",
        "debug": "calldata_UpgradeAgent_4 + calldata_UpgradeAgent_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_UpgradeAgent_0: 0x6e5320d100000000000000000000000000000000000000000000000000000000\ncalldatasize_UpgradeAgent: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeTokenInformation(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x3d2dd0ea5ee462f597d05f3eaf147c6156206d86.sol",
        "function": "changeTokenInformation(string,string)",
        "lineno": 511,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8558,
        "code": " Upgrade(address indexed from, address indexed to, uint value);\n\n    modifier onlyUpgradeMaster() {\n\t\trequire(msg.sender == upgradeMaster);\n\t\t_;\n\t}\n\n    modifier canUpgrade() {\n\t\trequire(isUpgradable);\n\t\t_;\n\t}\n\n    /**\n     * Change the upgrade master.\n     * @param _newMaster New upgrade master.\n     */\n    function changeUpgradeMaster(address _newMaster)\n        public\n        onlyOwner\n    {\n        require(_newMaster != 0);\n\n        upgradeMaster = _newMaster;\n        ChangeUpgradeMaster(_newMaster);\n    }\n\n    /**\n     * Change the upgrade agent.\n     * @param _newAgent New upgrade agent.\n     */\n    function changeUpgradeAgent(address _newAgent)\n        public\n        onlyOwner\n    {\n        require(totalUpgraded == 0);\n\n        upgradeAgent = UpgradeAgent(_newAgent);\n\n        // Bad interface\n        if (!upgradeAgent.isUpgradeAgent()) {\n            revert();\n        }\n\n        ChangeUpgradeAgent(_newAgent);\n    }\n\n    /**\n     * Disallow to upgrade token to new smart contract\n     */\n    function freezeUpgrade()\n        public\n        onlyOwner\n    {\n        isUpgradable = false;\n        FreezeUpgrade();\n    }\n\n    /**\n     * Allow to upgrade token to new smart contract\n     */\n    function unfreezeUpgrade()\n        public\n        onlyOwner\n    {\n        isUpgradable = true;\n        UnfreezeUpgrade();\n    }\n\n    /**\n     * Token holder upgrade their tokens to a new smart contract.\n     */\n    function upgrade()\n        public\n        canUpgrade\n    {\n        uint amount = balanceOf[msg.sender];\n\n        require(amount > 0);\n\n        processUpgrade(msg.sender, amount);\n    }\n\n    /**\n     * Upgrader upgrade tokens of holder to a new smart contract.\n     * @param _holders List of token holder.\n     */\n    function forceUpgrade(address[] _holders)\n        public\n        onlyUpgradeMaster\n        canUpgrade\n    {\n        uint amount;\n\n        for (uint i = 0; i < _holders.length; i++) {\n            amount = balanceOf[_holders[i]];\n\n            if (amount == 0) {\n                continue;\n            }\n\n            processUpgrade(_holders[i], amount);\n        }\n    }\n\n    function processUpgrade(address _holder, uint _amount)\n        private\n    {\n        balanceOf[_holder] = balanceOf[_holder].sub(_amount);\n\n        // Take tokens out from circulation\n        totalSupply = totalSupply.sub(_amount);\n        totalUpgraded = totalUpgraded.add(_amount);\n\n        // Upgrade agent reissues the tokens\n        upgradeAgent.upgradeFrom(_holder, _amount);\n        Upgrade(_holder, upgradeAgent, _amount);\n    }\n\n}\n\n/**\n * @title QNTU 1.0 token\n */\ncontract QNTU is UpgradableToken, CappedToken, PausableToken {\n\n    /**\n\t * @dev Constructor\n\t */\n    function QNTU()\n        public\n    {\n        symbol = \"QNTU\";\n        name = \"QNTU Token\";\n        decimals = 18;\n\n        uint multiplier = 10 ** uint(decimals);\n\n        cap = 120000000000 * multiplier;\n        totalSupply = 72000000000 * multiplier;\n\n        // 40%\n        balanceOf[0xd83ef0076580e595b3be39d654da97184623b9b5] = 4800000000 * multiplier;\n        balanceOf[0xd4e40860b41f666fbc6c3007f3d1434e353063d8] = 4800000000 * multiplier;\n        balanceOf[0x84dd4187a87055495d0c08fe",
        "debug": "calldata_UpgradeAgent_4 + calldata_UpgradeAgent_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_UpgradeAgent_0: 0x6e5320d100000000000000000000000000000000000000000000000000000000\ncalldatasize_UpgradeAgent: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeTokenInformation(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x3d2dd0ea5ee462f597d05f3eaf147c6156206d86.sol",
        "function": "changeTokenInformation(string,string)",
        "lineno": 511,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}