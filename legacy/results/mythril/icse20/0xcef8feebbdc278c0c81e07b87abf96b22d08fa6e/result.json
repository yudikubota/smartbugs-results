{
  "contract": "0xcef8feebbdc278c0c81e07b87abf96b22d08fa6e",
  "tool": "mythril",
  "start": 1563673468.161186,
  "end": 1563673486.380938,
  "duration": 18.219752073287964,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1515,
        "code": "ract) onlyOwner {\n    ERC20T",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/35/0xcef8feebbdc278c0c81e07b87abf96b22d08fa6e.sol",
        "function": "withdraw()",
        "lineno": 148,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1992,
        "code": "isitState.Completed); // Must be a visit th",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/35/0xcef8feebbdc278c0c81e07b87abf96b22d08fa6e.sol",
        "function": "claimReward(uint256)",
        "lineno": 82,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1992,
        "code": "isitState.Completed); // Must be a visit th",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function claimReward(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/35/0xcef8feebbdc278c0c81e07b87abf96b22d08fa6e.sol",
        "function": "claimReward(uint256)",
        "lineno": 82,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3452,
        "code": "uint total = pricePerUnicorn.mul(_unicornCount);\n    msg.sender.",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/35/0xcef8feebbdc278c0c81e07b87abf96b22d08fa6e.sol",
        "function": "sell(uint256)",
        "lineno": 101,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3452,
        "code": "uint total = pricePerUnicorn.mul(_unicornCount);\n    msg.sender.",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function sell(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/35/0xcef8feebbdc278c0c81e07b87abf96b22d08fa6e.sol",
        "function": "sell(uint256)",
        "lineno": 101,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3986,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/35/0xcef8feebbdc278c0c81e07b87abf96b22d08fa6e.sol",
        "function": "withdrawForeignTokens(address)",
        "lineno": 153,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3986,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4178\n",
        "filename": "/unique_chucks/35/0xcef8feebbdc278c0c81e07b87abf96b22d08fa6e.sol",
        "function": "withdrawForeignTokens(address)",
        "lineno": 153,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4178,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/35/0xcef8feebbdc278c0c81e07b87abf96b22d08fa6e.sol",
        "function": "withdrawForeignTokens(address)",
        "lineno": 153,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4406,
        "code": ";\n  }\n\n  funct",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_UnicornRefunds_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_UnicornRefunds_0: 0xe4849b3200000000000000000000000000000000000000000000000000000000\ncalldatasize_UnicornRefunds: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/35/0xcef8feebbdc278c0c81e07b87abf96b22d08fa6e.sol",
        "function": "sell(uint256)",
        "lineno": 34,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}