{
  "contract": "0xb01b98a50781c454c9daa3d43eb5399ff5b604ee",
  "tool": "mythril",
  "start": 1563691298.191255,
  "end": 1563691330.8472273,
  "duration": 32.65597224235535,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 845,
        "code": "ecret note\n     * @param _noteKey The key ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SecretNote_4: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_SecretNote_0: 0x1411722800000000000000000000000000000000000000000000000000000000\ncalldatasize_SecretNote: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/36/0xb01b98a50781c454c9daa3d43eb5399ff5b604ee.sol",
        "function": "getNoteKeyByIndex(uint256)",
        "lineno": 106,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1070,
        "code": ");\n    }\n\n    function () public payable ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_SecretNote_0: 0xeb0331d500000000000000000000000000000000000000000000000000000000\ncalldatasize_SecretNote: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/36/0xb01b98a50781c454c9daa3d43eb5399ff5b604ee.sol",
        "function": "destroyAccount()",
        "lineno": 51,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1310,
        "code": ";\n\n/**\n * @title O",
        "debug": "storage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SecretNote_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SecretNote_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SecretNote_0: 0x7b73aef800000000000000000000000000000000000000000000000000000000\ncalldatasize_SecretNote: 0x4\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SecretNote_4: 0x0\n",
        "description": "A possible integer overflow exists in the function `setNote(bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/36/0xb01b98a50781c454c9daa3d43eb5399ff5b604ee.sol",
        "function": "setNote(bytes32,bytes32)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1412,
        "code": ";\n\n/**\n * @title O",
        "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SecretNote_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SecretNote_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SecretNote_0: 0x7b73aef800000000000000000000000000000000000000000000000000000000\ncalldatasize_SecretNote: 0x4\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SecretNote_4: 0x0\n",
        "description": "A possible integer overflow exists in the function `setNote(bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/36/0xb01b98a50781c454c9daa3d43eb5399ff5b604ee.sol",
        "function": "setNote(bytes32,bytes32)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1738,
        "code": "cret note\n     * @par",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SecretNote_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncaller: 0x0\nstorage_0: 0x0\ncalldata_SecretNote_0: 0x90d976e200000000000000000000000000000000000000000000000000000000\ncalldatasize_SecretNote: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/36/0xb01b98a50781c454c9daa3d43eb5399ff5b604ee.sol",
        "function": "getUserAddress(uint256)",
        "lineno": 83,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2799,
        "code": " {\n    struct UserInfo {\n        mapping(bytes32 => bytes32) notes;\n        bytes32[] noteKeys;\n        uint256 index; // 1-based\n    }\n\n    mapping(address => UserInfo) private registerUsers;\n    address[] private userIndex;\n\n    event SecretNoteUpdated(address indexed _sender, bytes32 indexed _noteKey, bool _success);\n\n    function SecretNote() public {\n    }\n\n    function userExisted(address _user) public constant returns (bool) {\n        if (userIndex.length == 0) {\n            return false;\n        }\n\n        return (userIndex[registerUsers[_user].index - 1] == _user);\n    }\n\n    function () public payable {\n    }\n\n    /**\n     * @dev for owner to withdraw ETH from donators if there is any.  :)\n     * @param _to The address where withdraw to\n     * @param _amount The amount of ETH to withdraw\n     */\n    function withdraw(address _to, uint _amount) public onlyOwner {\n        _to.transfer(_amount);\n    }\n\n    /**\n     * @dev For owner to check registered user count\n     */\n    function getUserCount() public view onlyOwner returns (uint256) {\n        return userIndex.length;\n    }\n\n    /**\n     * @dev For owner to check registered user address based on index\n     * @param _index Starting from 1\n     */\n    function getUserAddress(uint256 _index) public view onlyOwner returns (address) {\n        require(_index > 0);\n        return userIndex[_index - 1];\n    }\n\n    /**\n     * @dev For user to get their own secret note\n     * @param _noteKey The key identifier for particular note\n     */\n    function getNote(bytes32 _noteKey) public view returns (bytes32) {\n        return registerUsers[msg.sender].notes[_noteKey];\n    }\n\n    /**\n     * @dev For user to get their own secret note keys count\n     */\n    function getNoteKeysCount() public view returns (uint256) {\n        return registerUsers[msg.sender].noteKeys.length;\n    }\n\n    /**\n     * @dev For user to get their own secret note key by index\n     * @param _index The 0-based index for particular note\n     */\n    function getNoteKeyByIndex(uint256 _index) public view returns (bytes32) {\n        return registerUsers[msg.sender].noteKeys[_index];\n    }\n\n    /**\n     * @dev For user to update their own secret note\n     * @param _noteKey The key identifier for particular note\n     * @param _content The note path hash\n     */\n    function setNote(bytes32 _noteKey, bytes32 _content) public payable {\n        require(_noteKey != \"\");\n        require(_content != \"\");\n\n        var userAddr = msg.sender;\n        var user = registerUsers[userAddr];\n        if (user.notes[_noteKey] == \"\") {\n            user.noteKeys.push(_noteKey);\n        }\n        user.notes[_noteKey] = _content;\n\n        if (user.index == 0) {\n            userIndex.push(userAddr);\n            user.index = userIndex.length;\n        }\n        SecretNoteUpdated(userAddr, _noteKey, true);\n    }\n\n    /**\n     * @dev Destroy one's account\n     */\n    function destroyAccount() public returns (bool) {\n        var userAddr = msg.sender;\n        require(userExisted(userAddr));\n\n        uint delIndex = registerUsers[userAddr].index;\n        address userToMove = userIndex[userIndex.length - 1];\n\n        if (userToMove == userAddr) {\n            delete(registerUsers[userAddr]);\n            userIndex.length = 0;\n            return true;\n        }\n\n        userIndex[delIndex - 1] = userToMove;\n        registerUsers[userToMove].index = delIndex;\n        userIndex.length--;\n        delete(registerUsers[userAddr]);\n        return true;\n    }\n}",
        "debug": "storage_2: 0xc000000000000000000000000000000000000000000000000000000000000000\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller_+\n1: 0x8000000000000000000000000400000000000000000000000000000000000003\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller +\n1: 0x8000000000000000000000000400000000000000000000000000000000000003\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n115792089237316195423570985008687907853269984665640564039457584007913129639935 +\nstorage_2: 0x0\ncaller: 0x0\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n115792089237316195423570985008687907853269984665640564039457584007913129639935 +\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc000000000000000000000000000000000000000000000000000000000000000\ncalldata_SecretNote_0: 0xeb0331d500000000000000000000000000000000000000000000000000000000\ncalldatasize_SecretNote: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `destroyAccount()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/36/0xb01b98a50781c454c9daa3d43eb5399ff5b604ee.sol",
        "function": "destroyAccount()",
        "lineno": 31,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}