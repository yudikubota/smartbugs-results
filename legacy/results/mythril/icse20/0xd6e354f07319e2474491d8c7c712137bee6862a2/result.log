{"error": null, "issues": [{"address": 340, "code": ") {\n        r", "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_LemoCoin: 0x3\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0xd6e354f07319e2474491d8c7c712137bee6862a2.sol", "function": "fallback", "lineno": 168, "title": "Exception state", "type": "Informational"}, {"address": 2806, "code": "   }\n\n}\ncontra", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/29/0xd6e354f07319e2474491d8c7c712137bee6862a2.sol", "function": "stop()", "lineno": 93, "title": "State change after external call", "type": "Warning"}, {"address": 4533, "code": "\n        var nodes = c_freezing_list[addr];\n      ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/29/0xd6e354f07319e2474491d8c7c712137bee6862a2.sol", "function": "removeFreezer(address)", "lineno": 282, "title": "Message call to external contract", "type": "Informational"}, {"address": 5373, "code": ", uint end_stamp, uint num_lemos, freezing_type", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/29/0xd6e354f07319e2474491d8c7c712137bee6862a2.sol", "function": "addFreezer(address)", "lineno": 280, "title": "Message call to external contract", "type": "Informational"}, {"address": 5569, "code": "an 0. The negative number wi", "debug": "The exception is triggered under the following conditions:\n\ncalldata_LemoCoin_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_LemoCoin_4: 0x0\ncalldata_LemoCoin_0: 0x78b8336000000000000000000000000000000000000000000000000000000000\ncalldatasize_LemoCoin: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0xd6e354f07319e2474491d8c7c712137bee6862a2.sol", "function": "freezingBalanceInfoOf(address,uint256)", "lineno": 336, "title": "Exception state", "type": "Informational"}, {"address": 5799, "code": "um_lemos < c_totalSupply);\n        clearExpiredFr", "debug": "The exception is triggered under the following conditions:\n\ncalldata_LemoCoin_32 + 4: 0x0\nstorage_2 +\n3*calldata_LemoCoin_32 + 4 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_LemoCoin_4: 0xfe00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_LemoCoin_4: 0x1\ncalldata_LemoCoin_0: 0x78b8336000000000000000000000000000000000000000000000000000000000\ncalldatasize_LemoCoin: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0xd6e354f07319e2474491d8c7c712137bee6862a2.sol", "function": "freezingBalanceInfoOf(address,uint256)", "lineno": 337, "title": "Exception state", "type": "Informational"}, {"address": 8571, "code": "}\ncontract DSNote {\n    event Log", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/29/0xd6e354f07319e2474491d8c7c712137bee6862a2.sol", "function": "addFreezer(address)", "lineno": 55, "title": "Message call to external contract", "type": "Informational"}, {"address": 8571, "code": "}\ncontract DSNote {\n    event Log", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4533\n", "filename": "/unique_chucks/29/0xd6e354f07319e2474491d8c7c712137bee6862a2.sol", "function": "removeFreezer(address)", "lineno": 55, "title": "Multiple Calls", "type": "Information"}], "success": true}