{
  "contract": "0x6bba97fa60ed6339ca583b8b40c2fd0c12284c2f",
  "tool": "mythril",
  "start": 1563486938.768349,
  "end": 1563487279.6773915,
  "duration": 340.909042596817,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 496,
        "code": "ng _code, address _referral) public restricted {\n    _registerReferral(_code, _referral);\n  }\n\n  function withdraw () public {\n    Info storage info = infoOfAddress[msg.sender];\n    uint payout = withdrawVault(MAIN_SCHEME, msg.sender);",
        "debug": "calldata_WinnerWinner_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_WinnerWinner_0: 0x20e98bf400000000000000000000000000000000000000000000000000000000\ncalldatasize_WinnerWinner: 0x4\n",
        "description": "A possible integer overflow exists in the function `_function_0x20e98bf4`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/6/0x6bba97fa60ed6339ca583b8b40c2fd0c12284c2f.sol",
        "function": "_function_0x20e98bf4",
        "lineno": 513,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1481,
        "code": "if (Utils.validCountryId(info.countryId)) {\n      payout = payout.add(withdrawVault(info.countryId, msg.sender));\n    }\n\n    if (payout > 0) {\n      info.withdrawn = info.withdrawn.add(payout);\n      msg.sender.transfer(payout);\n      emit Wi",
        "debug": "calldata_WinnerWinner_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_WinnerWinner_0: 0xe177bb9b00000000000000000000000000000000000000000000000000000000\ncalldatasize_WinnerWinner: 0x4\n",
        "description": "A possible integer overflow exists in the function `_function_0xe177bb9b`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/6/0x6bba97fa60ed6339ca583b8b40c2fd0c12284c2f.sol",
        "function": "_function_0xe177bb9b",
        "lineno": 521,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1658,
        "code": "(msg.sender, payout);\n    }\n  }\n\n  function withdrawPot () public player {\n    require(startTime > 0);\n    require(blo",
        "debug": "calldata_WinnerWinner_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_WinnerWinner_0: 0xfe79bfd000000000000000000000000000000000000000000000000000000000\ncalldatasize_WinnerWinner: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0xfe79bfd0`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/6/0x6bba97fa60ed6339ca583b8b40c2fd0c12284c2f.sol",
        "function": "_function_0xfe79bfd0",
        "lineno": 528,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3549,
        "debug": "",
        "description": "In the function `_function_0x0c76316d` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/6/0x6bba97fa60ed6339ca583b8b40c2fd0c12284c2f.sol",
        "function": "_function_0x0c76316d",
        "lineno": 545,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 3549,
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function _function_0x0c76316d. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/6/0x6bba97fa60ed6339ca583b8b40c2fd0c12284c2f.sol",
        "function": "_function_0x0c76316d",
        "lineno": 545,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3730,
        "code": "ralCode(_code));\n    requi",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_WinnerWinner_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WinnerWinner_4: 0x0\ncalldata_WinnerWinner_0: 0x1f53583300000000000000000000000000000000000000000000000000000000\ncalldatasize_WinnerWinner: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/6/0x6bba97fa60ed6339ca583b8b40c2fd0c12284c2f.sol",
        "function": "_function_0x1f535833",
        "lineno": 409,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5096,
        "code": "countryId));\n\n    (",
        "debug": "calldata_WinnerWinner_32 + 4: 0x794dbefbbe33f5efff7cdf7feffd08ec15e3401cfe1fed09111890c8cf836ddc\ntimestamp: 0xd1d18fc02d7fab2fb8fe9fdb4945e723983baba002a974a25a550d300e6ffd84\ncalldata_WinnerWinner_4: 0xd1a3983eb933b4bf3ce8dd748df9f7dbafbca02bca39d1aed097a4d1cf43f15b\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WinnerWinner_0: 0x8fb4b57300000000000000000000000000000000000000000000000000000000\ncalldatasize_WinnerWinner: 0x4\nstorage_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x8fb4b573`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/6/0x6bba97fa60ed6339ca583b8b40c2fd0c12284c2f.sol",
        "function": "_function_0x8fb4b573",
        "lineno": 453,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5907,
        "code": "pure returns (",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WinnerWinner_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WinnerWinner_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WinnerWinner_0: 0x4b11469100000000000000000000000000000000000000000000000000000000\ncalldatasize_WinnerWinner: 0x4\nstorage_107754144105353795996550271904886081806413125644687081852089502473552341974888: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/6/0x6bba97fa60ed6339ca583b8b40c2fd0c12284c2f.sol",
        "function": "_function_0x4b114691",
        "lineno": 84,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6888,
        "code": " b) internal pure ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_107754144105353795996550271904886081806413125644687081852089502473552341974888: 0x7fffffffffff80002001000000000000000000000000000000000000ff1f0100\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WinnerWinner_4: 0x8adb6e47803cdf67e629dee2bb67d38580826d2167ef37d825c156c784040\ncalldata_WinnerWinner_0: 0x4b11469100000000000000000000000000000000000000000000000000000000\ncalldatasize_WinnerWinner: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/6/0x6bba97fa60ed6339ca583b8b40c2fd0c12284c2f.sol",
        "function": "_function_0x4b114691",
        "lineno": 71,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 9235,
        "code": "maxTime;\n    addedTime = _addedTime;\n\n    startTime = block.timestamp;\n    endTime = startTime + maxTime;\n    addressOfCaptain = addressOfOwner;\n\n    _registerReferral(\"owner\", addressOfOwner);\n\n    emit Started(startTime);\n  }\n\n  function buy (address _referral, uint _countryId) public payable active {\n    require(msg.value >= Utils.regularTicketPrice());\n    require(msg.value <= 100000 ether);\n    require(codesOfAddress[_referral].length > 0);\n    require(_countryId != MAIN_SCHEME);\n    require(Utils.validCountryId(_countryId));\n\n    (uint tickets, uint excess) = Utils.ticketsForWithExcess(msg.value);\n    uint value = msg.value.sub(excess);\n\n    require(tickets > 0);\n    require(value.add(excess) == msg.value);\n\n    Info storage info = infoOfAddress[msg.sender];\n\n    if (info.countryId == 0) {\n      info.referral = _referral;\n      info.countryId = _countryId;\n    }\n\n    uint vdivs = Utils.percentageOf(value, TO_DIVIDENDS);\n    uint vreferral = Utils.percentageOf(value, TO_REFERRAL);\n    uint vdevs = Utils.percentageOf(value, TO_DEVELOPERS);\n    uint vcountry = Utils.percentageOf(value, TO_COUNTRY);\n    uint vpot = value.sub(vdivs).sub(vreferral).sub(vdevs).sub(vcountry);\n\n    assert(vdivs.add(vreferral).add(vdevs).add(vcountry).add(vpot) == value);\n\n    buyShares(MAIN_SCHEME, msg.sender, tickets, vdivs);\n    buyShares(info.countryId, msg.sender, tickets, vcountry);\n\n    creditVault(MAIN_SCHEME, info.referral, vreferral);\n    creditVault(MAIN_SCHEME, addressOfOwner, vdevs);\n\n    if (excess > 0) {\n      creditVault(MAIN_SCHEME, msg.sender, excess);\n    }\n\n    uint goldenTickets = value.div(Utils.goldenTicketPrice(totalPot));\n    if (goldenTickets > 0) {\n      endTime = endTime.add(goldenTickets.mul(addedTime)) > block.timestamp.add(maxTime) ?\n        block.timestamp.add(maxTime) : endTime.add(goldenTickets.mul(addedTime));\n      addressOfCaptain = msg.sender;\n      emit Promoted(addressOfCaptain, goldenTickets, endTime);\n    }\n\n    totalPot = totalPot.add(vpot);\n\n    emit Bought(msg.sender, info.referral, info.countryId, tickets, value, excess);\n  }\n\n  function setNick (string _nick) public payable {\n    require(msg.value == SET_NICK_FEE);\n    require(Utils.validNick(_nick));\n    infoOfAddress[msg.sender].nick = _nick;\n    creditVault(MAIN_SCHEME, addressOfOwner, msg.value);\n  }\n\n  function registerCode (string _code) public payable {\n    require(startTime > 0);\n    require(msg.value == REFERRAL_REGISTRATION_FEE);\n    _registerReferral(_code, msg.sender);\n    creditVault(MAIN_SCHEME, addressOfOwner, msg.value);\n  }\n\n  function giftCode (string _code, address _referral) public restricted {\n    _registerReferral(_code, _referral);\n  }\n\n  function withdraw () public {\n    Info storage info = infoOfAddress[msg.sender];\n    uint payout = withdrawVault(MAIN_SCHEME, msg.sender);\n\n    if (Utils.validCountryId(info.countryId)) {\n      payout = payout.add(withdrawVault(info.countryId, msg.sender));\n    }\n\n    if (payout > 0) {\n      info.withdrawn = info.withdrawn.add(payout);\n      msg.sender.transfer(payout);\n      emit Withdrew(msg.sender, payout);\n    }\n  }\n\n  function withdrawPot () public player {\n    require(startTime > 0);\n    require(block.timestamp > (endTime + 10 minutes));\n    require(!potWithdrawn);\n    require(totalPot > 0);\n    require(addressOfCaptain == msg.sender);\n\n    uint payout = totalPot;\n    totalPot = 0;\n    potWithdrawn = true;\n    addressOfCaptain.transfer(payout);\n    emit Won(msg.sender, payout);\n  }\n}",
        "debug": "storage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_3_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\ncalldata_WinnerWinner_4 + calldata_WinnerWinner_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_WinnerWinner_0: 0x20e98bf400000000000000000000000000000000000000000000000000000000\ncalldatasize_WinnerWinner: 0x4\ncallvalue: 0x2386f26fc10000\n",
        "description": "A possible integer overflow exists in the function `_function_0x20e98bf4`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/6/0x6bba97fa60ed6339ca583b8b40c2fd0c12284c2f.sol",
        "function": "_function_0x20e98bf4",
        "lineno": 436,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9264,
        "code": "maxTime;\n    addedTime = _addedTime;\n\n    startTime = block.timestamp;\n    endTime = startTime + maxTime;\n    addressOfCaptain = addressOfOwner;\n\n    _registerReferral(\"owner\", addressOfOwner);\n\n    emit Started(startTime);\n  }\n\n  function buy (address _referral, uint _countryId) public payable active {\n    require(msg.value >= Utils.regularTicketPrice());\n    require(msg.value <= 100000 ether);\n    require(codesOfAddress[_referral].length > 0);\n    require(_countryId != MAIN_SCHEME);\n    require(Utils.validCountryId(_countryId));\n\n    (uint tickets, uint excess) = Utils.ticketsForWithExcess(msg.value);\n    uint value = msg.value.sub(excess);\n\n    require(tickets > 0);\n    require(value.add(excess) == msg.value);\n\n    Info storage info = infoOfAddress[msg.sender];\n\n    if (info.countryId == 0) {\n      info.referral = _referral;\n      info.countryId = _countryId;\n    }\n\n    uint vdivs = Utils.percentageOf(value, TO_DIVIDENDS);\n    uint vreferral = Utils.percentageOf(value, TO_REFERRAL);\n    uint vdevs = Utils.percentageOf(value, TO_DEVELOPERS);\n    uint vcountry = Utils.percentageOf(value, TO_COUNTRY);\n    uint vpot = value.sub(vdivs).sub(vreferral).sub(vdevs).sub(vcountry);\n\n    assert(vdivs.add(vreferral).add(vdevs).add(vcountry).add(vpot) == value);\n\n    buyShares(MAIN_SCHEME, msg.sender, tickets, vdivs);\n    buyShares(info.countryId, msg.sender, tickets, vcountry);\n\n    creditVault(MAIN_SCHEME, info.referral, vreferral);\n    creditVault(MAIN_SCHEME, addressOfOwner, vdevs);\n\n    if (excess > 0) {\n      creditVault(MAIN_SCHEME, msg.sender, excess);\n    }\n\n    uint goldenTickets = value.div(Utils.goldenTicketPrice(totalPot));\n    if (goldenTickets > 0) {\n      endTime = endTime.add(goldenTickets.mul(addedTime)) > block.timestamp.add(maxTime) ?\n        block.timestamp.add(maxTime) : endTime.add(goldenTickets.mul(addedTime));\n      addressOfCaptain = msg.sender;\n      emit Promoted(addressOfCaptain, goldenTickets, endTime);\n    }\n\n    totalPot = totalPot.add(vpot);\n\n    emit Bought(msg.sender, info.referral, info.countryId, tickets, value, excess);\n  }\n\n  function setNick (string _nick) public payable {\n    require(msg.value == SET_NICK_FEE);\n    require(Utils.validNick(_nick));\n    infoOfAddress[msg.sender].nick = _nick;\n    creditVault(MAIN_SCHEME, addressOfOwner, msg.value);\n  }\n\n  function registerCode (string _code) public payable {\n    require(startTime > 0);\n    require(msg.value == REFERRAL_REGISTRATION_FEE);\n    _registerReferral(_code, msg.sender);\n    creditVault(MAIN_SCHEME, addressOfOwner, msg.value);\n  }\n\n  function giftCode (string _code, address _referral) public restricted {\n    _registerReferral(_code, _referral);\n  }\n\n  function withdraw () public {\n    Info storage info = infoOfAddress[msg.sender];\n    uint payout = withdrawVault(MAIN_SCHEME, msg.sender);\n\n    if (Utils.validCountryId(info.countryId)) {\n      payout = payout.add(withdrawVault(info.countryId, msg.sender));\n    }\n\n    if (payout > 0) {\n      info.withdrawn = info.withdrawn.add(payout);\n      msg.sender.transfer(payout);\n      emit Withdrew(msg.sender, payout);\n    }\n  }\n\n  function withdrawPot () public player {\n    require(startTime > 0);\n    require(block.timestamp > (endTime + 10 minutes));\n    require(!potWithdrawn);\n    require(totalPot > 0);\n    require(addressOfCaptain == msg.sender);\n\n    uint payout = totalPot;\n    totalPot = 0;\n    potWithdrawn = true;\n    addressOfCaptain.transfer(payout);\n    emit Won(msg.sender, payout);\n  }\n}",
        "debug": "calldata_WinnerWinner_4 + calldata_WinnerWinner_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_WinnerWinner_0: 0x20e98bf400000000000000000000000000000000000000000000000000000000\ncalldatasize_WinnerWinner: 0x4\ncallvalue: 0x2386f26fc10000\n",
        "description": "A possible integer overflow exists in the function `_function_0x20e98bf4`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/6/0x6bba97fa60ed6339ca583b8b40c2fd0c12284c2f.sol",
        "function": "_function_0x20e98bf4",
        "lineno": 436,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9278,
        "code": "maxTime;\n    addedTime = _addedTime;\n\n    startTime = block.timestamp;\n    endTime = startTime + maxTime;\n    addressOfCaptain = addressOfOwner;\n\n    _registerReferral(\"owner\", addressOfOwner);\n\n    emit Started(startTime);\n  }\n\n  function buy (address _referral, uint _countryId) public payable active {\n    require(msg.value >= Utils.regularTicketPrice());\n    require(msg.value <= 100000 ether);\n    require(codesOfAddress[_referral].length > 0);\n    require(_countryId != MAIN_SCHEME);\n    require(Utils.validCountryId(_countryId));\n\n    (uint tickets, uint excess) = Utils.ticketsForWithExcess(msg.value);\n    uint value = msg.value.sub(excess);\n\n    require(tickets > 0);\n    require(value.add(excess) == msg.value);\n\n    Info storage info = infoOfAddress[msg.sender];\n\n    if (info.countryId == 0) {\n      info.referral = _referral;\n      info.countryId = _countryId;\n    }\n\n    uint vdivs = Utils.percentageOf(value, TO_DIVIDENDS);\n    uint vreferral = Utils.percentageOf(value, TO_REFERRAL);\n    uint vdevs = Utils.percentageOf(value, TO_DEVELOPERS);\n    uint vcountry = Utils.percentageOf(value, TO_COUNTRY);\n    uint vpot = value.sub(vdivs).sub(vreferral).sub(vdevs).sub(vcountry);\n\n    assert(vdivs.add(vreferral).add(vdevs).add(vcountry).add(vpot) == value);\n\n    buyShares(MAIN_SCHEME, msg.sender, tickets, vdivs);\n    buyShares(info.countryId, msg.sender, tickets, vcountry);\n\n    creditVault(MAIN_SCHEME, info.referral, vreferral);\n    creditVault(MAIN_SCHEME, addressOfOwner, vdevs);\n\n    if (excess > 0) {\n      creditVault(MAIN_SCHEME, msg.sender, excess);\n    }\n\n    uint goldenTickets = value.div(Utils.goldenTicketPrice(totalPot));\n    if (goldenTickets > 0) {\n      endTime = endTime.add(goldenTickets.mul(addedTime)) > block.timestamp.add(maxTime) ?\n        block.timestamp.add(maxTime) : endTime.add(goldenTickets.mul(addedTime));\n      addressOfCaptain = msg.sender;\n      emit Promoted(addressOfCaptain, goldenTickets, endTime);\n    }\n\n    totalPot = totalPot.add(vpot);\n\n    emit Bought(msg.sender, info.referral, info.countryId, tickets, value, excess);\n  }\n\n  function setNick (string _nick) public payable {\n    require(msg.value == SET_NICK_FEE);\n    require(Utils.validNick(_nick));\n    infoOfAddress[msg.sender].nick = _nick;\n    creditVault(MAIN_SCHEME, addressOfOwner, msg.value);\n  }\n\n  function registerCode (string _code) public payable {\n    require(startTime > 0);\n    require(msg.value == REFERRAL_REGISTRATION_FEE);\n    _registerReferral(_code, msg.sender);\n    creditVault(MAIN_SCHEME, addressOfOwner, msg.value);\n  }\n\n  function giftCode (string _code, address _referral) public restricted {\n    _registerReferral(_code, _referral);\n  }\n\n  function withdraw () public {\n    Info storage info = infoOfAddress[msg.sender];\n    uint payout = withdrawVault(MAIN_SCHEME, msg.sender);\n\n    if (Utils.validCountryId(info.countryId)) {\n      payout = payout.add(withdrawVault(info.countryId, msg.sender));\n    }\n\n    if (payout > 0) {\n      info.withdrawn = info.withdrawn.add(payout);\n      msg.sender.transfer(payout);\n      emit Withdrew(msg.sender, payout);\n    }\n  }\n\n  function withdrawPot () public player {\n    require(startTime > 0);\n    require(block.timestamp > (endTime + 10 minutes));\n    require(!potWithdrawn);\n    require(totalPot > 0);\n    require(addressOfCaptain == msg.sender);\n\n    uint payout = totalPot;\n    totalPot = 0;\n    potWithdrawn = true;\n    addressOfCaptain.transfer(payout);\n    emit Won(msg.sender, payout);\n  }\n}",
        "debug": "calldata_WinnerWinner_4 + calldata_WinnerWinner_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_WinnerWinner_0: 0x20e98bf400000000000000000000000000000000000000000000000000000000\ncalldatasize_WinnerWinner: 0x4\ncallvalue: 0x2386f26fc10000\n",
        "description": "A possible integer overflow exists in the function `_function_0x20e98bf4`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/6/0x6bba97fa60ed6339ca583b8b40c2fd0c12284c2f.sol",
        "function": "_function_0x20e98bf4",
        "lineno": 436,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9300,
        "code": "maxTime;\n    addedTime = _addedTime;\n\n    startTime = block.timestamp;\n    endTime = startTime + maxTime;\n    addressOfCaptain = addressOfOwner;\n\n    _registerReferral(\"owner\", addressOfOwner);\n\n    emit Started(startTime);\n  }\n\n  function buy (address _referral, uint _countryId) public payable active {\n    require(msg.value >= Utils.regularTicketPrice());\n    require(msg.value <= 100000 ether);\n    require(codesOfAddress[_referral].length > 0);\n    require(_countryId != MAIN_SCHEME);\n    require(Utils.validCountryId(_countryId));\n\n    (uint tickets, uint excess) = Utils.ticketsForWithExcess(msg.value);\n    uint value = msg.value.sub(excess);\n\n    require(tickets > 0);\n    require(value.add(excess) == msg.value);\n\n    Info storage info = infoOfAddress[msg.sender];\n\n    if (info.countryId == 0) {\n      info.referral = _referral;\n      info.countryId = _countryId;\n    }\n\n    uint vdivs = Utils.percentageOf(value, TO_DIVIDENDS);\n    uint vreferral = Utils.percentageOf(value, TO_REFERRAL);\n    uint vdevs = Utils.percentageOf(value, TO_DEVELOPERS);\n    uint vcountry = Utils.percentageOf(value, TO_COUNTRY);\n    uint vpot = value.sub(vdivs).sub(vreferral).sub(vdevs).sub(vcountry);\n\n    assert(vdivs.add(vreferral).add(vdevs).add(vcountry).add(vpot) == value);\n\n    buyShares(MAIN_SCHEME, msg.sender, tickets, vdivs);\n    buyShares(info.countryId, msg.sender, tickets, vcountry);\n\n    creditVault(MAIN_SCHEME, info.referral, vreferral);\n    creditVault(MAIN_SCHEME, addressOfOwner, vdevs);\n\n    if (excess > 0) {\n      creditVault(MAIN_SCHEME, msg.sender, excess);\n    }\n\n    uint goldenTickets = value.div(Utils.goldenTicketPrice(totalPot));\n    if (goldenTickets > 0) {\n      endTime = endTime.add(goldenTickets.mul(addedTime)) > block.timestamp.add(maxTime) ?\n        block.timestamp.add(maxTime) : endTime.add(goldenTickets.mul(addedTime));\n      addressOfCaptain = msg.sender;\n      emit Promoted(addressOfCaptain, goldenTickets, endTime);\n    }\n\n    totalPot = totalPot.add(vpot);\n\n    emit Bought(msg.sender, info.referral, info.countryId, tickets, value, excess);\n  }\n\n  function setNick (string _nick) public payable {\n    require(msg.value == SET_NICK_FEE);\n    require(Utils.validNick(_nick));\n    infoOfAddress[msg.sender].nick = _nick;\n    creditVault(MAIN_SCHEME, addressOfOwner, msg.value);\n  }\n\n  function registerCode (string _code) public payable {\n    require(startTime > 0);\n    require(msg.value == REFERRAL_REGISTRATION_FEE);\n    _registerReferral(_code, msg.sender);\n    creditVault(MAIN_SCHEME, addressOfOwner, msg.value);\n  }\n\n  function giftCode (string _code, address _referral) public restricted {\n    _registerReferral(_code, _referral);\n  }\n\n  function withdraw () public {\n    Info storage info = infoOfAddress[msg.sender];\n    uint payout = withdrawVault(MAIN_SCHEME, msg.sender);\n\n    if (Utils.validCountryId(info.countryId)) {\n      payout = payout.add(withdrawVault(info.countryId, msg.sender));\n    }\n\n    if (payout > 0) {\n      info.withdrawn = info.withdrawn.add(payout);\n      msg.sender.transfer(payout);\n      emit Withdrew(msg.sender, payout);\n    }\n  }\n\n  function withdrawPot () public player {\n    require(startTime > 0);\n    require(block.timestamp > (endTime + 10 minutes));\n    require(!potWithdrawn);\n    require(totalPot > 0);\n    require(addressOfCaptain == msg.sender);\n\n    uint payout = totalPot;\n    totalPot = 0;\n    potWithdrawn = true;\n    addressOfCaptain.transfer(payout);\n    emit Won(msg.sender, payout);\n  }\n}",
        "debug": "calldata_WinnerWinner_4 + calldata_WinnerWinner_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80\nkeccac_3_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WinnerWinner_0: 0x20e98bf400000000000000000000000000000000000000000000000000000000\ncalldatasize_WinnerWinner: 0x4\ncallvalue: 0x2386f26fc10000\n",
        "description": "A possible integer overflow exists in the function `_function_0x20e98bf4`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/6/0x6bba97fa60ed6339ca583b8b40c2fd0c12284c2f.sol",
        "function": "_function_0x20e98bf4",
        "lineno": 436,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}