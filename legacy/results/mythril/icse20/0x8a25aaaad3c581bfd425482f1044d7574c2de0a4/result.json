{
  "contract": "0x8a25aaaad3c581bfd425482f1044d7574c2de0a4",
  "tool": "mythril",
  "start": 1563637894.5430412,
  "end": 1563638098.1733468,
  "duration": 203.63030552864075,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1155,
        "code": "  */\n  function transferFrom(address _from, address _to, uint256 _value)\n  whenNotPaused onlyNotBlacklistedAddr(_from) onlyNotBlacklistedAddr(_to)\n  public returns (bool) {\n    require(_allowance.allowanceOf(_from, msg.sender) >= _value);     // Check allowance\n    _allowance.subAllowance(_from, msg.sender, _value);\n    _transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of m",
        "debug": "calldata_V_test_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_V_test_0: 0x83f12fec00000000000000000000000000000000000000000000000000000000\ncalldatasize_V_test: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `batchTransfer(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "batchTransfer(address[],uint256)",
        "lineno": 724,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1314,
        "debug": "calldata_V_test_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_V_test_0: 0x86575e4000000000000000000000000000000000000000000000000000000000\ncalldatasize_V_test: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeName(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "changeName(string,string)",
        "lineno": 818,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2633,
        "code": "}\n}\n\n/**\n * @title Control",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "approve(address,uint256)",
        "lineno": 407,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2633,
        "code": "}\n}\n\n/**\n * @title Control",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3214\nCall at address: 2894\n",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "approve(address,uint256)",
        "lineno": 407,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2894,
        "code": "}\n}\n\n/**\n * @title Control",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "approve(address,uint256)",
        "lineno": 407,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2894,
        "code": "}\n}\n\n/**\n * @title Control",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3214\n",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "approve(address,uint256)",
        "lineno": 407,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3214,
        "code": "l) {\n    _allowance.addAllowance(msg.sender, _spender",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "approve(address,uint256)",
        "lineno": 769,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3487,
        "code": "e called by this contra",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "totalSupply()",
        "lineno": 667,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3771,
        "code": "}\n}\n\n/**\n * @title Control",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 407,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3771,
        "code": "}\n}\n\n/**\n * @title Control",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4666\nCall at address: 4345\nCall at address: 4032\n",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 407,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4032,
        "code": "}\n}\n\n/**\n * @title Control",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 407,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4032,
        "code": "}\n}\n\n/**\n * @title Control",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4666\nCall at address: 4345\n",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 407,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4345,
        "code": " will spend the funds.\n   * @param _value",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 741,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4345,
        "code": " will spend the funds.\n   * @param _value",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4666\n",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 741,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4666,
        "code": "  * Allows `_spender` to spend no more than `_valu",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 744,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5130,
        "code": "}\n}\n\n/**\n * @title Control",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "burn(uint256)",
        "lineno": 407,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5130,
        "code": "}\n}\n\n/**\n * @title Control",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5829\nCall at address: 5660\nCall at address: 5391\n",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "burn(uint256)",
        "lineno": 407,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5391,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "burn(uint256)",
        "lineno": 818,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5391,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5829\nCall at address: 5660\n",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "burn(uint256)",
        "lineno": 818,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5660,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "burn(uint256)",
        "lineno": 818,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5660,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5829\n",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "burn(uint256)",
        "lineno": 818,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5829,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "burn(uint256)",
        "lineno": 818,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6595,
        "code": "}\n}\n\n/**\n * @title Control",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "decreaseApproval(address,uint256)",
        "lineno": 407,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6595,
        "code": "}\n}\n\n/**\n * @title Control",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6856\n",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "decreaseApproval(address,uint256)",
        "lineno": 407,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 6856,
        "code": "}\n}\n\n/**\n * @title Control",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "decreaseApproval(address,uint256)",
        "lineno": 407,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 7803,
        "code": "equire(_value > 0);       ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "balanceOf(address)",
        "lineno": 670,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 8093,
        "code": "}\n}\n\n/**\n * @title Control",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "batchTransfer(address[],uint256)",
        "lineno": 407,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 9626,
        "code": "}\n}\n\n/**\n * @title Control",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "transfer(address,uint256)",
        "lineno": 407,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 14235,
        "code": "bol;                                    // Set the symbol for display purposes\n    _balances = _balanceContract;\n    _allowance = _allowanceContract;\n  }\n\n  function totalSupply() public view returns (uint256) {\n    return _balances.totalSupply();\n  }\n\n  function balanceOf(address _addr) public view returns (uint256) {\n    return _balances.balanceOf(_addr);\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return _allowance.allowanceOf(_owner, _spender);\n  }\n\n  /**\n   *  @dev Internal transfer, only can be called by this contract\n   */\n  function _transfer(address _from, address _to, uint256 _value) internal {\n    require(_value > 0);                                               // transfering value must be greater than 0\n    require(_to != 0x0);                                               // Prevent transfer to 0x0 address. Use burn() instead\n    require(_balances.balanceOf(_from) >= _value);                     // Check if the sender has enough\n    uint256 previousBalances = _balances.balanceOf(_from).add(_balances.balanceOf(_to)); // Save this for an assertion in the future\n    _balances.subBalance(_from, _value);                 // Subtract from the sender\n    _balances.addBalance(_to, _value);                     // Add the same to the recipient\n    emit Transfer(_from, _to, _value);\n    // Asserts are used to use static analysis to find bugs in your code. They should never fail\n    assert(_balances.balanceOf(_from) + _balances.balanceOf(_to) == previousBalances);\n  }\n\n  /**\n   * @dev Transfer tokens\n   * Send `_value` tokens to `_to` from your account\n   *\n   * @param _to The address of the recipient\n   * @param _value the amount to send\n   */\n  function transfer(address _to, uint256 _value)\n  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddr(_to)\n  public returns (bool) {\n    _transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n\n  /**\n   * @dev Transfer tokens to multiple accounts\n   * Send `_value` tokens to all addresses in `_to` from your account\n   *\n   * @param _to The addresses of the recipients\n   * @param _value the amount to send\n   */\n  function batchTransfer(address[] _to, uint256 _value)\n  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddrs(_to)\n  public returns (bool) {\n    uint256 cnt = uint256(_to.length);\n    require(cnt > 0 && cnt <= maxBatch && _value > 0);\n    uint256 amount = _value.mul(cnt);\n    require(_balances.balanceOf(msg.sender) >= amount);\n\n    for (uint256 i = 0; i < cnt; i++) {\n      _transfer(msg.sender, _to[i], _value);\n    }\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from other address\n   * Send `_value` tokens to `_to` in behalf of `_from`\n   *\n   * @param _from The address of the sender\n   * @param _to The address of the recipient\n   * @param _value the amount to send\n   */\n  function transferFrom(address _from, address _to, uint256 _value)\n  whenNotPaused onlyNotBlacklistedAddr(_from) onlyNotBlacklistedAddr(_to)\n  public returns (bool) {\n    require(_allowance.allowanceOf(_from, msg.sender) >= _value);     // Check allowance\n    _allowance.subAllowance(_from, msg.sender, _value);\n    _transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   *\n   * Allows `_spender` to spend no more than `_value` tokens in your behalf\n   *\n   * @param _spender The address authorized to spend\n   * @param _value the max amount they can spend\n   */\n  function approve(address _spender, uint256 _value)\n  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddr(_spender)\n  public returns (bool) {\n    _allowance.setAllowance(msg.sender, _spender, _value);\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint256 _addedValue)\n  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddr(_spender)\n  public returns (bool) {\n    _allowance.addAllowance(msg.sender, _spender, _addedValue);\n    emit Approval(msg.sender, _spender, _allowance.allowanceOf(msg.sender, _spender));\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint256 _subtractedValue)\n  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddr(_spender)\n  public returns (bool) {\n    _allowance.subAllowance(msg.sender, _spender, _subtractedValue);\n    emit Approval(msg.sender, _spender, _allowance.allowanceOf(msg.sender, _spender));\n    return true;\n  }\n\n  /**\n   * @dev Destroy tokens\n   * Remove `_value` tokens from the system irreversibly\n   *\n   * @param _value the amount of money to burn\n   */\n  function burn(uint256 _value) whenNotPaused onlyNotBlacklistedAddr(msg.sender)\n  public returns (bool success) {\n    require(_balances.balanceOf(msg.sender) >= _value);         // Check if the sender has enough\n    _balances.subBalance(msg.sender, _value);                   // Subtract from the sender\n    _balances.subTotalSupply(_value);                           // Updates totalSupply\n    emit Burn(msg.sender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Change name and symbol of the tokens\n   *\n   * @param _name the new name of the token\n   * @param _symbol the new symbol of the token\n   */\n  function changeName(string _name, string _symbol) onlyOwner public {\n    name = _name;\n    symbol = _symbol;\n  }\n}",
        "debug": "calldata_V_test_4 + calldata_V_test_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_V_test_0: 0x86575e4000000000000000000000000000000000000000000000000000000000\ncalldatasize_V_test: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeName(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "changeName(string,string)",
        "lineno": 643,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 14249,
        "code": "bol;                                    // Set the symbol for display purposes\n    _balances = _balanceContract;\n    _allowance = _allowanceContract;\n  }\n\n  function totalSupply() public view returns (uint256) {\n    return _balances.totalSupply();\n  }\n\n  function balanceOf(address _addr) public view returns (uint256) {\n    return _balances.balanceOf(_addr);\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return _allowance.allowanceOf(_owner, _spender);\n  }\n\n  /**\n   *  @dev Internal transfer, only can be called by this contract\n   */\n  function _transfer(address _from, address _to, uint256 _value) internal {\n    require(_value > 0);                                               // transfering value must be greater than 0\n    require(_to != 0x0);                                               // Prevent transfer to 0x0 address. Use burn() instead\n    require(_balances.balanceOf(_from) >= _value);                     // Check if the sender has enough\n    uint256 previousBalances = _balances.balanceOf(_from).add(_balances.balanceOf(_to)); // Save this for an assertion in the future\n    _balances.subBalance(_from, _value);                 // Subtract from the sender\n    _balances.addBalance(_to, _value);                     // Add the same to the recipient\n    emit Transfer(_from, _to, _value);\n    // Asserts are used to use static analysis to find bugs in your code. They should never fail\n    assert(_balances.balanceOf(_from) + _balances.balanceOf(_to) == previousBalances);\n  }\n\n  /**\n   * @dev Transfer tokens\n   * Send `_value` tokens to `_to` from your account\n   *\n   * @param _to The address of the recipient\n   * @param _value the amount to send\n   */\n  function transfer(address _to, uint256 _value)\n  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddr(_to)\n  public returns (bool) {\n    _transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n\n  /**\n   * @dev Transfer tokens to multiple accounts\n   * Send `_value` tokens to all addresses in `_to` from your account\n   *\n   * @param _to The addresses of the recipients\n   * @param _value the amount to send\n   */\n  function batchTransfer(address[] _to, uint256 _value)\n  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddrs(_to)\n  public returns (bool) {\n    uint256 cnt = uint256(_to.length);\n    require(cnt > 0 && cnt <= maxBatch && _value > 0);\n    uint256 amount = _value.mul(cnt);\n    require(_balances.balanceOf(msg.sender) >= amount);\n\n    for (uint256 i = 0; i < cnt; i++) {\n      _transfer(msg.sender, _to[i], _value);\n    }\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from other address\n   * Send `_value` tokens to `_to` in behalf of `_from`\n   *\n   * @param _from The address of the sender\n   * @param _to The address of the recipient\n   * @param _value the amount to send\n   */\n  function transferFrom(address _from, address _to, uint256 _value)\n  whenNotPaused onlyNotBlacklistedAddr(_from) onlyNotBlacklistedAddr(_to)\n  public returns (bool) {\n    require(_allowance.allowanceOf(_from, msg.sender) >= _value);     // Check allowance\n    _allowance.subAllowance(_from, msg.sender, _value);\n    _transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   *\n   * Allows `_spender` to spend no more than `_value` tokens in your behalf\n   *\n   * @param _spender The address authorized to spend\n   * @param _value the max amount they can spend\n   */\n  function approve(address _spender, uint256 _value)\n  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddr(_spender)\n  public returns (bool) {\n    _allowance.setAllowance(msg.sender, _spender, _value);\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint256 _addedValue)\n  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddr(_spender)\n  public returns (bool) {\n    _allowance.addAllowance(msg.sender, _spender, _addedValue);\n    emit Approval(msg.sender, _spender, _allowance.allowanceOf(msg.sender, _spender));\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint256 _subtractedValue)\n  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddr(_spender)\n  public returns (bool) {\n    _allowance.subAllowance(msg.sender, _spender, _subtractedValue);\n    emit Approval(msg.sender, _spender, _allowance.allowanceOf(msg.sender, _spender));\n    return true;\n  }\n\n  /**\n   * @dev Destroy tokens\n   * Remove `_value` tokens from the system irreversibly\n   *\n   * @param _value the amount of money to burn\n   */\n  function burn(uint256 _value) whenNotPaused onlyNotBlacklistedAddr(msg.sender)\n  public returns (bool success) {\n    require(_balances.balanceOf(msg.sender) >= _value);         // Check if the sender has enough\n    _balances.subBalance(msg.sender, _value);                   // Subtract from the sender\n    _balances.subTotalSupply(_value);                           // Updates totalSupply\n    emit Burn(msg.sender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Change name and symbol of the tokens\n   *\n   * @param _name the new name of the token\n   * @param _symbol the new symbol of the token\n   */\n  function changeName(string _name, string _symbol) onlyOwner public {\n    name = _name;\n    symbol = _symbol;\n  }\n}",
        "debug": "calldata_V_test_4 + calldata_V_test_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_V_test_0: 0x86575e4000000000000000000000000000000000000000000000000000000000\ncalldatasize_V_test: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeName(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0x8a25aaaad3c581bfd425482f1044d7574c2de0a4.sol",
        "function": "changeName(string,string)",
        "lineno": 643,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}