{"error": null, "issues": [{"address": 1263, "code": "en for a specified address\n    * @param _to ", "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_StandardToken: 0x4\ncalldata_StandardToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/32/0xb772c656f5021b6f0ab5d701c8e2b3c06735071a.sol", "function": "transferFrom(address,address,uint256)", "lineno": 103, "title": "Exception state", "type": "Informational"}, {"address": 3004, "code": "en for a specified address\n    * @param _to ", "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_StandardToken: 0x4\ncalldata_StandardToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/32/0xb772c656f5021b6f0ab5d701c8e2b3c06735071a.sol", "function": "transfer(address,uint256)", "lineno": 103, "title": "Exception state", "type": "Informational"}, {"address": 4131, "code": "en for a specified address\n    * @param _to ", "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_StandardToken: 0x4\ncalldata_StandardToken_0: 0xdd62ed3e00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/32/0xb772c656f5021b6f0ab5d701c8e2b3c06735071a.sol", "function": "allowance(address,address)", "lineno": 103, "title": "Exception state", "type": "Informational"}, {"address": 4297, "code": "     ", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_StandardToken_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_StandardToken_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_StandardToken_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_StandardToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `increaseApproval(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/32/0xb772c656f5021b6f0ab5d701c8e2b3c06735071a.sol", "function": "increaseApproval(address,uint256)", "lineno": 37, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4310, "code": "   }\n\n    func", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_StandardToken_4: 0x1\ncalldata_StandardToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_StandardToken_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_StandardToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/32/0xb772c656f5021b6f0ab5d701c8e2b3c06735071a.sol", "function": "increaseApproval(address,uint256)", "lineno": 38, "title": "Exception state", "type": "Informational"}], "success": true}