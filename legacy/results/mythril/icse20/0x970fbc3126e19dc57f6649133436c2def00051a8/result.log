{"error": null, "issues": [{"address": 3284, "code": "e token ownership to.\n     * @par", "debug": "The exception is triggered under the following conditions:\n\ncalldata_EterArt_32 + 4: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_EterArt_4: 0x0\ncalldata_EterArt_0: 0x2f745c5900000000000000000000000000000000000000000000000000000000\ncalldatasize_EterArt: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x970fbc3126e19dc57f6649133436c2def00051a8.sol", "function": "tokenOfOwnerByIndex(address,uint256)", "lineno": 155, "title": "Exception state", "type": "Informational"}, {"address": 6437, "code": "c constant returns (address owner) ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_contracts/0x970fbc3126e19dc57f6649133436c2def00051a8.sol", "function": "withdraw()", "lineno": 250, "title": "Transaction order dependence", "type": "Warning"}, {"address": 6876, "code": "d value converted to he", "debug": "storage_4: 0x0\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               Concat(0,\n                      ~(~Extract(255,\n                                 1,\n                                 115792089237316195423570985008687907853269984665640564039457584007913129639935 +\n                                 256*\n                                 If(Extract(0, 0, storage_4) ==\n                                    0,\n                                    1,\n                                    0)) |\n                        ~Extract(255, 1, storage_4))))) +\n64: 0x858871ac2c3e718fb1611febb7dcc4e7530e7cb7e9b333e09b293f3125188ff2\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               Concat(0,\n                      ~(~Extract(255,\n                                 1,\n                                 115792089237316195423570985008687907853269984665640564039457584007913129639935 +\n                                 256*\n                                 If(Extract(0, 0, storage_4) ==\n                                    0,\n                                    1,\n                                    0)) |\n                        ~Extract(255, 1, storage_4))))): 0xdfad6d9dbe7cf02faa22380237dc8504514e33478d3cbbd7dfbbbf3db5df6c5b\ncalldata_EterArt_0: 0x6914db6000000000000000000000000000000000000000000000000000000000\ncalldatasize_EterArt: 0x4\ncalldata_EterArt_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `tokenMetadata(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x970fbc3126e19dc57f6649133436c2def00051a8.sol", "function": "tokenMetadata(uint256)", "lineno": 390, "title": "Integer Overflow ", "type": "Warning"}], "success": true}