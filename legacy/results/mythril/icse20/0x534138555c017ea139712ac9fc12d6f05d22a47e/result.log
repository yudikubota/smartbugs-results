{"error": null, "issues": [{"address": 581, "code": "investmentAddress);\n        require(_cryptoIds.length == _amounts.length);\n        \n        for (uint256 i = 0; i < _cryptoIds.length; i++) {\n            if (_buy) {\n                userHoldings[_beneficiary][_cryptoIds[i]] = userHoldings[_beneficiary][_cryptoIds[i]].add(_amounts[i]);\n            } else {\n                userHoldings[_beneficiary][_cryptoIds[i]] = userHoldings[_beneficiary][_cryptoIds[i]].sub(_amounts[i]);\n            }\n        }\n    }\n\n/** ************************** Constants *********************************** **/\n    \n    /**\n     * @dev Return the holdings of a specific address. Returns dyna", "debug": "calldata_UserData_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_UserData_0: 0x48663e7d00000000000000000000000000000000000000000000000000000000\ncalldatasize_UserData: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `modifyHoldings(address,uint256[],uint256[],bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/31/0x534138555c017ea139712ac9fc12d6f05d22a47e.sol", "function": "modifyHoldings(address,uint256[],uint256[],bool)", "lineno": 154, "title": "Integer Overflow ", "type": "Warning"}, {"address": 605, "code": "investmentAddress);\n        require(_cryptoIds.length == _amounts.length);\n        \n        for (uint256 i = 0; i < _cryptoIds.length; i++) {\n            if (_buy) {\n                userHoldings[_beneficiary][_cryptoIds[i]] = userHoldings[_beneficiary][_cryptoIds[i]].add(_amounts[i]);\n            } else {\n                userHoldings[_beneficiary][_cryptoIds[i]] = userHoldings[_beneficiary][_cryptoIds[i]].sub(_amounts[i]);\n            }\n        }\n    }\n\n/** ************************** Constants *********************************** **/\n    \n    /**\n     * @dev Return the holdings of a specific address. Returns dyna", "debug": "calldata_UserData_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_UserData_0: 0x48663e7d00000000000000000000000000000000000000000000000000000000\ncalldatasize_UserData: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `modifyHoldings(address,uint256[],uint256[],bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/31/0x534138555c017ea139712ac9fc12d6f05d22a47e.sol", "function": "modifyHoldings(address,uint256[],uint256[],bool)", "lineno": 154, "title": "Integer Overflow ", "type": "Warning"}, {"address": 611, "code": "investmentAddress);\n        require(_cryptoIds.length == _amounts.length);\n        \n        for (uint256 i = 0; i < _cryptoIds.length; i++) {\n            if (_buy) {\n                userHoldings[_beneficiary][_cryptoIds[i]] = userHoldings[_beneficiary][_cryptoIds[i]].add(_amounts[i]);\n            } else {\n                userHoldings[_beneficiary][_cryptoIds[i]] = userHoldings[_beneficiary][_cryptoIds[i]].sub(_amounts[i]);\n            }\n        }\n    }\n\n/** ************************** Constants *********************************** **/\n    \n    /**\n     * @dev Return the holdings of a specific address. Returns dyna", "debug": "calldata_UserData_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_UserData_0: 0x48663e7d00000000000000000000000000000000000000000000000000000000\ncalldatasize_UserData: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `modifyHoldings(address,uint256[],uint256[],bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/31/0x534138555c017ea139712ac9fc12d6f05d22a47e.sol", "function": "modifyHoldings(address,uint256[],uint256[],bool)", "lineno": 154, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1999, "code": "        lostToken.transfer(coinvest, stu", "debug": "", "description": "A possible transaction order independence vulnerability exists in function tokenEscape(address). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/31/0x534138555c017ea139712ac9fc12d6f05d22a47e.sol", "function": "tokenEscape(address)", "lineno": 217, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2188, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/31/0x534138555c017ea139712ac9fc12d6f05d22a47e.sol", "function": "tokenEscape(address)", "lineno": 221, "title": "Message call to external contract", "type": "Warning"}, {"address": 2188, "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2446\n", "filename": "/unique_chucks/31/0x534138555c017ea139712ac9fc12d6f05d22a47e.sol", "function": "tokenEscape(address)", "lineno": 221, "title": "Multiple Calls", "type": "Information"}, {"address": 2446, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/31/0x534138555c017ea139712ac9fc12d6f05d22a47e.sol", "function": "tokenEscape(address)", "lineno": 221, "title": "Message call to external contract", "type": "Warning"}, {"address": 3503, "code": "}\n    \n/** *******", "debug": "calldata_UserData_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_UserData_32 + 4: 0x0\ncalldata_UserData_0: 0xdac54b8a00000000000000000000000000000000000000000000000000000000\ncalldatasize_UserData: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `returnHoldings(address,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/31/0x534138555c017ea139712ac9fc12d6f05d22a47e.sol", "function": "returnHoldings(address,uint256,uint256)", "lineno": 187, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4267, "code": "// Co", "debug": "storage_keccac_calldata_UserData_0_+_36_+_calldata_UserData_32_+_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_UserData_0 + 36 + calldata_UserData_32 + 36: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_UserData_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_UserData_4 + calldata_UserData_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncaller: 0x0\ncalldata_UserData_0: 0x48663e7d00000000000000000000000000000000000000000000000000000000\ncalldatasize_UserData: 0x4\ncalldata_UserData_4 + calldata_UserData_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `modifyHoldings(address,uint256[],uint256[],bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/31/0x534138555c017ea139712ac9fc12d6f05d22a47e.sol", "function": "modifyHoldings(address,uint256[],uint256[],bool)", "lineno": 129, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4280, "code": "that is allowe", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_calldata_UserData_0_+_36_+_calldata_UserData_32_+_4: 0x1\ncalldata_UserData_0 + 36 + calldata_UserData_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_UserData_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_UserData_4 + calldata_UserData_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncaller: 0x0\ncalldata_UserData_0: 0x48663e7d00000000000000000000000000000000000000000000000000000000\ncalldatasize_UserData: 0x4\ncalldata_UserData_4 + calldata_UserData_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/31/0x534138555c017ea139712ac9fc12d6f05d22a47e.sol", "function": "modifyHoldings(address,uint256[],uint256[],bool)", "lineno": 129, "title": "Exception state", "type": "Informational"}, {"address": 4304, "code": "  uint256 c = ", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_calldata_UserData_0_+_36_+_calldata_UserData_32_+_4: 0x0\ncalldata_UserData_0 + 36 + calldata_UserData_32 + 36: 0x1\ncalldata_UserData_4 + calldata_UserData_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncaller: 0x0\ncalldata_UserData_0: 0x48663e7d00000000000000000000000000000000000000000000000000000000\ncalldatasize_UserData: 0x4\ncalldata_UserData_32 + 68: 0x0\ncalldata_UserData_4 + calldata_UserData_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/31/0x534138555c017ea139712ac9fc12d6f05d22a47e.sol", "function": "modifyHoldings(address,uint256[],uint256[],bool)", "lineno": 120, "title": "Exception state", "type": "Informational"}], "success": true}