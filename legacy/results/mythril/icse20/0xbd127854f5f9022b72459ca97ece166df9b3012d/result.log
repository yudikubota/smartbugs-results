{"success": false, "error": "Solc experienced a fatal error (code 1).\n\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:1:1: Error: Source file requires different compiler version (current compiler is 0.4.25+commit.59dbf8f1.Linux.g++ - note that nightly builds are considered to be strictly less than the released version\npragma solidity 0.4.24;\r\n^---------------------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:917:47: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if(records[node].owner != msg.sender) throw;\r\n                                              ^---^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:924:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function ENS() {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:968:9: Warning: Use of the \"var\" keyword is deprecated.\n        var subnode = sha3(node, label);\r\n        ^---------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:1006:43: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if(ens.owner(node) != msg.sender) throw;\r\n                                          ^---^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:1014:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function PublicResolver(AbstractENS ensAddr) {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:1022:9: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        throw;\r\n        ^---^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:883:37: Warning: This declaration shadows an existing declaration.\n    function setOwner(bytes32 node, address owner);\r\n                                    ^-----------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:880:5: The shadowed declaration is here:\n    function owner(bytes32 node) constant returns(address);\r\n    ^-----------------------------------------------------^\n\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:884:59: Warning: This declaration shadows an existing declaration.\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\r\n                                                          ^-----------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:880:5: The shadowed declaration is here:\n    function owner(bytes32 node) constant returns(address);\r\n    ^-----------------------------------------------------^\n\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:885:40: Warning: This declaration shadows an existing declaration.\n    function setResolver(bytes32 node, address resolver);\r\n                                       ^--------------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:881:5: The shadowed declaration is here:\n    function resolver(bytes32 node) constant returns(address);\r\n    ^--------------------------------------------------------^\n\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:886:35: Warning: This declaration shadows an existing declaration.\n    function setTTL(bytes32 node, uint64 ttl);\r\n                                  ^--------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:882:5: The shadowed declaration is here:\n    function ttl(bytes32 node) constant returns(uint64);\r\n    ^--------------------------------------------------^\n\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:955:37: Warning: This declaration shadows an existing declaration.\n    function setOwner(bytes32 node, address owner) only_owner(node) {\r\n                                    ^-----------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:931:5: The shadowed declaration is here:\n    function owner(bytes32 node) constant returns (address) {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:967:59: Warning: This declaration shadows an existing declaration.\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) only_owner(node) {\r\n                                                          ^-----------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:931:5: The shadowed declaration is here:\n    function owner(bytes32 node) constant returns (address) {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:978:40: Warning: This declaration shadows an existing declaration.\n    function setResolver(bytes32 node, address resolver) only_owner(node) {\r\n                                       ^--------------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:938:5: The shadowed declaration is here:\n    function resolver(bytes32 node) constant returns (address) {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:988:35: Warning: This declaration shadows an existing declaration.\n    function setTTL(bytes32 node, uint64 ttl) only_owner(node) {\r\n                                  ^--------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:945:5: The shadowed declaration is here:\n    function ttl(bytes32 node) constant returns (uint64) {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:1060:36: Warning: This declaration shadows an existing declaration.\n    function setAddr(bytes32 node, address addr) only_owner(node) {\r\n                                   ^----------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:1050:5: The shadowed declaration is here:\n    function addr(bytes32 node) constant returns (address ret) {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:925:17: Warning: Decimal literal assigned to bytesXX variable will be left-aligned. Use an explicit conversion to silence this warning.\n        records[0].owner = msg.sender;\r\n                ^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:956:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        Transfer(node, owner);\r\n        ^-------------------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:968:23: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        var subnode = sha3(node, label);\r\n                      ^---------------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:968:23: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        var subnode = sha3(node, label);\r\n                      ^---------------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:969:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        NewOwner(node, label, owner);\r\n        ^--------------------------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:979:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        NewResolver(node, resolver);\r\n        ^-------------------------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:989:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        NewTTL(node, ttl);\r\n        ^---------------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:1305:17: Warning: Using contract member \"call\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).call\" instead.\n        require(liability.call(abi.encodePacked(bytes4(0xd9ff764a), _demand))); // liability.demand(...)\r\n                ^------------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:1308:17: Warning: Using contract member \"call\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).call\" instead.\n        require(liability.call(abi.encodePacked(bytes4(0xd5056962), _offer))); // liability.offer(...)\r\n                ^------------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:1356:70: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        bytes32 subnode = keccak256(abi.encodePacked(lighthouseNode, keccak256(_name)));\r\n                                                                     ^--------------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:1356:70: Warning: The provided argument of type string calldata is not implicitly convertible to expected type bytes memory.\n        bytes32 subnode = keccak256(abi.encodePacked(lighthouseNode, keccak256(_name)));\r\n                                                                     ^--------------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:1365:45: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        ens.setSubnodeOwner(lighthouseNode, keccak256(_name), this);\r\n                                            ^--------------^\n/unique_chucks/35/0xbd127854f5f9022b72459ca97ece166df9b3012d.sol:1365:45: Warning: The provided argument of type string calldata is not implicitly convertible to expected type bytes memory.\n        ens.setSubnodeOwner(lighthouseNode, keccak256(_name), this);\r\n                                            ^--------------^\n", "issues": []}