{
  "contract": "0xad5aa494bcd729b8ea728f581aade049c4ec4e9d",
  "tool": "mythril",
  "start": 1563679916.6214035,
  "end": 1563679975.609101,
  "duration": 58.98769760131836,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 788,
        "code": " }\n}",
        "debug": "storage_2: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_TokenTransferProxy_0: 0xd39de6e900000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTransferProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getAuthorizedAddresses()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/36/0xad5aa494bcd729b8ea728f581aade049c4ec4e9d.sol",
        "function": "getAuthorizedAddresses()",
        "lineno": 138,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1216,
        "code": "authorized addresses.\n    /// @return Arra",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/36/0xad5aa494bcd729b8ea728f581aade049c4ec4e9d.sol",
        "function": "transferFrom(address,address,address,uint256)",
        "lineno": 130,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1560,
        "code": ";\n\ncontract Token ",
        "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenTransferProxy_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenTransferProxy_0: 0x42f1181e00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTransferProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAuthorizedAddress(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/36/0xad5aa494bcd729b8ea728f581aade049c4ec4e9d.sol",
        "function": "addAuthorizedAddress(address)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1760,
        "code": "ddress indexed target, addre",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenTransferProxy_4: 0x0\nstorage_2: 0x0\ncalldata_TokenTransferProxy_0: 0x494503d400000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTransferProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/36/0xad5aa494bcd729b8ea728f581aade049c4ec4e9d.sol",
        "function": "_function_0x494503d4",
        "lineno": 71,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2600,
        "debug": "storage_2: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_TokenTransferProxy_0: 0xd39de6e900000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTransferProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getAuthorizedAddresses()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/36/0xad5aa494bcd729b8ea728f581aade049c4ec4e9d.sol",
        "function": "getAuthorizedAddresses()",
        "lineno": 139,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2602,
        "debug": "storage_2: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_TokenTransferProxy_0: 0xd39de6e900000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTransferProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getAuthorizedAddresses()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/36/0xad5aa494bcd729b8ea728f581aade049c4ec4e9d.sol",
        "function": "getAuthorizedAddresses()",
        "lineno": 139,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3065,
        "code": " @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized {\n        require(authorized[msg.sender]);\n        _;\n    }\n\n    modifier targetAuthorized(address target) {\n        require(authorized[target]);\n        _;\n    }\n\n    modifier targetNotAuthorized(address target) {\n        require(!authorized[target]);\n        _;\n    }\n\n    mapping (address => bool) public authorized;\n    address[] public authorities;\n\n    event LogAuthorizedAddressAdded(address indexed target, address indexed caller);\n    event LogAuthorizedAddressRemoved(address indexed target, address indexed caller);\n\n    /*\n     * Public functions\n     */\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        public\n        onlyOwner\n        targetNotAuthorized(target)\n    {\n        authorized[target] = true;\n        authorities.push(target);\n        emit LogAuthorizedAddressAdded(target, msg.sender);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        public\n        onlyOwner\n        targetAuthorized(target)\n    {\n        delete authorized[target];\n        for (uint i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                authorities[i] = authorities[authorities.length - 1];\n                authorities.length -= 1;\n                break;\n            }\n        }\n        emit LogAuthorizedAddressRemoved(target, msg.sender);\n    }\n\n    /// @dev Calls into ERC20 Token contract, invoking transferFrom.\n    /// @param token Address of token to transfer.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param value Amount of token to transfer.\n    /// @return Success of transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint value)\n        public\n        onlyAuthorized\n        returns (bool)\n    {\n        return Token(token).transferFrom(from, to, value);\n    }\n\n    /*\n     * Public constant functions\n     */\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        public\n        constant\n        returns (address[])\n    {\n        return authorities;\n    }\n}",
        "debug": "storage_2: 0xc000000000000000000000000000000000000000000000000000000000000000\ncalldata_TokenTransferProxy_4: 0x0\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403022: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenTransferProxy_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenTransferProxy_0: 0x7071293900000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTransferProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `removeAuthorizedAddress(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/36/0xad5aa494bcd729b8ea728f581aade049c4ec4e9d.sol",
        "function": "removeAuthorizedAddress(address)",
        "lineno": 52,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3067,
        "code": " @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized {\n        require(authorized[msg.sender]);\n        _;\n    }\n\n    modifier targetAuthorized(address target) {\n        require(authorized[target]);\n        _;\n    }\n\n    modifier targetNotAuthorized(address target) {\n        require(!authorized[target]);\n        _;\n    }\n\n    mapping (address => bool) public authorized;\n    address[] public authorities;\n\n    event LogAuthorizedAddressAdded(address indexed target, address indexed caller);\n    event LogAuthorizedAddressRemoved(address indexed target, address indexed caller);\n\n    /*\n     * Public functions\n     */\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        public\n        onlyOwner\n        targetNotAuthorized(target)\n    {\n        authorized[target] = true;\n        authorities.push(target);\n        emit LogAuthorizedAddressAdded(target, msg.sender);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        public\n        onlyOwner\n        targetAuthorized(target)\n    {\n        delete authorized[target];\n        for (uint i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                authorities[i] = authorities[authorities.length - 1];\n                authorities.length -= 1;\n                break;\n            }\n        }\n        emit LogAuthorizedAddressRemoved(target, msg.sender);\n    }\n\n    /// @dev Calls into ERC20 Token contract, invoking transferFrom.\n    /// @param token Address of token to transfer.\n    /// @param from Address to transfer token from.\n    /// @param to Address to transfer token to.\n    /// @param value Amount of token to transfer.\n    /// @return Success of transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint value)\n        public\n        onlyAuthorized\n        returns (bool)\n    {\n        return Token(token).transferFrom(from, to, value);\n    }\n\n    /*\n     * Public constant functions\n     */\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        public\n        constant\n        returns (address[])\n    {\n        return authorities;\n    }\n}",
        "debug": "storage_2: 0xdf803800e003cc0f00000c6019e000033ffffffffffffffffffffffffffffffd\ncalldata_TokenTransferProxy_4: 0x0\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403022: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenTransferProxy_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenTransferProxy_0: 0x7071293900000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTransferProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `removeAuthorizedAddress(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/36/0xad5aa494bcd729b8ea728f581aade049c4ec4e9d.sol",
        "function": "removeAuthorizedAddress(address)",
        "lineno": 52,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}