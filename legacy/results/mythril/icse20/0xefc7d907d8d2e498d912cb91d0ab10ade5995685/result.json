{
  "contract": "0xefc7d907d8d2e498d912cb91d0ab10ade5995685",
  "tool": "mythril",
  "start": 1563720563.4455476,
  "end": 1563720832.2169745,
  "duration": 268.77142691612244,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 932,
        "code": "\n    for(uint i=0; i<mintDelegates.length; i++) {\n      if(mintDelegates[i]==_mintDelegate) {",
        "debug": "storage_9: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_Tri_Ag_0: 0x50a49f5f00000000000000000000000000000000000000000000000000000000\ncalldatasize_Tri_Ag: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getBurnDelegates()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/40/0xefc7d907d8d2e498d912cb91d0ab10ade5995685.sol",
        "function": "getBurnDelegates()",
        "lineno": 346,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1131,
        "code": "legate The account to be approved.\n   */\n  function approveMintDelegate(address _mintDelegate",
        "debug": "storage_8: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_Tri_Ag_0: 0x5b51a6d800000000000000000000000000000000000000000000000000000000\ncalldatasize_Tri_Ag: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getMintDelegates()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/40/0xefc7d907d8d2e498d912cb91d0ab10ade5995685.sol",
        "function": "getMintDelegates()",
        "lineno": 343,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4473,
        "code": "gates[i]==_mintDeleg",
        "debug": "storage_9: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_Tri_Ag_0: 0x50a49f5f00000000000000000000000000000000000000000000000000000000\ncalldatasize_Tri_Ag: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getBurnDelegates()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/40/0xefc7d907d8d2e498d912cb91d0ab10ade5995685.sol",
        "function": "getBurnDelegates()",
        "lineno": 348,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4475,
        "code": "gates[i]==_mintDeleg",
        "debug": "storage_9: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_Tri_Ag_0: 0x50a49f5f00000000000000000000000000000000000000000000000000000000\ncalldatasize_Tri_Ag: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getBurnDelegates()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/40/0xefc7d907d8d2e498d912cb91d0ab10ade5995685.sol",
        "function": "getBurnDelegates()",
        "lineno": 348,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5334,
        "code": "gate(address _mintDe",
        "debug": "storage_8: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_Tri_Ag_0: 0x5b51a6d800000000000000000000000000000000000000000000000000000000\ncalldatasize_Tri_Ag: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getMintDelegates()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/40/0xefc7d907d8d2e498d912cb91d0ab10ade5995685.sol",
        "function": "getMintDelegates()",
        "lineno": 345,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5336,
        "code": "gate(address _mintDe",
        "debug": "storage_8: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_Tri_Ag_0: 0x5b51a6d800000000000000000000000000000000000000000000000000000000\ncalldatasize_Tri_Ag: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getMintDelegates()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/40/0xefc7d907d8d2e498d912cb91d0ab10ade5995685.sol",
        "function": "getMintDelegates()",
        "lineno": 345,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 10132,
        "code": " }\n\n  /**\n  * ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Tri_Ag_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncaller: 0x0\ncalldata_Tri_Ag_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Tri_Ag: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/40/0xefc7d907d8d2e498d912cb91d0ab10ade5995685.sol",
        "function": "burn(uint256)",
        "lineno": 38,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10150,
        "code": "}\n}\n\n",
        "debug": "calldata_Tri_Ag_32 + 36: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Tri_Ag_32_+_4: 0xc050fffff320c00020003d81af848540000000000000040000110001bd062022\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Tri_Ag_4: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\ncalldata_Tri_Ag_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Tri_Ag_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Tri_Ag: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/40/0xefc7d907d8d2e498d912cb91d0ab10ade5995685.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 47,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 10163,
        "code": "* @title Ownab",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Tri_Ag_32 + 36: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Tri_Ag_32_+_4: 0xd32ba62e013a1e544c40f8298f8c838ef0ca495e903244487f8ba1f8c2a013e7\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Tri_Ag_4: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\ncalldata_Tri_Ag_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Tri_Ag_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Tri_Ag: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/40/0xefc7d907d8d2e498d912cb91d0ab10ade5995685.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 53,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10200,
        "code": "ollowing were created as arrays instead of mappings since the dapp requires access to all elements (a mapping doesn't allow access to its keys). Extra iteration gas costs are negligible due to the fact that delegates are usually very limited in number.\n  address[] mintDelegates;   // accounts allowed to mint tokens\n  address[] burnDelegates;   // accounts allowed to burn tokens\n\n  // Events\n  event Mint(address indexed to, uint256 amount);\n  event Burn(address indexed burner, uint256 value);\n  event ApproveMintDelegate(address indexed mintDelegate);\n  event RevokeMintDelegate(address indexed mintDelegate);\n  event ApproveBurnDelegate(address indexed burnDelegate);\n  event RevokeBurnDelegate(address indexed burnDelegate);\n\n\n  // Constructor\n  function Tri_Ag() public {\n    totalSupply_ = INITIAL_SUPPLY;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than an owner or a mint delegate.\n   */\n  modifier onlyOwnerOrMintDelegate() {\n    bool allowedToMint = false;\n\n    if(msg.sender==owner) {\n      allowedToMint = true;\n    }\n    else {\n      for(uint i=0; i<mintDelegates.length; i++) {\n        if(mintDelegates[i]==msg.sender) {\n          allowedToMint = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToMint==true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than an owner or a burn delegate.\n   */\n  modifier onlyOwnerOrBurnDelegate() {\n    bool allowedToBurn = false;\n\n    if(msg.sender==owner) {\n      allowedToBurn = true;\n    }\n    else {\n      for(uint i=0; i<burnDelegates.length; i++) {\n        if(burnDelegates[i]==msg.sender) {\n          allowedToBurn = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToBurn==true);\n    _;\n  }\n\n  /**\n   * @dev Return the array of mint delegates.\n   */\n  function getMintDelegates() public view returns (address[]) {\n    return mintDelegates;\n  }\n\n  /**\n   * @dev Return the array of burn delegates.\n   */\n  function getBurnDelegates() public view returns (address[]) {\n    return burnDelegates;\n  }\n\n  /**\n   * @dev Give a mint delegate permission to mint tokens.\n   * @param _mintDelegate The account to be approved.\n   */\n  function approveMintDelegate(address _mintDelegate) onlyOwner public returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<mintDelegates.length; i++) {\n      if(mintDelegates[i]==_mintDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      mintDelegates.push(_mintDelegate);\n    }\n\n    ApproveMintDelegate(_mintDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to mint tokens from a mint delegate.\n   * @param _mintDelegate The account to be revoked.\n   */\n  function revokeMintDelegate(address _mintDelegate) onlyOwner public returns (bool) {\n    uint length = mintDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = mintDelegates[length-1];\n    if(_mintDelegate == lastDelegate) {\n      delete mintDelegates[length-1];\n      mintDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(mintDelegates[i]==_mintDelegate) {\n          mintDelegates[i] = lastDelegate;\n          delete mintDelegates[length-1];\n          mintDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    RevokeMintDelegate(_mintDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Give a burn delegate permission to burn tokens.\n   * @param _burnDelegate The account to be approved.\n   */\n  function approveBurnDelegate(address _burnDelegate) onlyOwner public returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<burnDelegates.length; i++) {\n      if(burnDelegates[i]==_burnDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      burnDelegates.push(_burnDelegate);\n    }\n\n    ApproveBurnDelegate(_burnDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to burn tokens from a burn delegate.\n   * @param _burnDelegate The account to be revoked.\n   */\n  function revokeBurnDelegate(address _burnDelegate) onlyOwner public returns (bool) {\n    uint length = burnDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = burnDelegates[length-1];\n    if(_burnDelegate == lastDelegate) {\n      delete burnDelegates[length-1];\n      burnDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(burnDelegates[i]==_burnDelegate) {\n          burnDelegates[i] = lastDelegate;\n          delete burnDelegates[length-1];\n          burnDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    RevokeBurnDelegate(_burnDelegate);\n    return true;\n  }\n\n\n  /**\n   * @dev Function to mint tokens and transfer them to contract owner's address\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(uint256 _amount) onlyOwnerOrMintDelegate public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[msg.sender] = balances[msg.sender].add(_amount);\n\n    // Call events\n    Mint(msg.sender, _amount);\n    Transfer(address(0), msg.sender, _amount);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to burn tokens\n   * @param _value The amount of tokens to be burned.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function burn(uint256 _value) onlyOwnerOrBurnDelegate public returns (bool) {\n    require(_value <= balances[msg.sender]);\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n\n    // Call events\n    Burn(burner, _value);\n    Transfer(burner, address(0), _value);\n\n    return true;\n  }\n}",
        "debug": "storage_8: 0x9fffffffffffffffffffffffffffffffffdd5f5d4bea4dc57b37e961749c9119\nstorage_110349606679412691172957834289542550319383271247755660854362242977991410020067 +\n115792089237316195423570985008687907853269984665640564039457584007913129639935 +\nstorage_8: 0x0\ncalldata_Tri_Ag_4: 0x0\nstorage_3: 0x0\ncaller: 0x0\ncalldata_Tri_Ag_0: 0x54c6a8ed00000000000000000000000000000000000000000000000000000000\ncalldatasize_Tri_Ag: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `revokeMintDelegate(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/40/0xefc7d907d8d2e498d912cb91d0ab10ade5995685.sol",
        "function": "revokeMintDelegate(address)",
        "lineno": 264,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 10202,
        "code": "ollowing were created as arrays instead of mappings since the dapp requires access to all elements (a mapping doesn't allow access to its keys). Extra iteration gas costs are negligible due to the fact that delegates are usually very limited in number.\n  address[] mintDelegates;   // accounts allowed to mint tokens\n  address[] burnDelegates;   // accounts allowed to burn tokens\n\n  // Events\n  event Mint(address indexed to, uint256 amount);\n  event Burn(address indexed burner, uint256 value);\n  event ApproveMintDelegate(address indexed mintDelegate);\n  event RevokeMintDelegate(address indexed mintDelegate);\n  event ApproveBurnDelegate(address indexed burnDelegate);\n  event RevokeBurnDelegate(address indexed burnDelegate);\n\n\n  // Constructor\n  function Tri_Ag() public {\n    totalSupply_ = INITIAL_SUPPLY;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than an owner or a mint delegate.\n   */\n  modifier onlyOwnerOrMintDelegate() {\n    bool allowedToMint = false;\n\n    if(msg.sender==owner) {\n      allowedToMint = true;\n    }\n    else {\n      for(uint i=0; i<mintDelegates.length; i++) {\n        if(mintDelegates[i]==msg.sender) {\n          allowedToMint = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToMint==true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than an owner or a burn delegate.\n   */\n  modifier onlyOwnerOrBurnDelegate() {\n    bool allowedToBurn = false;\n\n    if(msg.sender==owner) {\n      allowedToBurn = true;\n    }\n    else {\n      for(uint i=0; i<burnDelegates.length; i++) {\n        if(burnDelegates[i]==msg.sender) {\n          allowedToBurn = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToBurn==true);\n    _;\n  }\n\n  /**\n   * @dev Return the array of mint delegates.\n   */\n  function getMintDelegates() public view returns (address[]) {\n    return mintDelegates;\n  }\n\n  /**\n   * @dev Return the array of burn delegates.\n   */\n  function getBurnDelegates() public view returns (address[]) {\n    return burnDelegates;\n  }\n\n  /**\n   * @dev Give a mint delegate permission to mint tokens.\n   * @param _mintDelegate The account to be approved.\n   */\n  function approveMintDelegate(address _mintDelegate) onlyOwner public returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<mintDelegates.length; i++) {\n      if(mintDelegates[i]==_mintDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      mintDelegates.push(_mintDelegate);\n    }\n\n    ApproveMintDelegate(_mintDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to mint tokens from a mint delegate.\n   * @param _mintDelegate The account to be revoked.\n   */\n  function revokeMintDelegate(address _mintDelegate) onlyOwner public returns (bool) {\n    uint length = mintDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = mintDelegates[length-1];\n    if(_mintDelegate == lastDelegate) {\n      delete mintDelegates[length-1];\n      mintDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(mintDelegates[i]==_mintDelegate) {\n          mintDelegates[i] = lastDelegate;\n          delete mintDelegates[length-1];\n          mintDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    RevokeMintDelegate(_mintDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Give a burn delegate permission to burn tokens.\n   * @param _burnDelegate The account to be approved.\n   */\n  function approveBurnDelegate(address _burnDelegate) onlyOwner public returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<burnDelegates.length; i++) {\n      if(burnDelegates[i]==_burnDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      burnDelegates.push(_burnDelegate);\n    }\n\n    ApproveBurnDelegate(_burnDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to burn tokens from a burn delegate.\n   * @param _burnDelegate The account to be revoked.\n   */\n  function revokeBurnDelegate(address _burnDelegate) onlyOwner public returns (bool) {\n    uint length = burnDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = burnDelegates[length-1];\n    if(_burnDelegate == lastDelegate) {\n      delete burnDelegates[length-1];\n      burnDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(burnDelegates[i]==_burnDelegate) {\n          burnDelegates[i] = lastDelegate;\n          delete burnDelegates[length-1];\n          burnDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    RevokeBurnDelegate(_burnDelegate);\n    return true;\n  }\n\n\n  /**\n   * @dev Function to mint tokens and transfer them to contract owner's address\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(uint256 _amount) onlyOwnerOrMintDelegate public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[msg.sender] = balances[msg.sender].add(_amount);\n\n    // Call events\n    Mint(msg.sender, _amount);\n    Transfer(address(0), msg.sender, _amount);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to burn tokens\n   * @param _value The amount of tokens to be burned.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function burn(uint256 _value) onlyOwnerOrBurnDelegate public returns (bool) {\n    require(_value <= balances[msg.sender]);\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n\n    // Call events\n    Burn(burner, _value);\n    Transfer(burner, address(0), _value);\n\n    return true;\n  }\n}",
        "debug": "storage_8: 0xf7ffffffffffffff7ffff252f5cdebeab0dd5f5d4bea4dc57b37e961749c911d\nstorage_110349606679412691172957834289542550319383271247755660854362242977991410020067 +\n115792089237316195423570985008687907853269984665640564039457584007913129639935 +\nstorage_8: 0x0\ncalldata_Tri_Ag_4: 0x0\nstorage_3: 0x0\ncaller: 0x0\ncalldata_Tri_Ag_0: 0x54c6a8ed00000000000000000000000000000000000000000000000000000000\ncalldatasize_Tri_Ag: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `revokeMintDelegate(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/40/0xefc7d907d8d2e498d912cb91d0ab10ade5995685.sol",
        "function": "revokeMintDelegate(address)",
        "lineno": 264,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}