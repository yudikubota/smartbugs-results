{"error": null, "issues": [{"address": 136, "code": "_tokenAddr, address[] dests, uint256[] values)\n    returns (uint256) {\n        uint256 i = 0;\n        while (i < dests.length) {\n            ERC20(_tokenAddr).transfer(dests[i], values[i]);\n            i += 1;\n        }\n        return(i);\n    }\n}", "debug": "calldata_MultiSend_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MultiSend_0: 0xad8733ca00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSend: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `multisend(address,address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x4d6993c02e6bbcbf6d6183c9b599b1d8c18c32d8.sol", "function": "multisend(address,address[],uint256[])", "lineno": 28, "title": "Integer Overflow ", "type": "Warning"}, {"address": 373, "code": "\n        ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSend_4 + calldata_MultiSend_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSend_0: 0xad8733ca00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSend: 0x4\nmem_128 +\n32 +\n32*calldata_MultiSend_4 + calldata_MultiSend_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/14/0x4d6993c02e6bbcbf6d6183c9b599b1d8c18c32d8.sol", "function": "multisend(address,address[],uint256[])", "lineno": 33, "title": "Exception state", "type": "Informational"}, {"address": 520, "code": "s[i], values[i]);\n            i += 1;\n        }", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/14/0x4d6993c02e6bbcbf6d6183c9b599b1d8c18c32d8.sol", "function": "multisend(address,address[],uint256[])", "lineno": 32, "title": "Message call to external contract", "type": "Warning"}, {"address": 520, "code": "s[i], values[i]);\n            i += 1;\n        }", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 520\nCall at address: 520\n", "filename": "/unique_chucks/14/0x4d6993c02e6bbcbf6d6183c9b599b1d8c18c32d8.sol", "function": "multisend(address,address[],uint256[])", "lineno": 32, "title": "Multiple Calls", "type": "Information"}], "success": true}