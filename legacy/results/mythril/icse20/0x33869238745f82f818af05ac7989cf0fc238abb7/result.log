{"error": null, "issues": [{"address": 621, "code": "        return votes[msg.sender];\n    }\n\n    // stats only function\n    function getSummary() pub", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_Election_0: 0x65e93b3f00000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getUserVotes()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "getUserVotes()", "lineno": 58, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1276, "code": ";\n        uint256 winnersCount = list.length", "debug": "storage_keccac_calldata_Election_4: 0x800000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 86, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1279, "code": ";\n        uint256 winnersCount = list.length", "debug": "storage_keccac_calldata_Election_4: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 86, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1285, "code": ";\n        uint256 winnersCount = list.length", "debug": "storage_keccac_calldata_Election_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 86, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1310, "code": ";\n        uint256 winnersCount = list.length", "debug": "storage_keccac_calldata_Election_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 86, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1312, "code": ";\n        uint256 winnersCount = list.length", "debug": "storage_keccac_calldata_Election_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 86, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1467, "code": ";\n                winnersCount = ", "debug": "storage_keccac_calldata_Election_4_-_1: 0x800000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\nstorage_keccac_calldata_Election_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 95, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1470, "code": ";\n                winnersCount = ", "debug": "storage_keccac_calldata_Election_4_-_1: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\nstorage_keccac_calldata_Election_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 95, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1476, "code": ";\n                winnersCount = ", "debug": "storage_keccac_calldata_Election_4_-_1: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\nstorage_keccac_calldata_Election_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 95, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1501, "code": ";\n                winnersCount = ", "debug": "storage_keccac_calldata_Election_4_-_1: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\nstorage_keccac_calldata_Election_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 95, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1503, "code": ";\n                winnersCount = ", "debug": "storage_keccac_calldata_Election_4_-_1: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\nstorage_keccac_calldata_Election_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 95, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1623, "code": "daryList.length;\n\n                if(winne", "debug": "storage_keccac_calldata_Election_4_+_1: 0x800000000000000000000000000000000000000000000000000000000000000\nstorage_keccac_calldata_Election_4_-_1: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\nstorage_keccac_calldata_Election_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 96, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1626, "code": "daryList.length;\n\n                if(winne", "debug": "storage_keccac_calldata_Election_4_+_1: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_calldata_Election_4_-_1: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\nstorage_keccac_calldata_Election_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 96, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1632, "code": "daryList.length;\n\n                if(winne", "debug": "storage_keccac_calldata_Election_4_+_1: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\nstorage_keccac_calldata_Election_4_-_1: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\nstorage_keccac_calldata_Election_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 96, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1657, "code": "daryList.length;\n\n                if(winne", "debug": "storage_keccac_calldata_Election_4_+_1: 0x8421043f084001f400005052dd592cf2000000000000037c00004200fa0003e\nstorage_keccac_calldata_Election_4_-_1: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\nstorage_keccac_calldata_Election_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 96, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1659, "code": "daryList.length;\n\n                if(winne", "debug": "storage_keccac_calldata_Election_4_+_1: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd\nstorage_keccac_calldata_Election_4_-_1: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\nstorage_keccac_calldata_Election_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 96, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1757, "code": "loop = false;\n                }\n  ", "debug": "mem_160 +\n32*storage_keccac_calldata_Election_4 +\n32 +\n32*storage_keccac_calldata_Election_4_-_1: 0x5600903a8dbf1a63164cf536cdc68706adcbf276a583da47cbdda0ed1e163d6d\nstorage_keccac_calldata_Election_4_+_1: 0x8000000000000000000000000000000000000000000000000000000000000000\nmem_128 + 32 + 32*storage_keccac_calldata_Election_4: 0xd7f893736dbe18010e2ca198d3d6ce02492a0580ed6e13420c1d3eba79a5b8e6\nstorage_keccac_calldata_Election_4_-_1: 0x2000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\nstorage_keccac_calldata_Election_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 99, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2602, "code": ";\n\ncontract Electi", "debug": "calldata_Election_4: 0x20\nstorage_keccac_calldata_Election_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0xff00\ncalldata_Election_0: 0x4cb6f4a500000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x2386f26fc10000\n", "description": "A possible integer overflow exists in the function `voteRequest(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "voteRequest(uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2765, "code": ";\n\ncontract Electi", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Election_4: 0x20\nstorage_0: 0xff00\ncalldata_Election_0: 0x4cb6f4a500000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x2386f26fc10000\n", "description": "A possible integer overflow exists in the function `voteRequest(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "voteRequest(uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2812, "code": "  \n    // ge", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Election_4: 0x200\nstorage_0: 0xff00\ncalldata_Election_0: 0x4cb6f4a500000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x2386f26fc10000\n", "description": "A possible integer overflow exists in the function `voteRequest(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "voteRequest(uint256)", "lineno": 55, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2826, "code": "te history.\n    fun", "debug": "storage_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6f\ncalldata_Election_4: 0x37d\nstorage_0: 0xff00\ncalldata_Election_0: 0x4cb6f4a500000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x2386f26fc10000\n", "description": "A possible integer overflow exists in the function `voteRequest(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "voteRequest(uint256)", "lineno": 56, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2942, "code": "on\n    function getSumma", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_Election_0: 0x65e93b3f00000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getUserVotes()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "getUserVotes()", "lineno": 61, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2944, "code": "on\n    function getSumma", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_Election_0: 0x65e93b3f00000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getUserVotes()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "getUserVotes()", "lineno": 61, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3147, "code": "address => uint256[]) public votes; // to ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Election_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_Election_4: 0x0\ncalldata_Election_0: 0x9f2524ee00000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "_function_0x9f2524ee", "lineno": 9, "title": "Exception state", "type": "Informational"}, {"address": 3183, "code": "ublic winners; // winner", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Election_4: 0x0\nstorage_5: 0x0\ncalldata_Election_0: 0xa2fb117500000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "_function_0xa2fb1175", "lineno": 12, "title": "Exception state", "type": "Informational"}, {"address": 3269, "code": "(uint256 => address[]) public users; // al", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Election_32 + 4: 0x0\nstorage_keccac_calldata_Election_4: 0x0\ncalldata_Election_0: 0xcd600ba900000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "_function_0xcd600ba9", "lineno": 8, "title": "Exception state", "type": "Informational"}, {"address": 3338, "code": "ntract Election{\n    \n    address public manager; // contract manager\n    \n    bool public isActive;\n    mapping(uint256 => address[]) public users; // all votes\n    mapping(address => uint256[]) public votes; // to fetch one user's votes\n    uint256 public totalUsers; // total users participated (not unique user count)\n    uint256 public totalVotes; // for calculating avg vote guess on client side. (stats only)\n    address[] public winners; // winner list. will be set after manager calls finalizeContract function\n    uint256 public winnerPrice; // reward per user for successfull guess.\n    uint256 public voteResult; // candidate's vote result will be set after election.\n    \n    \n    // minimum reqired ether to enter competition.\n    modifier mRequiredValue(){\n        require(msg.value == .01 ether);\n        _;\n    }\n    \n    // manager only functions: pause, finalizeContract\n    modifier mManagerOnly(){\n        require(msg.sender == manager);\n        _;\n    }\n    \n    // contract will be manually paused before on election day by manager.\n    modifier mIsActive(){\n        require(isActive);\n        _;\n    }\n    \n    // constructor\n    function Election() public{\n        manager = msg.sender;\n        isActive = true;\n    }\n    \n    /**\n    * user can join competition with this function.\n    * user's guess multiplied with 10 before calling this function for not using decimal numbers.\n    * ex: user guess: 40.2 -> 402\n    **/\n    function voteRequest(uint256 guess) public payable mIsActive mRequiredValue {\n        require(guess > 0);\n        require(guess <= 1000);\n        address[] storage list = users[guess];\n        list.push(msg.sender);\n        votes[msg.sender].push(guess);\n        totalUsers++;\n        totalVotes += guess;\n    }\n    \n    // get user's vote history.\n    function getUserVotes() public view returns(uint256[]){\n        return votes[msg.sender];\n    }\n\n    // stats only function\n    function getSummary() public returns(uint256, uint256, uint256) {\n        return(\n            totalVotes,\n            totalUsers,\n            this.balance\n        );\n    }\n    \n    // for pausing contract. contract will be paused on election day. new users can't join competition after contract paused.\n    function pause() public mManagerOnly {\n        isActive = !isActive;\n    }\n    \n    /** send ether to winners.(5% manager fee.)\n     * if there is no winner choose closest estimates will get rewards.\n     * manager will call this function after official results announced by YSK.\n     * winners will receive rewards instantly.\n     * election results will be rounded to one decimal only.\n     * if result is 40.52 then winner is who guessed 40.5\n     * if result is 40.56 then winner is who guessed 40.6\n     **/\n    function finalizeContract(uint256 winningNumber) public mManagerOnly {\n        voteResult = winningNumber;\n        address[] memory list = users[winningNumber];\n        address[] memory secondaryList;\n        uint256 winnersCount = list.length;\n\n        if(winnersCount == 0){\n            // if there is no winner choose closest estimates.\n            bool loop = true;\n            uint256 index = 1;\n            while(loop == true){\n                list = users[winningNumber-index];\n                secondaryList = users[winningNumber+index];\n                winnersCount = list.length + secondaryList.length;\n\n                if(winnersCount > 0){\n                    loop = false;\n                }\n                else{\n                    index++;\n                }\n            }\n        }\n        \n        uint256 managerFee = (this.balance/100)*5; // manager fee %5\n        uint256 reward = (this.balance - managerFee) / winnersCount; // reward for per winner.\n        winnerPrice = reward;\n        \n        // set winner list\n        winners = list;\n        // transfer eth to winners.\n        for (uint256 i = 0; i < list.length; i++) {\n            list[i].transfer(reward);\n        }\n                \n        // if anyone guessed the correct percent secondaryList will be empty array.\n        for (uint256 j = 0; j < secondaryList.length; j++) {\n            // transfer eth to winners.\n            secondaryList[j].transfer(reward);\n            winners.push(secondaryList[j]); // add to winners\n        }\n        \n        // transfer fee to manager\n        manager.transfer(this.balance);\n        \n        \n    }\n    \n}", "debug": "storage_5: 0xfdd01e3b80018d4e8df10ef43a35c48279fb9fb812008ccb4ff7f4f0801c7e60\nstorage_keccac_calldata_Election_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3349, "code": "ntract Election{\n    \n    address public manager; // contract manager\n    \n    bool public isActive;\n    mapping(uint256 => address[]) public users; // all votes\n    mapping(address => uint256[]) public votes; // to fetch one user's votes\n    uint256 public totalUsers; // total users participated (not unique user count)\n    uint256 public totalVotes; // for calculating avg vote guess on client side. (stats only)\n    address[] public winners; // winner list. will be set after manager calls finalizeContract function\n    uint256 public winnerPrice; // reward per user for successfull guess.\n    uint256 public voteResult; // candidate's vote result will be set after election.\n    \n    \n    // minimum reqired ether to enter competition.\n    modifier mRequiredValue(){\n        require(msg.value == .01 ether);\n        _;\n    }\n    \n    // manager only functions: pause, finalizeContract\n    modifier mManagerOnly(){\n        require(msg.sender == manager);\n        _;\n    }\n    \n    // contract will be manually paused before on election day by manager.\n    modifier mIsActive(){\n        require(isActive);\n        _;\n    }\n    \n    // constructor\n    function Election() public{\n        manager = msg.sender;\n        isActive = true;\n    }\n    \n    /**\n    * user can join competition with this function.\n    * user's guess multiplied with 10 before calling this function for not using decimal numbers.\n    * ex: user guess: 40.2 -> 402\n    **/\n    function voteRequest(uint256 guess) public payable mIsActive mRequiredValue {\n        require(guess > 0);\n        require(guess <= 1000);\n        address[] storage list = users[guess];\n        list.push(msg.sender);\n        votes[msg.sender].push(guess);\n        totalUsers++;\n        totalVotes += guess;\n    }\n    \n    // get user's vote history.\n    function getUserVotes() public view returns(uint256[]){\n        return votes[msg.sender];\n    }\n\n    // stats only function\n    function getSummary() public returns(uint256, uint256, uint256) {\n        return(\n            totalVotes,\n            totalUsers,\n            this.balance\n        );\n    }\n    \n    // for pausing contract. contract will be paused on election day. new users can't join competition after contract paused.\n    function pause() public mManagerOnly {\n        isActive = !isActive;\n    }\n    \n    /** send ether to winners.(5% manager fee.)\n     * if there is no winner choose closest estimates will get rewards.\n     * manager will call this function after official results announced by YSK.\n     * winners will receive rewards instantly.\n     * election results will be rounded to one decimal only.\n     * if result is 40.52 then winner is who guessed 40.5\n     * if result is 40.56 then winner is who guessed 40.6\n     **/\n    function finalizeContract(uint256 winningNumber) public mManagerOnly {\n        voteResult = winningNumber;\n        address[] memory list = users[winningNumber];\n        address[] memory secondaryList;\n        uint256 winnersCount = list.length;\n\n        if(winnersCount == 0){\n            // if there is no winner choose closest estimates.\n            bool loop = true;\n            uint256 index = 1;\n            while(loop == true){\n                list = users[winningNumber-index];\n                secondaryList = users[winningNumber+index];\n                winnersCount = list.length + secondaryList.length;\n\n                if(winnersCount > 0){\n                    loop = false;\n                }\n                else{\n                    index++;\n                }\n            }\n        }\n        \n        uint256 managerFee = (this.balance/100)*5; // manager fee %5\n        uint256 reward = (this.balance - managerFee) / winnersCount; // reward for per winner.\n        winnerPrice = reward;\n        \n        // set winner list\n        winners = list;\n        // transfer eth to winners.\n        for (uint256 i = 0; i < list.length; i++) {\n            list[i].transfer(reward);\n        }\n                \n        // if anyone guessed the correct percent secondaryList will be empty array.\n        for (uint256 j = 0; j < secondaryList.length; j++) {\n            // transfer eth to winners.\n            secondaryList[j].transfer(reward);\n            winners.push(secondaryList[j]); // add to winners\n        }\n        \n        // transfer fee to manager\n        manager.transfer(this.balance);\n        \n        \n    }\n    \n}", "debug": "storage_keccac_calldata_Election_4: 0x800000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3351, "code": "ntract Election{\n    \n    address public manager; // contract manager\n    \n    bool public isActive;\n    mapping(uint256 => address[]) public users; // all votes\n    mapping(address => uint256[]) public votes; // to fetch one user's votes\n    uint256 public totalUsers; // total users participated (not unique user count)\n    uint256 public totalVotes; // for calculating avg vote guess on client side. (stats only)\n    address[] public winners; // winner list. will be set after manager calls finalizeContract function\n    uint256 public winnerPrice; // reward per user for successfull guess.\n    uint256 public voteResult; // candidate's vote result will be set after election.\n    \n    \n    // minimum reqired ether to enter competition.\n    modifier mRequiredValue(){\n        require(msg.value == .01 ether);\n        _;\n    }\n    \n    // manager only functions: pause, finalizeContract\n    modifier mManagerOnly(){\n        require(msg.sender == manager);\n        _;\n    }\n    \n    // contract will be manually paused before on election day by manager.\n    modifier mIsActive(){\n        require(isActive);\n        _;\n    }\n    \n    // constructor\n    function Election() public{\n        manager = msg.sender;\n        isActive = true;\n    }\n    \n    /**\n    * user can join competition with this function.\n    * user's guess multiplied with 10 before calling this function for not using decimal numbers.\n    * ex: user guess: 40.2 -> 402\n    **/\n    function voteRequest(uint256 guess) public payable mIsActive mRequiredValue {\n        require(guess > 0);\n        require(guess <= 1000);\n        address[] storage list = users[guess];\n        list.push(msg.sender);\n        votes[msg.sender].push(guess);\n        totalUsers++;\n        totalVotes += guess;\n    }\n    \n    // get user's vote history.\n    function getUserVotes() public view returns(uint256[]){\n        return votes[msg.sender];\n    }\n\n    // stats only function\n    function getSummary() public returns(uint256, uint256, uint256) {\n        return(\n            totalVotes,\n            totalUsers,\n            this.balance\n        );\n    }\n    \n    // for pausing contract. contract will be paused on election day. new users can't join competition after contract paused.\n    function pause() public mManagerOnly {\n        isActive = !isActive;\n    }\n    \n    /** send ether to winners.(5% manager fee.)\n     * if there is no winner choose closest estimates will get rewards.\n     * manager will call this function after official results announced by YSK.\n     * winners will receive rewards instantly.\n     * election results will be rounded to one decimal only.\n     * if result is 40.52 then winner is who guessed 40.5\n     * if result is 40.56 then winner is who guessed 40.6\n     **/\n    function finalizeContract(uint256 winningNumber) public mManagerOnly {\n        voteResult = winningNumber;\n        address[] memory list = users[winningNumber];\n        address[] memory secondaryList;\n        uint256 winnersCount = list.length;\n\n        if(winnersCount == 0){\n            // if there is no winner choose closest estimates.\n            bool loop = true;\n            uint256 index = 1;\n            while(loop == true){\n                list = users[winningNumber-index];\n                secondaryList = users[winningNumber+index];\n                winnersCount = list.length + secondaryList.length;\n\n                if(winnersCount > 0){\n                    loop = false;\n                }\n                else{\n                    index++;\n                }\n            }\n        }\n        \n        uint256 managerFee = (this.balance/100)*5; // manager fee %5\n        uint256 reward = (this.balance - managerFee) / winnersCount; // reward for per winner.\n        winnerPrice = reward;\n        \n        // set winner list\n        winners = list;\n        // transfer eth to winners.\n        for (uint256 i = 0; i < list.length; i++) {\n            list[i].transfer(reward);\n        }\n                \n        // if anyone guessed the correct percent secondaryList will be empty array.\n        for (uint256 j = 0; j < secondaryList.length; j++) {\n            // transfer eth to winners.\n            secondaryList[j].transfer(reward);\n            winners.push(secondaryList[j]); // add to winners\n        }\n        \n        // transfer fee to manager\n        manager.transfer(this.balance);\n        \n        \n    }\n    \n}", "debug": "storage_keccac_calldata_Election_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Election_0: 0x2907eb1600000000000000000000000000000000000000000000000000000000\ncalldatasize_Election: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `finalizeContract(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x33869238745f82f818af05ac7989cf0fc238abb7.sol", "function": "finalizeContract(uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}