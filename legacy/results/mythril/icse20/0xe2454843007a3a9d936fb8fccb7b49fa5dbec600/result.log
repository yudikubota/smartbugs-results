{"error": null, "issues": [{"address": 2173, "code": "riod0End = startTime + 31 days;\n ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TempusToken_4: 0x6\ncalldata_TempusToken_0: 0x147b3aea00000000000000000000000000000000000000000000000000000000\ncalldatasize_TempusToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xe2454843007a3a9d936fb8fccb7b49fa5dbec600.sol", "function": "_function_0x147b3aea", "lineno": 102, "title": "Exception state", "type": "Informational"}, {"address": 2779, "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2896\n", "filename": "/unique_chucks/40/0xe2454843007a3a9d936fb8fccb7b49fa5dbec600.sol", "function": "withdrawEther(uint256)", "lineno": 292, "title": "Multiple Calls", "type": "Information"}, {"address": 2779, "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdrawEther(uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/40/0xe2454843007a3a9d936fb8fccb7b49fa5dbec600.sol", "function": "withdrawEther(uint256)", "lineno": 292, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3637, "code": " no c", "debug": "The exception is triggered under the following conditions:\n\ncallvalue: 0x16345785d8a0000\ntimestamp: 0x0\nstorage_17: 0x1\ncalldatasize_TempusToken: 0x3\nstorage_2: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xe2454843007a3a9d936fb8fccb7b49fa5dbec600.sol", "function": "fallback", "lineno": 59, "title": "Exception state", "type": "Informational"}], "success": true}