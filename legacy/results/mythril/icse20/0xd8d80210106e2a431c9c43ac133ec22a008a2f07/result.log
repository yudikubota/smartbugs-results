{"error": null, "issues": [{"address": 487, "code": "te.Init;\n    uint public totalSupply =", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x8000\ncalldata_PresaleToken_0: 0xc3f6acf00000000000000000000000000000000000000000000000000000000\ncalldatasize_PresaleToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/11/0xd8d80210106e2a431c9c43ac133ec22a008a2f07.sol", "function": "_function_0x0c3f6acf", "lineno": 32, "title": "Exception state", "type": "Informational"}, {"address": 847, "code": "    }\n\n    function getTotalSupply()constant returns(uint)\n    {\n        return totalSupply;\n", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x8000\ncalldata_PresaleToken_0: 0x378aa70100000000000000000000000000000000000000000000000000000000\ncalldatasize_PresaleToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/11/0xd8d80210106e2a431c9c43ac133ec22a008a2f07.sol", "function": "getCurrentState()", "lineno": 175, "title": "Exception state", "type": "Informational"}, {"address": 1844, "code": "   event LogBuy(addre", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x8000\ncalldatasize_PresaleToken: 0x3\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/11/0xd8d80210106e2a431c9c43ac133ec22a008a2f07.sol", "function": "fallback", "lineno": 53, "title": "Exception state", "type": "Informational"}, {"address": 1888, "code": "LIMIT) throw;\n\n  ", "debug": "callvalue: 0x88097400000cb06b607c4a23425a8fcd09169071c3fdd89c2a5f422a839963fa\nstorage_0: 0x100\ncalldatasize_PresaleToken: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/11/0xd8d80210106e2a431c9c43ac133ec22a008a2f07.sol", "function": "fallback", "lineno": 74, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1993, "code": "gBuy(_buyer, newTokens);\n   ", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xf6e37bd3fc45749b1c2738b48d363ba9fffc7c99fe95ecbbf8961181201ff3f0\ncallvalue: 0x4c3547e4e87b35891024116053c001277fff000b0aaa029060266251e3e33fe\nstorage_0: 0x100\nstorage_1: 0x405bba64db9508fe8235f0b5ad3e88da8144f1fb762cefc5ffef3d367a7feb20\ncalldatasize_PresaleToken: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/11/0xd8d80210106e2a431c9c43ac133ec22a008a2f07.sol", "function": "fallback", "lineno": 79, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2009, "code": " @dev Returns number of ", "debug": "callvalue: 0x716d7d3e3a4a0aea56a56a56a56a56a567300c9a633fcd967300c9a64d31a00\nstorage_0: 0x100\nstorage_1: 0x2480000000000000000400000000000000000000000000000000\ncalldatasize_PresaleToken: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/11/0xd8d80210106e2a431c9c43ac133ec22a008a2f07.sol", "function": "fallback", "lineno": 82, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2433, "code": "return tokenManager;\n    }\n\n   ", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x8000\nstorage_3: 0x0\ncaller: 0x0\ncalldata_PresaleToken_0: 0x4defd1bf00000000000000000000000000000000000000000000000000000000\ncalldatasize_PresaleToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/11/0xd8d80210106e2a431c9c43ac133ec22a008a2f07.sol", "function": "setCrowdsaleManager(address)", "lineno": 159, "title": "Exception state", "type": "Informational"}], "success": true}