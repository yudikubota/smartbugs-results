{"error": null, "issues": [{"address": 546, "code": "ss[] _voters)\n    {\n        _voters = voters;\n    }\n\n    function getVotesForItem(uint256 _itemIndex) public view", "debug": "storage_5: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_NumberCarbonVoting_0: 0x35bbe70e00000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberCarbonVoting: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getAllVoters()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/11/0xdec6c0dc7004ba23940c9ee7cb4a0528ec4c0580.sol", "function": "getAllVoters()", "lineno": 60, "title": "Integer Overflow ", "type": "Warning"}, {"address": 766, "code": "rIndex, uint256 _count) public view\n        returns (address[] _voters, uint256[] _votes)\n    {\n        require(_itemIndex < itemCount);\n        require(_voterIndex < voters.length);\n\n        _count = min(voters.length - _voterIndex, _count);\n        _voters = new address[](_count);\n        _votes = new uint256[](_count);\n        for (uint256 i=0;i<_count;i++) {\n            _voters[i] = voters[_voterIndex + i];\n            _votes[i] = voteItems[_itemIndex].votes[_voters[i]];\n        }\n    }\n\n    function min(uint256 _a, uint256 _b) returns (uint256 _min) {\n        _min = _a", "debug": "calldata_NumberCarbonVoting_32 + 4: 0x0\nmem_128 + 32 + 32*calldata_NumberCarbonVoting_32 + 36: 0x800000f80000003df000000000000000007be03e2108421083def7c1f0741f40\nstorage_5: 0x1\ncalldata_NumberCarbonVoting_4: 0x0\nstorage_3: 0x1\ncalldata_NumberCarbonVoting_0: 0x4d79ddb200000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberCarbonVoting: 0x4\ncalldata_NumberCarbonVoting_32 + 36: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getVotesForItemFromVoterIndex(uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/11/0xdec6c0dc7004ba23940c9ee7cb4a0528ec4c0580.sol", "function": "getVotesForItemFromVoterIndex(uint256,uint256,uint256)", "lineno": 73, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1737, "code": " _itemIndex) pub", "debug": "storage_5: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_NumberCarbonVoting_0: 0x35bbe70e00000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberCarbonVoting: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getAllVoters()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/11/0xdec6c0dc7004ba23940c9ee7cb4a0528ec4c0580.sol", "function": "getAllVoters()", "lineno": 65, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1739, "code": " _itemIndex) pub", "debug": "storage_5: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_NumberCarbonVoting_0: 0x35bbe70e00000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberCarbonVoting: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getAllVoters()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/11/0xdec6c0dc7004ba23940c9ee7cb4a0528ec4c0580.sol", "function": "getAllVoters()", "lineno": 65, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2261, "code": "min(uint2", "debug": "The exception is triggered under the following conditions:\n\ncalldata_NumberCarbonVoting_32 + 4: 0xfffffffffffffffffffffff\ncalldata_NumberCarbonVoting_32 + 36: 0x2000000000000000000000000000000000000000000000000000000000000000\nstorage_5: 0x7ffffffffffffffffffffffffffffffffffffffff00000000000000000000000\ncalldata_NumberCarbonVoting_4: 0x0\nstorage_3: 0x1\ncalldata_NumberCarbonVoting_0: 0x4d79ddb200000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberCarbonVoting: 0x4\nmem_128 + 32 + 32*calldata_NumberCarbonVoting_32 + 36: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/11/0xdec6c0dc7004ba23940c9ee7cb4a0528ec4c0580.sol", "function": "getVotesForItemFromVoterIndex(uint256,uint256,uint256)", "lineno": 88, "title": "Exception state", "type": "Informational"}, {"address": 2641, "code": ";\n\n/// @title Digi", "debug": "storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_1: 0x1\nstorage_0: 0x0\ncalldata_NumberCarbonVoting_0: 0xce11f2bb00000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberCarbonVoting: 0x4\nstorage_3: 0x0\ncalldata_NumberCarbonVoting_4 + calldata_NumberCarbonVoting_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `vote(uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/11/0xdec6c0dc7004ba23940c9ee7cb4a0528ec4c0580.sol", "function": "vote(uint256[])", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3291, "code": "ers;\n\n    constructor (", "debug": "The exception is triggered under the following conditions:\n\ncalldata_NumberCarbonVoting_4: 0x0\nstorage_5: 0x0\ncalldata_NumberCarbonVoting_0: 0xda58c7d900000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberCarbonVoting: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/11/0xdec6c0dc7004ba23940c9ee7cb4a0528ec4c0580.sol", "function": "_function_0xda58c7d9", "lineno": 21, "title": "Exception state", "type": "Informational"}], "success": true}