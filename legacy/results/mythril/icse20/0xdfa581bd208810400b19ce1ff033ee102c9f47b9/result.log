{"error": null, "issues": [{"address": 291, "code": "raw(uint _value) public onlyOwner \n    {\n       token.transfer(owner, _value);\n    }  \n\n    function withdrawToken(address _token, uint _value) public onlyOwner {\n        ERC20(_token).transfer(owner, _value);\n    }\n}", "debug": "calldata_airDrop_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_airDrop_0: 0x4609149900000000000000000000000000000000000000000000000000000000\ncalldatasize_airDrop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x46091499`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0xdfa581bd208810400b19ce1ff033ee102c9f47b9.sol", "function": "_function_0x46091499", "lineno": 422, "title": "Integer Overflow ", "type": "Warning"}, {"address": 952, "code": ".length == _amounts.length);\n\n        for (uint i = 0; i < _addresses.length; i ++) {\n            token.transferFrom(_from, _addresses[i], _amounts[i]);\n        }\n    }\n\n\n    function tokenFallback(address, uint, bytes) public pure {\n        // receive tokens\n    }\n\n    functi", "debug": "calldata_airDrop_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_airDrop_0: 0xffc3a76900000000000000000000000000000000000000000000000000000000\ncalldatasize_airDrop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0xffc3a769`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0xdfa581bd208810400b19ce1ff033ee102c9f47b9.sol", "function": "_function_0xffc3a769", "lineno": 410, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1254, "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xdfa581bd208810400b19ce1ff033ee102c9f47b9.sol", "function": "withdraw(uint256)", "lineno": 430, "title": "Message call to external contract", "type": "Informational"}, {"address": 1685, "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xdfa581bd208810400b19ce1ff033ee102c9f47b9.sol", "function": "_function_0x46091499", "lineno": 430, "title": "Message call to external contract", "type": "Informational"}, {"address": 1685, "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1685\n", "filename": "/unique_contracts/0xdfa581bd208810400b19ce1ff033ee102c9f47b9.sol", "function": "_function_0x46091499", "lineno": 430, "title": "Multiple Calls", "type": "Information"}, {"address": 2317, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0xdfa581bd208810400b19ce1ff033ee102c9f47b9.sol", "function": "withdrawToken(address,uint256)", "lineno": 430, "title": "Message call to external contract", "type": "Warning"}, {"address": 2777, "code": " uint, bytes) public pure {\n        // rec", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xdfa581bd208810400b19ce1ff033ee102c9f47b9.sol", "function": "_function_0xffc3a769", "lineno": 418, "title": "Message call to external contract", "type": "Informational"}], "success": true}