{"error": null, "issues": [{"address": 358, "code": "value-fee);\n  }", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x400000000000\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x400000000000\nstorage_7: 0x0\ncalldatasize_SuperbContract: 0x3\nstorage_0: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "fallback", "lineno": 158, "title": "Exception state", "type": "Informational"}, {"address": 450, "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x1\nstorage_0: 0x3fbffffffffffffffffffc000020000000000000000000000000000000000000\nstorage_7: 0x0\ncalldatasize_SuperbContract: 0x3\nstorage_3: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "fallback", "lineno": 160, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1801, "code": ".sender] * contract_token_bala", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw_bonus()", "lineno": 129, "title": "Message call to external contract", "type": "Informational"}, {"address": 1801, "code": ".sender] * contract_token_bala", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2304\n", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw_bonus()", "lineno": 129, "title": "Multiple Calls", "type": "Information"}, {"address": 1801, "code": ".sender] * contract_token_bala", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdraw_bonus(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw_bonus()", "lineno": 129, "title": "Transaction order dependence", "type": "Warning"}, {"address": 1952, "code": "[msg.sender];\n    balances_bonus[msg.sender] = 0;\n    require(token.transfer(msg", "debug": "The exception is triggered under the following conditions:\n\nreturndatasize: 0x20\nretval_1801: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_10: 0xff00\nstorage_7: 0xff00\ncalldata_SuperbContract_0: 0x107a8df00000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperbContract: 0x4\nstorage_9: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw_bonus()", "lineno": 130, "title": "Exception state", "type": "Informational"}, {"address": 2028, "code": ", tokens_to_withdraw));\n  }\n  \n  // Allows any user to", "debug": "storage_9: 0x100\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x101\nreturndatasize: 0x20\nretval_1801: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_10: 0xff00\nstorage_7: 0xff00\ncalldata_SuperbContract_0: 0x107a8df00000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperbContract: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `withdraw_bonus()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw_bonus()", "lineno": 132, "title": "Integer Underflow", "type": "Warning"}, {"address": 2034, "code": ", tokens_to_withdraw));\n  }\n  \n  // Allows any user to", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw_bonus()", "lineno": 132, "title": "State change after external call", "type": "Warning"}, {"address": 2103, "code": "s eth refunded before the purc", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw_bonus()", "lineno": 135, "title": "State change after external call", "type": "Warning"}, {"address": 2304, "code": " function refund_me() {\n    require(!bought_to", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw_bonus()", "lineno": 136, "title": "Message call to external contract", "type": "Informational"}, {"address": 2304, "code": " function refund_me() {\n    require(!bought_to", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdraw_bonus(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw_bonus()", "lineno": 136, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2704, "code": "(dev_fee);\n ", "debug": "The exception is triggered under the following conditions:\n\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x0\nstorage_4: 0x0\nstorage_10: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_7: 0x0\nstorage_2: 0x0\ncaller: 0x0\ncalldata_SuperbContract_0: 0x28b8e9cf00000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperbContract: 0x4\nstorage_1: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "buy_the_tokens()", "lineno": 73, "title": "Exception state", "type": "Informational"}, {"address": 2794, "code": "cord the amount of ETH sent ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3052\nCall at address: 2885\n", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "buy_the_tokens()", "lineno": 74, "title": "Multiple Calls", "type": "Information"}, {"address": 2794, "code": "cord the amount of ETH sent ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function buy_the_tokens(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "buy_the_tokens()", "lineno": 74, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2885, "code": "contract's current value.\n ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3052\n", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "buy_the_tokens()", "lineno": 74, "title": "Multiple Calls", "type": "Information"}, {"address": 2885, "code": "contract's current value.\n ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function buy_the_tokens(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "buy_the_tokens()", "lineno": 74, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3052, "code": "_token) onlyOwner {\n    require(_", "debug": "", "description": "A possible transaction order independence vulnerability exists in function buy_the_tokens(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "buy_the_tokens()", "lineno": 81, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3300, "code": "equire(contract_token_balance ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw()", "lineno": 110, "title": "Message call to external contract", "type": "Informational"}, {"address": 3300, "code": "equire(contract_token_balance ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3803\n", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw()", "lineno": 110, "title": "Multiple Calls", "type": "Information"}, {"address": 3300, "code": "equire(contract_token_balance ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw()", "lineno": 110, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3451, "code": "tly held by the contract.\n    contract_eth_value -= balances[msg.sen", "debug": "The exception is triggered under the following conditions:\n\nreturndatasize: 0x20\nretval_3300: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0xff00\ncalldata_SuperbContract_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperbContract: 0x4\nstorage_8: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw()", "lineno": 112, "title": "Exception state", "type": "Informational"}, {"address": 3527, "code": "ve call.\n    balances[msg.sender] = 0;\n   ", "debug": "storage_8: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x2\nreturndatasize: 0x20\nretval_3300: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0xff00\ncalldata_SuperbContract_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperbContract: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `withdraw()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw()", "lineno": 114, "title": "Integer Underflow", "type": "Warning"}, {"address": 3533, "code": "ve call.\n    balances[msg.sender] = 0;\n   ", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw()", "lineno": 114, "title": "State change after external call", "type": "Warning"}, {"address": 3602, "code": "ansfer(msg.sender, token", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw()", "lineno": 117, "title": "State change after external call", "type": "Warning"}, {"address": 3803, "code": "hdraw the bonus tokens after the 6 months lock", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw()", "lineno": 122, "title": "Message call to external contract", "type": "Informational"}, {"address": 3803, "code": "hdraw the bonus tokens after the 6 months lock", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/7/0xffb0d04ec8e7207339b83d6ac17e075db3b85d8a.sol", "function": "withdraw()", "lineno": 122, "title": "Transaction order dependence", "type": "Warning"}], "success": true}