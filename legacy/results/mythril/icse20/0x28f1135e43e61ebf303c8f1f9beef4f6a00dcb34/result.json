{
  "contract": "0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34",
  "tool": "mythril",
  "start": 1563317169.749896,
  "end": 1563317990.526297,
  "duration": 820.7764010429382,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 861,
        "code": "min external {\n        delete platform.proposals[txid];\n    }\n\n    /**\n     *   ######################\n     *  #  private function  #\n     * ######################\n     */\n\n    function hashMsg(bytes32 fromPlatform, address fromAccount, bytes32 toPlatform, address toAccount, uint value, bytes32 tokenSymbol, string txid,string version) internal pure returns (bytes32) {\n        return sha256(bytes32ToStr(fromPlatform), \":0x\", uintToStr(uint160(fromAccount), 16), \":\", bytes32ToStr(toPlatform), \"",
        "debug": "storage_3 + KECCAC_mem_128): 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_XCPluginInterface_0: 0x25d3a09d00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getProposal(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "getProposal(string)",
        "lineno": 549,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1078,
        "code": "      proposal.toAccount = toAccount;\n            proposal.value = value;\n        } else {\n            require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\n        }\n        changeVoters(publicKey, txid);\n    }\n\n    function verifyProposal(address fromAccount, address toAccount, uint value, string txid) external view returns (bool, bool) {\n        Proposal storage proposal = platform.proposals[txid];\n        if (proposal.status) {\n            return (true, (proposal.voters.length >= proposal.weight));\n        }\n        if (proposal.value == 0) {\n            return (false, false);\n        }\n        require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\n        retur",
        "debug": "calldata_XCPluginInterface_32 + 68: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_XCPluginInterface_0: 0x3b4159da00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `voteProposal(address,address,uint256,string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "voteProposal(address,address,uint256,string,bytes)",
        "lineno": 511,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4064,
        "code": "rsion) internal pure returns (bytes32) {",
        "debug": "storage_3 + KECCAC_mem_128): 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_XCPluginInterface_0: 0x25d3a09d00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getProposal(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "getProposal(string)",
        "lineno": 559,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4066,
        "code": "rsion) internal pure returns (bytes32) {",
        "debug": "storage_3 + KECCAC_mem_128): 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_XCPluginInterface_0: 0x25d3a09d00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getProposal(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "getProposal(string)",
        "lineno": 559,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4352,
        "code": "unt && proposal.toAccount == toAccount && proposal.value == value);\n        }\n        changeVoters(publicKey, tx",
        "debug": "calldata_XCPluginInterface_4 + calldata_XCPluginInterface_32 + 68: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\nstorage_0: 0xff00\ncalldata_XCPluginInterface_0: 0x3b4159da00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `voteProposal(address,address,uint256,string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "voteProposal(address,address,uint256,string,bytes)",
        "lineno": 514,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4361,
        "code": "unt && proposal.toAccount == toAccount && proposal.value == value);\n        }\n        changeVoters(publicKey, tx",
        "debug": "calldata_XCPluginInterface_4 + calldata_XCPluginInterface_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\nstorage_0: 0xff00\ncalldata_XCPluginInterface_0: 0x3b4159da00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `voteProposal(address,address,uint256,string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "voteProposal(address,address,uint256,string,bytes)",
        "lineno": 514,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4367,
        "code": "unt && proposal.toAccount == toAccount && proposal.value == value);\n        }\n        changeVoters(publicKey, tx",
        "debug": "calldata_XCPluginInterface_4 + calldata_XCPluginInterface_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\nstorage_0: 0xff00\ncalldata_XCPluginInterface_0: 0x3b4159da00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `voteProposal(address,address,uint256,string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "voteProposal(address,address,uint256,string,bytes)",
        "lineno": 514,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4452,
        "code": "unt && proposal.toAccount == toAccount && proposal.value == value);\n        }\n        changeVoters(publicKey, tx",
        "debug": "calldata_XCPluginInterface_4 + calldata_XCPluginInterface_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21\nstorage_0: 0xff00\ncalldata_XCPluginInterface_0: 0x3b4159da00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `voteProposal(address,address,uint256,string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "voteProposal(address,address,uint256,string,bytes)",
        "lineno": 514,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4508,
        "code": "unt && proposal.toAccount == toAccount && proposal.value == value);\n        }\n        changeVoters(publicKey, tx",
        "debug": "storage_4: 0xcd2fc412e0000000000000000000000000000000000000000000000000000041\ncalldata_XCPluginInterface_4 + calldata_XCPluginInterface_32 + 68: 0xd60685f68fffffffffffffffffffffffffffffffffffffffffffffffffffff81\nstorage_0: 0xff00\ncalldata_XCPluginInterface_0: 0x3b4159da00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `voteProposal(address,address,uint256,string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "voteProposal(address,address,uint256,string,bytes)",
        "lineno": 514,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4532,
        "code": "unt && proposal.toAccount == toAccount && proposal.value == value);\n        }\n        changeVoters(publicKey, tx",
        "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01\ncalldata_XCPluginInterface_4 + calldata_XCPluginInterface_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01\nstorage_0: 0xff00\ncalldata_XCPluginInterface_0: 0x3b4159da00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `voteProposal(address,address,uint256,string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "voteProposal(address,address,uint256,string,bytes)",
        "lineno": 514,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8906,
        "code": "   modifier onlyAdmin {\n        require(admin.acc",
        "debug": "storage_9: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_XCPluginInterface_0: 0x5a07151700000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `existPublicKey(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "existPublicKey(address)",
        "lineno": 645,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8908,
        "code": "   modifier onlyAdmin {\n        require(admin.acc",
        "debug": "storage_9: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_XCPluginInterface_0: 0x5a07151700000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `existPublicKey(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "existPublicKey(address)",
        "lineno": 645,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9942,
        "code": "    b",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x0\nstorage_7: 0x80\nstorage_0: 0xff00\ncalldata_XCPluginInterface_0: 0x3b4159da00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XCPluginInterface_4 + calldata_XCPluginInterface_32 + 68)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               Concat(0,\n                      ~(~Extract(255,\n                                 1,\n                                 115792089237316195423570985008687907853269984665640564039457584007913129639935 +\n                                 256*\n                                 If(Extract(0, 0, storage_4) ==\n                                    0,\n                                    1,\n                                    0)) |\n                        ~Extract(255, 1, storage_4))))): 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "voteProposal(address,address,uint256,string,bytes)",
        "lineno": 605,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10398,
        "code": "ct Admin {\n        bool status;\n        bytes32 platformName;\n        bytes32 tokenSymbol;\n        address account;\n        string version;\n    }\n\n    /**\n     * Transaction Proposal\n     * @field status Transaction proposal status(false:pending,true:complete).\n     * @field fromAccount Account of form platform.\n     * @field toAccount Account of to platform.\n     * @field value Transfer amount.\n     * @field tokenSymbol token Symbol.\n     * @field voters Proposers.\n     * @field weight The weight value of the completed time.\n     */\n    struct Proposal {\n        bool status;\n        address fromAccount;\n        address toAccount;\n        uint value;\n        address[] voters;\n        uint weight;\n    }\n\n    /**\n     * Trusted Platform\n     * @field status Trusted platform state(false:no trusted,true:trusted).\n     * @field weight weight of platform.\n     * @field publicKeys list of public key.\n     * @field proposals list of proposal.\n     */\n    struct Platform {\n        bool status;\n        bytes32 name;\n        uint weight;\n        address[] publicKeys;\n        mapping(string => Proposal) proposals;\n    }\n\n    Admin private admin;\n\n    address[] private callers;\n\n    Platform private platform;\n\n\n    constructor() public {\n        init();\n    }\n\n    /**\n     * TODO Parameters that must be set before compilation\n     * $Init admin.status\n     * $Init admin.platformName\n     * $Init admin.tokenSymbol\n     * $Init admin.account\n     * $Init admin.version\n     * $Init platform.status\n     * $Init platform.name\n     * $Init platform.weight\n     * $Init platform.publicKeys\n     */\n    function init() internal {\n        // Admin { status | platformName | tokenSymbol | account}\n        admin.status = true;\n        admin.platformName = \"ETH\";\n        admin.tokenSymbol = \"INK\";\n        admin.account = msg.sender;\n        admin.version = \"1.0\";\n        platform.status = true;\n        platform.name = \"INK\";\n        platform.weight = 3;\n        platform.publicKeys.push(0x80aa17b21c16620a4d7dd06ec1dcc44190b02ca0);\n        platform.publicKeys.push(0xd2e40bb4967b355da8d70be40c277ebcf108063c);\n        platform.publicKeys.push(0x1501e0f09498aa95cb0c2f1e3ee51223e5074720);\n    }\n\n    function start() onlyAdmin external {\n        if (!admin.status) {\n            admin.status = true;\n        }\n    }\n\n    function stop() onlyAdmin external {\n        if (admin.status) {\n            admin.status = false;\n        }\n    }\n\n    function getStatus() external view returns (bool) {\n        return admin.status;\n    }\n\n    function getPlatformName() external view returns (bytes32) {\n        return admin.platformName;\n    }\n\n    function setAdmin(address account) onlyAdmin nonzeroAddress(account) external {\n        if (admin.account != account) {\n            admin.account = account;\n        }\n    }\n\n    function getAdmin() external view returns (address) {\n        return admin.account;\n    }\n\n    function getTokenSymbol() external view returns (bytes32) {\n        return admin.tokenSymbol;\n    }\n\n    function addCaller(address caller) onlyAdmin nonzeroAddress(caller) external {\n        if (!_existCaller(caller)) {\n            callers.push(caller);\n        }\n    }\n\n    function deleteCaller(address caller) onlyAdmin nonzeroAddress(caller) external {\n        for (uint i = 0; i < callers.length; i++) {\n            if (callers[i] == caller) {\n                if (i != callers.length - 1 ) {\n                    callers[i] = callers[callers.length - 1];\n                }\n                callers.length--;\n                return;\n            }\n        }\n    }\n\n    function existCaller(address caller) external view returns (bool) {\n        return _existCaller(caller);\n    }\n\n    function getCallers() external view returns (address[]) {\n        return callers;\n    }\n\n    function getTrustPlatform() external view returns (bytes32 name){\n        return platform.name;\n    }\n\n    function setWeight(uint weight) onlyAdmin external {\n        require(weight > 0);\n        if (platform.weight != weight) {\n            platform.weight = weight;\n        }\n    }\n\n    function getWeight() external view returns (uint) {\n        return platform.weight;\n    }\n\n    function addPublicKey(address publicKey) onlyAdmin nonzeroAddress(publicKey) external {\n        address[] storage publicKeys = platform.publicKeys;\n        for (uint i; i < publicKeys.length; i++) {\n            if (publicKey == publicKeys[i]) {\n                return;\n            }\n        }\n        publicKeys.push(publicKey);\n    }\n\n    function deletePublicKey(address publicKey) onlyAdmin nonzeroAddress(publicKey) external {\n        address[] storage publicKeys = platform.publicKeys;\n        for (uint i = 0; i < publicKeys.length; i++) {\n            if (publicKeys[i] == publicKey) {\n                if (i != publicKeys.length - 1 ) {\n                    publicKeys[i] = publicKeys[publicKeys.length - 1];\n                }\n                publicKeys.length--;\n                return;\n            }\n        }\n    }\n\n    function existPublicKey(address publicKey) external view returns (bool) {\n        return _existPublicKey(publicKey);\n    }\n\n    function countOfPublicKey() external view returns (uint){\n        return platform.publicKeys.length;\n    }\n\n    function publicKeys() external view returns (address[]){\n        return platform.publicKeys;\n    }\n\n    function voteProposal(address fromAccount, address toAccount, uint value, string txid, bytes sig) opened external {\n        bytes32 msgHash = hashMsg(platform.name, fromAccount, admin.platformName, toAccount, value, admin.tokenSymbol, txid,admin.version);\n        address publicKey = recover(msgHash, sig);\n        require(_existPublicKey(publicKey));\n        Proposal storage proposal = platform.proposals[txid];\n        if (proposal.value == 0) {\n            proposal.fromAccount = fromAccount;\n            proposal.toAccount = toAccount;\n            proposal.value = value;\n        } else {\n            require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\n        }\n        changeVoters(publicKey, txid);\n    }\n\n    function verifyProposal(address fromAccount, address toAccount, uint value, string txid) external view returns (bool, bool) {\n        Proposal storage proposal = platform.proposals[txid];\n        if (proposal.status) {\n            return (true, (proposal.voters.length >= proposal.weight));\n        }\n        if (proposal.value == 0) {\n            return (false, false);\n        }\n        require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\n        return (false, (proposal.voters.length >= platform.weight));\n    }\n\n    function commitProposal(string txid) external returns (bool) {\n        require((admin.status &&_existCaller(msg.sender)) || msg.sender == admin.account);\n        require(!platform.proposals[txid].status);\n        platform.proposals[txid].status = true;\n        platform.proposals[txid].weight = platform.proposals[txid].voters.length;\n        return true;\n    }\n\n    function getProposal(string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight){\n        fromAccount = platform.proposals[txid].fromAccount;\n        toAccount = platform.proposals[txid].toAccount;\n        value = platform.proposals[txid].value;\n        voters = platform.proposals[txid].voters;\n        status = platform.proposals[txid].status;\n        weight = platform.proposals[txid].weight;\n        return;\n    }\n\n    function deleteProposal(string txid) onlyAdmin external {\n        delete platform.proposals[txid];\n    }\n\n    /**\n     *   ######################\n     *  #  private function  #\n     * ######################\n     */\n\n    function hashMsg(bytes32 fromPlatform, address fromAccount, bytes32 toPlatform, address toAccount, uint value, bytes32 tokenSymbol, string txid,string version) internal pure returns (bytes32) {\n        return sha256(bytes32ToStr(fromPlatform), \":0x\", uintToStr(uint160(fromAccount), 16), \":\", bytes32ToStr(toPlatform), \":0x\", uintToStr(uint160(toAccount), 16), \":\", uintToStr(value, 10), \":\", bytes32ToStr(tokenSymbol), \":\", txid, \":\", version);\n    }\n\n    function changeVoters(address publicKey, string txid) internal {\n        address[] storage voters = platform.proposals[txid].voters;\n        for (uint i = 0; i < voters.length; i++) {\n            if (voters[i] == publicKey) {\n                return;\n            }\n        }\n        voters.push(publicKey);\n    }\n\n    function bytes32ToStr(bytes32 b) internal pure returns (string) {\n        uint length = b.length;\n        for (uint i = 0; i < b.length; i++) {\n            if (b[b.length - 1 - i] != \"\") {\n                length -= i;\n                break;\n            }\n        }\n        bytes memory bs = new bytes(length);\n        for (uint j = 0; j < length; j++) {\n            bs[j] = b[j];\n        }\n        return string(bs);\n    }\n\n    function uintToStr(uint value, uint base) internal pure returns (string) {\n        uint _value = value;\n        uint length = 0;\n        bytes16 tenStr = \"0123456789abcdef\";\n        while (true) {\n            if (_value > 0) {\n                length ++;\n                _value = _value / base;\n            } else {\n                break;\n            }\n        }\n        if (base == 16) {\n            length = 40;\n        }\n        bytes memory bs = new bytes(length);\n        for (uint i = 0; i < length; i++) {\n            bs[length - 1 - i] = tenStr[value % base];\n            value = value / base;\n        }\n        return string(bs);\n    }\n\n    function _existCaller(address caller) internal view returns (bool) {\n        for (uint i = 0; i < callers.length; i++) {\n            if (callers[i] == caller) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function _existPublicKey(address publicKey) internal view returns (bool) {\n        address[] memory publicKeys = platform.publicKeys;\n        for (uint i = 0; i < publicKeys.length; i++) {\n            if (publicKeys[i] == publicKey) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function recover(bytes32 hash, bytes sig) internal pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n        if (v < 27) {\n            v += 27;\n        }\n        return ecrecover(hash, v, r, s);\n    }\n\n    modifier onlyAdmin {\n        require(admin.account == msg.sender);\n        _;\n    }\n\n    modifier nonzeroAddress(address account) {\n        require(account != address(0));\n        _;\n    }\n\n    modifier opened() {\n        require(admin.status);\n        _;\n    }\n}\n\ncontract XC is XCInterface {\n\n    /**\n     * Contract Administrator\n     * @field status Contract external service status.\n     * @field platformName Current contract platform name.\n     * @field account Current contract administrator.\n     */\n    struct Admin {\n        uint8 status;\n        bytes32 platformName;\n        address account;\n    }\n\n    Admin private admin;\n\n    uint public lockBalance;\n\n    Token private token;\n\n    XCPlugin private xcPlugin;\n\n    event Lock(bytes32 toPlatform, address toAccount, bytes32 value, bytes32 tokenSymbol);\n\n    event Unlock(string txid, bytes32 fromPlatform, address fromAccount, bytes32 value, bytes32 tokenSy",
        "debug": "storage_9: 0xc000000000000000000000000000000000000000000000000000000000000000\nstorage_49791959467252497455735130940088646708311117250336157395101362029847983277999: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_XCPluginInterface_4: 0xffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nstorage_3: 0x0\ncalldata_XCPluginInterface_0: 0x1bf9b32500000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `deletePublicKey(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "deletePublicKey(address)",
        "lineno": 314,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 10400,
        "code": "ct Admin {\n        bool status;\n        bytes32 platformName;\n        bytes32 tokenSymbol;\n        address account;\n        string version;\n    }\n\n    /**\n     * Transaction Proposal\n     * @field status Transaction proposal status(false:pending,true:complete).\n     * @field fromAccount Account of form platform.\n     * @field toAccount Account of to platform.\n     * @field value Transfer amount.\n     * @field tokenSymbol token Symbol.\n     * @field voters Proposers.\n     * @field weight The weight value of the completed time.\n     */\n    struct Proposal {\n        bool status;\n        address fromAccount;\n        address toAccount;\n        uint value;\n        address[] voters;\n        uint weight;\n    }\n\n    /**\n     * Trusted Platform\n     * @field status Trusted platform state(false:no trusted,true:trusted).\n     * @field weight weight of platform.\n     * @field publicKeys list of public key.\n     * @field proposals list of proposal.\n     */\n    struct Platform {\n        bool status;\n        bytes32 name;\n        uint weight;\n        address[] publicKeys;\n        mapping(string => Proposal) proposals;\n    }\n\n    Admin private admin;\n\n    address[] private callers;\n\n    Platform private platform;\n\n\n    constructor() public {\n        init();\n    }\n\n    /**\n     * TODO Parameters that must be set before compilation\n     * $Init admin.status\n     * $Init admin.platformName\n     * $Init admin.tokenSymbol\n     * $Init admin.account\n     * $Init admin.version\n     * $Init platform.status\n     * $Init platform.name\n     * $Init platform.weight\n     * $Init platform.publicKeys\n     */\n    function init() internal {\n        // Admin { status | platformName | tokenSymbol | account}\n        admin.status = true;\n        admin.platformName = \"ETH\";\n        admin.tokenSymbol = \"INK\";\n        admin.account = msg.sender;\n        admin.version = \"1.0\";\n        platform.status = true;\n        platform.name = \"INK\";\n        platform.weight = 3;\n        platform.publicKeys.push(0x80aa17b21c16620a4d7dd06ec1dcc44190b02ca0);\n        platform.publicKeys.push(0xd2e40bb4967b355da8d70be40c277ebcf108063c);\n        platform.publicKeys.push(0x1501e0f09498aa95cb0c2f1e3ee51223e5074720);\n    }\n\n    function start() onlyAdmin external {\n        if (!admin.status) {\n            admin.status = true;\n        }\n    }\n\n    function stop() onlyAdmin external {\n        if (admin.status) {\n            admin.status = false;\n        }\n    }\n\n    function getStatus() external view returns (bool) {\n        return admin.status;\n    }\n\n    function getPlatformName() external view returns (bytes32) {\n        return admin.platformName;\n    }\n\n    function setAdmin(address account) onlyAdmin nonzeroAddress(account) external {\n        if (admin.account != account) {\n            admin.account = account;\n        }\n    }\n\n    function getAdmin() external view returns (address) {\n        return admin.account;\n    }\n\n    function getTokenSymbol() external view returns (bytes32) {\n        return admin.tokenSymbol;\n    }\n\n    function addCaller(address caller) onlyAdmin nonzeroAddress(caller) external {\n        if (!_existCaller(caller)) {\n            callers.push(caller);\n        }\n    }\n\n    function deleteCaller(address caller) onlyAdmin nonzeroAddress(caller) external {\n        for (uint i = 0; i < callers.length; i++) {\n            if (callers[i] == caller) {\n                if (i != callers.length - 1 ) {\n                    callers[i] = callers[callers.length - 1];\n                }\n                callers.length--;\n                return;\n            }\n        }\n    }\n\n    function existCaller(address caller) external view returns (bool) {\n        return _existCaller(caller);\n    }\n\n    function getCallers() external view returns (address[]) {\n        return callers;\n    }\n\n    function getTrustPlatform() external view returns (bytes32 name){\n        return platform.name;\n    }\n\n    function setWeight(uint weight) onlyAdmin external {\n        require(weight > 0);\n        if (platform.weight != weight) {\n            platform.weight = weight;\n        }\n    }\n\n    function getWeight() external view returns (uint) {\n        return platform.weight;\n    }\n\n    function addPublicKey(address publicKey) onlyAdmin nonzeroAddress(publicKey) external {\n        address[] storage publicKeys = platform.publicKeys;\n        for (uint i; i < publicKeys.length; i++) {\n            if (publicKey == publicKeys[i]) {\n                return;\n            }\n        }\n        publicKeys.push(publicKey);\n    }\n\n    function deletePublicKey(address publicKey) onlyAdmin nonzeroAddress(publicKey) external {\n        address[] storage publicKeys = platform.publicKeys;\n        for (uint i = 0; i < publicKeys.length; i++) {\n            if (publicKeys[i] == publicKey) {\n                if (i != publicKeys.length - 1 ) {\n                    publicKeys[i] = publicKeys[publicKeys.length - 1];\n                }\n                publicKeys.length--;\n                return;\n            }\n        }\n    }\n\n    function existPublicKey(address publicKey) external view returns (bool) {\n        return _existPublicKey(publicKey);\n    }\n\n    function countOfPublicKey() external view returns (uint){\n        return platform.publicKeys.length;\n    }\n\n    function publicKeys() external view returns (address[]){\n        return platform.publicKeys;\n    }\n\n    function voteProposal(address fromAccount, address toAccount, uint value, string txid, bytes sig) opened external {\n        bytes32 msgHash = hashMsg(platform.name, fromAccount, admin.platformName, toAccount, value, admin.tokenSymbol, txid,admin.version);\n        address publicKey = recover(msgHash, sig);\n        require(_existPublicKey(publicKey));\n        Proposal storage proposal = platform.proposals[txid];\n        if (proposal.value == 0) {\n            proposal.fromAccount = fromAccount;\n            proposal.toAccount = toAccount;\n            proposal.value = value;\n        } else {\n            require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\n        }\n        changeVoters(publicKey, txid);\n    }\n\n    function verifyProposal(address fromAccount, address toAccount, uint value, string txid) external view returns (bool, bool) {\n        Proposal storage proposal = platform.proposals[txid];\n        if (proposal.status) {\n            return (true, (proposal.voters.length >= proposal.weight));\n        }\n        if (proposal.value == 0) {\n            return (false, false);\n        }\n        require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\n        return (false, (proposal.voters.length >= platform.weight));\n    }\n\n    function commitProposal(string txid) external returns (bool) {\n        require((admin.status &&_existCaller(msg.sender)) || msg.sender == admin.account);\n        require(!platform.proposals[txid].status);\n        platform.proposals[txid].status = true;\n        platform.proposals[txid].weight = platform.proposals[txid].voters.length;\n        return true;\n    }\n\n    function getProposal(string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight){\n        fromAccount = platform.proposals[txid].fromAccount;\n        toAccount = platform.proposals[txid].toAccount;\n        value = platform.proposals[txid].value;\n        voters = platform.proposals[txid].voters;\n        status = platform.proposals[txid].status;\n        weight = platform.proposals[txid].weight;\n        return;\n    }\n\n    function deleteProposal(string txid) onlyAdmin external {\n        delete platform.proposals[txid];\n    }\n\n    /**\n     *   ######################\n     *  #  private function  #\n     * ######################\n     */\n\n    function hashMsg(bytes32 fromPlatform, address fromAccount, bytes32 toPlatform, address toAccount, uint value, bytes32 tokenSymbol, string txid,string version) internal pure returns (bytes32) {\n        return sha256(bytes32ToStr(fromPlatform), \":0x\", uintToStr(uint160(fromAccount), 16), \":\", bytes32ToStr(toPlatform), \":0x\", uintToStr(uint160(toAccount), 16), \":\", uintToStr(value, 10), \":\", bytes32ToStr(tokenSymbol), \":\", txid, \":\", version);\n    }\n\n    function changeVoters(address publicKey, string txid) internal {\n        address[] storage voters = platform.proposals[txid].voters;\n        for (uint i = 0; i < voters.length; i++) {\n            if (voters[i] == publicKey) {\n                return;\n            }\n        }\n        voters.push(publicKey);\n    }\n\n    function bytes32ToStr(bytes32 b) internal pure returns (string) {\n        uint length = b.length;\n        for (uint i = 0; i < b.length; i++) {\n            if (b[b.length - 1 - i] != \"\") {\n                length -= i;\n                break;\n            }\n        }\n        bytes memory bs = new bytes(length);\n        for (uint j = 0; j < length; j++) {\n            bs[j] = b[j];\n        }\n        return string(bs);\n    }\n\n    function uintToStr(uint value, uint base) internal pure returns (string) {\n        uint _value = value;\n        uint length = 0;\n        bytes16 tenStr = \"0123456789abcdef\";\n        while (true) {\n            if (_value > 0) {\n                length ++;\n                _value = _value / base;\n            } else {\n                break;\n            }\n        }\n        if (base == 16) {\n            length = 40;\n        }\n        bytes memory bs = new bytes(length);\n        for (uint i = 0; i < length; i++) {\n            bs[length - 1 - i] = tenStr[value % base];\n            value = value / base;\n        }\n        return string(bs);\n    }\n\n    function _existCaller(address caller) internal view returns (bool) {\n        for (uint i = 0; i < callers.length; i++) {\n            if (callers[i] == caller) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function _existPublicKey(address publicKey) internal view returns (bool) {\n        address[] memory publicKeys = platform.publicKeys;\n        for (uint i = 0; i < publicKeys.length; i++) {\n            if (publicKeys[i] == publicKey) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function recover(bytes32 hash, bytes sig) internal pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n        if (v < 27) {\n            v += 27;\n        }\n        return ecrecover(hash, v, r, s);\n    }\n\n    modifier onlyAdmin {\n        require(admin.account == msg.sender);\n        _;\n    }\n\n    modifier nonzeroAddress(address account) {\n        require(account != address(0));\n        _;\n    }\n\n    modifier opened() {\n        require(admin.status);\n        _;\n    }\n}\n\ncontract XC is XCInterface {\n\n    /**\n     * Contract Administrator\n     * @field status Contract external service status.\n     * @field platformName Current contract platform name.\n     * @field account Current contract administrator.\n     */\n    struct Admin {\n        uint8 status;\n        bytes32 platformName;\n        address account;\n    }\n\n    Admin private admin;\n\n    uint public lockBalance;\n\n    Token private token;\n\n    XCPlugin private xcPlugin;\n\n    event Lock(bytes32 toPlatform, address toAccount, bytes32 value, bytes32 tokenSymbol);\n\n    event Unlock(string txid, bytes32 fromPlatform, address fromAccount, bytes32 value, bytes32 tokenSy",
        "debug": "storage_9: 0x9800000000000000000000000000000000000000000000000000000000000001\nstorage_49791959467252497455735130940088646708311117250336157395101362029847983277999: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_XCPluginInterface_4: 0xffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nstorage_3: 0x0\ncalldata_XCPluginInterface_0: 0x1bf9b32500000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `deletePublicKey(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "deletePublicKey(address)",
        "lineno": 314,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 10442,
        "code": "ct Admin {\n        bool status;\n        bytes32 platformName;\n        bytes32 tokenSymbol;\n        address account;\n        string version;\n    }\n\n    /**\n     * Transaction Proposal\n     * @field status Transaction proposal status(false:pending,true:complete).\n     * @field fromAccount Account of form platform.\n     * @field toAccount Account of to platform.\n     * @field value Transfer amount.\n     * @field tokenSymbol token Symbol.\n     * @field voters Proposers.\n     * @field weight The weight value of the completed time.\n     */\n    struct Proposal {\n        bool status;\n        address fromAccount;\n        address toAccount;\n        uint value;\n        address[] voters;\n        uint weight;\n    }\n\n    /**\n     * Trusted Platform\n     * @field status Trusted platform state(false:no trusted,true:trusted).\n     * @field weight weight of platform.\n     * @field publicKeys list of public key.\n     * @field proposals list of proposal.\n     */\n    struct Platform {\n        bool status;\n        bytes32 name;\n        uint weight;\n        address[] publicKeys;\n        mapping(string => Proposal) proposals;\n    }\n\n    Admin private admin;\n\n    address[] private callers;\n\n    Platform private platform;\n\n\n    constructor() public {\n        init();\n    }\n\n    /**\n     * TODO Parameters that must be set before compilation\n     * $Init admin.status\n     * $Init admin.platformName\n     * $Init admin.tokenSymbol\n     * $Init admin.account\n     * $Init admin.version\n     * $Init platform.status\n     * $Init platform.name\n     * $Init platform.weight\n     * $Init platform.publicKeys\n     */\n    function init() internal {\n        // Admin { status | platformName | tokenSymbol | account}\n        admin.status = true;\n        admin.platformName = \"ETH\";\n        admin.tokenSymbol = \"INK\";\n        admin.account = msg.sender;\n        admin.version = \"1.0\";\n        platform.status = true;\n        platform.name = \"INK\";\n        platform.weight = 3;\n        platform.publicKeys.push(0x80aa17b21c16620a4d7dd06ec1dcc44190b02ca0);\n        platform.publicKeys.push(0xd2e40bb4967b355da8d70be40c277ebcf108063c);\n        platform.publicKeys.push(0x1501e0f09498aa95cb0c2f1e3ee51223e5074720);\n    }\n\n    function start() onlyAdmin external {\n        if (!admin.status) {\n            admin.status = true;\n        }\n    }\n\n    function stop() onlyAdmin external {\n        if (admin.status) {\n            admin.status = false;\n        }\n    }\n\n    function getStatus() external view returns (bool) {\n        return admin.status;\n    }\n\n    function getPlatformName() external view returns (bytes32) {\n        return admin.platformName;\n    }\n\n    function setAdmin(address account) onlyAdmin nonzeroAddress(account) external {\n        if (admin.account != account) {\n            admin.account = account;\n        }\n    }\n\n    function getAdmin() external view returns (address) {\n        return admin.account;\n    }\n\n    function getTokenSymbol() external view returns (bytes32) {\n        return admin.tokenSymbol;\n    }\n\n    function addCaller(address caller) onlyAdmin nonzeroAddress(caller) external {\n        if (!_existCaller(caller)) {\n            callers.push(caller);\n        }\n    }\n\n    function deleteCaller(address caller) onlyAdmin nonzeroAddress(caller) external {\n        for (uint i = 0; i < callers.length; i++) {\n            if (callers[i] == caller) {\n                if (i != callers.length - 1 ) {\n                    callers[i] = callers[callers.length - 1];\n                }\n                callers.length--;\n                return;\n            }\n        }\n    }\n\n    function existCaller(address caller) external view returns (bool) {\n        return _existCaller(caller);\n    }\n\n    function getCallers() external view returns (address[]) {\n        return callers;\n    }\n\n    function getTrustPlatform() external view returns (bytes32 name){\n        return platform.name;\n    }\n\n    function setWeight(uint weight) onlyAdmin external {\n        require(weight > 0);\n        if (platform.weight != weight) {\n            platform.weight = weight;\n        }\n    }\n\n    function getWeight() external view returns (uint) {\n        return platform.weight;\n    }\n\n    function addPublicKey(address publicKey) onlyAdmin nonzeroAddress(publicKey) external {\n        address[] storage publicKeys = platform.publicKeys;\n        for (uint i; i < publicKeys.length; i++) {\n            if (publicKey == publicKeys[i]) {\n                return;\n            }\n        }\n        publicKeys.push(publicKey);\n    }\n\n    function deletePublicKey(address publicKey) onlyAdmin nonzeroAddress(publicKey) external {\n        address[] storage publicKeys = platform.publicKeys;\n        for (uint i = 0; i < publicKeys.length; i++) {\n            if (publicKeys[i] == publicKey) {\n                if (i != publicKeys.length - 1 ) {\n                    publicKeys[i] = publicKeys[publicKeys.length - 1];\n                }\n                publicKeys.length--;\n                return;\n            }\n        }\n    }\n\n    function existPublicKey(address publicKey) external view returns (bool) {\n        return _existPublicKey(publicKey);\n    }\n\n    function countOfPublicKey() external view returns (uint){\n        return platform.publicKeys.length;\n    }\n\n    function publicKeys() external view returns (address[]){\n        return platform.publicKeys;\n    }\n\n    function voteProposal(address fromAccount, address toAccount, uint value, string txid, bytes sig) opened external {\n        bytes32 msgHash = hashMsg(platform.name, fromAccount, admin.platformName, toAccount, value, admin.tokenSymbol, txid,admin.version);\n        address publicKey = recover(msgHash, sig);\n        require(_existPublicKey(publicKey));\n        Proposal storage proposal = platform.proposals[txid];\n        if (proposal.value == 0) {\n            proposal.fromAccount = fromAccount;\n            proposal.toAccount = toAccount;\n            proposal.value = value;\n        } else {\n            require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\n        }\n        changeVoters(publicKey, txid);\n    }\n\n    function verifyProposal(address fromAccount, address toAccount, uint value, string txid) external view returns (bool, bool) {\n        Proposal storage proposal = platform.proposals[txid];\n        if (proposal.status) {\n            return (true, (proposal.voters.length >= proposal.weight));\n        }\n        if (proposal.value == 0) {\n            return (false, false);\n        }\n        require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\n        return (false, (proposal.voters.length >= platform.weight));\n    }\n\n    function commitProposal(string txid) external returns (bool) {\n        require((admin.status &&_existCaller(msg.sender)) || msg.sender == admin.account);\n        require(!platform.proposals[txid].status);\n        platform.proposals[txid].status = true;\n        platform.proposals[txid].weight = platform.proposals[txid].voters.length;\n        return true;\n    }\n\n    function getProposal(string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight){\n        fromAccount = platform.proposals[txid].fromAccount;\n        toAccount = platform.proposals[txid].toAccount;\n        value = platform.proposals[txid].value;\n        voters = platform.proposals[txid].voters;\n        status = platform.proposals[txid].status;\n        weight = platform.proposals[txid].weight;\n        return;\n    }\n\n    function deleteProposal(string txid) onlyAdmin external {\n        delete platform.proposals[txid];\n    }\n\n    /**\n     *   ######################\n     *  #  private function  #\n     * ######################\n     */\n\n    function hashMsg(bytes32 fromPlatform, address fromAccount, bytes32 toPlatform, address toAccount, uint value, bytes32 tokenSymbol, string txid,string version) internal pure returns (bytes32) {\n        return sha256(bytes32ToStr(fromPlatform), \":0x\", uintToStr(uint160(fromAccount), 16), \":\", bytes32ToStr(toPlatform), \":0x\", uintToStr(uint160(toAccount), 16), \":\", uintToStr(value, 10), \":\", bytes32ToStr(tokenSymbol), \":\", txid, \":\", version);\n    }\n\n    function changeVoters(address publicKey, string txid) internal {\n        address[] storage voters = platform.proposals[txid].voters;\n        for (uint i = 0; i < voters.length; i++) {\n            if (voters[i] == publicKey) {\n                return;\n            }\n        }\n        voters.push(publicKey);\n    }\n\n    function bytes32ToStr(bytes32 b) internal pure returns (string) {\n        uint length = b.length;\n        for (uint i = 0; i < b.length; i++) {\n            if (b[b.length - 1 - i] != \"\") {\n                length -= i;\n                break;\n            }\n        }\n        bytes memory bs = new bytes(length);\n        for (uint j = 0; j < length; j++) {\n            bs[j] = b[j];\n        }\n        return string(bs);\n    }\n\n    function uintToStr(uint value, uint base) internal pure returns (string) {\n        uint _value = value;\n        uint length = 0;\n        bytes16 tenStr = \"0123456789abcdef\";\n        while (true) {\n            if (_value > 0) {\n                length ++;\n                _value = _value / base;\n            } else {\n                break;\n            }\n        }\n        if (base == 16) {\n            length = 40;\n        }\n        bytes memory bs = new bytes(length);\n        for (uint i = 0; i < length; i++) {\n            bs[length - 1 - i] = tenStr[value % base];\n            value = value / base;\n        }\n        return string(bs);\n    }\n\n    function _existCaller(address caller) internal view returns (bool) {\n        for (uint i = 0; i < callers.length; i++) {\n            if (callers[i] == caller) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function _existPublicKey(address publicKey) internal view returns (bool) {\n        address[] memory publicKeys = platform.publicKeys;\n        for (uint i = 0; i < publicKeys.length; i++) {\n            if (publicKeys[i] == publicKey) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function recover(bytes32 hash, bytes sig) internal pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n        if (v < 27) {\n            v += 27;\n        }\n        return ecrecover(hash, v, r, s);\n    }\n\n    modifier onlyAdmin {\n        require(admin.account == msg.sender);\n        _;\n    }\n\n    modifier nonzeroAddress(address account) {\n        require(account != address(0));\n        _;\n    }\n\n    modifier opened() {\n        require(admin.status);\n        _;\n    }\n}\n\ncontract XC is XCInterface {\n\n    /**\n     * Contract Administrator\n     * @field status Contract external service status.\n     * @field platformName Current contract platform name.\n     * @field account Current contract administrator.\n     */\n    struct Admin {\n        uint8 status;\n        bytes32 platformName;\n        address account;\n    }\n\n    Admin private admin;\n\n    uint public lockBalance;\n\n    Token private token;\n\n    XCPlugin private xcPlugin;\n\n    event Lock(bytes32 toPlatform, address toAccount, bytes32 value, bytes32 tokenSymbol);\n\n    event Unlock(string txid, bytes32 fromPlatform, address fromAccount, bytes32 value, bytes32 tokenSy",
        "debug": "storage_5: 0xfe00000020000000000000000000000000000000000000000000000000000000\nstorage_1546678032441257452667456735582814959992782782816731922691272282333561699760: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_XCPluginInterface_4: 0xffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nstorage_3: 0x0\ncalldata_XCPluginInterface_0: 0x258c0f1e00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `deleteCaller(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "deleteCaller(address)",
        "lineno": 314,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 10444,
        "code": "ct Admin {\n        bool status;\n        bytes32 platformName;\n        bytes32 tokenSymbol;\n        address account;\n        string version;\n    }\n\n    /**\n     * Transaction Proposal\n     * @field status Transaction proposal status(false:pending,true:complete).\n     * @field fromAccount Account of form platform.\n     * @field toAccount Account of to platform.\n     * @field value Transfer amount.\n     * @field tokenSymbol token Symbol.\n     * @field voters Proposers.\n     * @field weight The weight value of the completed time.\n     */\n    struct Proposal {\n        bool status;\n        address fromAccount;\n        address toAccount;\n        uint value;\n        address[] voters;\n        uint weight;\n    }\n\n    /**\n     * Trusted Platform\n     * @field status Trusted platform state(false:no trusted,true:trusted).\n     * @field weight weight of platform.\n     * @field publicKeys list of public key.\n     * @field proposals list of proposal.\n     */\n    struct Platform {\n        bool status;\n        bytes32 name;\n        uint weight;\n        address[] publicKeys;\n        mapping(string => Proposal) proposals;\n    }\n\n    Admin private admin;\n\n    address[] private callers;\n\n    Platform private platform;\n\n\n    constructor() public {\n        init();\n    }\n\n    /**\n     * TODO Parameters that must be set before compilation\n     * $Init admin.status\n     * $Init admin.platformName\n     * $Init admin.tokenSymbol\n     * $Init admin.account\n     * $Init admin.version\n     * $Init platform.status\n     * $Init platform.name\n     * $Init platform.weight\n     * $Init platform.publicKeys\n     */\n    function init() internal {\n        // Admin { status | platformName | tokenSymbol | account}\n        admin.status = true;\n        admin.platformName = \"ETH\";\n        admin.tokenSymbol = \"INK\";\n        admin.account = msg.sender;\n        admin.version = \"1.0\";\n        platform.status = true;\n        platform.name = \"INK\";\n        platform.weight = 3;\n        platform.publicKeys.push(0x80aa17b21c16620a4d7dd06ec1dcc44190b02ca0);\n        platform.publicKeys.push(0xd2e40bb4967b355da8d70be40c277ebcf108063c);\n        platform.publicKeys.push(0x1501e0f09498aa95cb0c2f1e3ee51223e5074720);\n    }\n\n    function start() onlyAdmin external {\n        if (!admin.status) {\n            admin.status = true;\n        }\n    }\n\n    function stop() onlyAdmin external {\n        if (admin.status) {\n            admin.status = false;\n        }\n    }\n\n    function getStatus() external view returns (bool) {\n        return admin.status;\n    }\n\n    function getPlatformName() external view returns (bytes32) {\n        return admin.platformName;\n    }\n\n    function setAdmin(address account) onlyAdmin nonzeroAddress(account) external {\n        if (admin.account != account) {\n            admin.account = account;\n        }\n    }\n\n    function getAdmin() external view returns (address) {\n        return admin.account;\n    }\n\n    function getTokenSymbol() external view returns (bytes32) {\n        return admin.tokenSymbol;\n    }\n\n    function addCaller(address caller) onlyAdmin nonzeroAddress(caller) external {\n        if (!_existCaller(caller)) {\n            callers.push(caller);\n        }\n    }\n\n    function deleteCaller(address caller) onlyAdmin nonzeroAddress(caller) external {\n        for (uint i = 0; i < callers.length; i++) {\n            if (callers[i] == caller) {\n                if (i != callers.length - 1 ) {\n                    callers[i] = callers[callers.length - 1];\n                }\n                callers.length--;\n                return;\n            }\n        }\n    }\n\n    function existCaller(address caller) external view returns (bool) {\n        return _existCaller(caller);\n    }\n\n    function getCallers() external view returns (address[]) {\n        return callers;\n    }\n\n    function getTrustPlatform() external view returns (bytes32 name){\n        return platform.name;\n    }\n\n    function setWeight(uint weight) onlyAdmin external {\n        require(weight > 0);\n        if (platform.weight != weight) {\n            platform.weight = weight;\n        }\n    }\n\n    function getWeight() external view returns (uint) {\n        return platform.weight;\n    }\n\n    function addPublicKey(address publicKey) onlyAdmin nonzeroAddress(publicKey) external {\n        address[] storage publicKeys = platform.publicKeys;\n        for (uint i; i < publicKeys.length; i++) {\n            if (publicKey == publicKeys[i]) {\n                return;\n            }\n        }\n        publicKeys.push(publicKey);\n    }\n\n    function deletePublicKey(address publicKey) onlyAdmin nonzeroAddress(publicKey) external {\n        address[] storage publicKeys = platform.publicKeys;\n        for (uint i = 0; i < publicKeys.length; i++) {\n            if (publicKeys[i] == publicKey) {\n                if (i != publicKeys.length - 1 ) {\n                    publicKeys[i] = publicKeys[publicKeys.length - 1];\n                }\n                publicKeys.length--;\n                return;\n            }\n        }\n    }\n\n    function existPublicKey(address publicKey) external view returns (bool) {\n        return _existPublicKey(publicKey);\n    }\n\n    function countOfPublicKey() external view returns (uint){\n        return platform.publicKeys.length;\n    }\n\n    function publicKeys() external view returns (address[]){\n        return platform.publicKeys;\n    }\n\n    function voteProposal(address fromAccount, address toAccount, uint value, string txid, bytes sig) opened external {\n        bytes32 msgHash = hashMsg(platform.name, fromAccount, admin.platformName, toAccount, value, admin.tokenSymbol, txid,admin.version);\n        address publicKey = recover(msgHash, sig);\n        require(_existPublicKey(publicKey));\n        Proposal storage proposal = platform.proposals[txid];\n        if (proposal.value == 0) {\n            proposal.fromAccount = fromAccount;\n            proposal.toAccount = toAccount;\n            proposal.value = value;\n        } else {\n            require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\n        }\n        changeVoters(publicKey, txid);\n    }\n\n    function verifyProposal(address fromAccount, address toAccount, uint value, string txid) external view returns (bool, bool) {\n        Proposal storage proposal = platform.proposals[txid];\n        if (proposal.status) {\n            return (true, (proposal.voters.length >= proposal.weight));\n        }\n        if (proposal.value == 0) {\n            return (false, false);\n        }\n        require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\n        return (false, (proposal.voters.length >= platform.weight));\n    }\n\n    function commitProposal(string txid) external returns (bool) {\n        require((admin.status &&_existCaller(msg.sender)) || msg.sender == admin.account);\n        require(!platform.proposals[txid].status);\n        platform.proposals[txid].status = true;\n        platform.proposals[txid].weight = platform.proposals[txid].voters.length;\n        return true;\n    }\n\n    function getProposal(string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight){\n        fromAccount = platform.proposals[txid].fromAccount;\n        toAccount = platform.proposals[txid].toAccount;\n        value = platform.proposals[txid].value;\n        voters = platform.proposals[txid].voters;\n        status = platform.proposals[txid].status;\n        weight = platform.proposals[txid].weight;\n        return;\n    }\n\n    function deleteProposal(string txid) onlyAdmin external {\n        delete platform.proposals[txid];\n    }\n\n    /**\n     *   ######################\n     *  #  private function  #\n     * ######################\n     */\n\n    function hashMsg(bytes32 fromPlatform, address fromAccount, bytes32 toPlatform, address toAccount, uint value, bytes32 tokenSymbol, string txid,string version) internal pure returns (bytes32) {\n        return sha256(bytes32ToStr(fromPlatform), \":0x\", uintToStr(uint160(fromAccount), 16), \":\", bytes32ToStr(toPlatform), \":0x\", uintToStr(uint160(toAccount), 16), \":\", uintToStr(value, 10), \":\", bytes32ToStr(tokenSymbol), \":\", txid, \":\", version);\n    }\n\n    function changeVoters(address publicKey, string txid) internal {\n        address[] storage voters = platform.proposals[txid].voters;\n        for (uint i = 0; i < voters.length; i++) {\n            if (voters[i] == publicKey) {\n                return;\n            }\n        }\n        voters.push(publicKey);\n    }\n\n    function bytes32ToStr(bytes32 b) internal pure returns (string) {\n        uint length = b.length;\n        for (uint i = 0; i < b.length; i++) {\n            if (b[b.length - 1 - i] != \"\") {\n                length -= i;\n                break;\n            }\n        }\n        bytes memory bs = new bytes(length);\n        for (uint j = 0; j < length; j++) {\n            bs[j] = b[j];\n        }\n        return string(bs);\n    }\n\n    function uintToStr(uint value, uint base) internal pure returns (string) {\n        uint _value = value;\n        uint length = 0;\n        bytes16 tenStr = \"0123456789abcdef\";\n        while (true) {\n            if (_value > 0) {\n                length ++;\n                _value = _value / base;\n            } else {\n                break;\n            }\n        }\n        if (base == 16) {\n            length = 40;\n        }\n        bytes memory bs = new bytes(length);\n        for (uint i = 0; i < length; i++) {\n            bs[length - 1 - i] = tenStr[value % base];\n            value = value / base;\n        }\n        return string(bs);\n    }\n\n    function _existCaller(address caller) internal view returns (bool) {\n        for (uint i = 0; i < callers.length; i++) {\n            if (callers[i] == caller) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function _existPublicKey(address publicKey) internal view returns (bool) {\n        address[] memory publicKeys = platform.publicKeys;\n        for (uint i = 0; i < publicKeys.length; i++) {\n            if (publicKeys[i] == publicKey) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function recover(bytes32 hash, bytes sig) internal pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n        if (v < 27) {\n            v += 27;\n        }\n        return ecrecover(hash, v, r, s);\n    }\n\n    modifier onlyAdmin {\n        require(admin.account == msg.sender);\n        _;\n    }\n\n    modifier nonzeroAddress(address account) {\n        require(account != address(0));\n        _;\n    }\n\n    modifier opened() {\n        require(admin.status);\n        _;\n    }\n}\n\ncontract XC is XCInterface {\n\n    /**\n     * Contract Administrator\n     * @field status Contract external service status.\n     * @field platformName Current contract platform name.\n     * @field account Current contract administrator.\n     */\n    struct Admin {\n        uint8 status;\n        bytes32 platformName;\n        address account;\n    }\n\n    Admin private admin;\n\n    uint public lockBalance;\n\n    Token private token;\n\n    XCPlugin private xcPlugin;\n\n    event Lock(bytes32 toPlatform, address toAccount, bytes32 value, bytes32 tokenSymbol);\n\n    event Unlock(string txid, bytes32 fromPlatform, address fromAccount, bytes32 value, bytes32 tokenSy",
        "debug": "storage_5: 0xfe001c7bca580006000000000000000078f81e017b0000000201000000006010\nstorage_1546678032441257452667456735582814959992782782816731922691272282333561699760: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_XCPluginInterface_4: 0xffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nstorage_3: 0x0\ncalldata_XCPluginInterface_0: 0x258c0f1e00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `deleteCaller(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "deleteCaller(address)",
        "lineno": 314,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 10479,
        "code": "ct Admin {\n        bool status;\n        bytes32 platformName;\n        bytes32 tokenSymbol;\n        address account;\n        string version;\n    }\n\n    /**\n     * Transaction Proposal\n     * @field status Transaction proposal status(false:pending,true:complete).\n     * @field fromAccount Account of form platform.\n     * @field toAccount Account of to platform.\n     * @field value Transfer amount.\n     * @field tokenSymbol token Symbol.\n     * @field voters Proposers.\n     * @field weight The weight value of the completed time.\n     */\n    struct Proposal {\n        bool status;\n        address fromAccount;\n        address toAccount;\n        uint value;\n        address[] voters;\n        uint weight;\n    }\n\n    /**\n     * Trusted Platform\n     * @field status Trusted platform state(false:no trusted,true:trusted).\n     * @field weight weight of platform.\n     * @field publicKeys list of public key.\n     * @field proposals list of proposal.\n     */\n    struct Platform {\n        bool status;\n        bytes32 name;\n        uint weight;\n        address[] publicKeys;\n        mapping(string => Proposal) proposals;\n    }\n\n    Admin private admin;\n\n    address[] private callers;\n\n    Platform private platform;\n\n\n    constructor() public {\n        init();\n    }\n\n    /**\n     * TODO Parameters that must be set before compilation\n     * $Init admin.status\n     * $Init admin.platformName\n     * $Init admin.tokenSymbol\n     * $Init admin.account\n     * $Init admin.version\n     * $Init platform.status\n     * $Init platform.name\n     * $Init platform.weight\n     * $Init platform.publicKeys\n     */\n    function init() internal {\n        // Admin { status | platformName | tokenSymbol | account}\n        admin.status = true;\n        admin.platformName = \"ETH\";\n        admin.tokenSymbol = \"INK\";\n        admin.account = msg.sender;\n        admin.version = \"1.0\";\n        platform.status = true;\n        platform.name = \"INK\";\n        platform.weight = 3;\n        platform.publicKeys.push(0x80aa17b21c16620a4d7dd06ec1dcc44190b02ca0);\n        platform.publicKeys.push(0xd2e40bb4967b355da8d70be40c277ebcf108063c);\n        platform.publicKeys.push(0x1501e0f09498aa95cb0c2f1e3ee51223e5074720);\n    }\n\n    function start() onlyAdmin external {\n        if (!admin.status) {\n            admin.status = true;\n        }\n    }\n\n    function stop() onlyAdmin external {\n        if (admin.status) {\n            admin.status = false;\n        }\n    }\n\n    function getStatus() external view returns (bool) {\n        return admin.status;\n    }\n\n    function getPlatformName() external view returns (bytes32) {\n        return admin.platformName;\n    }\n\n    function setAdmin(address account) onlyAdmin nonzeroAddress(account) external {\n        if (admin.account != account) {\n            admin.account = account;\n        }\n    }\n\n    function getAdmin() external view returns (address) {\n        return admin.account;\n    }\n\n    function getTokenSymbol() external view returns (bytes32) {\n        return admin.tokenSymbol;\n    }\n\n    function addCaller(address caller) onlyAdmin nonzeroAddress(caller) external {\n        if (!_existCaller(caller)) {\n            callers.push(caller);\n        }\n    }\n\n    function deleteCaller(address caller) onlyAdmin nonzeroAddress(caller) external {\n        for (uint i = 0; i < callers.length; i++) {\n            if (callers[i] == caller) {\n                if (i != callers.length - 1 ) {\n                    callers[i] = callers[callers.length - 1];\n                }\n                callers.length--;\n                return;\n            }\n        }\n    }\n\n    function existCaller(address caller) external view returns (bool) {\n        return _existCaller(caller);\n    }\n\n    function getCallers() external view returns (address[]) {\n        return callers;\n    }\n\n    function getTrustPlatform() external view returns (bytes32 name){\n        return platform.name;\n    }\n\n    function setWeight(uint weight) onlyAdmin external {\n        require(weight > 0);\n        if (platform.weight != weight) {\n            platform.weight = weight;\n        }\n    }\n\n    function getWeight() external view returns (uint) {\n        return platform.weight;\n    }\n\n    function addPublicKey(address publicKey) onlyAdmin nonzeroAddress(publicKey) external {\n        address[] storage publicKeys = platform.publicKeys;\n        for (uint i; i < publicKeys.length; i++) {\n            if (publicKey == publicKeys[i]) {\n                return;\n            }\n        }\n        publicKeys.push(publicKey);\n    }\n\n    function deletePublicKey(address publicKey) onlyAdmin nonzeroAddress(publicKey) external {\n        address[] storage publicKeys = platform.publicKeys;\n        for (uint i = 0; i < publicKeys.length; i++) {\n            if (publicKeys[i] == publicKey) {\n                if (i != publicKeys.length - 1 ) {\n                    publicKeys[i] = publicKeys[publicKeys.length - 1];\n                }\n                publicKeys.length--;\n                return;\n            }\n        }\n    }\n\n    function existPublicKey(address publicKey) external view returns (bool) {\n        return _existPublicKey(publicKey);\n    }\n\n    function countOfPublicKey() external view returns (uint){\n        return platform.publicKeys.length;\n    }\n\n    function publicKeys() external view returns (address[]){\n        return platform.publicKeys;\n    }\n\n    function voteProposal(address fromAccount, address toAccount, uint value, string txid, bytes sig) opened external {\n        bytes32 msgHash = hashMsg(platform.name, fromAccount, admin.platformName, toAccount, value, admin.tokenSymbol, txid,admin.version);\n        address publicKey = recover(msgHash, sig);\n        require(_existPublicKey(publicKey));\n        Proposal storage proposal = platform.proposals[txid];\n        if (proposal.value == 0) {\n            proposal.fromAccount = fromAccount;\n            proposal.toAccount = toAccount;\n            proposal.value = value;\n        } else {\n            require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\n        }\n        changeVoters(publicKey, txid);\n    }\n\n    function verifyProposal(address fromAccount, address toAccount, uint value, string txid) external view returns (bool, bool) {\n        Proposal storage proposal = platform.proposals[txid];\n        if (proposal.status) {\n            return (true, (proposal.voters.length >= proposal.weight));\n        }\n        if (proposal.value == 0) {\n            return (false, false);\n        }\n        require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\n        return (false, (proposal.voters.length >= platform.weight));\n    }\n\n    function commitProposal(string txid) external returns (bool) {\n        require((admin.status &&_existCaller(msg.sender)) || msg.sender == admin.account);\n        require(!platform.proposals[txid].status);\n        platform.proposals[txid].status = true;\n        platform.proposals[txid].weight = platform.proposals[txid].voters.length;\n        return true;\n    }\n\n    function getProposal(string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight){\n        fromAccount = platform.proposals[txid].fromAccount;\n        toAccount = platform.proposals[txid].toAccount;\n        value = platform.proposals[txid].value;\n        voters = platform.proposals[txid].voters;\n        status = platform.proposals[txid].status;\n        weight = platform.proposals[txid].weight;\n        return;\n    }\n\n    function deleteProposal(string txid) onlyAdmin external {\n        delete platform.proposals[txid];\n    }\n\n    /**\n     *   ######################\n     *  #  private function  #\n     * ######################\n     */\n\n    function hashMsg(bytes32 fromPlatform, address fromAccount, bytes32 toPlatform, address toAccount, uint value, bytes32 tokenSymbol, string txid,string version) internal pure returns (bytes32) {\n        return sha256(bytes32ToStr(fromPlatform), \":0x\", uintToStr(uint160(fromAccount), 16), \":\", bytes32ToStr(toPlatform), \":0x\", uintToStr(uint160(toAccount), 16), \":\", uintToStr(value, 10), \":\", bytes32ToStr(tokenSymbol), \":\", txid, \":\", version);\n    }\n\n    function changeVoters(address publicKey, string txid) internal {\n        address[] storage voters = platform.proposals[txid].voters;\n        for (uint i = 0; i < voters.length; i++) {\n            if (voters[i] == publicKey) {\n                return;\n            }\n        }\n        voters.push(publicKey);\n    }\n\n    function bytes32ToStr(bytes32 b) internal pure returns (string) {\n        uint length = b.length;\n        for (uint i = 0; i < b.length; i++) {\n            if (b[b.length - 1 - i] != \"\") {\n                length -= i;\n                break;\n            }\n        }\n        bytes memory bs = new bytes(length);\n        for (uint j = 0; j < length; j++) {\n            bs[j] = b[j];\n        }\n        return string(bs);\n    }\n\n    function uintToStr(uint value, uint base) internal pure returns (string) {\n        uint _value = value;\n        uint length = 0;\n        bytes16 tenStr = \"0123456789abcdef\";\n        while (true) {\n            if (_value > 0) {\n                length ++;\n                _value = _value / base;\n            } else {\n                break;\n            }\n        }\n        if (base == 16) {\n            length = 40;\n        }\n        bytes memory bs = new bytes(length);\n        for (uint i = 0; i < length; i++) {\n            bs[length - 1 - i] = tenStr[value % base];\n            value = value / base;\n        }\n        return string(bs);\n    }\n\n    function _existCaller(address caller) internal view returns (bool) {\n        for (uint i = 0; i < callers.length; i++) {\n            if (callers[i] == caller) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function _existPublicKey(address publicKey) internal view returns (bool) {\n        address[] memory publicKeys = platform.publicKeys;\n        for (uint i = 0; i < publicKeys.length; i++) {\n            if (publicKeys[i] == publicKey) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function recover(bytes32 hash, bytes sig) internal pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n        if (v < 27) {\n            v += 27;\n        }\n        return ecrecover(hash, v, r, s);\n    }\n\n    modifier onlyAdmin {\n        require(admin.account == msg.sender);\n        _;\n    }\n\n    modifier nonzeroAddress(address account) {\n        require(account != address(0));\n        _;\n    }\n\n    modifier opened() {\n        require(admin.status);\n        _;\n    }\n}\n\ncontract XC is XCInterface {\n\n    /**\n     * Contract Administrator\n     * @field status Contract external service status.\n     * @field platformName Current contract platform name.\n     * @field account Current contract administrator.\n     */\n    struct Admin {\n        uint8 status;\n        bytes32 platformName;\n        address account;\n    }\n\n    Admin private admin;\n\n    uint public lockBalance;\n\n    Token private token;\n\n    XCPlugin private xcPlugin;\n\n    event Lock(bytes32 toPlatform, address toAccount, bytes32 value, bytes32 tokenSymbol);\n\n    event Unlock(string txid, bytes32 fromPlatform, address fromAccount, bytes32 value, bytes32 tokenSy",
        "debug": "storage_KECCAC_mem_128) + 3: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nkeccac_KECCAC_mem_128)_+_3: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncaller: 0x0\nstorage_3: 0x0\ncalldata_XCPluginInterface_0: 0x6154274d00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCPluginInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `deleteProposal(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x28f1135e43e61ebf303c8f1f9beef4f6a00dcb34.sol",
        "function": "deleteProposal(string)",
        "lineno": 314,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}