{
  "contract": "0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207",
  "tool": "mythril",
  "start": 1563574807.195775,
  "end": 1563574840.4939694,
  "duration": 33.29819440841675,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1114,
        "code": "ction mint(uint256 amountOfMint) public onlyOwner returns (bool){\n\t\t//if totalSupply + amountOfMint <= maxSupply then mint token to contract owner\n\t\trequire(safeAdd(totalSuppl",
        "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0xf2c298be00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `register(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/18/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol",
        "function": "register(string)",
        "lineno": 184,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1754,
        "code": "wner(address newOwner) publ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0x13af403500000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol",
        "function": "setOwner(address)",
        "lineno": 57,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2277,
        "code": "\n\t\tbalances[_from] = safeSub(balances[_from], _value);\n\t\tallowed[_from][msg.sender] = s",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncalldata_Token_32 + 36: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 142,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3022,
        "code": "wner(address newOwner) publ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol",
        "function": "burn(uint256)",
        "lineno": 57,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3537,
        "code": "wner(address newOwner) publ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0xa0712d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol",
        "function": "mint(uint256)",
        "lineno": 57,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3980,
        "code": "s[_to] = safeAdd(balances[_to], _value);\n\t\temit Tran",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncalldata_Token_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol",
        "function": "transfer(address,uint256)",
        "lineno": 132,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4522,
        "code": "s (bool){\n\t\t//if totalSupply + ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_4 + calldata_Token_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_Token_0: 0xf2c298be00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol",
        "function": "register(string)",
        "lineno": 184,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4830,
        "code": " && c",
        "debug": "calldata_Token_32 + 4: 0xb135d1e4a0020a903239033aa9b45a69384c906b52a71e0575829626809581fd\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0xa7e6e147bc0ca40011bf9bbaadf7593cb8cc90b17cb7d73775f0d8eb1435e9c1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb135d1e4a0020a903239033aa9b45a69384c906b52a71e0575829626809581fd\ncalldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/18/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol",
        "function": "transfer(address,uint256)",
        "lineno": 27,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4945,
        "code": "\t\t//Default assumes totalSupply can't be over max (2^256 - 1).\n\t\t//If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n\t\t//Replace the if with this one instead.\n\n\t\trequire(_to != address(0));\n\t\tassert(balances[msg.sender] >= _value && _value > 0);\n\n\t\tbalances[msg.sender] = safeSub(balances[msg.sender], _value);\n\t\tbalances[_to] = safeAdd(balances[_to], _value);\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\t//same as above. Replace this line with the following if you want to protect against wrapping uints.\n\t\trequire(_to != address(0));\n\t\tassert(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\n\n\t\tbalances[_to] = safeAdd(balances[_to], _value);\n\t\tbalances[_from] = safeSub(balances[_from], _value);\n\t\tallowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n\t\temit Transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n\t\treturn balances[_owner];\n\t}\n\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\trequire(_spender != address(0));\n\t\trequire(_value > 0);\n\t\trequire(allowed[msg.sender][_spender] == 0);\n\t\tallowed[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\tfunction allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\tfunction burn(uint256 amount) public onlyOwner returns (bool){\n\n\t\trequire(balances[msg.sender] >= amount);\n\t\tbalances[msg.sender] = safeSub(balances[msg.sender], amount);\n\t\ttotalSupply = safeSub(totalSupply, amount);\n\t\temit Burn(msg.sender, amount);\n\t\treturn true;\n\n\t}\n\n\tfunction register(string key) public returns (bool){\n\t\tassert(bytes(key).length <= 64);\n\n\t\tkeys[msg.sender] = key;\n\t\temit LogRegister(msg.sender, key);\n\t\treturn true;\n\t}\n\n\tfunction mint(uint256 amountOfMint) public onlyOwner returns (bool){\n\t\t//if totalSupply + amountOfMint <= maxSupply then mint token to contract owner\n\t\trequire(safeAdd(totalSupply, amountOfMint) <= maxSupply);\n\t\ttotalSupply = safeAdd(totalSupply, amountOfMint);\n\t\tbalances[msg.sender] = safeAdd(balances[msg.sender], amountOfMint);\n\t\temit Mint(msg.sender ,amountOfMint);\n\t\treturn true;\n\t}\n\n\tmapping(address => uint256)                      internal balances;\n\tmapping(address => mapping(address => uint256))  private  allowed;\n\tmapping(address => string)                       private  keys;\n\n}\n\ncontract CREToken is StandardToken {\n\n\tstring public name = \"CoinRealEcosystem\";                                   /// Set the full name of this contract\n\tuint256 public decimals = 18;          ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xe8c38000000000000000000000000000000000000000000000000000000000c9\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfdd271edcc8a3b9a1ef47dee3ded6ffffff7fffffffffffffffffffffffffffe\ncalldata_Token_4 + calldata_Token_4: 0x0\ncalldata_Token_0: 0xf2c298be00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `register(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/18/0x94e100c6dd07bcfc4f5f4217f54a3ef4d74e4207.sol",
        "function": "register(string)",
        "lineno": 124,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}