{
  "contract": "0x2c31b23b80a13feaba3ecc4a92e2e4e5fa2fc3dc",
  "tool": "mythril",
  "start": 1563515523.2813118,
  "end": 1563515649.138344,
  "duration": 125.85703229904175,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 652,
        "code": "uire(bytes(_viteAddr).length == 55);\n        \n        var viteToken = Token(viteTokenAddress);\n        uint256 apprAmount = viteToken.allowance(msg.sender, address(this));\n        require(apprAmount > 0);\n        \n        require(viteToken.transferFrom(msg.sender, destoryAddr, apprAmount));\n        \n        records[msg.sender] = _viteAddr;\n\n        if(_invitationCode == 0) {\n            _invitationCode = defaultCode;\n        }\n        \n        emit Bind(\n            bindId++,\n            msg.sender,\n            _viteAddr,\n            apprAmount,\n            _invitationCode\n        );\n    }\n    \n    function () public payable {\n        revert();\n    }\n    \n    function destory() public {\n ",
        "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0xbbda8d6100000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `bind(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0x2c31b23b80a13feaba3ecc4a92e2e4e5fa2fc3dc.sol",
        "function": "bind(string,uint256)",
        "lineno": 81,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1501,
        "code": "      \n        require(viteToken.transferFrom(",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/9/0x2c31b23b80a13feaba3ecc4a92e2e4e5fa2fc3dc.sol",
        "function": "bind(string,uint256)",
        "lineno": 86,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1501,
        "code": "      \n        require(viteToken.transferFrom(",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1826\n",
        "filename": "/unique_chucks/9/0x2c31b23b80a13feaba3ecc4a92e2e4e5fa2fc3dc.sol",
        "function": "bind(string,uint256)",
        "lineno": 86,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1826,
        "code": "[msg.sender] = _viteAddr;\n\n        if(_invitationCode == 0)",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/9/0x2c31b23b80a13feaba3ecc4a92e2e4e5fa2fc3dc.sol",
        "function": "bind(string,uint256)",
        "lineno": 89,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2327,
        "code": "tring) public records;\n    \n    address public destoryAddr = 0x1111111111111111111111111111111111111111;\n\n    uint256 public defaultCode = 203226;\n    \n    address public viteTokenAddress = 0x0;\n\taddress public owner\t\t\t= 0x0;\n\t\n\tuint public bindId = 0;\n\tevent Bind(uint bindId, address indexed _ethAddr, string _viteAddr, uint256 amount, uint256 _invitationCode);\n\t\n\t/*\n\t * public functions\n\t */\n\t/// @dev Initialize the contract\n\t/// @param _viteTokenAddress ViteToken ERC20 token address\n\t/// @param _owner the owner of the contract\n\tfunction Erc2Vite(address _viteTokenAddress, address _owner) {\n\t\trequire(_viteTokenAddress != address(0));\n\t\trequire(_owner != address(0));\n\n\t\tviteTokenAddress = _viteTokenAddress;\n\t\towner = _owner;\n\t}\n    \n    function bind(string _viteAddr, uint256 _invitationCode) public {\n\n        require(bytes(_viteAddr).length == 55);\n        \n        var viteToken = Token(viteTokenAddress);\n        uint256 apprAmount = viteToken.allowance(msg.sender, address(this));\n        require(apprAmount > 0);\n        \n        require(viteToken.transferFrom(msg.sender, destoryAddr, apprAmount));\n        \n        records[msg.sender] = _viteAddr;\n\n        if(_invitationCode == 0) {\n            _invitationCode = defaultCode;\n        }\n        \n        emit Bind(\n            bindId++,\n            msg.sender,\n            _viteAddr,\n            apprAmount,\n            _invitationCode\n        );\n    }\n    \n    function () public payable {\n        revert();\n    }\n    \n    function destory() public {\n        require(msg.sender == owner);\n        selfdestruct(owner);\n    }\n    \n}",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/9/0x2c31b23b80a13feaba3ecc4a92e2e4e5fa2fc3dc.sol",
        "function": "bind(string,uint256)",
        "lineno": 53,
        "title": "State change after external call",
        "type": "Warning"
      }
    ],
    "success": true
  }
}