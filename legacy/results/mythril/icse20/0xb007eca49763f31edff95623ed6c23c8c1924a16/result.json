{
  "contract": "0xb007eca49763f31edff95623ed6c23c8c1924a16",
  "tool": "mythril",
  "start": 1563615234.7404287,
  "end": 1563615672.5700636,
  "duration": 437.82963490486145,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 381,
        "code": "actName] == address(0));\n\t\tcontracts[contractName] = newAddress;\n\n\t\t// Create DB object when Database is added to Coordinator\n\t\tbytes32 hash = keccak256(abi.encodePacked(contractName));\n\t\tif(hash == keccak256(abi.encodePacked(\"DATABASE\"))) db = DatabaseInterface(newAddress);\n\t}\n\n\t// used for modifying an existing contract or adding a new contract to the system\n\tfunction updateContract(string contra",
        "debug": "calldata_ZapCoordinatorInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZapCoordinatorInterface_0: 0x29e63cd700000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addImmutableContract(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "addImmutableContract(string,address)",
        "lineno": 118,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 472,
        "code": "external onlyOwner {\n\t\tfor ( uint i = 0; i < loadedContracts.length; i++ ) {\n\t\t\taddress c = contracts[loadedCont",
        "debug": "calldata_ZapCoordinatorInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZapCoordinatorInterface_0: 0x3581777300000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getContract(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "getContract(string)",
        "lineno": 151,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 728,
        "code": ";\n\t\tif (prev == address(0) ) {\n\t\t\t// First time adding this contract\n\t\t\tloadedContracts.push(contractName);\n\t\t} else {\n\t\t\t// Deauth the old contract\n\t\t\tdb.setStorageContract(prev, false);\n\t\t}\n\t\t// give new contract database access permission\n\t\tdb.setStorageContract(newAddress, true);\n\n\t\temit UpdatedContract(contractName, prev, newAddress);\n\t\tcontracts[contractName] = newAddress;\n\t}\n\n\tfunction getContractName(uint index) public view returns (string) {\n\t\treturn loadedContracts[index];\n\t}\n\n\tfunction getContract(string con",
        "debug": "calldata_ZapCoordinatorInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZapCoordinatorInterface_0: 0x697a60b300000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updateContract(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "updateContract(string,address)",
        "lineno": 128,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 734,
        "code": ";\n\t\tif (prev == address(0) ) {\n\t\t\t// First time adding this contract\n\t\t\tloadedContracts.push(contractName);\n\t\t} else {\n\t\t\t// Deauth the old contract\n\t\t\tdb.setStorageContract(prev, false);\n\t\t}\n\t\t// give new contract database access permission\n\t\tdb.setStorageContract(newAddress, true);\n\n\t\temit UpdatedContract(contractName, prev, newAddress);\n\t\tcontracts[contractName] = newAddress;\n\t}\n\n\tfunction getContractName(uint index) public view returns (string) {\n\t\treturn loadedContracts[index];\n\t}\n\n\tfunction getContract(string con",
        "debug": "calldata_ZapCoordinatorInterface_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_ZapCoordinatorInterface_0: 0x697a60b300000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updateContract(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "updateContract(string,address)",
        "lineno": 128,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1121,
        "code": "unction updateAllDepen",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ZapCoordinatorInterface_4: 0x0\nstorage_2: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x21d8ad4c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "getContractName(uint256)",
        "lineno": 151,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1679,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "updateAllDependencies()",
        "lineno": 159,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1679,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1679\nCall at address: 1679\nCall at address: 1679\nCall at address: 1679\nCall at address: 1679\n",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "updateAllDependencies()",
        "lineno": 159,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2203,
        "code": "tabase is added to Coordinator\n\t\tbytes32 hash",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_KECCAC_mem_128): 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x29e63cd700000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "addImmutableContract(string,address)",
        "lineno": 121,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2321,
        "code": ";\n\t}\n\n\t// used for modifying a",
        "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60\nstorage_KECCAC_mem_128): 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x29e63cd700000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addImmutableContract(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "addImmutableContract(string,address)",
        "lineno": 123,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2336,
        "code": "// File: contracts/li",
        "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdf\nstorage_KECCAC_mem_128): 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x29e63cd700000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `addImmutableContract(string,address)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "addImmutableContract(string,address)",
        "lineno": 3,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 2337,
        "code": "4;\n\n// File: contracts/lib/owner",
        "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_KECCAC_mem_128): 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x29e63cd700000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `addImmutableContract(string,address)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "addImmutableContract(string,address)",
        "lineno": 1,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3109,
        "code": ";\n\n// File: contra",
        "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_KECCAC_mem_128): 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x697a60b300000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updateContract(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "updateContract(string,address)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3373,
        "code": "\n\t\temit UpdatedContract(contractNa",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "updateContract(string,address)",
        "lineno": 138,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3373,
        "code": "\n\t\temit UpdatedContract(contractNa",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3600\n",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "updateContract(string,address)",
        "lineno": 138,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3373,
        "code": "\n\t\temit UpdatedContract(contractNa",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function updateContract(string,address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "updateContract(string,address)",
        "lineno": 138,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3600,
        "code": ";\n\t}\n\n\tfunction getContractName(uint in",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "updateContract(string,address)",
        "lineno": 140,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3600,
        "code": ";\n\t}\n\n\tfunction getContractName(uint in",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function updateContract(string,address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "updateContract(string,address)",
        "lineno": 140,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3905,
        "code": "ex];\n\t}\n\n\tfunction getContract(strin",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "updateContract(string,address)",
        "lineno": 144,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3963,
        "code": "d ZapToken\n\tfunction addImmutab",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ZapCoordinatorInterface_4: 0x0\nstorage_2: 0x0\ncalldata_ZapCoordinatorInterface_0: 0xca8e2bdd00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "_function_0xca8e2bdd",
        "lineno": 116,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4516,
        "code": "ess previousAddr, address newAddr);\n\tevent UpdatedDependencies(uint timestamp, string contractName, address contractAddr);\n\n\tmapping(string => address) contracts; \n\n\t// names of upgradable contracts\n\tstring[] public loadedContracts;\n\n\tDatabaseInterface public db;\n\n\t// used for adding contracts like Database and ZapToken\n\tfunction addImmutableContract(string contractName, address newAddress) external onlyOwner {\n\t\tassert(contracts[contractName] == address(0));\n\t\tcontracts[contractName] = newAddress;\n\n\t\t// Create DB object when Database is added to Coordinator\n\t\tbytes32 hash = keccak256(abi.encodePacked(contractName));\n\t\tif(hash == keccak256(abi.encodePacked(\"DATABASE\"))) db = DatabaseInterface(newAddress);\n\t}\n\n\t// used for modifying an existing contract or adding a new contract to the system\n\tfunction updateContract(string contractName, address newAddress) external onlyOwner {\n\t\taddress prev = contracts[contractName];\n\t\tif (prev == address(0) ) {\n\t\t\t// First time adding this contract\n\t\t\tloadedContracts.push(contractName);\n\t\t} else {\n\t\t\t// Deauth the old contract\n\t\t\tdb.setStorageContract(prev, false);\n\t\t}\n\t\t// give new contract database access permission\n\t\tdb.setStorageContract(newAddress, true);\n\n\t\temit UpdatedContract(contractName, prev, newAddress);\n\t\tcontracts[contractName] = newAddress;\n\t}\n\n\tfunction getContractName(uint index) public view returns (string) {\n\t\treturn loadedContracts[index];\n\t}\n\n\tfunction getContract(string contractName) public view returns (address) {\n\t\treturn contracts[contractName];\n\t}\n\n\tfunction updateAllDependencies() external onlyOwner {\n\t\tfor ( uint i = 0; i < loadedContracts.length; i++ ) {\n\t\t\taddress c = contracts[loadedContracts[i]];\n\t\t\tUpgradable(c).updateDependencies();\n\t\t\temit UpdatedDependencies(block.timestamp, loadedContracts[i], c);\n\t\t}\n\t}\n\n}",
        "debug": "storage_29102676481673041902632991033461445430619272659676223336789171408008386403022 +\nstorage_2: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_29102676481673041902632991033461445430619272659676223336789171408008386403022_+\nstorage_2: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_KECCAC_mem_128): 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x697a60b300000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updateContract(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "updateContract(string,address)",
        "lineno": 106,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4545,
        "code": "ess previousAddr, address newAddr);\n\tevent UpdatedDependencies(uint timestamp, string contractName, address contractAddr);\n\n\tmapping(string => address) contracts; \n\n\t// names of upgradable contracts\n\tstring[] public loadedContracts;\n\n\tDatabaseInterface public db;\n\n\t// used for adding contracts like Database and ZapToken\n\tfunction addImmutableContract(string contractName, address newAddress) external onlyOwner {\n\t\tassert(contracts[contractName] == address(0));\n\t\tcontracts[contractName] = newAddress;\n\n\t\t// Create DB object when Database is added to Coordinator\n\t\tbytes32 hash = keccak256(abi.encodePacked(contractName));\n\t\tif(hash == keccak256(abi.encodePacked(\"DATABASE\"))) db = DatabaseInterface(newAddress);\n\t}\n\n\t// used for modifying an existing contract or adding a new contract to the system\n\tfunction updateContract(string contractName, address newAddress) external onlyOwner {\n\t\taddress prev = contracts[contractName];\n\t\tif (prev == address(0) ) {\n\t\t\t// First time adding this contract\n\t\t\tloadedContracts.push(contractName);\n\t\t} else {\n\t\t\t// Deauth the old contract\n\t\t\tdb.setStorageContract(prev, false);\n\t\t}\n\t\t// give new contract database access permission\n\t\tdb.setStorageContract(newAddress, true);\n\n\t\temit UpdatedContract(contractName, prev, newAddress);\n\t\tcontracts[contractName] = newAddress;\n\t}\n\n\tfunction getContractName(uint index) public view returns (string) {\n\t\treturn loadedContracts[index];\n\t}\n\n\tfunction getContract(string contractName) public view returns (address) {\n\t\treturn contracts[contractName];\n\t}\n\n\tfunction updateAllDependencies() external onlyOwner {\n\t\tfor ( uint i = 0; i < loadedContracts.length; i++ ) {\n\t\t\taddress c = contracts[loadedContracts[i]];\n\t\t\tUpgradable(c).updateDependencies();\n\t\t\temit UpdatedDependencies(block.timestamp, loadedContracts[i], c);\n\t\t}\n\t}\n\n}",
        "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_KECCAC_mem_128): 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x697a60b300000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updateContract(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "updateContract(string,address)",
        "lineno": 106,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4559,
        "code": "ess previousAddr, address newAddr);\n\tevent UpdatedDependencies(uint timestamp, string contractName, address contractAddr);\n\n\tmapping(string => address) contracts; \n\n\t// names of upgradable contracts\n\tstring[] public loadedContracts;\n\n\tDatabaseInterface public db;\n\n\t// used for adding contracts like Database and ZapToken\n\tfunction addImmutableContract(string contractName, address newAddress) external onlyOwner {\n\t\tassert(contracts[contractName] == address(0));\n\t\tcontracts[contractName] = newAddress;\n\n\t\t// Create DB object when Database is added to Coordinator\n\t\tbytes32 hash = keccak256(abi.encodePacked(contractName));\n\t\tif(hash == keccak256(abi.encodePacked(\"DATABASE\"))) db = DatabaseInterface(newAddress);\n\t}\n\n\t// used for modifying an existing contract or adding a new contract to the system\n\tfunction updateContract(string contractName, address newAddress) external onlyOwner {\n\t\taddress prev = contracts[contractName];\n\t\tif (prev == address(0) ) {\n\t\t\t// First time adding this contract\n\t\t\tloadedContracts.push(contractName);\n\t\t} else {\n\t\t\t// Deauth the old contract\n\t\t\tdb.setStorageContract(prev, false);\n\t\t}\n\t\t// give new contract database access permission\n\t\tdb.setStorageContract(newAddress, true);\n\n\t\temit UpdatedContract(contractName, prev, newAddress);\n\t\tcontracts[contractName] = newAddress;\n\t}\n\n\tfunction getContractName(uint index) public view returns (string) {\n\t\treturn loadedContracts[index];\n\t}\n\n\tfunction getContract(string contractName) public view returns (address) {\n\t\treturn contracts[contractName];\n\t}\n\n\tfunction updateAllDependencies() external onlyOwner {\n\t\tfor ( uint i = 0; i < loadedContracts.length; i++ ) {\n\t\t\taddress c = contracts[loadedContracts[i]];\n\t\t\tUpgradable(c).updateDependencies();\n\t\t\temit UpdatedDependencies(block.timestamp, loadedContracts[i], c);\n\t\t}\n\t}\n\n}",
        "debug": "calldata_ZapCoordinatorInterface_4: 0xda439b2041c8c00602000000000000000000000000000000000000000000001a\ncalldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0x98b80124e0c0001a297fffffffffffffffffffffffffffffffffffffffffffc4\nstorage_KECCAC_mem_128): 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x697a60b300000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updateContract(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "updateContract(string,address)",
        "lineno": 106,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4576,
        "code": "ess previousAddr, address newAddr);\n\tevent UpdatedDependencies(uint timestamp, string contractName, address contractAddr);\n\n\tmapping(string => address) contracts; \n\n\t// names of upgradable contracts\n\tstring[] public loadedContracts;\n\n\tDatabaseInterface public db;\n\n\t// used for adding contracts like Database and ZapToken\n\tfunction addImmutableContract(string contractName, address newAddress) external onlyOwner {\n\t\tassert(contracts[contractName] == address(0));\n\t\tcontracts[contractName] = newAddress;\n\n\t\t// Create DB object when Database is added to Coordinator\n\t\tbytes32 hash = keccak256(abi.encodePacked(contractName));\n\t\tif(hash == keccak256(abi.encodePacked(\"DATABASE\"))) db = DatabaseInterface(newAddress);\n\t}\n\n\t// used for modifying an existing contract or adding a new contract to the system\n\tfunction updateContract(string contractName, address newAddress) external onlyOwner {\n\t\taddress prev = contracts[contractName];\n\t\tif (prev == address(0) ) {\n\t\t\t// First time adding this contract\n\t\t\tloadedContracts.push(contractName);\n\t\t} else {\n\t\t\t// Deauth the old contract\n\t\t\tdb.setStorageContract(prev, false);\n\t\t}\n\t\t// give new contract database access permission\n\t\tdb.setStorageContract(newAddress, true);\n\n\t\temit UpdatedContract(contractName, prev, newAddress);\n\t\tcontracts[contractName] = newAddress;\n\t}\n\n\tfunction getContractName(uint index) public view returns (string) {\n\t\treturn loadedContracts[index];\n\t}\n\n\tfunction getContract(string contractName) public view returns (address) {\n\t\treturn contracts[contractName];\n\t}\n\n\tfunction updateAllDependencies() external onlyOwner {\n\t\tfor ( uint i = 0; i < loadedContracts.length; i++ ) {\n\t\t\taddress c = contracts[loadedContracts[i]];\n\t\t\tUpgradable(c).updateDependencies();\n\t\t\temit UpdatedDependencies(block.timestamp, loadedContracts[i], c);\n\t\t}\n\t}\n\n}",
        "debug": "calldata_ZapCoordinatorInterface_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c\ncalldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0x21\nstorage_KECCAC_mem_128): 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x697a60b300000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updateContract(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "updateContract(string,address)",
        "lineno": 106,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4581,
        "code": "ess previousAddr, address newAddr);\n\tevent UpdatedDependencies(uint timestamp, string contractName, address contractAddr);\n\n\tmapping(string => address) contracts; \n\n\t// names of upgradable contracts\n\tstring[] public loadedContracts;\n\n\tDatabaseInterface public db;\n\n\t// used for adding contracts like Database and ZapToken\n\tfunction addImmutableContract(string contractName, address newAddress) external onlyOwner {\n\t\tassert(contracts[contractName] == address(0));\n\t\tcontracts[contractName] = newAddress;\n\n\t\t// Create DB object when Database is added to Coordinator\n\t\tbytes32 hash = keccak256(abi.encodePacked(contractName));\n\t\tif(hash == keccak256(abi.encodePacked(\"DATABASE\"))) db = DatabaseInterface(newAddress);\n\t}\n\n\t// used for modifying an existing contract or adding a new contract to the system\n\tfunction updateContract(string contractName, address newAddress) external onlyOwner {\n\t\taddress prev = contracts[contractName];\n\t\tif (prev == address(0) ) {\n\t\t\t// First time adding this contract\n\t\t\tloadedContracts.push(contractName);\n\t\t} else {\n\t\t\t// Deauth the old contract\n\t\t\tdb.setStorageContract(prev, false);\n\t\t}\n\t\t// give new contract database access permission\n\t\tdb.setStorageContract(newAddress, true);\n\n\t\temit UpdatedContract(contractName, prev, newAddress);\n\t\tcontracts[contractName] = newAddress;\n\t}\n\n\tfunction getContractName(uint index) public view returns (string) {\n\t\treturn loadedContracts[index];\n\t}\n\n\tfunction getContract(string contractName) public view returns (address) {\n\t\treturn contracts[contractName];\n\t}\n\n\tfunction updateAllDependencies() external onlyOwner {\n\t\tfor ( uint i = 0; i < loadedContracts.length; i++ ) {\n\t\t\taddress c = contracts[loadedContracts[i]];\n\t\t\tUpgradable(c).updateDependencies();\n\t\t\temit UpdatedDependencies(block.timestamp, loadedContracts[i], c);\n\t\t}\n\t}\n\n}",
        "debug": "keccac_29102676481673041902632991033461445430619272659676223336789171408008386403022_+\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ZapCoordinatorInterface_4: 0x8638cebc3ef479b69080227bf800000000000006ebdfb9c10e3eff4826476bf\ncalldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0x987c2551f8080d0a0016240787c0618800000000002903c3e006100b780cc80d\nstorage_KECCAC_mem_128): 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x697a60b300000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updateContract(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb007eca49763f31edff95623ed6c23c8c1924a16.sol",
        "function": "updateContract(string,address)",
        "lineno": 106,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}