{
  "contract": "0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605",
  "tool": "mythril",
  "start": 1563604687.6583588,
  "end": 1563605108.724243,
  "duration": 421.06588411331177,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2213,
        "code": "InUse);\n            r",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "fallback",
        "lineno": 336,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2715,
        "code": "nsInUse);\n           ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "fallback",
        "lineno": 342,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3217,
        "code": "msg.sender];\n        ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "fallback",
        "lineno": 353,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3521,
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Treaties: 0x3\nretval_3509: 0x0\nstorage_6: 0x0\nstorage_5: 0x0\nstorage_4: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "fallback",
        "lineno": 357,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3587,
        "code": "inList;\n\n    uint publi",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Treaties_4: 0x0\nstorage_4: 0x0\ncalldata_Treaties_0: 0x25e7c2700000000000000000000000000000000000000000000000000000000\ncalldatasize_Treaties: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "_function_0x025e7c27",
        "lineno": 128,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3913,
        "code": "ts[id].ownersConfirm.length--;\n      ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Treaties_4: 0x0\nstorage_5 +\n89717814153306320011181716697424560163256864414616650038987186496166826726056 +\n7*calldata_Treaties_4: 0xff00\nstorage_10: 0x1\ncaller: 0x0\nstorage_62514009886607029107290561805838585334079798074568712924583230797734656856475: 0x0\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Treaties_0: 0x2d7788db00000000000000000000000000000000000000000000000000000000\ncalldatasize_Treaties: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "rejectRequest(uint256)",
        "lineno": 317,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4447,
        "code": "sInUse = 0;\n\n    mappi",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Treaties_4: 0x0\nstorage_5: 0x0\ncalldata_Treaties_0: 0x3ed2b77a00000000000000000000000000000000000000000000000000000000\ncalldatasize_Treaties: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "_function_0x3ed2b77a",
        "lineno": 130,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4509,
        "code": "ress => uint) public refun",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Treaties_4: 0x0\nstorage_6: 0x0\ncalldata_Treaties_0: 0x3feb5f2b00000000000000000000000000000000000000000000000000000000\ncalldatasize_Treaties: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "_function_0x3feb5f2b",
        "lineno": 132,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4909,
        "code": ";\n\ncontract Standa",
        "debug": "storage_10: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Treaties_4: 0x6\ncaller: 0x0\nstorage_62514009886607029107290561805838585334079798074568712924583230797734656856475: 0x0\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Treaties_0: 0x5d8f3b7600000000000000000000000000000000000000000000000000000000\ncalldatasize_Treaties: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createPercentageRequest(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "createPercentageRequest(uint256)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5476,
        "code": ";\n        inList[creator] = true;\n        creat",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0xff00\ncaller: 0xff\ncalldata_Treaties_0: 0x763091ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_Treaties: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "initCreator(uint256)",
        "lineno": 177,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5521,
        "code": ";\n\ncontract Standa",
        "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_Treaties_0: 0x763091ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_Treaties: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `initCreator(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "initCreator(uint256)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5846,
        "code": "equest(uint8 _rType, string _treatyHas",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "initCreator(uint256)",
        "lineno": 183,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5919,
        "code": "ensAmount) public {\n        ",
        "debug": "storage_8: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_Treaties_4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_1: 0x0\nreturndatasize: 0x20\nretval_5846: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\ncalldata_Treaties_0: 0x763091ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_Treaties: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `initCreator(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "initCreator(uint256)",
        "lineno": 183,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5925,
        "code": "ensAmount) public {\n        ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "initCreator(uint256)",
        "lineno": 183,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 6047,
        "code": "ype <= 1);\n\n        re",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "initCreator(uint256)",
        "lineno": 184,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 6073,
        "code": "(Request({\n         ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "initCreator(uint256)",
        "lineno": 186,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 6241,
        "code": ";\n\ncontract Standa",
        "debug": "storage_10: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Treaties_0: 0x7c83fdf700000000000000000000000000000000000000000000000000000000\ncalldatasize_Treaties: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createFiatInvestorRequest(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "createFiatInvestorRequest(uint256)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6694,
        "code": ") {\n                _;\n  ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Treaties_4: 0x0\nstorage_10: 0x0\ncalldata_Treaties_0: 0x81d12c5800000000000000000000000000000000000000000000000000000000\ncalldatasize_Treaties: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "_function_0x81d12c58",
        "lineno": 150,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7046,
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Treaties_0: 0x95afc05c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Treaties: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "withdrawRefunds()",
        "lineno": 357,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7242,
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Treaties_0: 0x95afc05c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Treaties: 0x4\nretval_7230: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "withdrawRefunds()",
        "lineno": 357,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7257,
        "code": "mount: msg.value,\n   ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Treaties_0: 0xa4a1485b00000000000000000000000000000000000000000000000000000000\ncalldatasize_Treaties: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "createEthInvestorRequest(uint256)",
        "lineno": 208,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7421,
        "code": ";\n\ncontract Standa",
        "debug": "storage_10: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Treaties_0: 0xa4a1485b00000000000000000000000000000000000000000000000000000000\ncalldatasize_Treaties: 0x4\n",
        "description": "A possible integer overflow exists in the function `createEthInvestorRequest(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "createEthInvestorRequest(uint256)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 12869,
        "code": "s gre",
        "debug": "The exception is triggered under the following conditions:\n\nreturndatasize: 0x20\nretval_2213: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Treaties: 0x3\nstorage_8: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "fallback",
        "lineno": 95,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 12962,
        "code": "    bool public creatorInited = false;\n\n    address public wallet;\n\n    uint public walletPercentage = 100;\n\n    address[] public owners;\n    address[] public teams;\n    address[] public investors;\n\n    mapping (address => bool) public inList;\n\n    uint public tokensInUse = 0;\n\n    mapping (address => uint) public refunds;\n\n    struct Request {\n        uint8 rType; // 0 - owner, 1 - team, 2 - investor(eth), 3 - investor(fiat), 4 - new percentage\n        address beneficiary;\n        string treatyHash;\n        uint tokensAmount;\n        uint ethAmount;\n        uint percentage;\n\n        uint8 isConfirmed; // 0 - pending, 1 - declined, 2 - accepted\n        address[] ownersConfirm;\n    }\n\n    Request[] public requests;\n\n    modifier onlyOwner() {\n        for (uint i = 0; i < owners.length; i++) {\n            if (owners[i] == msg.sender) {\n                _;\n            }\n        }\n    }   \n\n    event NewRequest(uint8 rType, address beneficiary, string treatyHash, uint tokensAmount, uint ethAmount, uint percentage, uint id);\n    event RequestConfirmed(uint id);\n    event RequestDeclined(uint id);\n    event RefundsCalculated();\n\n    function Treaties(address _wallet, SafeNetToken _token) public {\n        creator = msg.sender;\n        token = _token;\n        wallet = _wallet;\n    }\n\n    function() external payable {\n        splitProfit(msg.value);\n    }\n\n    // after mint\n    function initCreator(uint _tokensAmount) public {\n        assert(msg.sender == creator && !creatorInited);\n\n        owners.push(creator);\n        assert(token.transfer(creator, _tokensAmount));\n        tokensInUse += _tokensAmount;\n        inList[creator] = true;\n        creatorInited = true;\n    }\n\n\n    function createTreatyRequest(uint8 _rType, string _treatyHash, uint _tokensAmount) public {\n        require(_rType <= 1);\n\n        requests.push(Request({\n            rType: _rType,\n            beneficiary: msg.sender,\n            treatyHash: _treatyHash,\n            tokensAmount: _tokensAmount,\n            ethAmount: 0,\n            percentage: 0,\n            isConfirmed: 0,\n            ownersConfirm: new address[](0)\n            }));\n\n        emit NewRequest(_rType, msg.sender, _treatyHash, _tokensAmount, 0, 0, requests.length - 1);\n    }\n\n    function createEthInvestorRequest(uint _tokensAmount) public payable {\n        assert(msg.value > 0);\n\n        requests.push(Request({\n            rType: 2,\n            beneficiary: msg.sender,\n            treatyHash: '',\n            tokensAmount: _tokensAmount,\n            ethAmount: msg.value,\n            percentage: 0,\n            isConfirmed: 0,\n            ownersConfirm: new address[](0)\n            }));\n\n        emit NewRequest(2, msg.sender, \"\", _tokensAmount, msg.value, 0, requests.length - 1);\n    }\n\n    function removeEthInvestorRequest(uint id) public {\n        require(id < requests.length);\n        assert(requests[id].isConfirmed == 0 && requests[id].rType == 2);\n        assert(requests[id].beneficiary == msg.sender);\n\n        requests[id].isConfirmed = 1;\n        assert(msg.sender.send(requests[id].ethAmount));\n        emit RequestDeclined(id);\n    }\n\n    function createFiatInvestorRequest(uint _tokensAmount) public {\n        requests.push(Request({\n            rType: 3,\n            beneficiary: msg.sender,\n            treatyHash: '',\n            tokensAmount: _tokensAmount,\n            ethAmount: 0,\n            percentage: 0,\n            isConfirmed: 0,\n            ownersConfirm: new address[](0)\n            }));\n\n        emit NewRequest(3, msg.sender, \"\", _tokensAmount, 0, 0, requests.length - 1);\n    }\n\n    function createPercentageRequest(uint _percentage) public onlyOwner {\n        require(_percentage <= 100);\n\n        requests.push(Request({\n            rType: 4,\n            beneficiary: msg.sender,\n            treatyHash: '',\n            tokensAmount: 0,\n            ethAmount: 0,\n            percentage: _percentage,\n            isConfirmed: 0,\n            ownersConfirm: new address[](0)\n            }));\n\n        emit NewRequest(4, msg.sender, \"\", 0, 0, _percentage, requests.length - 1);\n    }\n\n\n    function confirmRequest(uint id) public onlyOwner {\n        require(id < requests.length);\n        assert(requests[id].isConfirmed == 0);\n\n        uint tokensConfirmed = 0;\n        for (uint i = 0; i < requests[id].ownersConfirm.length; i++) {\n            assert(requests[id].ownersConfirm[i] != msg.sender);\n            tokensConfirmed += token.balanceOf(requests[id].ownersConfirm[i]);\n        }\n\n        requests[id].ownersConfirm.push(msg.sender);\n        tokensConfirmed += token.balanceOf(msg.sender);\n\n        uint tokensInOwners = 0;\n        for (i = 0; i < owners.length; i++) {\n            tokensInOwners += token.balanceOf(owners[i]);\n        }\n\n        if (tokensConfirmed > tokensInOwners / 2) {\n            if (requests[id].rType == 4) {\n                walletPercentage = requests[id].percentage;\n\n            } else {\n                if (!inList[requests[id].beneficiary]) {\n                    if (requests[id].rType == 0) {\n                        owners.push(requests[id].beneficiary);\n                        token.transfer(creator, requests[id].tokensAmount / 10);\n                    }\n                    if (requests[id].rType == 1) {\n                        teams.push(requests[id].beneficiary);\n                    }\n                    if (requests[id].rType == 2 || requests[id].rType == 3) {\n                        investors.push(requests[id].beneficiary);\n                    }\n                    inList[requests[id].beneficiary] = true;\n                }\n\n                if (requests[id].rType == 2) {\n                    assert(wallet.send(requests[id].ethAmount));\n                }\n\n                token.transfer(requests[id].beneficiary, requests[id].tokensAmount);\n                tokensInUse += requests[id].tokensAmount;\n            }\n\n            requests[id].isConfirmed = 2;\n            emit RequestConfirmed(id);\n        }\n    }\n\n    function rejectRequest(uint id) public onlyOwner {\n        require(id < requests.length);\n        assert(requests[id].isConfirmed == 0);\n\n        for (uint i = 0; i < requests[id].ownersConfirm.length; i++) {\n            if (requests[id].ownersConfirm[i] == msg.sender) {\n                requests[id].ownersConfirm[i] = requests[id].ownersConfirm[requests[id].ownersConfirm.length - 1];\n                requests[id].ownersConfirm.length--;\n                break;\n            }\n        }\n    }\n\n\n    function splitProfit(uint profit) internal {\n        uint rest = profit;\n        uint refund;\n        address addr;\n        for (uint i = 0; i < owners.length; i++) {\n            addr = owners[i];\n            refund = profit.mul(token.balanceOf(addr)).mul(100 - walletPercentage).div(100).div(tokensInUse);\n            refunds[addr] += refund;\n            rest -= refund;\n        }\n        for (i = 0; i < teams.length; i++) {\n            addr = teams[i];\n            refund = profit.mul(token.balanceOf(addr)).mul(100 - walletPercentage).div(100).div(tokensInUse);\n            refunds[addr] += refund;\n            rest -= refund;\n        }\n        for (i = 0; i < investors.length; i++) {\n            addr = investors[i];\n            refund = profit.mul(token.balanceOf(addr)).mul(100 - walletPercentage).div(100).div(tokensInUse);\n            refunds[addr] += refund;\n            rest -= refund;\n        }\n\n        assert(wallet.send(rest));\n        emit RefundsCalculated();\n    }\n\n    function withdrawRefunds() public {\n        assert(refunds[msg.sender] > 0);\n        uint refund = refunds[msg.sender];\n        refunds[msg.sender] = 0;\n        assert(msg.sender.send(refund));\n    }\n}",
        "debug": "keccac_1_+\n89717814153306320011181716697424560163256864414616650038987186496166826726056_+\n7*storage_10: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_1 +\n89717814153306320011181716697424560163256864414616650038987186496166826726056 +\n7*storage_10: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncalldata_Treaties_0: 0x7c83fdf700000000000000000000000000000000000000000000000000000000\ncalldatasize_Treaties: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createFiatInvestorRequest(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x1a851ec3f9c97c7c62e8fc2ee5ee5224d5772605.sol",
        "function": "createFiatInvestorRequest(uint256)",
        "lineno": 118,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}