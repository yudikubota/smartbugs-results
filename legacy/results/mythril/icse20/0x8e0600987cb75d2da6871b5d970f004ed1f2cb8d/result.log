{"error": null, "issues": [{"address": 552, "code": "] += forth;\n    beneficiaryBalance[beneficiaryL", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_1,_256): 0xfdad554884524f8f30db30a1e3db9cfb3005610b4b648bdb56ac3e5ed69253e5\ncallvalue: 0xf6b5310963686fa0bb68cb585e1e46e0a214c76dadd9ae3250b12a039a25d80c\ncalldata_FourWaySplit_0: 0x1b9265b800000000000000000000000000000000000000000000000000000000\ncalldatasize_FourWaySplit: 0x4\n", "description": "A possible integer overflow exists in the function `pay()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/21/0x8e0600987cb75d2da6871b5d970f004ed1f2cb8d.sol", "function": "pay()", "lineno": 38, "title": "Integer Overflow ", "type": "Warning"}, {"address": 676, "code": " += forth;\n    beneficiaryBalance[beneficiaryLi", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_2,_256): 0xfdad554884524f8f30db30a1e3db9cfb3005610b4b648bdb56ac3e5ed69253e5\ncallvalue: 0xf6b5310963686fa0bb68cb585e1e46e0a214c76dadd9ae3250b12a039a25d80c\ncalldata_FourWaySplit_0: 0x1b9265b800000000000000000000000000000000000000000000000000000000\ncalldatasize_FourWaySplit: 0x4\n", "description": "A possible integer overflow exists in the function `pay()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/21/0x8e0600987cb75d2da6871b5d970f004ed1f2cb8d.sol", "function": "pay()", "lineno": 39, "title": "Integer Overflow ", "type": "Warning"}, {"address": 801, "code": "+= forth;\n    beneficiaryBalance[beneficiaryLis", "debug": "callvalue: 0xf6b5310963686fa0bb68cb585e1e46e0a214c76dadd9ae3250b12a039a25d80c\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_3,_256): 0xfdad554884524f8f30db30a1e3db9cfb3005610b4b648bdb56ac3e5ed69253e5\ncalldata_FourWaySplit_0: 0x1b9265b800000000000000000000000000000000000000000000000000000000\ncalldatasize_FourWaySplit: 0x4\n", "description": "A possible integer overflow exists in the function `pay()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/21/0x8e0600987cb75d2da6871b5d970f004ed1f2cb8d.sol", "function": "pay()", "lineno": 40, "title": "Integer Overflow ", "type": "Warning"}, {"address": 926, "code": "= forth;\n    LogReceived(msg.sender, msg.value)", "debug": "callvalue: 0xf6b5310963686fa0bb68cb585e1e46e0a214c76dadd9ae3250b12a039a25d80c\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_4,_256): 0xfdad554884524f8f30db30a1e3db9cfb3005610b4b648bdb56ac3e5ed69253e5\ncalldata_FourWaySplit_0: 0x1b9265b800000000000000000000000000000000000000000000000000000000\ncalldatasize_FourWaySplit: 0x4\n", "description": "A possible integer overflow exists in the function `pay()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/21/0x8e0600987cb75d2da6871b5d970f004ed1f2cb8d.sol", "function": "pay()", "lineno": 41, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1419, "code": "[4] public beneficiaryList;\n\n  //", "debug": "The exception is triggered under the following conditions:\n\ncalldata_FourWaySplit_4: 0x4\ncalldata_FourWaySplit_0: 0x9e761bbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_FourWaySplit: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/21/0x8e0600987cb75d2da6871b5d970f004ed1f2cb8d.sol", "function": "_function_0x9e761bbb", "lineno": 8, "title": "Exception state", "type": "Informational"}], "success": true}