{
  "contract": "0x39af50a4778a9843a29ec53723e21ab5529c96be",
  "tool": "mythril",
  "start": 1563757312.827915,
  "end": 1563757787.3149354,
  "duration": 474.4870204925537,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 513,
        "code": "        uint8 _decimalUnits,\n        string _tokenSymbol\n        ) public returns (bool){\n        if(init>0)revert();\n        balances[msg.sender] = _initialAmount;\n        totalSupply = _initialAmount;\n        name = _tokenName; \n        decimals = _decimalUnits;\n        symbol = _tokenSymbol;\n        burnt=false;\n        init=1;\n        return true;\n    }\n\n   \n}",
        "debug": "calldata_FloodToken_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_FloodToken_0: 0xc746f7000000000000000000000000000000000000000000000000000000000\ncalldatasize_FloodToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `init(uint256,string,uint8,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/46/0x39af50a4778a9843a29ec53723e21ab5529c96be.sol",
        "function": "init(uint256,string,uint8,string)",
        "lineno": 78,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 525,
        "code": "        uint8 _decimalUnits,\n        string _tokenSymbol\n        ) public returns (bool){\n        if(init>0)revert();\n        balances[msg.sender] = _initialAmount;\n        totalSupply = _initialAmount;\n        name = _tokenName; \n        decimals = _decimalUnits;\n        symbol = _tokenSymbol;\n        burnt=false;\n        init=1;\n        return true;\n    }\n\n   \n}",
        "debug": "calldata_FloodToken_4 + calldata_FloodToken_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_FloodToken_0: 0xc746f7000000000000000000000000000000000000000000000000000000000\ncalldatasize_FloodToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `init(uint256,string,uint8,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/46/0x39af50a4778a9843a29ec53723e21ab5529c96be.sol",
        "function": "init(uint256,string,uint8,string)",
        "lineno": 78,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 534,
        "code": "        uint8 _decimalUnits,\n        string _tokenSymbol\n        ) public returns (bool){\n        if(init>0)revert();\n        balances[msg.sender] = _initialAmount;\n        totalSupply = _initialAmount;\n        name = _tokenName; \n        decimals = _decimalUnits;\n        symbol = _tokenSymbol;\n        burnt=false;\n        init=1;\n        return true;\n    }\n\n   \n}",
        "debug": "calldata_FloodToken_4 + calldata_FloodToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_FloodToken_0: 0xc746f7000000000000000000000000000000000000000000000000000000000\ncalldatasize_FloodToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `init(uint256,string,uint8,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/46/0x39af50a4778a9843a29ec53723e21ab5529c96be.sol",
        "function": "init(uint256,string,uint8,string)",
        "lineno": 78,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 540,
        "code": "        uint8 _decimalUnits,\n        string _tokenSymbol\n        ) public returns (bool){\n        if(init>0)revert();\n        balances[msg.sender] = _initialAmount;\n        totalSupply = _initialAmount;\n        name = _tokenName; \n        decimals = _decimalUnits;\n        symbol = _tokenSymbol;\n        burnt=false;\n        init=1;\n        return true;\n    }\n\n   \n}",
        "debug": "calldata_FloodToken_4 + calldata_FloodToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_FloodToken_0: 0xc746f7000000000000000000000000000000000000000000000000000000000\ncalldatasize_FloodToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `init(uint256,string,uint8,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/46/0x39af50a4778a9843a29ec53723e21ab5529c96be.sol",
        "function": "init(uint256,string,uint8,string)",
        "lineno": 78,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1580,
        "code": "xtraData) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        require(_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\n        return true;\n    }\n\n\n    function init(\n        uint256 _initialAmount,\n        string _t",
        "debug": "calldata_FloodToken_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_FloodToken_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_FloodToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/46/0x39af50a4778a9843a29ec53723e21ab5529c96be.sol",
        "function": "approveAndCall(address,uint256,bytes)",
        "lineno": 67,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2745,
        "code": "  balances[_from] -= _v",
        "debug": "calldata_FloodToken_32 + 36: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_FloodToken_32_+_4: 0xc050fffff320c00020003d81af848540000000000000040000110001bd062022\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_FloodToken_4: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\ncalldata_FloodToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_FloodToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/46/0x39af50a4778a9843a29ec53723e21ab5529c96be.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 33,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3307,
        "code": "nt;\n    \t\t}\n    \t}\n        retu",
        "debug": "calldata_FloodToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_49447583277831049919367225834250252452388266381872102257329440518579731298015: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_FloodToken_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_FloodToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `burn(uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/46/0x39af50a4778a9843a29ec53723e21ab5529c96be.sol",
        "function": "burn(uint256)",
        "lineno": 60,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 4018,
        "code": ";\n        emit Transfer",
        "debug": "calldata_FloodToken_32 + 4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_FloodToken_4: 0x9c9efb7ae5acd378025256a3945f5859076e809243093d9ecae2636c9fd28979\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\ncalldata_FloodToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_FloodToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/46/0x39af50a4778a9843a29ec53723e21ab5529c96be.sol",
        "function": "transfer(address,uint256)",
        "lineno": 24,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4798,
        "code": "56,address,bytes)\"))), msg.sender, _value, this, _extraData));\n        return true;\n    }\n\n\n    function init(\n        uint256 _i",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/46/0x39af50a4778a9843a29ec53723e21ab5529c96be.sol",
        "function": "approveAndCall(address,uint256,bytes)",
        "lineno": 70,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5033,
        "code": "ntract FloodToken {\n\n    uint256 constant MAX_UINT256 = 2**256 - 1;\n    uint256 public totalSupply;\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n    string public version = 'FLOOD0.1';\n    bool public burnt;\n    uint public init;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    constructor() public {}\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success) {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowance >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT256) {\n            allowed[_from][msg.sender] -= _value;\n        }\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    function burn(uint _amount) public returns (uint256 remaining) {\n    \tif(balances[msg.sender]>=_amount){\n    \t\tif(totalSupply>=_amount){\n    \t\t\ttransfer(address(0x0), _amount);\n    \t\t\tbalances[address(0x0)]-=_amount;\n    \t\t\ttotalSupply-=_amount;\n    \t\t}\n    \t}\n        return balances[msg.sender];\n    }\n\n    /* Approves and then calls the receiving contract */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        require(_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\n        return true;\n    }\n\n\n    function init(\n        uint256 _initialAmount,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol\n        ) public returns (bool){\n        if(init>0)revert();\n        balances[msg.sender] = _initialAmount;\n        totalSupply = _initialAmount;\n        name = _tokenName; \n        decimals = _decimalUnits;\n        symbol = _tokenSymbol;\n        burnt=false;\n        init=1;\n        return true;\n    }\n\n   \n}",
        "debug": "storage_1: 0x80\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_FloodToken_4 + calldata_FloodToken_32 + 4)): 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_FloodToken_4 + calldata_FloodToken_32 + 4: 0x0\ncalldata_FloodToken_0: 0xc746f7000000000000000000000000000000000000000000000000000000000\ncalldatasize_FloodToken: 0x4\nstorage_6: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `init(uint256,string,uint8,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/46/0x39af50a4778a9843a29ec53723e21ab5529c96be.sol",
        "function": "init(uint256,string,uint8,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5047,
        "code": "ntract FloodToken {\n\n    uint256 constant MAX_UINT256 = 2**256 - 1;\n    uint256 public totalSupply;\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n    string public version = 'FLOOD0.1';\n    bool public burnt;\n    uint public init;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    constructor() public {}\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success) {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowance >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT256) {\n            allowed[_from][msg.sender] -= _value;\n        }\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    function burn(uint _amount) public returns (uint256 remaining) {\n    \tif(balances[msg.sender]>=_amount){\n    \t\tif(totalSupply>=_amount){\n    \t\t\ttransfer(address(0x0), _amount);\n    \t\t\tbalances[address(0x0)]-=_amount;\n    \t\t\ttotalSupply-=_amount;\n    \t\t}\n    \t}\n        return balances[msg.sender];\n    }\n\n    /* Approves and then calls the receiving contract */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        require(_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\n        return true;\n    }\n\n\n    function init(\n        uint256 _initialAmount,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol\n        ) public returns (bool){\n        if(init>0)revert();\n        balances[msg.sender] = _initialAmount;\n        totalSupply = _initialAmount;\n        name = _tokenName; \n        decimals = _decimalUnits;\n        symbol = _tokenSymbol;\n        burnt=false;\n        init=1;\n        return true;\n    }\n\n   \n}",
        "debug": "calldata_FloodToken_4 + calldata_FloodToken_32 + 4: 0x0\nstorage_1: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff40\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_FloodToken_4 + calldata_FloodToken_32 + 4)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_FloodToken_0: 0xc746f7000000000000000000000000000000000000000000000000000000000\ncalldatasize_FloodToken: 0x4\nstorage_6: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `init(uint256,string,uint8,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/46/0x39af50a4778a9843a29ec53723e21ab5529c96be.sol",
        "function": "init(uint256,string,uint8,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}