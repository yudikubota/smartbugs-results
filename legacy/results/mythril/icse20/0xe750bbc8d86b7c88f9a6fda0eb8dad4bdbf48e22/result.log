{"error": null, "issues": [{"address": 5737, "code": "ransfer(_from, _to, _am", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VGCToken_32_+_4: 0x800000000000000000008eb2e34648ee0801030820000000000000000000a000\ncalldata_VGCToken_32 + 36: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VGCToken_4: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\ncalldata_VGCToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_VGCToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_VGCToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0xe750bbc8d86b7c88f9a6fda0eb8dad4bdbf48e22.sol", "function": "transferFrom(address,address,uint256)", "lineno": 170, "title": "Integer Overflow ", "type": "Warning"}, {"address": 14477, "code": "eturn a - b;\n ", "debug": "The exception is triggered under the following conditions:\n\nstorage_20: 0x0\ncalldata_VGCToken_32 + 4: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_VGCToken_0: 0x23e25f7d00000000000000000000000000000000000000000000000000000000\ncalldatasize_VGCToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xe750bbc8d86b7c88f9a6fda0eb8dad4bdbf48e22.sol", "function": "_function_0x23e25f7d", "lineno": 23, "title": "Exception state", "type": "Informational"}], "success": true}