{"error": null, "issues": [{"address": 560, "code": "   uint8 i=0;\n    ", "debug": "callvalue: 0x1b3b5ffdf4200000\nstorage_1: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5\nretval_491: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_hbys_0: 0xe1bc221a00000000000000000000000000000000000000000000000000000000\ncalldatasize_hbys: 0x4\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/22/0xb7ed5a7fb4be122a82ec98aef0b377849f0b4c52.sol", "function": "fallback", "lineno": 39, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1090, "code": "r[bingo].transfer(address(this).balance/50);\n ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_hbys_4: 0x0\nstorage_3: 0x0\ncaller: 0x0\ncalldata_hbys_0: 0xc3d9c4b400000000000000000000000000000000000000000000000000000000\ncalldatasize_hbys: 0x4\nstorage_1: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0xb7ed5a7fb4be122a82ec98aef0b377849f0b4c52.sol", "function": "share(uint256)", "lineno": 62, "title": "Exception state", "type": "Informational"}, {"address": 1233, "code": "\n}", "debug": "", "description": "A possible transaction order independence vulnerability exists in function share(uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/22/0xb7ed5a7fb4be122a82ec98aef0b377849f0b4c52.sol", "function": "share(uint256)", "lineno": 64, "title": "Transaction order dependence", "type": "Warning"}], "success": true}