{"error": null, "issues": [{"address": 1271, "debug": "calldata_TokenCSR_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenCSR_0: 0xaad41a4100000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenCSR: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `multisend(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x6f2057f83c05378f22a15b72a424367cb40abc1b.sol", "function": "multisend(address[],uint256[])", "lineno": 343, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4974, "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenCSR_4 + calldata_TokenCSR_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncaller: 0x0\ncalldata_TokenCSR_0: 0xaad41a4100000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenCSR: 0x4\nmem_128 + 32 + 32*calldata_TokenCSR_4 + calldata_TokenCSR_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x6f2057f83c05378f22a15b72a424367cb40abc1b.sol", "function": "multisend(address[],uint256[])", "lineno": 343, "title": "Exception state", "type": "Informational"}, {"address": 5789, "code": "erfac", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenCSR_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_TokenCSR_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_TokenCSR_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenCSR: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `increaseApproval(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x6f2057f83c05378f22a15b72a424367cb40abc1b.sol", "function": "increaseApproval(address,uint256)", "lineno": 115, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5802, "code": "e https://gith", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenCSR_4: 0x1\ncalldata_TokenCSR_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenCSR_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenCSR: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x6f2057f83c05378f22a15b72a424367cb40abc1b.sol", "function": "increaseApproval(address,uint256)", "lineno": 116, "title": "Exception state", "type": "Informational"}], "success": true}