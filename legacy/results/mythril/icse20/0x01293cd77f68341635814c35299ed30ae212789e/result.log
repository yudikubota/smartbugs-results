{"error": null, "issues": [{"address": 1428, "code": "m.curPrice;\n  ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_NBACrypto_4: 0x0\nstorage_2: 0x0\ncalldata_NBACrypto_0: 0x8e0f1b00000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "fallback", "lineno": 115, "title": "Exception state", "type": "Informational"}, {"address": 1678, "code": "/ Calculate dev fe", "debug": "The exception is triggered under the following conditions:\n\ncalldata_NBACrypto_4: 0x0\nstorage_3: 0x0\ncalldata_NBACrypto_0: 0x75881d600000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "purchasePlayer(uint256)", "lineno": 69, "title": "Exception state", "type": "Informational"}, {"address": 1896, "code": "ayerId].realTeamId].ownerAddress.transfer(commisionTeam);", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2168\nCall at address: 2063\n", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "purchasePlayer(uint256)", "lineno": 82, "title": "Multiple Calls", "type": "Information"}, {"address": 1965, "code": "Transfer fee to Dev\n\t\tcfoAddress.tra", "debug": "The exception is triggered under the following conditions:\n\ncalldata_NBACrypto_4: 0x0\nstorage_3 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n4*calldata_NBACrypto_4: 0x0\nstorage_2: 0x0\nretval_1896: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x0\nstorage_3: 0x1\ncalldata_NBACrypto_0: 0x75881d600000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\nstorage_2 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n4*calldata_NBACrypto_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "purchasePlayer(uint256)", "lineno": 84, "title": "Exception state", "type": "Informational"}, {"address": 2063, "code": "Transfer fee to Dev\n\t\tcfoAddress.transfer(commissionDev);\n\n\t\t// Update th", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2168\n", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "purchasePlayer(uint256)", "lineno": 84, "title": "Multiple Calls", "type": "Information"}, {"address": 2063, "code": "Transfer fee to Dev\n\t\tcfoAddress.transfer(commissionDev);\n\n\t\t// Update th", "debug": "", "description": "A possible transaction order independence vulnerability exists in function purchasePlayer(uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "purchasePlayer(uint256)", "lineno": 84, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2388, "code": "d].ownerAddres", "debug": "The exception is triggered under the following conditions:\n\ncalldata_NBACrypto_4: 0x0\nstorage_2: 0x0\ncalldata_NBACrypto_0: 0xc8135a700000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "getTeamOwner(uint256)", "lineno": 148, "title": "Exception state", "type": "Informational"}, {"address": 2463, "code": "d == false);\n\n\n\t\t", "debug": "The exception is triggered under the following conditions:\n\ncalldata_NBACrypto_4: 0x0\nstorage_2: 0x0\ncalldata_NBACrypto_0: 0x20dfcd2700000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "purchaseCountry(uint256)", "lineno": 48, "title": "Exception state", "type": "Informational"}, {"address": 2661, "code": "r);\n\n\n\t\tcfoAddress.transfer(commission5percent);\n\n\t\t// U", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2766\n", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "purchaseCountry(uint256)", "lineno": 55, "title": "Multiple Calls", "type": "Information"}, {"address": 3233, "code": ";\n\ncontract NBACry", "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_NBACrypto_0: 0x2e99df8400000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `InitiateTeams()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "InitiateTeams()", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3522, "code": ";\n\ncontract NBACry", "debug": "storage_2: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nkeccac_0_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n3*storage_2: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_0 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n3*storage_2: 0xe3b040314880e20364224e890f47bffedff7b777fffffffffffffffffffff50\nstorage_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_NBACrypto_0: 0x2e99df8400000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `InitiateTeams()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "InitiateTeams()", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 11901, "code": "ion mul(uint256 a,", "debug": "The exception is triggered under the following conditions:\n\ncalldata_NBACrypto_4: 0x0\nstorage_3: 0x0\ncalldata_NBACrypto_0: 0x56c26f2500000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "getPlayerOwner(uint256)", "lineno": 154, "title": "Exception state", "type": "Informational"}, {"address": 11975, "code": "ayerId].curPri", "debug": "The exception is triggered under the following conditions:\n\ncalldata_NBACrypto_4: 0x0\nstorage_2: 0x0\ncalldata_NBACrypto_0: 0x789533e900000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "getTeamPrice(uint256)", "lineno": 139, "title": "Exception state", "type": "Informational"}, {"address": 12040, "code": "eamId) public view", "debug": "The exception is triggered under the following conditions:\n\ncalldata_NBACrypto_4: 0x0\nstorage_3: 0x0\ncalldata_NBACrypto_0: 0x95adfe7200000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "getPlayerPrice(uint256)", "lineno": 143, "title": "Exception state", "type": "Informational"}, {"address": 12222, "code": ";\n\ncontract NBACry", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_NBACrypto_0: 0x9b13950400000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addPlayer(string,address,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "addPlayer(string,address,uint256,uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 12274, "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_NBACrypto_4 + calldata_NBACrypto_4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_NBACrypto_0: 0x9b13950400000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addPlayer(string,address,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "addPlayer(string,address,uint256,uint256)", "lineno": 214, "title": "Integer Overflow ", "type": "Warning"}, {"address": 12439, "code": " teams[_teamId", "debug": "The exception is triggered under the following conditions:\n\ncalldata_NBACrypto_4: 0x0\nstorage_2: 0x0\ncalldata_NBACrypto_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_NBACrypto_0: 0xc37b0aa700000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "modifyPriceCountry(uint256,uint256)", "lineno": 102, "title": "Exception state", "type": "Informational"}, {"address": 12633, "code": "ayer.curPrice;\n   ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_NBACrypto_4: 0x0\nstorage_3: 0x0\ncalldata_NBACrypto_0: 0xe55ae4e800000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "getPlayer(uint256)", "lineno": 128, "title": "Exception state", "type": "Informational"}, {"address": 13014, "code": "ibrar", "debug": "storage_2 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n3*calldata_NBACrypto_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_NBACrypto_4: 0x0\nretval_2766: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_2661: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x0\nstorage_2: 0x1\ncalldata_NBACrypto_0: 0x20dfcd2700000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\ncallvalue: 0x8000000000000000000000000000000000000000000000000000000000000000\n", "description": "A possible integer overflow exists in the function `purchaseCountry(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "purchaseCountry(uint256)", "lineno": 164, "title": "Integer Overflow ", "type": "Warning"}, {"address": 13088, "code": "ntract NBACrypto {\n\n\taddress ceoAddress = 0xD2f0e35EB79789Ea24426233336DDa6b13E2fA1f;\n    address cfoAddress = 0x831a278fF506bf4dAa955359F9c5DA9B9Be18f3A;\n\n\tstruct Team {\n\t\tstring name;\n\t\taddress ownerAddress;\n\t\tuint256 curPrice;\n\t}\n\n  struct Player {\n    string name;\n    address ownerAddress;\n    uint256 curPrice;\n    uint256 realTeamId;\n  }\n\tTeam[] teams;\n  Player[] players;\n\n\tmodifier onlyCeo() {\n        require (msg.sender == ceoAddress);\n        _;\n    }\n\n    bool teamsAreInitiated;\n    bool playersAreInitiated;\n    bool isPaused;\n\n    /*\n    We use the following functions to pause and unpause the game.\n    */\n    function pauseGame() public onlyCeo {\n        isPaused = true;\n    }\n    function unPauseGame() public onlyCeo {\n        isPaused = false;\n    }\n    function GetIsPauded() public view returns(bool) {\n       return(isPaused);\n    }\n\n\n\tfunction purchaseCountry(uint _countryId) public payable {\n\t\trequire(msg.value == teams[_countryId].curPrice);\n\t\trequire(isPaused == false);\n\n\n\t\tuint256 commission5percent = (msg.value / 10);\n\n\n\t\tuint256 commissionOwner = msg.value - commission5percent; // => 95%\n\t\tteams[_countryId].ownerAddress.transfer(commissionOwner);\n\n\n\t\tcfoAddress.transfer(commission5percent);\n\n\t\t// Update the team owner and set the new price\n\t\tteams[_countryId].ownerAddress = msg.sender;\n\t\tteams[_countryId].curPrice = mul(teams[_countryId].curPrice, 2);\n\t}\n\n  function purchasePlayer(uint256 _playerId) public payable {\n    require(msg.value == players[_playerId].curPrice);\n\trequire(isPaused == false);\n\n    // Calculate dev fee\n\t\tuint256 commissionDev = (msg.value / 10);\n\n    //Calculate commision for team owner\n    uint256 commisionTeam = (msg.value / 5);\n\n    uint256 afterDevCut = msg.value - commissionDev;\n\n\n\n\t\t// Calculate the owner commission on this sale & transfer the commission to the owner.\n\t\tuint256 commissionOwner = afterDevCut - commisionTeam; //\n\t\tplayers[_playerId].ownerAddress.transfer(commissionOwner);\n    teams[players[_playerId].realTeamId].ownerAddress.transfer(commisionTeam);\n\n\t\t// Transfer fee to Dev\n\t\tcfoAddress.transfer(commissionDev);\n\n\t\t// Update the team owner and set the new price\n\n\n\t\tplayers[_playerId].ownerAddress = msg.sender;\n\t\tplayers[_playerId].curPrice = mul(players[_playerId].curPrice, 2);\n  }\n\n\t/*\n\tThis function can be used by the owner of a team to modify the price of its team.\n\tHe can make the price smaller than the current price but never bigger.\n\t*/\n\tfunction modifyPriceCountry(uint _teamId, uint256 _newPrice) public {\n\t    require(_newPrice > 0);\n\t    require(teams[_teamId].ownerAddress == msg.sender);\n\t    require(_newPrice < teams[_teamId].curPrice);\n\t    teams[_teamId].curPrice = _newPrice;\n\t}\n\n\t// This function will return all of the details of our teams\n\tfunction getTeam(uint _teamId) public view returns (\n        string name,\n        address ownerAddress,\n        uint256 curPrice\n    ) {\n        Team storage _team = teams[_teamId];\n\n        name = _team.name;\n        ownerAddress = _team.ownerAddress;\n        curPrice = _team.curPrice;\n    }\n\n    function getPlayer(uint _playerId) public view returns (\n          string name,\n          address ownerAddress,\n          uint256 curPrice,\n          uint256 realTeamId\n      ) {\n          Player storage _player = players[_playerId];\n\n          name = _player.name;\n          ownerAddress = _player.ownerAddress;\n          curPrice = _player.curPrice;\n          realTeamId = _player.realTeamId;\n      }\n\n\n    // This function will return only the price of a specific team\n    function getTeamPrice(uint _teamId) public view returns(uint256) {\n        return(teams[_teamId].curPrice);\n    }\n\n    function getPlayerPrice(uint _playerId) public view returns(uint256) {\n        return(players[_playerId].curPrice);\n    }\n\n    // This function will return only the addess of a specific team\n    function getTeamOwner(uint _teamId) public view returns(address) {\n        return(teams[_teamId].ownerAddress);\n    }\n\n    function getPlayerOwner(uint _playerId) public view returns(address) {\n        return(players[_playerId].ownerAddress);\n    }\n\n    /**\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n\t// We run this function once to create all the teams and set the initial price.\n\tfunction InitiateTeams() public onlyCeo {\n\t\t require(teamsAreInitiated == false);\n\t\t teams.push(Team(\"Cavaliers\", 0x54d6fca0ca37382b01304e6716420538604b447b, 6400000000000000000));\n \t\t teams.push(Team(\"Warriors\", 0xc88ddaa37c1fec910670366ae16df2aa5e1124f7, 12800000000000000000));\n \t\t teams.push(Team(\"Celtics\", 0x28d02f67316123dc0293849a0d254ad86b379b34, 6400000000000000000));\n\t\t teams.push(Team(\"Rockets\", 0xc88ddaa37c1fec910670366ae16df2aa5e1124f7, 6400000000000000000));\n\t\t teams.push(Team(\"Raptors\", 0x5c035bb4cb7dacbfee076a5e61aa39a10da2e956, 6400000000000000000));\n\t\t teams.push(Team(\"Spurs\", 0x183febd8828a9ac6c70c0e27fbf441b93004fc05, 3200000000000000000));\n\t\t teams.push(Team(\"Wizards\", 0xaec539a116fa75e8bdcf016d3c146a25bc1af93b, 3200000000000000000));\n\t\t teams.push(Team(\"Timberwolves\", 0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db, 3200000000000000000));\n\t\t teams.push(Team(\"Pacers\", 0x8e668a4582d0465accf66b4e4ab6d817f6c5b2dc, 3200000000000000000));\n\t\t teams.push(Team(\"Thunder\", 0x7d757e571bd545008a95cd0c48d2bb164faa72e3, 3200000000000000000));\n\t\t teams.push(Team(\"Bucks\", 0x1edb4c7b145cef7e46d5b5c256cedcd5c45f2ece, 3200000000000000000));\n\t\t teams.push(Team(\"Lakers\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 3200000000000000000));\n\t\t teams.push(Team(\"76ers\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 3200000000000000000));\n\t\t teams.push(Team(\"Blazers\", 0x54d6fca0ca37382b01304e6716420538604b447b, 1600000000000000000));\n\t\t teams.push(Team(\"Heat\", 0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db, 3200000000000000000));\n\t\t teams.push(Team(\"Pelicans\", 0x54d6fca0ca37382b01304e6716420538604b447b, 1600000000000000000));\n\t\t teams.push(Team(\"Pistons\", 0x54d6fca0ca37382b01304e6716420538604b447b, 1600000000000000000));\n\t\t teams.push(Team(\"Clippers\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Hornets\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Jazz\", 0x54d6fca0ca37382b01304e6716420538604b447b, 1600000000000000000));\n\t\t teams.push(Team(\"Knicks\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Nuggets\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Bulls\", 0x28d02f67316123dc0293849a0d254ad86b379b34, 3200000000000000000));\n\t\t teams.push(Team(\"Grizzlies\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Nets\", 0x54d6fca0ca37382b01304e6716420538604b447b, 1600000000000000000));\n\t\t teams.push(Team(\"Kings\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Magic\", 0xb87e73ad25086c43a16fe5f9589ff265f8a3a9eb, 3200000000000000000));\n\t\t teams.push(Team(\"Mavericks\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Hawks\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Suns\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t}\n\n    function addPlayer(string name, address address1, uint256 price, uint256 realTeamId) public onlyCeo {\n        players.push(Player(name,address1,price,realTeamId));\n    }\n\n\n\n}", "debug": "storage_0 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n4*storage_3: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_0_+\n87903029871075914254377627908054574944891091886930582284385770809450030037083_+\n4*storage_3: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_0: 0x0\ncaller: 0x0\ncalldata_NBACrypto_0: 0x9b13950400000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addPlayer(string,address,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "addPlayer(string,address,uint256,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 13117, "code": "ntract NBACrypto {\n\n\taddress ceoAddress = 0xD2f0e35EB79789Ea24426233336DDa6b13E2fA1f;\n    address cfoAddress = 0x831a278fF506bf4dAa955359F9c5DA9B9Be18f3A;\n\n\tstruct Team {\n\t\tstring name;\n\t\taddress ownerAddress;\n\t\tuint256 curPrice;\n\t}\n\n  struct Player {\n    string name;\n    address ownerAddress;\n    uint256 curPrice;\n    uint256 realTeamId;\n  }\n\tTeam[] teams;\n  Player[] players;\n\n\tmodifier onlyCeo() {\n        require (msg.sender == ceoAddress);\n        _;\n    }\n\n    bool teamsAreInitiated;\n    bool playersAreInitiated;\n    bool isPaused;\n\n    /*\n    We use the following functions to pause and unpause the game.\n    */\n    function pauseGame() public onlyCeo {\n        isPaused = true;\n    }\n    function unPauseGame() public onlyCeo {\n        isPaused = false;\n    }\n    function GetIsPauded() public view returns(bool) {\n       return(isPaused);\n    }\n\n\n\tfunction purchaseCountry(uint _countryId) public payable {\n\t\trequire(msg.value == teams[_countryId].curPrice);\n\t\trequire(isPaused == false);\n\n\n\t\tuint256 commission5percent = (msg.value / 10);\n\n\n\t\tuint256 commissionOwner = msg.value - commission5percent; // => 95%\n\t\tteams[_countryId].ownerAddress.transfer(commissionOwner);\n\n\n\t\tcfoAddress.transfer(commission5percent);\n\n\t\t// Update the team owner and set the new price\n\t\tteams[_countryId].ownerAddress = msg.sender;\n\t\tteams[_countryId].curPrice = mul(teams[_countryId].curPrice, 2);\n\t}\n\n  function purchasePlayer(uint256 _playerId) public payable {\n    require(msg.value == players[_playerId].curPrice);\n\trequire(isPaused == false);\n\n    // Calculate dev fee\n\t\tuint256 commissionDev = (msg.value / 10);\n\n    //Calculate commision for team owner\n    uint256 commisionTeam = (msg.value / 5);\n\n    uint256 afterDevCut = msg.value - commissionDev;\n\n\n\n\t\t// Calculate the owner commission on this sale & transfer the commission to the owner.\n\t\tuint256 commissionOwner = afterDevCut - commisionTeam; //\n\t\tplayers[_playerId].ownerAddress.transfer(commissionOwner);\n    teams[players[_playerId].realTeamId].ownerAddress.transfer(commisionTeam);\n\n\t\t// Transfer fee to Dev\n\t\tcfoAddress.transfer(commissionDev);\n\n\t\t// Update the team owner and set the new price\n\n\n\t\tplayers[_playerId].ownerAddress = msg.sender;\n\t\tplayers[_playerId].curPrice = mul(players[_playerId].curPrice, 2);\n  }\n\n\t/*\n\tThis function can be used by the owner of a team to modify the price of its team.\n\tHe can make the price smaller than the current price but never bigger.\n\t*/\n\tfunction modifyPriceCountry(uint _teamId, uint256 _newPrice) public {\n\t    require(_newPrice > 0);\n\t    require(teams[_teamId].ownerAddress == msg.sender);\n\t    require(_newPrice < teams[_teamId].curPrice);\n\t    teams[_teamId].curPrice = _newPrice;\n\t}\n\n\t// This function will return all of the details of our teams\n\tfunction getTeam(uint _teamId) public view returns (\n        string name,\n        address ownerAddress,\n        uint256 curPrice\n    ) {\n        Team storage _team = teams[_teamId];\n\n        name = _team.name;\n        ownerAddress = _team.ownerAddress;\n        curPrice = _team.curPrice;\n    }\n\n    function getPlayer(uint _playerId) public view returns (\n          string name,\n          address ownerAddress,\n          uint256 curPrice,\n          uint256 realTeamId\n      ) {\n          Player storage _player = players[_playerId];\n\n          name = _player.name;\n          ownerAddress = _player.ownerAddress;\n          curPrice = _player.curPrice;\n          realTeamId = _player.realTeamId;\n      }\n\n\n    // This function will return only the price of a specific team\n    function getTeamPrice(uint _teamId) public view returns(uint256) {\n        return(teams[_teamId].curPrice);\n    }\n\n    function getPlayerPrice(uint _playerId) public view returns(uint256) {\n        return(players[_playerId].curPrice);\n    }\n\n    // This function will return only the addess of a specific team\n    function getTeamOwner(uint _teamId) public view returns(address) {\n        return(teams[_teamId].ownerAddress);\n    }\n\n    function getPlayerOwner(uint _playerId) public view returns(address) {\n        return(players[_playerId].ownerAddress);\n    }\n\n    /**\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n\t// We run this function once to create all the teams and set the initial price.\n\tfunction InitiateTeams() public onlyCeo {\n\t\t require(teamsAreInitiated == false);\n\t\t teams.push(Team(\"Cavaliers\", 0x54d6fca0ca37382b01304e6716420538604b447b, 6400000000000000000));\n \t\t teams.push(Team(\"Warriors\", 0xc88ddaa37c1fec910670366ae16df2aa5e1124f7, 12800000000000000000));\n \t\t teams.push(Team(\"Celtics\", 0x28d02f67316123dc0293849a0d254ad86b379b34, 6400000000000000000));\n\t\t teams.push(Team(\"Rockets\", 0xc88ddaa37c1fec910670366ae16df2aa5e1124f7, 6400000000000000000));\n\t\t teams.push(Team(\"Raptors\", 0x5c035bb4cb7dacbfee076a5e61aa39a10da2e956, 6400000000000000000));\n\t\t teams.push(Team(\"Spurs\", 0x183febd8828a9ac6c70c0e27fbf441b93004fc05, 3200000000000000000));\n\t\t teams.push(Team(\"Wizards\", 0xaec539a116fa75e8bdcf016d3c146a25bc1af93b, 3200000000000000000));\n\t\t teams.push(Team(\"Timberwolves\", 0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db, 3200000000000000000));\n\t\t teams.push(Team(\"Pacers\", 0x8e668a4582d0465accf66b4e4ab6d817f6c5b2dc, 3200000000000000000));\n\t\t teams.push(Team(\"Thunder\", 0x7d757e571bd545008a95cd0c48d2bb164faa72e3, 3200000000000000000));\n\t\t teams.push(Team(\"Bucks\", 0x1edb4c7b145cef7e46d5b5c256cedcd5c45f2ece, 3200000000000000000));\n\t\t teams.push(Team(\"Lakers\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 3200000000000000000));\n\t\t teams.push(Team(\"76ers\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 3200000000000000000));\n\t\t teams.push(Team(\"Blazers\", 0x54d6fca0ca37382b01304e6716420538604b447b, 1600000000000000000));\n\t\t teams.push(Team(\"Heat\", 0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db, 3200000000000000000));\n\t\t teams.push(Team(\"Pelicans\", 0x54d6fca0ca37382b01304e6716420538604b447b, 1600000000000000000));\n\t\t teams.push(Team(\"Pistons\", 0x54d6fca0ca37382b01304e6716420538604b447b, 1600000000000000000));\n\t\t teams.push(Team(\"Clippers\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Hornets\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Jazz\", 0x54d6fca0ca37382b01304e6716420538604b447b, 1600000000000000000));\n\t\t teams.push(Team(\"Knicks\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Nuggets\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Bulls\", 0x28d02f67316123dc0293849a0d254ad86b379b34, 3200000000000000000));\n\t\t teams.push(Team(\"Grizzlies\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Nets\", 0x54d6fca0ca37382b01304e6716420538604b447b, 1600000000000000000));\n\t\t teams.push(Team(\"Kings\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Magic\", 0xb87e73ad25086c43a16fe5f9589ff265f8a3a9eb, 3200000000000000000));\n\t\t teams.push(Team(\"Mavericks\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Hawks\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Suns\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t}\n\n    function addPlayer(string name, address address1, uint256 price, uint256 realTeamId) public onlyCeo {\n        players.push(Player(name,address1,price,realTeamId));\n    }\n\n\n\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_NBACrypto_4 + calldata_NBACrypto_4)) +\n0: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_NBACrypto_0: 0x9b13950400000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addPlayer(string,address,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "addPlayer(string,address,uint256,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 13131, "code": "ntract NBACrypto {\n\n\taddress ceoAddress = 0xD2f0e35EB79789Ea24426233336DDa6b13E2fA1f;\n    address cfoAddress = 0x831a278fF506bf4dAa955359F9c5DA9B9Be18f3A;\n\n\tstruct Team {\n\t\tstring name;\n\t\taddress ownerAddress;\n\t\tuint256 curPrice;\n\t}\n\n  struct Player {\n    string name;\n    address ownerAddress;\n    uint256 curPrice;\n    uint256 realTeamId;\n  }\n\tTeam[] teams;\n  Player[] players;\n\n\tmodifier onlyCeo() {\n        require (msg.sender == ceoAddress);\n        _;\n    }\n\n    bool teamsAreInitiated;\n    bool playersAreInitiated;\n    bool isPaused;\n\n    /*\n    We use the following functions to pause and unpause the game.\n    */\n    function pauseGame() public onlyCeo {\n        isPaused = true;\n    }\n    function unPauseGame() public onlyCeo {\n        isPaused = false;\n    }\n    function GetIsPauded() public view returns(bool) {\n       return(isPaused);\n    }\n\n\n\tfunction purchaseCountry(uint _countryId) public payable {\n\t\trequire(msg.value == teams[_countryId].curPrice);\n\t\trequire(isPaused == false);\n\n\n\t\tuint256 commission5percent = (msg.value / 10);\n\n\n\t\tuint256 commissionOwner = msg.value - commission5percent; // => 95%\n\t\tteams[_countryId].ownerAddress.transfer(commissionOwner);\n\n\n\t\tcfoAddress.transfer(commission5percent);\n\n\t\t// Update the team owner and set the new price\n\t\tteams[_countryId].ownerAddress = msg.sender;\n\t\tteams[_countryId].curPrice = mul(teams[_countryId].curPrice, 2);\n\t}\n\n  function purchasePlayer(uint256 _playerId) public payable {\n    require(msg.value == players[_playerId].curPrice);\n\trequire(isPaused == false);\n\n    // Calculate dev fee\n\t\tuint256 commissionDev = (msg.value / 10);\n\n    //Calculate commision for team owner\n    uint256 commisionTeam = (msg.value / 5);\n\n    uint256 afterDevCut = msg.value - commissionDev;\n\n\n\n\t\t// Calculate the owner commission on this sale & transfer the commission to the owner.\n\t\tuint256 commissionOwner = afterDevCut - commisionTeam; //\n\t\tplayers[_playerId].ownerAddress.transfer(commissionOwner);\n    teams[players[_playerId].realTeamId].ownerAddress.transfer(commisionTeam);\n\n\t\t// Transfer fee to Dev\n\t\tcfoAddress.transfer(commissionDev);\n\n\t\t// Update the team owner and set the new price\n\n\n\t\tplayers[_playerId].ownerAddress = msg.sender;\n\t\tplayers[_playerId].curPrice = mul(players[_playerId].curPrice, 2);\n  }\n\n\t/*\n\tThis function can be used by the owner of a team to modify the price of its team.\n\tHe can make the price smaller than the current price but never bigger.\n\t*/\n\tfunction modifyPriceCountry(uint _teamId, uint256 _newPrice) public {\n\t    require(_newPrice > 0);\n\t    require(teams[_teamId].ownerAddress == msg.sender);\n\t    require(_newPrice < teams[_teamId].curPrice);\n\t    teams[_teamId].curPrice = _newPrice;\n\t}\n\n\t// This function will return all of the details of our teams\n\tfunction getTeam(uint _teamId) public view returns (\n        string name,\n        address ownerAddress,\n        uint256 curPrice\n    ) {\n        Team storage _team = teams[_teamId];\n\n        name = _team.name;\n        ownerAddress = _team.ownerAddress;\n        curPrice = _team.curPrice;\n    }\n\n    function getPlayer(uint _playerId) public view returns (\n          string name,\n          address ownerAddress,\n          uint256 curPrice,\n          uint256 realTeamId\n      ) {\n          Player storage _player = players[_playerId];\n\n          name = _player.name;\n          ownerAddress = _player.ownerAddress;\n          curPrice = _player.curPrice;\n          realTeamId = _player.realTeamId;\n      }\n\n\n    // This function will return only the price of a specific team\n    function getTeamPrice(uint _teamId) public view returns(uint256) {\n        return(teams[_teamId].curPrice);\n    }\n\n    function getPlayerPrice(uint _playerId) public view returns(uint256) {\n        return(players[_playerId].curPrice);\n    }\n\n    // This function will return only the addess of a specific team\n    function getTeamOwner(uint _teamId) public view returns(address) {\n        return(teams[_teamId].ownerAddress);\n    }\n\n    function getPlayerOwner(uint _playerId) public view returns(address) {\n        return(players[_playerId].ownerAddress);\n    }\n\n    /**\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n\t// We run this function once to create all the teams and set the initial price.\n\tfunction InitiateTeams() public onlyCeo {\n\t\t require(teamsAreInitiated == false);\n\t\t teams.push(Team(\"Cavaliers\", 0x54d6fca0ca37382b01304e6716420538604b447b, 6400000000000000000));\n \t\t teams.push(Team(\"Warriors\", 0xc88ddaa37c1fec910670366ae16df2aa5e1124f7, 12800000000000000000));\n \t\t teams.push(Team(\"Celtics\", 0x28d02f67316123dc0293849a0d254ad86b379b34, 6400000000000000000));\n\t\t teams.push(Team(\"Rockets\", 0xc88ddaa37c1fec910670366ae16df2aa5e1124f7, 6400000000000000000));\n\t\t teams.push(Team(\"Raptors\", 0x5c035bb4cb7dacbfee076a5e61aa39a10da2e956, 6400000000000000000));\n\t\t teams.push(Team(\"Spurs\", 0x183febd8828a9ac6c70c0e27fbf441b93004fc05, 3200000000000000000));\n\t\t teams.push(Team(\"Wizards\", 0xaec539a116fa75e8bdcf016d3c146a25bc1af93b, 3200000000000000000));\n\t\t teams.push(Team(\"Timberwolves\", 0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db, 3200000000000000000));\n\t\t teams.push(Team(\"Pacers\", 0x8e668a4582d0465accf66b4e4ab6d817f6c5b2dc, 3200000000000000000));\n\t\t teams.push(Team(\"Thunder\", 0x7d757e571bd545008a95cd0c48d2bb164faa72e3, 3200000000000000000));\n\t\t teams.push(Team(\"Bucks\", 0x1edb4c7b145cef7e46d5b5c256cedcd5c45f2ece, 3200000000000000000));\n\t\t teams.push(Team(\"Lakers\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 3200000000000000000));\n\t\t teams.push(Team(\"76ers\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 3200000000000000000));\n\t\t teams.push(Team(\"Blazers\", 0x54d6fca0ca37382b01304e6716420538604b447b, 1600000000000000000));\n\t\t teams.push(Team(\"Heat\", 0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db, 3200000000000000000));\n\t\t teams.push(Team(\"Pelicans\", 0x54d6fca0ca37382b01304e6716420538604b447b, 1600000000000000000));\n\t\t teams.push(Team(\"Pistons\", 0x54d6fca0ca37382b01304e6716420538604b447b, 1600000000000000000));\n\t\t teams.push(Team(\"Clippers\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Hornets\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Jazz\", 0x54d6fca0ca37382b01304e6716420538604b447b, 1600000000000000000));\n\t\t teams.push(Team(\"Knicks\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Nuggets\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Bulls\", 0x28d02f67316123dc0293849a0d254ad86b379b34, 3200000000000000000));\n\t\t teams.push(Team(\"Grizzlies\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Nets\", 0x54d6fca0ca37382b01304e6716420538604b447b, 1600000000000000000));\n\t\t teams.push(Team(\"Kings\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Magic\", 0xb87e73ad25086c43a16fe5f9589ff265f8a3a9eb, 3200000000000000000));\n\t\t teams.push(Team(\"Mavericks\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Hawks\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t\t teams.push(Team(\"Suns\", 0x7ec915b8d3ffee3deaae5aa90def8ad826d2e110, 3200000000000000000));\n\t}\n\n    function addPlayer(string name, address address1, uint256 price, uint256 realTeamId) public onlyCeo {\n        players.push(Player(name,address1,price,realTeamId));\n    }\n\n\n\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_NBACrypto_4 + calldata_NBACrypto_4)) +\n0: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_NBACrypto_4 + calldata_NBACrypto_4)) +\n0: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nstorage_0: 0x0\ncaller: 0x0\ncalldata_NBACrypto_0: 0x9b13950400000000000000000000000000000000000000000000000000000000\ncalldatasize_NBACrypto: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addPlayer(string,address,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0x01293cd77f68341635814c35299ed30ae212789e.sol", "function": "addPlayer(string,address,uint256,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}