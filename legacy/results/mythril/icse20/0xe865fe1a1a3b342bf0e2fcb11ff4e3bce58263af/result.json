{
  "contract": "0xe865fe1a1a3b342bf0e2fcb11ff4e3bce58263af",
  "tool": "mythril",
  "start": 1563541904.1351688,
  "end": 1563542192.5272186,
  "duration": 288.3920497894287,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 560,
        "code": "ey The key for the record\n    function setInt(bytes32 _key, int _value) onlyAuthBy0racle external {\n        intStorage",
        "debug": "calldata_Zer0netDb_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Zer0netDb_0: 0x2e28d08400000000000000000000000000000000000000000000000000000000\ncalldatasize_Zer0netDb: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setBytes(bytes32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xe865fe1a1a3b342bf0e2fcb11ff4e3bce58263af.sol",
        "function": "setBytes(bytes32,bytes)",
        "lineno": 140,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 566,
        "code": "ey The key for the record\n    function setInt(bytes32 _key, int _value) onlyAuthBy0racle external {\n        intStorage",
        "debug": "calldata_Zer0netDb_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_Zer0netDb_0: 0x2e28d08400000000000000000000000000000000000000000000000000000000\ncalldatasize_Zer0netDb: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setBytes(bytes32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xe865fe1a1a3b342bf0e2fcb11ff4e3bce58263af.sol",
        "function": "setBytes(bytes32,bytes)",
        "lineno": 140,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 741,
        "code": "key for the record\n    function setUint(bytes32 _key, uint _value) onlyAuthBy0racle external {\n        uIntStorage[_key] ",
        "debug": "calldata_Zer0netDb_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Zer0netDb_0: 0x6e89955000000000000000000000000000000000000000000000000000000000\ncalldatasize_Zer0netDb: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setString(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xe865fe1a1a3b342bf0e2fcb11ff4e3bce58263af.sol",
        "function": "setString(bytes32,string)",
        "lineno": 150,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 747,
        "code": "key for the record\n    function setUint(bytes32 _key, uint _value) onlyAuthBy0racle external {\n        uIntStorage[_key] ",
        "debug": "calldata_Zer0netDb_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_Zer0netDb_0: 0x6e89955000000000000000000000000000000000000000000000000000000000\ncalldatasize_Zer0netDb: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setString(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xe865fe1a1a3b342bf0e2fcb11ff4e3bce58263af.sol",
        "function": "setString(bytes32,string)",
        "lineno": 150,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8364,
        "code": "rage types. */\n    mapping(bytes32 => address)    private addressStorage;\n    mapping(bytes32 => bool)       private boolStorage;\n    mapping(bytes32 => bytes)      private bytesStorage;\n    mapping(bytes32 => int256)     private intStorage;\n    mapping(bytes32 => string)     private stringStorage;\n    mapping(bytes32 => uint256)    private uIntStorage;\n\n    /**\n     * @dev Only allow access from the latest version of an 0racle contract\n     *      within the Zer0net after deployment.\n     */\n    modifier onlyAuthBy0racle() {\n        /***********************************************************************\n         * The owner is only allowed to set the authorized contracts upon\n         * deployment, to register the initial contracts, afterwards their\n         * direct access is permanently disabled.\n         */\n        if (msg.sender == owner) {\n            /* Verify owner's write access has not already been disabled. */\n            require(boolStorage[keccak256('owner.auth.disabled')] != true);\n        } else {\n            /* Verify write access is only permitted to authorized accounts. */\n            require(boolStorage[keccak256(msg.sender, '.has.auth')] == true);\n        }\n\n        _;      // function code is inserted here\n    }\n\n    /***************************************************************************\n     * Initialize all getter methods.\n     */\n\n    /// @param _key The key for the record\n    function getAddress(bytes32 _key) external view returns (address) {\n        return addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBool(bytes32 _key) external view returns (bool) {\n        return boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBytes(bytes32 _key) external view returns (bytes) {\n        return bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getInt(bytes32 _key) external view returns (int) {\n        return intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getString(bytes32 _key) external view returns (string) {\n        return stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getUint(bytes32 _key) external view returns (uint) {\n        return uIntStorage[_key];\n    }\n\n\n    /***************************************************************************\n     * Initialize all setter methods.\n     */\n\n    /// @param _key The key for the record\n    function setAddress(bytes32 _key, address _value) onlyAuthBy0racle external {\n        addressStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBool(bytes32 _key, bool _value) onlyAuthBy0racle external {\n        boolStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBytes(bytes32 _key, bytes _value) onlyAuthBy0racle external {\n        bytesStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setInt(bytes32 _key, int _value) onlyAuthBy0racle external {\n        intStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setString(bytes32 _key, string _value) onlyAuthBy0racle external {\n        stringStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setUint(bytes32 _key, uint _value) onlyAuthBy0racle external {\n        uIntStorage[_key] = _value;\n    }\n\n\n    /***************************************************************************\n     * Initialize all delete methods.\n     */\n\n    /// @param _key The key for the record\n    function deleteAddress(bytes32 _key) onlyAuthBy0racle external {\n        delete addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBool(bytes32 _key) onlyAuthBy0racle external {\n        delete boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBytes(bytes32 _key) onlyAuthBy0racle external {\n        delete bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteInt(bytes32 _key) onlyAuthBy0racle external {\n        delete intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteString(bytes32 _key) onlyAuthBy0racle external {\n        delete stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteUint(bytes32 _key) onlyAuthBy0racle external {\n        delete uIntStorage[_key];\n    }\n}",
        "debug": "keccac_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_Zer0netDb_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_Zer0netDb_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_33430822285158224496757015117170781007021272409730258710593228820255070428082: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Zer0netDb_0: 0x2e28d08400000000000000000000000000000000000000000000000000000000\ncalldatasize_Zer0netDb: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setBytes(bytes32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xe865fe1a1a3b342bf0e2fcb11ff4e3bce58263af.sol",
        "function": "setBytes(bytes32,bytes)",
        "lineno": 57,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8393,
        "code": "rage types. */\n    mapping(bytes32 => address)    private addressStorage;\n    mapping(bytes32 => bool)       private boolStorage;\n    mapping(bytes32 => bytes)      private bytesStorage;\n    mapping(bytes32 => int256)     private intStorage;\n    mapping(bytes32 => string)     private stringStorage;\n    mapping(bytes32 => uint256)    private uIntStorage;\n\n    /**\n     * @dev Only allow access from the latest version of an 0racle contract\n     *      within the Zer0net after deployment.\n     */\n    modifier onlyAuthBy0racle() {\n        /***********************************************************************\n         * The owner is only allowed to set the authorized contracts upon\n         * deployment, to register the initial contracts, afterwards their\n         * direct access is permanently disabled.\n         */\n        if (msg.sender == owner) {\n            /* Verify owner's write access has not already been disabled. */\n            require(boolStorage[keccak256('owner.auth.disabled')] != true);\n        } else {\n            /* Verify write access is only permitted to authorized accounts. */\n            require(boolStorage[keccak256(msg.sender, '.has.auth')] == true);\n        }\n\n        _;      // function code is inserted here\n    }\n\n    /***************************************************************************\n     * Initialize all getter methods.\n     */\n\n    /// @param _key The key for the record\n    function getAddress(bytes32 _key) external view returns (address) {\n        return addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBool(bytes32 _key) external view returns (bool) {\n        return boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBytes(bytes32 _key) external view returns (bytes) {\n        return bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getInt(bytes32 _key) external view returns (int) {\n        return intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getString(bytes32 _key) external view returns (string) {\n        return stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getUint(bytes32 _key) external view returns (uint) {\n        return uIntStorage[_key];\n    }\n\n\n    /***************************************************************************\n     * Initialize all setter methods.\n     */\n\n    /// @param _key The key for the record\n    function setAddress(bytes32 _key, address _value) onlyAuthBy0racle external {\n        addressStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBool(bytes32 _key, bool _value) onlyAuthBy0racle external {\n        boolStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBytes(bytes32 _key, bytes _value) onlyAuthBy0racle external {\n        bytesStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setInt(bytes32 _key, int _value) onlyAuthBy0racle external {\n        intStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setString(bytes32 _key, string _value) onlyAuthBy0racle external {\n        stringStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setUint(bytes32 _key, uint _value) onlyAuthBy0racle external {\n        uIntStorage[_key] = _value;\n    }\n\n\n    /***************************************************************************\n     * Initialize all delete methods.\n     */\n\n    /// @param _key The key for the record\n    function deleteAddress(bytes32 _key) onlyAuthBy0racle external {\n        delete addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBool(bytes32 _key) onlyAuthBy0racle external {\n        delete boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBytes(bytes32 _key) onlyAuthBy0racle external {\n        delete bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteInt(bytes32 _key) onlyAuthBy0racle external {\n        delete intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteString(bytes32 _key) onlyAuthBy0racle external {\n        delete stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteUint(bytes32 _key) onlyAuthBy0racle external {\n        delete uIntStorage[_key];\n    }\n}",
        "debug": "calldata_Zer0netDb_4 + calldata_Zer0netDb_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_33430822285158224496757015117170781007021272409730258710593228820255070428082: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Zer0netDb_0: 0x2e28d08400000000000000000000000000000000000000000000000000000000\ncalldatasize_Zer0netDb: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setBytes(bytes32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xe865fe1a1a3b342bf0e2fcb11ff4e3bce58263af.sol",
        "function": "setBytes(bytes32,bytes)",
        "lineno": 57,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8407,
        "code": "rage types. */\n    mapping(bytes32 => address)    private addressStorage;\n    mapping(bytes32 => bool)       private boolStorage;\n    mapping(bytes32 => bytes)      private bytesStorage;\n    mapping(bytes32 => int256)     private intStorage;\n    mapping(bytes32 => string)     private stringStorage;\n    mapping(bytes32 => uint256)    private uIntStorage;\n\n    /**\n     * @dev Only allow access from the latest version of an 0racle contract\n     *      within the Zer0net after deployment.\n     */\n    modifier onlyAuthBy0racle() {\n        /***********************************************************************\n         * The owner is only allowed to set the authorized contracts upon\n         * deployment, to register the initial contracts, afterwards their\n         * direct access is permanently disabled.\n         */\n        if (msg.sender == owner) {\n            /* Verify owner's write access has not already been disabled. */\n            require(boolStorage[keccak256('owner.auth.disabled')] != true);\n        } else {\n            /* Verify write access is only permitted to authorized accounts. */\n            require(boolStorage[keccak256(msg.sender, '.has.auth')] == true);\n        }\n\n        _;      // function code is inserted here\n    }\n\n    /***************************************************************************\n     * Initialize all getter methods.\n     */\n\n    /// @param _key The key for the record\n    function getAddress(bytes32 _key) external view returns (address) {\n        return addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBool(bytes32 _key) external view returns (bool) {\n        return boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBytes(bytes32 _key) external view returns (bytes) {\n        return bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getInt(bytes32 _key) external view returns (int) {\n        return intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getString(bytes32 _key) external view returns (string) {\n        return stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getUint(bytes32 _key) external view returns (uint) {\n        return uIntStorage[_key];\n    }\n\n\n    /***************************************************************************\n     * Initialize all setter methods.\n     */\n\n    /// @param _key The key for the record\n    function setAddress(bytes32 _key, address _value) onlyAuthBy0racle external {\n        addressStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBool(bytes32 _key, bool _value) onlyAuthBy0racle external {\n        boolStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBytes(bytes32 _key, bytes _value) onlyAuthBy0racle external {\n        bytesStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setInt(bytes32 _key, int _value) onlyAuthBy0racle external {\n        intStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setString(bytes32 _key, string _value) onlyAuthBy0racle external {\n        stringStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setUint(bytes32 _key, uint _value) onlyAuthBy0racle external {\n        uIntStorage[_key] = _value;\n    }\n\n\n    /***************************************************************************\n     * Initialize all delete methods.\n     */\n\n    /// @param _key The key for the record\n    function deleteAddress(bytes32 _key) onlyAuthBy0racle external {\n        delete addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBool(bytes32 _key) onlyAuthBy0racle external {\n        delete boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBytes(bytes32 _key) onlyAuthBy0racle external {\n        delete bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteInt(bytes32 _key) onlyAuthBy0racle external {\n        delete intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteString(bytes32 _key) onlyAuthBy0racle external {\n        delete stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteUint(bytes32 _key) onlyAuthBy0racle external {\n        delete uIntStorage[_key];\n    }\n}",
        "debug": "calldata_Zer0netDb_32 + 4: 0xda439b2041c8c00602000000000000000000000000000000000000000000001a\ncalldata_Zer0netDb_4 + calldata_Zer0netDb_32 + 4: 0x98b80124e0c0001a297fffffffffffffffffffffffffffffffffffffffffffc4\nstorage_33430822285158224496757015117170781007021272409730258710593228820255070428082: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Zer0netDb_0: 0x2e28d08400000000000000000000000000000000000000000000000000000000\ncalldatasize_Zer0netDb: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setBytes(bytes32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xe865fe1a1a3b342bf0e2fcb11ff4e3bce58263af.sol",
        "function": "setBytes(bytes32,bytes)",
        "lineno": 57,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8424,
        "code": "rage types. */\n    mapping(bytes32 => address)    private addressStorage;\n    mapping(bytes32 => bool)       private boolStorage;\n    mapping(bytes32 => bytes)      private bytesStorage;\n    mapping(bytes32 => int256)     private intStorage;\n    mapping(bytes32 => string)     private stringStorage;\n    mapping(bytes32 => uint256)    private uIntStorage;\n\n    /**\n     * @dev Only allow access from the latest version of an 0racle contract\n     *      within the Zer0net after deployment.\n     */\n    modifier onlyAuthBy0racle() {\n        /***********************************************************************\n         * The owner is only allowed to set the authorized contracts upon\n         * deployment, to register the initial contracts, afterwards their\n         * direct access is permanently disabled.\n         */\n        if (msg.sender == owner) {\n            /* Verify owner's write access has not already been disabled. */\n            require(boolStorage[keccak256('owner.auth.disabled')] != true);\n        } else {\n            /* Verify write access is only permitted to authorized accounts. */\n            require(boolStorage[keccak256(msg.sender, '.has.auth')] == true);\n        }\n\n        _;      // function code is inserted here\n    }\n\n    /***************************************************************************\n     * Initialize all getter methods.\n     */\n\n    /// @param _key The key for the record\n    function getAddress(bytes32 _key) external view returns (address) {\n        return addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBool(bytes32 _key) external view returns (bool) {\n        return boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBytes(bytes32 _key) external view returns (bytes) {\n        return bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getInt(bytes32 _key) external view returns (int) {\n        return intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getString(bytes32 _key) external view returns (string) {\n        return stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getUint(bytes32 _key) external view returns (uint) {\n        return uIntStorage[_key];\n    }\n\n\n    /***************************************************************************\n     * Initialize all setter methods.\n     */\n\n    /// @param _key The key for the record\n    function setAddress(bytes32 _key, address _value) onlyAuthBy0racle external {\n        addressStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBool(bytes32 _key, bool _value) onlyAuthBy0racle external {\n        boolStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBytes(bytes32 _key, bytes _value) onlyAuthBy0racle external {\n        bytesStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setInt(bytes32 _key, int _value) onlyAuthBy0racle external {\n        intStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setString(bytes32 _key, string _value) onlyAuthBy0racle external {\n        stringStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setUint(bytes32 _key, uint _value) onlyAuthBy0racle external {\n        uIntStorage[_key] = _value;\n    }\n\n\n    /***************************************************************************\n     * Initialize all delete methods.\n     */\n\n    /// @param _key The key for the record\n    function deleteAddress(bytes32 _key) onlyAuthBy0racle external {\n        delete addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBool(bytes32 _key) onlyAuthBy0racle external {\n        delete boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBytes(bytes32 _key) onlyAuthBy0racle external {\n        delete bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteInt(bytes32 _key) onlyAuthBy0racle external {\n        delete intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteString(bytes32 _key) onlyAuthBy0racle external {\n        delete stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteUint(bytes32 _key) onlyAuthBy0racle external {\n        delete uIntStorage[_key];\n    }\n}",
        "debug": "calldata_Zer0netDb_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c\ncalldata_Zer0netDb_4 + calldata_Zer0netDb_32 + 4: 0x21\nstorage_33430822285158224496757015117170781007021272409730258710593228820255070428082: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Zer0netDb_0: 0x2e28d08400000000000000000000000000000000000000000000000000000000\ncalldatasize_Zer0netDb: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setBytes(bytes32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xe865fe1a1a3b342bf0e2fcb11ff4e3bce58263af.sol",
        "function": "setBytes(bytes32,bytes)",
        "lineno": 57,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8429,
        "code": "rage types. */\n    mapping(bytes32 => address)    private addressStorage;\n    mapping(bytes32 => bool)       private boolStorage;\n    mapping(bytes32 => bytes)      private bytesStorage;\n    mapping(bytes32 => int256)     private intStorage;\n    mapping(bytes32 => string)     private stringStorage;\n    mapping(bytes32 => uint256)    private uIntStorage;\n\n    /**\n     * @dev Only allow access from the latest version of an 0racle contract\n     *      within the Zer0net after deployment.\n     */\n    modifier onlyAuthBy0racle() {\n        /***********************************************************************\n         * The owner is only allowed to set the authorized contracts upon\n         * deployment, to register the initial contracts, afterwards their\n         * direct access is permanently disabled.\n         */\n        if (msg.sender == owner) {\n            /* Verify owner's write access has not already been disabled. */\n            require(boolStorage[keccak256('owner.auth.disabled')] != true);\n        } else {\n            /* Verify write access is only permitted to authorized accounts. */\n            require(boolStorage[keccak256(msg.sender, '.has.auth')] == true);\n        }\n\n        _;      // function code is inserted here\n    }\n\n    /***************************************************************************\n     * Initialize all getter methods.\n     */\n\n    /// @param _key The key for the record\n    function getAddress(bytes32 _key) external view returns (address) {\n        return addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBool(bytes32 _key) external view returns (bool) {\n        return boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBytes(bytes32 _key) external view returns (bytes) {\n        return bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getInt(bytes32 _key) external view returns (int) {\n        return intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getString(bytes32 _key) external view returns (string) {\n        return stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getUint(bytes32 _key) external view returns (uint) {\n        return uIntStorage[_key];\n    }\n\n\n    /***************************************************************************\n     * Initialize all setter methods.\n     */\n\n    /// @param _key The key for the record\n    function setAddress(bytes32 _key, address _value) onlyAuthBy0racle external {\n        addressStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBool(bytes32 _key, bool _value) onlyAuthBy0racle external {\n        boolStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBytes(bytes32 _key, bytes _value) onlyAuthBy0racle external {\n        bytesStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setInt(bytes32 _key, int _value) onlyAuthBy0racle external {\n        intStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setString(bytes32 _key, string _value) onlyAuthBy0racle external {\n        stringStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setUint(bytes32 _key, uint _value) onlyAuthBy0racle external {\n        uIntStorage[_key] = _value;\n    }\n\n\n    /***************************************************************************\n     * Initialize all delete methods.\n     */\n\n    /// @param _key The key for the record\n    function deleteAddress(bytes32 _key) onlyAuthBy0racle external {\n        delete addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBool(bytes32 _key) onlyAuthBy0racle external {\n        delete boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBytes(bytes32 _key) onlyAuthBy0racle external {\n        delete bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteInt(bytes32 _key) onlyAuthBy0racle external {\n        delete intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteString(bytes32 _key) onlyAuthBy0racle external {\n        delete stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteUint(bytes32 _key) onlyAuthBy0racle external {\n        delete uIntStorage[_key];\n    }\n}",
        "debug": "calldata_Zer0netDb_32 + 4: 0x8638cebc3ef479b69080227bf800000000000006ebdfb9c10e3eff4826476bf\ncalldata_Zer0netDb_4 + calldata_Zer0netDb_32 + 4: 0x987c2551f8080d0a0016240787c0618800000000002903c3e006100b780cc80d\nkeccac_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_Zer0netDb_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_33430822285158224496757015117170781007021272409730258710593228820255070428082: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Zer0netDb_0: 0x2e28d08400000000000000000000000000000000000000000000000000000000\ncalldatasize_Zer0netDb: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setBytes(bytes32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xe865fe1a1a3b342bf0e2fcb11ff4e3bce58263af.sol",
        "function": "setBytes(bytes32,bytes)",
        "lineno": 57,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8510,
        "code": "rage types. */\n    mapping(bytes32 => address)    private addressStorage;\n    mapping(bytes32 => bool)       private boolStorage;\n    mapping(bytes32 => bytes)      private bytesStorage;\n    mapping(bytes32 => int256)     private intStorage;\n    mapping(bytes32 => string)     private stringStorage;\n    mapping(bytes32 => uint256)    private uIntStorage;\n\n    /**\n     * @dev Only allow access from the latest version of an 0racle contract\n     *      within the Zer0net after deployment.\n     */\n    modifier onlyAuthBy0racle() {\n        /***********************************************************************\n         * The owner is only allowed to set the authorized contracts upon\n         * deployment, to register the initial contracts, afterwards their\n         * direct access is permanently disabled.\n         */\n        if (msg.sender == owner) {\n            /* Verify owner's write access has not already been disabled. */\n            require(boolStorage[keccak256('owner.auth.disabled')] != true);\n        } else {\n            /* Verify write access is only permitted to authorized accounts. */\n            require(boolStorage[keccak256(msg.sender, '.has.auth')] == true);\n        }\n\n        _;      // function code is inserted here\n    }\n\n    /***************************************************************************\n     * Initialize all getter methods.\n     */\n\n    /// @param _key The key for the record\n    function getAddress(bytes32 _key) external view returns (address) {\n        return addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBool(bytes32 _key) external view returns (bool) {\n        return boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBytes(bytes32 _key) external view returns (bytes) {\n        return bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getInt(bytes32 _key) external view returns (int) {\n        return intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getString(bytes32 _key) external view returns (string) {\n        return stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getUint(bytes32 _key) external view returns (uint) {\n        return uIntStorage[_key];\n    }\n\n\n    /***************************************************************************\n     * Initialize all setter methods.\n     */\n\n    /// @param _key The key for the record\n    function setAddress(bytes32 _key, address _value) onlyAuthBy0racle external {\n        addressStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBool(bytes32 _key, bool _value) onlyAuthBy0racle external {\n        boolStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBytes(bytes32 _key, bytes _value) onlyAuthBy0racle external {\n        bytesStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setInt(bytes32 _key, int _value) onlyAuthBy0racle external {\n        intStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setString(bytes32 _key, string _value) onlyAuthBy0racle external {\n        stringStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setUint(bytes32 _key, uint _value) onlyAuthBy0racle external {\n        uIntStorage[_key] = _value;\n    }\n\n\n    /***************************************************************************\n     * Initialize all delete methods.\n     */\n\n    /// @param _key The key for the record\n    function deleteAddress(bytes32 _key) onlyAuthBy0racle external {\n        delete addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBool(bytes32 _key) onlyAuthBy0racle external {\n        delete boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBytes(bytes32 _key) onlyAuthBy0racle external {\n        delete bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteInt(bytes32 _key) onlyAuthBy0racle external {\n        delete intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteString(bytes32 _key) onlyAuthBy0racle external {\n        delete stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteUint(bytes32 _key) onlyAuthBy0racle external {\n        delete uIntStorage[_key];\n    }\n}",
        "debug": "storage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_Zer0netDb_4: 0xbe806f1fb9a91febe830a18c9b68af7fd7defe83d2ebeeebc7db7ebfffffffc1\nkeccac_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_Zer0netDb_4: 0xfedf99ff7ffff7ffcfffffffffefffbffe7fffffff5f3fffffc069feffffc800\nstorage_33430822285158224496757015117170781007021272409730258710593228820255070428082: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Zer0netDb_0: 0x616b59f600000000000000000000000000000000000000000000000000000000\ncalldatasize_Zer0netDb: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `deleteBytes(bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xe865fe1a1a3b342bf0e2fcb11ff4e3bce58263af.sol",
        "function": "deleteBytes(bytes32)",
        "lineno": 57,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8564,
        "code": "rage types. */\n    mapping(bytes32 => address)    private addressStorage;\n    mapping(bytes32 => bool)       private boolStorage;\n    mapping(bytes32 => bytes)      private bytesStorage;\n    mapping(bytes32 => int256)     private intStorage;\n    mapping(bytes32 => string)     private stringStorage;\n    mapping(bytes32 => uint256)    private uIntStorage;\n\n    /**\n     * @dev Only allow access from the latest version of an 0racle contract\n     *      within the Zer0net after deployment.\n     */\n    modifier onlyAuthBy0racle() {\n        /***********************************************************************\n         * The owner is only allowed to set the authorized contracts upon\n         * deployment, to register the initial contracts, afterwards their\n         * direct access is permanently disabled.\n         */\n        if (msg.sender == owner) {\n            /* Verify owner's write access has not already been disabled. */\n            require(boolStorage[keccak256('owner.auth.disabled')] != true);\n        } else {\n            /* Verify write access is only permitted to authorized accounts. */\n            require(boolStorage[keccak256(msg.sender, '.has.auth')] == true);\n        }\n\n        _;      // function code is inserted here\n    }\n\n    /***************************************************************************\n     * Initialize all getter methods.\n     */\n\n    /// @param _key The key for the record\n    function getAddress(bytes32 _key) external view returns (address) {\n        return addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBool(bytes32 _key) external view returns (bool) {\n        return boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBytes(bytes32 _key) external view returns (bytes) {\n        return bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getInt(bytes32 _key) external view returns (int) {\n        return intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getString(bytes32 _key) external view returns (string) {\n        return stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getUint(bytes32 _key) external view returns (uint) {\n        return uIntStorage[_key];\n    }\n\n\n    /***************************************************************************\n     * Initialize all setter methods.\n     */\n\n    /// @param _key The key for the record\n    function setAddress(bytes32 _key, address _value) onlyAuthBy0racle external {\n        addressStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBool(bytes32 _key, bool _value) onlyAuthBy0racle external {\n        boolStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBytes(bytes32 _key, bytes _value) onlyAuthBy0racle external {\n        bytesStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setInt(bytes32 _key, int _value) onlyAuthBy0racle external {\n        intStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setString(bytes32 _key, string _value) onlyAuthBy0racle external {\n        stringStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setUint(bytes32 _key, uint _value) onlyAuthBy0racle external {\n        uIntStorage[_key] = _value;\n    }\n\n\n    /***************************************************************************\n     * Initialize all delete methods.\n     */\n\n    /// @param _key The key for the record\n    function deleteAddress(bytes32 _key) onlyAuthBy0racle external {\n        delete addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBool(bytes32 _key) onlyAuthBy0racle external {\n        delete boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBytes(bytes32 _key) onlyAuthBy0racle external {\n        delete bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteInt(bytes32 _key) onlyAuthBy0racle external {\n        delete intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteString(bytes32 _key) onlyAuthBy0racle external {\n        delete stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteUint(bytes32 _key) onlyAuthBy0racle external {\n        delete uIntStorage[_key];\n    }\n}",
        "debug": "keccac_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_Zer0netDb_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_Zer0netDb_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_33430822285158224496757015117170781007021272409730258710593228820255070428082: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Zer0netDb_0: 0x6e89955000000000000000000000000000000000000000000000000000000000\ncalldatasize_Zer0netDb: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setString(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xe865fe1a1a3b342bf0e2fcb11ff4e3bce58263af.sol",
        "function": "setString(bytes32,string)",
        "lineno": 57,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8593,
        "code": "rage types. */\n    mapping(bytes32 => address)    private addressStorage;\n    mapping(bytes32 => bool)       private boolStorage;\n    mapping(bytes32 => bytes)      private bytesStorage;\n    mapping(bytes32 => int256)     private intStorage;\n    mapping(bytes32 => string)     private stringStorage;\n    mapping(bytes32 => uint256)    private uIntStorage;\n\n    /**\n     * @dev Only allow access from the latest version of an 0racle contract\n     *      within the Zer0net after deployment.\n     */\n    modifier onlyAuthBy0racle() {\n        /***********************************************************************\n         * The owner is only allowed to set the authorized contracts upon\n         * deployment, to register the initial contracts, afterwards their\n         * direct access is permanently disabled.\n         */\n        if (msg.sender == owner) {\n            /* Verify owner's write access has not already been disabled. */\n            require(boolStorage[keccak256('owner.auth.disabled')] != true);\n        } else {\n            /* Verify write access is only permitted to authorized accounts. */\n            require(boolStorage[keccak256(msg.sender, '.has.auth')] == true);\n        }\n\n        _;      // function code is inserted here\n    }\n\n    /***************************************************************************\n     * Initialize all getter methods.\n     */\n\n    /// @param _key The key for the record\n    function getAddress(bytes32 _key) external view returns (address) {\n        return addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBool(bytes32 _key) external view returns (bool) {\n        return boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBytes(bytes32 _key) external view returns (bytes) {\n        return bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getInt(bytes32 _key) external view returns (int) {\n        return intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getString(bytes32 _key) external view returns (string) {\n        return stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getUint(bytes32 _key) external view returns (uint) {\n        return uIntStorage[_key];\n    }\n\n\n    /***************************************************************************\n     * Initialize all setter methods.\n     */\n\n    /// @param _key The key for the record\n    function setAddress(bytes32 _key, address _value) onlyAuthBy0racle external {\n        addressStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBool(bytes32 _key, bool _value) onlyAuthBy0racle external {\n        boolStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBytes(bytes32 _key, bytes _value) onlyAuthBy0racle external {\n        bytesStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setInt(bytes32 _key, int _value) onlyAuthBy0racle external {\n        intStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setString(bytes32 _key, string _value) onlyAuthBy0racle external {\n        stringStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setUint(bytes32 _key, uint _value) onlyAuthBy0racle external {\n        uIntStorage[_key] = _value;\n    }\n\n\n    /***************************************************************************\n     * Initialize all delete methods.\n     */\n\n    /// @param _key The key for the record\n    function deleteAddress(bytes32 _key) onlyAuthBy0racle external {\n        delete addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBool(bytes32 _key) onlyAuthBy0racle external {\n        delete boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBytes(bytes32 _key) onlyAuthBy0racle external {\n        delete bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteInt(bytes32 _key) onlyAuthBy0racle external {\n        delete intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteString(bytes32 _key) onlyAuthBy0racle external {\n        delete stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteUint(bytes32 _key) onlyAuthBy0racle external {\n        delete uIntStorage[_key];\n    }\n}",
        "debug": "calldata_Zer0netDb_4 + calldata_Zer0netDb_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_33430822285158224496757015117170781007021272409730258710593228820255070428082: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Zer0netDb_0: 0x6e89955000000000000000000000000000000000000000000000000000000000\ncalldatasize_Zer0netDb: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setString(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xe865fe1a1a3b342bf0e2fcb11ff4e3bce58263af.sol",
        "function": "setString(bytes32,string)",
        "lineno": 57,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8607,
        "code": "rage types. */\n    mapping(bytes32 => address)    private addressStorage;\n    mapping(bytes32 => bool)       private boolStorage;\n    mapping(bytes32 => bytes)      private bytesStorage;\n    mapping(bytes32 => int256)     private intStorage;\n    mapping(bytes32 => string)     private stringStorage;\n    mapping(bytes32 => uint256)    private uIntStorage;\n\n    /**\n     * @dev Only allow access from the latest version of an 0racle contract\n     *      within the Zer0net after deployment.\n     */\n    modifier onlyAuthBy0racle() {\n        /***********************************************************************\n         * The owner is only allowed to set the authorized contracts upon\n         * deployment, to register the initial contracts, afterwards their\n         * direct access is permanently disabled.\n         */\n        if (msg.sender == owner) {\n            /* Verify owner's write access has not already been disabled. */\n            require(boolStorage[keccak256('owner.auth.disabled')] != true);\n        } else {\n            /* Verify write access is only permitted to authorized accounts. */\n            require(boolStorage[keccak256(msg.sender, '.has.auth')] == true);\n        }\n\n        _;      // function code is inserted here\n    }\n\n    /***************************************************************************\n     * Initialize all getter methods.\n     */\n\n    /// @param _key The key for the record\n    function getAddress(bytes32 _key) external view returns (address) {\n        return addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBool(bytes32 _key) external view returns (bool) {\n        return boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBytes(bytes32 _key) external view returns (bytes) {\n        return bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getInt(bytes32 _key) external view returns (int) {\n        return intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getString(bytes32 _key) external view returns (string) {\n        return stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getUint(bytes32 _key) external view returns (uint) {\n        return uIntStorage[_key];\n    }\n\n\n    /***************************************************************************\n     * Initialize all setter methods.\n     */\n\n    /// @param _key The key for the record\n    function setAddress(bytes32 _key, address _value) onlyAuthBy0racle external {\n        addressStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBool(bytes32 _key, bool _value) onlyAuthBy0racle external {\n        boolStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBytes(bytes32 _key, bytes _value) onlyAuthBy0racle external {\n        bytesStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setInt(bytes32 _key, int _value) onlyAuthBy0racle external {\n        intStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setString(bytes32 _key, string _value) onlyAuthBy0racle external {\n        stringStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setUint(bytes32 _key, uint _value) onlyAuthBy0racle external {\n        uIntStorage[_key] = _value;\n    }\n\n\n    /***************************************************************************\n     * Initialize all delete methods.\n     */\n\n    /// @param _key The key for the record\n    function deleteAddress(bytes32 _key) onlyAuthBy0racle external {\n        delete addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBool(bytes32 _key) onlyAuthBy0racle external {\n        delete boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBytes(bytes32 _key) onlyAuthBy0racle external {\n        delete bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteInt(bytes32 _key) onlyAuthBy0racle external {\n        delete intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteString(bytes32 _key) onlyAuthBy0racle external {\n        delete stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteUint(bytes32 _key) onlyAuthBy0racle external {\n        delete uIntStorage[_key];\n    }\n}",
        "debug": "calldata_Zer0netDb_32 + 4: 0xda439b2041c8c00602000000000000000000000000000000000000000000001a\ncalldata_Zer0netDb_4 + calldata_Zer0netDb_32 + 4: 0x98b80124e0c0001a297fffffffffffffffffffffffffffffffffffffffffffc4\nstorage_33430822285158224496757015117170781007021272409730258710593228820255070428082: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Zer0netDb_0: 0x6e89955000000000000000000000000000000000000000000000000000000000\ncalldatasize_Zer0netDb: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setString(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xe865fe1a1a3b342bf0e2fcb11ff4e3bce58263af.sol",
        "function": "setString(bytes32,string)",
        "lineno": 57,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8624,
        "code": "rage types. */\n    mapping(bytes32 => address)    private addressStorage;\n    mapping(bytes32 => bool)       private boolStorage;\n    mapping(bytes32 => bytes)      private bytesStorage;\n    mapping(bytes32 => int256)     private intStorage;\n    mapping(bytes32 => string)     private stringStorage;\n    mapping(bytes32 => uint256)    private uIntStorage;\n\n    /**\n     * @dev Only allow access from the latest version of an 0racle contract\n     *      within the Zer0net after deployment.\n     */\n    modifier onlyAuthBy0racle() {\n        /***********************************************************************\n         * The owner is only allowed to set the authorized contracts upon\n         * deployment, to register the initial contracts, afterwards their\n         * direct access is permanently disabled.\n         */\n        if (msg.sender == owner) {\n            /* Verify owner's write access has not already been disabled. */\n            require(boolStorage[keccak256('owner.auth.disabled')] != true);\n        } else {\n            /* Verify write access is only permitted to authorized accounts. */\n            require(boolStorage[keccak256(msg.sender, '.has.auth')] == true);\n        }\n\n        _;      // function code is inserted here\n    }\n\n    /***************************************************************************\n     * Initialize all getter methods.\n     */\n\n    /// @param _key The key for the record\n    function getAddress(bytes32 _key) external view returns (address) {\n        return addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBool(bytes32 _key) external view returns (bool) {\n        return boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBytes(bytes32 _key) external view returns (bytes) {\n        return bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getInt(bytes32 _key) external view returns (int) {\n        return intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getString(bytes32 _key) external view returns (string) {\n        return stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getUint(bytes32 _key) external view returns (uint) {\n        return uIntStorage[_key];\n    }\n\n\n    /***************************************************************************\n     * Initialize all setter methods.\n     */\n\n    /// @param _key The key for the record\n    function setAddress(bytes32 _key, address _value) onlyAuthBy0racle external {\n        addressStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBool(bytes32 _key, bool _value) onlyAuthBy0racle external {\n        boolStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBytes(bytes32 _key, bytes _value) onlyAuthBy0racle external {\n        bytesStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setInt(bytes32 _key, int _value) onlyAuthBy0racle external {\n        intStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setString(bytes32 _key, string _value) onlyAuthBy0racle external {\n        stringStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setUint(bytes32 _key, uint _value) onlyAuthBy0racle external {\n        uIntStorage[_key] = _value;\n    }\n\n\n    /***************************************************************************\n     * Initialize all delete methods.\n     */\n\n    /// @param _key The key for the record\n    function deleteAddress(bytes32 _key) onlyAuthBy0racle external {\n        delete addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBool(bytes32 _key) onlyAuthBy0racle external {\n        delete boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBytes(bytes32 _key) onlyAuthBy0racle external {\n        delete bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteInt(bytes32 _key) onlyAuthBy0racle external {\n        delete intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteString(bytes32 _key) onlyAuthBy0racle external {\n        delete stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteUint(bytes32 _key) onlyAuthBy0racle external {\n        delete uIntStorage[_key];\n    }\n}",
        "debug": "calldata_Zer0netDb_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c\ncalldata_Zer0netDb_4 + calldata_Zer0netDb_32 + 4: 0x21\nstorage_33430822285158224496757015117170781007021272409730258710593228820255070428082: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Zer0netDb_0: 0x6e89955000000000000000000000000000000000000000000000000000000000\ncalldatasize_Zer0netDb: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setString(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xe865fe1a1a3b342bf0e2fcb11ff4e3bce58263af.sol",
        "function": "setString(bytes32,string)",
        "lineno": 57,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8629,
        "code": "rage types. */\n    mapping(bytes32 => address)    private addressStorage;\n    mapping(bytes32 => bool)       private boolStorage;\n    mapping(bytes32 => bytes)      private bytesStorage;\n    mapping(bytes32 => int256)     private intStorage;\n    mapping(bytes32 => string)     private stringStorage;\n    mapping(bytes32 => uint256)    private uIntStorage;\n\n    /**\n     * @dev Only allow access from the latest version of an 0racle contract\n     *      within the Zer0net after deployment.\n     */\n    modifier onlyAuthBy0racle() {\n        /***********************************************************************\n         * The owner is only allowed to set the authorized contracts upon\n         * deployment, to register the initial contracts, afterwards their\n         * direct access is permanently disabled.\n         */\n        if (msg.sender == owner) {\n            /* Verify owner's write access has not already been disabled. */\n            require(boolStorage[keccak256('owner.auth.disabled')] != true);\n        } else {\n            /* Verify write access is only permitted to authorized accounts. */\n            require(boolStorage[keccak256(msg.sender, '.has.auth')] == true);\n        }\n\n        _;      // function code is inserted here\n    }\n\n    /***************************************************************************\n     * Initialize all getter methods.\n     */\n\n    /// @param _key The key for the record\n    function getAddress(bytes32 _key) external view returns (address) {\n        return addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBool(bytes32 _key) external view returns (bool) {\n        return boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBytes(bytes32 _key) external view returns (bytes) {\n        return bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getInt(bytes32 _key) external view returns (int) {\n        return intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getString(bytes32 _key) external view returns (string) {\n        return stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getUint(bytes32 _key) external view returns (uint) {\n        return uIntStorage[_key];\n    }\n\n\n    /***************************************************************************\n     * Initialize all setter methods.\n     */\n\n    /// @param _key The key for the record\n    function setAddress(bytes32 _key, address _value) onlyAuthBy0racle external {\n        addressStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBool(bytes32 _key, bool _value) onlyAuthBy0racle external {\n        boolStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setBytes(bytes32 _key, bytes _value) onlyAuthBy0racle external {\n        bytesStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setInt(bytes32 _key, int _value) onlyAuthBy0racle external {\n        intStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setString(bytes32 _key, string _value) onlyAuthBy0racle external {\n        stringStorage[_key] = _value;\n    }\n\n    /// @param _key The key for the record\n    function setUint(bytes32 _key, uint _value) onlyAuthBy0racle external {\n        uIntStorage[_key] = _value;\n    }\n\n\n    /***************************************************************************\n     * Initialize all delete methods.\n     */\n\n    /// @param _key The key for the record\n    function deleteAddress(bytes32 _key) onlyAuthBy0racle external {\n        delete addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBool(bytes32 _key) onlyAuthBy0racle external {\n        delete boolStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBytes(bytes32 _key) onlyAuthBy0racle external {\n        delete bytesStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteInt(bytes32 _key) onlyAuthBy0racle external {\n        delete intStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteString(bytes32 _key) onlyAuthBy0racle external {\n        delete stringStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteUint(bytes32 _key) onlyAuthBy0racle external {\n        delete uIntStorage[_key];\n    }\n}",
        "debug": "calldata_Zer0netDb_32 + 4: 0x8638cebc3ef479b69080227bf800000000000006ebdfb9c10e3eff4826476bf\ncalldata_Zer0netDb_4 + calldata_Zer0netDb_32 + 4: 0x987c2551f8080d0a0016240787c0618800000000002903c3e006100b780cc80d\nkeccac_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_Zer0netDb_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_33430822285158224496757015117170781007021272409730258710593228820255070428082: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Zer0netDb_0: 0x6e89955000000000000000000000000000000000000000000000000000000000\ncalldatasize_Zer0netDb: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setString(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0xe865fe1a1a3b342bf0e2fcb11ff4e3bce58263af.sol",
        "function": "setString(bytes32,string)",
        "lineno": 57,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}