{"error": null, "issues": [{"address": 1419, "code": "sender] = key;\n        registerAddress.push(msg.sender);\n\n        Register(msg.sender, key);\n    }\n\n}", "debug": "calldata_XCareToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_XCareToken_0: 0xf2c298be00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCareToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `register(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xf60d7c34b06df18c91ff3dc56efcc247ad93f80e.sol", "function": "register(string)", "lineno": 103, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1803, "code": "c registerAddress;\n\n    // This ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_XCareToken_4: 0x0\nstorage_7: 0x0\ncalldata_XCareToken_0: 0x1475d12f00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCareToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0xf60d7c34b06df18c91ff3dc56efcc247ad93f80e.sol", "function": "_function_0x1475d12f", "lineno": 16, "title": "Exception state", "type": "Informational"}, {"address": 3389, "code": "btract from the sender\n        ba", "debug": "calldata_XCareToken_32 + 4: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_XCareToken_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_XCareToken_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_XCareToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCareToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xf60d7c34b06df18c91ff3dc56efcc247ad93f80e.sol", "function": "transfer(address,uint256)", "lineno": 50, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3776, "code": "\n    }\n\n    /**\n     * Transfer t", "debug": "calldata_XCareToken_32 + 4: 0x1000000014ef5df8a491084c0158f42fedfff8000588c8000088008000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xaa5ffb3ef59ca27c51ea5386f666ff066cc1b33a91510730105067f1cf5673d1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_XCareToken_4: 0x95fffffff804b9a85807bbdd0551e42c11afc4b343b1b8076152761045274227\ncalldata_XCareToken_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_XCareToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCareToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xf60d7c34b06df18c91ff3dc56efcc247ad93f80e.sol", "function": "transfer(address,uint256)", "lineno": 56, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3830, "code": "ntract XCareToken {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 8;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => string) public  keys;\n\n    address[] public registerAddress;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Register (address user, string key);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function XCareToken(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function register(string key) public {\n        require(bytes(key).length <= 64);\n\n        keys[msg.sender] = key;\n        registerAddress.push(msg.sender);\n\n        Register(msg.sender, key);\n    }\n\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xe8c38000000000000000000000000000000000000000000000000000000000c9\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfdd271edcc8a3b9a1ef47dee3ded6ffffff7fffffffffffffffffffffffffffe\ncalldata_XCareToken_4 + calldata_XCareToken_4: 0x0\ncalldata_XCareToken_0: 0xf2c298be00000000000000000000000000000000000000000000000000000000\ncalldatasize_XCareToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `register(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xf60d7c34b06df18c91ff3dc56efcc247ad93f80e.sol", "function": "register(string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}