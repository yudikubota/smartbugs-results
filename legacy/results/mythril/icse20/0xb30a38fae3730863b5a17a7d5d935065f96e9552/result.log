{"error": null, "issues": [{"address": 206, "code": "* @dev Minting extra (team and community) tokens\n  */\n  function extraMint() onlyOwner public returns (bool) {\n    assert(token.extraMint());\n    ExtraMint();\n  }\n\n  /**\n  * @dev Return ownership to previous owner\n  */\n  function returnOwnership() onlyOwner public returns (bool) {\n    token.transferOwnership(owner);\n  }\n}", "debug": "calldata_TeamTokenDistribution_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TeamTokenDistribution_0: 0x6ae459bd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TeamTokenDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `bulkMint(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0xb30a38fae3730863b5a17a7d5d935065f96e9552.sol", "function": "bulkMint(address[],uint256[])", "lineno": 402, "title": "Integer Overflow ", "type": "Warning"}, {"address": 971, "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/14/0xb30a38fae3730863b5a17a7d5d935065f96e9552.sol", "function": "returnOwnership()", "lineno": 415, "title": "Message call to external contract", "type": "Informational"}, {"address": 1365, "code": "turns (bool) {\n    token.transferOwnership(own", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/14/0xb30a38fae3730863b5a17a7d5d935065f96e9552.sol", "function": "bulkMint(address[],uint256[])", "lineno": 412, "title": "Message call to external contract", "type": "Informational"}, {"address": 1365, "code": "turns (bool) {\n    token.transferOwnership(own", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1365\n", "filename": "/unique_chucks/14/0xb30a38fae3730863b5a17a7d5d935065f96e9552.sol", "function": "bulkMint(address[],uint256[])", "lineno": 412, "title": "Multiple Calls", "type": "Information"}, {"address": 1428, "code": "blic returns (bool) {\n    token.transferOwnership(owne", "debug": "The exception is triggered under the following conditions:\n\nreturndatasize: 0x20\nretval_1365: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 +\n32 +\n32*\ncalldata_TeamTokenDistribution_4 + calldata_TeamTokenDistribution_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TeamTokenDistribution_0: 0x6ae459bd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TeamTokenDistribution: 0x4\nmem_160 +\n32*\ncalldata_TeamTokenDistribution_4 + calldata_TeamTokenDistribution_4 +\n32 +\n32*\ncalldata_TeamTokenDistribution_4 + calldata_TeamTokenDistribution_32 + 4: 0x0\ncalldata_TeamTokenDistribution_4 + calldata_TeamTokenDistribution_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/14/0xb30a38fae3730863b5a17a7d5d935065f96e9552.sol", "function": "bulkMint(address[],uint256[])", "lineno": 412, "title": "Exception state", "type": "Informational"}, {"address": 1840, "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/14/0xb30a38fae3730863b5a17a7d5d935065f96e9552.sol", "function": "extraMint()", "lineno": 415, "title": "Message call to external contract", "type": "Informational"}], "success": true}