{
  "contract": "0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb",
  "tool": "mythril",
  "start": 1563597450.6454551,
  "end": 1563597852.445845,
  "duration": 401.8003897666931,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1216,
        "code": " }\n        // If the amoun",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "fallback",
        "lineno": 62,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 1307,
        "code": "ther;\n        }\n\n        // Check if t",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3480\nCall at address: 3480\nCall at address: 3116\nCall at address: 2665\nCall at address: 2665\nCall at address: 2245\nCall at address: 2109\nCall at address: 1973\nCall at address: 2665\nCall at address: 1798\nCall at address: 1662\nCall at address: 2665\nCall at address: 1488\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 66,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1307,
        "code": "ther;\n        }\n\n        // Check if t",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "fallback",
        "lineno": 66,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 1334,
        "code": " Piggy Bank to the last 3 ",
        "debug": "callvalue: 0x400000000000000000000000000000000000027600003000000\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffda80\ncalldata_ProtectTheCastle_0: 0x2200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "fallback",
        "lineno": 71,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1395,
        "code": " } else if (totalCitizens == 2) {\n             ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x0\ncallvalue: 0x56be7deff6fd00001\nstorage_6: 0x100\ntimestamp: 0x1\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 76,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1488,
        "code": " } else if (totalCitizens == 2) {\n                // If only 2 ",
        "debug": "",
        "description": "In the function `repairTheCastle()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 76,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 1488,
        "code": " } else if (totalCitizens == 2) {\n                // If only 2 ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2665\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 76,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1488,
        "code": " } else if (totalCitizens == 2) {\n                // If only 2 ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function repairTheCastle(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 76,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1488,
        "code": " } else if (totalCitizens == 2) {\n                // If only 2 ",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 76,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 1554,
        "code": "             citizensAddresses[citizensAddresse",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x0\ncallvalue: 0x56be7deff6fd00001\nstorage_6: 0x200\ntimestamp: 0x1\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 79,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1662,
        "code": "             citizensAddresses[citizensAddresses.length - 2].send(piggyBan",
        "debug": "",
        "description": "In the function `repairTheCastle()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 79,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 1662,
        "code": "             citizensAddresses[citizensAddresses.length - 2].send(piggyBan",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2665\nCall at address: 1798\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 79,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1662,
        "code": "             citizensAddresses[citizensAddresses.length - 2].send(piggyBan",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function repairTheCastle(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 79,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1662,
        "code": "             citizensAddresses[citizensAddresses.length - 2].send(piggyBan",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 79,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 1690,
        "code": "        } else if (totalCitizens >= 3) {\n      ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x1\ncallvalue: 0x2000000000000000000000000000000000000000067b7187b2ef840000\nstorage_6: 0x200\ntimestamp: 0x1\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 80,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1798,
        "code": "        } else if (totalCitizens >= 3) {\n                // If there are 3",
        "debug": "",
        "description": "In the function `repairTheCastle()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 80,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 1798,
        "code": "        } else if (totalCitizens >= 3) {\n                // If there are 3",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2665\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 80,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1798,
        "code": "        } else if (totalCitizens >= 3) {\n                // If there are 3",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function repairTheCastle(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 80,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1798,
        "code": "        } else if (totalCitizens >= 3) {\n                // If there are 3",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 80,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 1865,
        "code": "         citizensAddresses[citizensAddresses.le",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x0\ncallvalue: 0x56be7deff6fd00001\nstorage_6: 0x300\ntimestamp: 0x1\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 83,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1973,
        "code": "         citizensAddresses[citizensAddresses.length - 2].send(piggyBank * ",
        "debug": "",
        "description": "In the function `repairTheCastle()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 83,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 1973,
        "code": "         citizensAddresses[citizensAddresses.length - 2].send(piggyBank * ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2665\nCall at address: 2245\nCall at address: 2109\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 83,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1973,
        "code": "         citizensAddresses[citizensAddresses.length - 2].send(piggyBank * ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function repairTheCastle(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 83,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1973,
        "code": "         citizensAddresses[citizensAddresses.length - 2].send(piggyBank * ",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 83,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 2001,
        "code": "        citizensAddresses[citizensAddresses.len",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x1\ncallvalue: 0x60be3060270000000\nstorage_6: 0x300\ntimestamp: 0x1\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 84,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2109,
        "code": "        citizensAddresses[citizensAddresses.length - 3].send(piggyBank * 1",
        "debug": "",
        "description": "In the function `repairTheCastle()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 84,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 2109,
        "code": "        citizensAddresses[citizensAddresses.length - 3].send(piggyBank * 1",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2665\nCall at address: 2245\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 84,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2109,
        "code": "        citizensAddresses[citizensAddresses.length - 3].send(piggyBank * 1",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function repairTheCastle(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 84,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2109,
        "code": "        citizensAddresses[citizensAddresses.length - 3].send(piggyBank * 1",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 84,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 2137,
        "code": "   }\n\n            // Define the new Piggy Bank\n",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x2\ncallvalue: 0x56be7deff6fd00001\nstorage_6: 0x300\ntimestamp: 0x1\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 85,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2245,
        "code": "   }\n\n            // Define the new Piggy Bank\n            piggyBank = 0;\n",
        "debug": "",
        "description": "In the function `repairTheCastle()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 85,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 2245,
        "code": "   }\n\n            // Define the new Piggy Bank\n            piggyBank = 0;\n",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2665\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 85,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2245,
        "code": "   }\n\n            // Define the new Piggy Bank\n            piggyBank = 0;\n",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function repairTheCastle(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 85,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2245,
        "code": "   }\n\n            // Define the new Piggy Bank\n            piggyBank = 0;\n",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 85,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 2343,
        "code": "\n\n/*\nProtect The C",
        "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x56bc75e3063000000\nstorage_6: 0x100\ntimestamp: 0x1\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A possible integer overflow exists in the function `repairTheCastle()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2448,
        "code": "\n\n/*\nProtect The C",
        "debug": "storage_4: 0xffc0000000000002a00000000000000000000000000000000000000000000000\ncallvalue: 0x40000000000000000000007900183000000\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_6: 0x100\ntimestamp: 0x1\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A possible integer overflow exists in the function `repairTheCastle()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2546,
        "code": "unt;\n\n            // The",
        "debug": "storage_4: 0xfffffffffffffffffffffe000000000000000000000000000000000000000000\nstorage_8: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000\ncallvalue: 0x56be7deff6fd00001\nstorage_6: 0x100\ntimestamp: 0x1\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A possible integer overflow exists in the function `repairTheCastle()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 99,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2665,
        "code": "amount * 3 / 100;\n\n          ",
        "debug": "",
        "description": "In the function `repairTheCastle()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 105,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 2665,
        "code": "amount * 3 / 100;\n\n          ",
        "debug": "SOLVER OUTPUT:\nstorage_4: 0xfffffffffffffffffffffffffffffffffffffffff80000000000000000000000\ncallvalue: 0x56be7deff6fd00001\nstorage_6: 0x100\ntimestamp: 0x1\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "In the function `repairTheCastle()` a non-zero amount of Ether is sent to msg.sender.\n\nThere is a check on storage index 1. This storage slot can be written to by calling the function `fallback`.\nThere is a check on storage index 6. This storage slot can be written to by calling the function `fallback`.\nThere is a check on storage index 4. This storage slot can be written to by calling the function `fallback`.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 105,
        "title": "Ether send",
        "type": "Warning"
      },
      {
        "address": 2665,
        "code": "amount * 3 / 100;\n\n          ",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 105,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 2695,
        "code": "till up\n            lastReparati",
        "debug": "storage_4: 0x90150000000000000274dc0000c0000000000000000000000000000000000000\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffe000000000080000\ncallvalue: 0x56be7deff6fd00001\nstorage_6: 0x100\ntimestamp: 0x1\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A possible integer overflow exists in the function `repairTheCastle()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 109,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2779,
        "code": "\n\n/*\nProtect The C",
        "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x60003063300000000\ntimestamp: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x1c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "fallback",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2884,
        "code": "\n\n/*\nProtect The C",
        "debug": "callvalue: 0x60003063300000000\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x1c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "fallback",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2982,
        "code": "           // The Jester",
        "debug": "storage_8: 0xfffffffffffffffffffffffffffffffffffffffffffffffecf1c305ffff00000\ncallvalue: 0x56bc7de124fd00200\ntimestamp: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x700000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "fallback",
        "lineno": 119,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3013,
        "code": "       // The bribed Citizen ta",
        "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffbe9ff005fd080000\ncallvalue: 0x800000000000000000000000000000000000000000440201e796fd00040\ntimestamp: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x700000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "fallback",
        "lineno": 122,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3116,
        "code": "\n            while (citizensA",
        "debug": "",
        "description": "In the function `repairTheCastle()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 124,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 3116,
        "code": "\n            while (citizensA",
        "debug": "SOLVER OUTPUT:\ncallvalue: 0x56be7deff6fd00001\ntimestamp: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "In the function `repairTheCastle()` a non-zero amount of Ether is sent to an address taken from storage slot 0.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `fallback`.\n\nThere is a check on storage index 1. This storage slot can be written to by calling the function `fallback`.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 124,
        "title": "Ether send",
        "type": "Warning"
      },
      {
        "address": 3116,
        "code": "\n            while (citizensA",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3480\nCall at address: 3480\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 124,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3116,
        "code": "\n            while (citizensA",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function repairTheCastle(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 124,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3116,
        "code": "\n            while (citizensA",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 124,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 3146,
        "code": "- collectedFee) && lastCitizenPa",
        "debug": "storage_3: 0xfffffffffffffffffffffffffffffffffffffffffffffffff24447fd00700000\ncallvalue: 0x200000000458c782ea70000000\ntimestamp: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A possible integer overflow exists in the function `repairTheCastle()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 125,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3185,
        "code": "tCitizenPaid].send(citizensAmount",
        "debug": "callvalue: 0x56be7deff6fd00001\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffba9c6e7dbb0bffff\ntimestamp: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A possible integer underflow exists in the function `repairTheCastle()`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 126,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3186,
        "code": "tCitizenPaid].send(citizensAmounts[lastCitizenPa",
        "debug": "callvalue: 0x56be7deff6fd00001\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x4563918244f40000\nstorage_2: 0x0\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffd65ddbe509d40001\ntimestamp: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A possible integer underflow exists in the function `repairTheCastle()`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 126,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3224,
        "code": "               citizensAddresses",
        "debug": "The exception is triggered under the following conditions:\n\ncallvalue: 0x56c03060063000000\nstorage_5: 0x0\nstorage_6: 0x7fffffff00\ntimestamp: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 126,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3340,
        "code": "unts[lastCitizenPaid];\n           ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x0\ncallvalue: 0x56c03060063000000\nstorage_5: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1546678032441257452667456735582814959992782782816731922691272282333561699760 +\nConcat(0,\n       Extract(39,\n               8,\n               256*Concat(0, 1 + Extract(39, 8, storage_6)))): 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x6f05b59d3b1fffff\nstorage_3: 0x0\nstorage_2: 0x0\nstorage_6: 0xfffffffe00\ntimestamp: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 127,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3480,
        "code": "unts[lastCitizenPaid];\n                lastCitizenPaid += 1;\n            ",
        "debug": "",
        "description": "In the function `repairTheCastle()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 127,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 3480,
        "code": "unts[lastCitizenPaid];\n                lastCitizenPaid += 1;\n            ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3480\nCall at address: 3480\n",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "fallback",
        "lineno": 127,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3480,
        "code": "unts[lastCitizenPaid];\n                lastCitizenPaid += 1;\n            ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function repairTheCastle(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 127,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3480,
        "code": "unts[lastCitizenPaid];\n                lastCitizenPaid += 1;\n            ",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 127,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 3544,
        "code": "    // fallback function\n    function() payable {\n       ",
        "debug": "storage_4: 0xd4e876a4f9ffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0xdc0156689c9e87e7b3559d770d39345814234016081d67525b0700aa8edd1e71\ncallvalue: 0x10000000000000000005cce384f967c00100\nstorage_1546678032441257452667456735582814959992782782816731922691272282333561699760 +\nConcat(0,\n       Extract(39,\n               8,\n               256*Concat(0, 1 + Extract(39, 8, storage_6)))): 0x3374d94a9012a7c52218b777ac8626c1d0b9ed97297d60563147c00c87d23b3d\nstorage_5: 0x126425871e3efffffffe34fbffdde631c7ef4f2d35bfbfbcc503044040006220\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x3374d94a9012a7c52218b777ac8626c1d0b9ed97297d6056a04d75a9c2f23b3e\nstorage_3: 0x0\nstorage_2: 0x0\nstorage_6: 0x927445700\ntimestamp: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaba0\ncalldata_ProtectTheCastle_0: 0x7e32a59200000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "A possible integer overflow exists in the function `repairTheCastle()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "repairTheCastle()",
        "lineno": 133,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4005,
        "code": "es;\n    uint[] public citizensAmou",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ProtectTheCastle_4: 0x0\nstorage_4: 0x0\ncalldata_ProtectTheCastle_0: 0xa2e7241c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "_function_0xa2e7241c",
        "lineno": 31,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4095,
        "code": "  uint32 public totalCitizens",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ProtectTheCastle_4: 0x0\nstorage_5: 0x0\ncalldata_ProtectTheCastle_0: 0xd466a03f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "_function_0xd466a03f",
        "lineno": 33,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4286,
        "code": "ion newJester(address newJester)",
        "debug": "SOLVER OUTPUT:\nstorage_6: 0x0\ncaller: 0x0\ncalldata_ProtectTheCastle_0: 0xd4d5d32a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ProtectTheCastle: 0x4\n",
        "description": "In the function `collectFee()` a non-zero amount of Ether is sent to an address taken from storage slot 6.\nThere is a check on storage index 6. This storage slot can be written to by calling the function `fallback`.\n\nThere is a check on storage index 6. This storage slot can be written to by calling the function `fallback`.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "collectFee()",
        "lineno": 153,
        "title": "Ether send",
        "type": "Warning"
      },
      {
        "address": 4286,
        "code": "ion newJester(address newJester)",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function collectFee(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "collectFee()",
        "lineno": 153,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4286,
        "code": "ion newJester(address newJester)",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/20/0xa9fa83d31ff1cfd14b7f9d17f02e48dcfd9cb0cb.sol",
        "function": "collectFee()",
        "lineno": 153,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      }
    ],
    "success": true
  }
}