{
  "contract": "0x01c8bb9205fec775deb38534ea50a84c9b30a84b",
  "tool": "mythril",
  "start": 1563240582.911024,
  "end": 1563240893.7351775,
  "duration": 310.8241534233093,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 383,
        "code": "equire(weiAmount >= etherMinimum.m",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x01c8bb9205fec775deb38534ea50a84c9b30a84b.sol",
        "function": "fallback",
        "lineno": 164,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2106,
        "code": "on setRate(uint256 _rate, uint256 _min, uint256 _max) external onlyOwner {\n        rate = _rate;\n        ethe",
        "debug": "calldata_VNETPrivatePlacement_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VNETPrivatePlacement_0: 0x90c3f38f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNETPrivatePlacement: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setDescription(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x01c8bb9205fec775deb38534ea50a84c9b30a84b.sol",
        "function": "setDescription(string)",
        "lineno": 206,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2112,
        "code": "on setRate(uint256 _rate, uint256 _min, uint256 _max) external onlyOwner {\n        rate = _rate;\n        ethe",
        "debug": "calldata_VNETPrivatePlacement_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_VNETPrivatePlacement_0: 0x90c3f38f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNETPrivatePlacement: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setDescription(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x01c8bb9205fec775deb38534ea50a84c9b30a84b.sol",
        "function": "setDescription(string)",
        "lineno": 206,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2647,
        "code": "));\n    }\n\n    /**\n   ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x01c8bb9205fec775deb38534ea50a84c9b30a84b.sol",
        "function": "fallback",
        "lineno": 71,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2647,
        "code": "));\n    }\n\n    /**\n   ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2904\n",
        "filename": "/unique_contracts/0x01c8bb9205fec775deb38534ea50a84c9b30a84b.sol",
        "function": "fallback",
        "lineno": 71,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2904,
        "code": "Ether\n     */\n    function with",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x01c8bb9205fec775deb38534ea50a84c9b30a84b.sol",
        "function": "fallback",
        "lineno": 75,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3492,
        "code": "ev Math operations with safety checks",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdrawEther(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x01c8bb9205fec775deb38534ea50a84c9b30a84b.sol",
        "function": "withdrawEther()",
        "lineno": 85,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3958,
        "code": "lyOwner {\n        description = ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x01c8bb9205fec775deb38534ea50a84c9b30a84b.sol",
        "function": "sendVNET(address,uint256)",
        "lineno": 197,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4441,
        "code": "ription;\n    uint256 public rate;\n    uint256 public etherMinimum;\n    uint256 public etherMaximum;\n\n    /**\n     * @dev Constructor\n     */\n    constructor(ERC20Basic _vnetToken, string _description, uint256 _rate, uint256 _min, uint256 _max) public {\n        vnetToken = _vnetToken;\n        rate = _rate;\n        etherMinimum = _min;\n        etherMaximum = _max;\n        description = _description;\n    }\n\n    /**\n     * @dev receive ETH and send tokens\n     */\n    function () public payable {\n        // Make sure balance > 0\n        uint256 balance = vnetToken.balanceOf(address(this));\n        require(balance > 0);\n        \n        // Minimum & Maximum Limit\n        uint256 weiAmount = msg.value;\n        require(weiAmount >= etherMinimum.mul(10 ** 18));\n        require(weiAmount <= etherMaximum.mul(10 ** 18));\n\n        // VNET Token Amount to be send back\n        uint256 tokenAmount = weiAmount.mul(rate).div(10 ** 12);\n\n        // Send VNET\n        if (balance >= tokenAmount) {\n            assert(vnetToken.transfer(msg.sender, tokenAmount));\n            owner.transfer(address(this).balance);\n        } else {\n            uint256 expend = balance.div(rate);\n            assert(vnetToken.transfer(msg.sender, balance));\n            msg.sender.transfer(weiAmount - expend.mul(10 ** 12));\n            owner.transfer(address(this).balance);\n        }\n    }\n\n    /**\n     * @dev Send VNET Token\n     *\n     * @param _to address\n     * @param _amount uint256\n     */ \n    function sendVNET(address _to, uint256 _amount) external onlyOwner {\n        assert(vnetToken.transfer(_to, _amount));\n    }\n\n    /**\n     * @dev Set Description\n     * \n     * @param _description string\n     */\n    function setDescription(string _description) external onlyOwner {\n        description = _description;\n    }\n    \n    /**\n     * @dev Set Rate\n     * \n     * @param _rate uint256\n     */\n    function setRate(uint256 _rate, uint256 _min, uint256 _max) external onlyOwner {\n        rate = _rate;\n        etherMinimum = _min;\n        etherMaximum = _max;\n    }\n}",
        "debug": "calldata_VNETPrivatePlacement_4 + calldata_VNETPrivatePlacement_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VNETPrivatePlacement_0: 0x90c3f38f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNETPrivatePlacement: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setDescription(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x01c8bb9205fec775deb38534ea50a84c9b30a84b.sol",
        "function": "setDescription(string)",
        "lineno": 138,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4455,
        "code": "ription;\n    uint256 public rate;\n    uint256 public etherMinimum;\n    uint256 public etherMaximum;\n\n    /**\n     * @dev Constructor\n     */\n    constructor(ERC20Basic _vnetToken, string _description, uint256 _rate, uint256 _min, uint256 _max) public {\n        vnetToken = _vnetToken;\n        rate = _rate;\n        etherMinimum = _min;\n        etherMaximum = _max;\n        description = _description;\n    }\n\n    /**\n     * @dev receive ETH and send tokens\n     */\n    function () public payable {\n        // Make sure balance > 0\n        uint256 balance = vnetToken.balanceOf(address(this));\n        require(balance > 0);\n        \n        // Minimum & Maximum Limit\n        uint256 weiAmount = msg.value;\n        require(weiAmount >= etherMinimum.mul(10 ** 18));\n        require(weiAmount <= etherMaximum.mul(10 ** 18));\n\n        // VNET Token Amount to be send back\n        uint256 tokenAmount = weiAmount.mul(rate).div(10 ** 12);\n\n        // Send VNET\n        if (balance >= tokenAmount) {\n            assert(vnetToken.transfer(msg.sender, tokenAmount));\n            owner.transfer(address(this).balance);\n        } else {\n            uint256 expend = balance.div(rate);\n            assert(vnetToken.transfer(msg.sender, balance));\n            msg.sender.transfer(weiAmount - expend.mul(10 ** 12));\n            owner.transfer(address(this).balance);\n        }\n    }\n\n    /**\n     * @dev Send VNET Token\n     *\n     * @param _to address\n     * @param _amount uint256\n     */ \n    function sendVNET(address _to, uint256 _amount) external onlyOwner {\n        assert(vnetToken.transfer(_to, _amount));\n    }\n\n    /**\n     * @dev Set Description\n     * \n     * @param _description string\n     */\n    function setDescription(string _description) external onlyOwner {\n        description = _description;\n    }\n    \n    /**\n     * @dev Set Rate\n     * \n     * @param _rate uint256\n     */\n    function setRate(uint256 _rate, uint256 _min, uint256 _max) external onlyOwner {\n        rate = _rate;\n        etherMinimum = _min;\n        etherMaximum = _max;\n    }\n}",
        "debug": "calldata_VNETPrivatePlacement_4: 0xda439b2041c8c00602000000000000000000000000000000000000000000001a\ncalldata_VNETPrivatePlacement_4 + calldata_VNETPrivatePlacement_4: 0x98b80124e0c0001a297fffffffffffffffffffffffffffffffffffffffffffc4\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VNETPrivatePlacement_0: 0x90c3f38f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNETPrivatePlacement: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setDescription(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x01c8bb9205fec775deb38534ea50a84c9b30a84b.sol",
        "function": "setDescription(string)",
        "lineno": 138,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4472,
        "code": "ription;\n    uint256 public rate;\n    uint256 public etherMinimum;\n    uint256 public etherMaximum;\n\n    /**\n     * @dev Constructor\n     */\n    constructor(ERC20Basic _vnetToken, string _description, uint256 _rate, uint256 _min, uint256 _max) public {\n        vnetToken = _vnetToken;\n        rate = _rate;\n        etherMinimum = _min;\n        etherMaximum = _max;\n        description = _description;\n    }\n\n    /**\n     * @dev receive ETH and send tokens\n     */\n    function () public payable {\n        // Make sure balance > 0\n        uint256 balance = vnetToken.balanceOf(address(this));\n        require(balance > 0);\n        \n        // Minimum & Maximum Limit\n        uint256 weiAmount = msg.value;\n        require(weiAmount >= etherMinimum.mul(10 ** 18));\n        require(weiAmount <= etherMaximum.mul(10 ** 18));\n\n        // VNET Token Amount to be send back\n        uint256 tokenAmount = weiAmount.mul(rate).div(10 ** 12);\n\n        // Send VNET\n        if (balance >= tokenAmount) {\n            assert(vnetToken.transfer(msg.sender, tokenAmount));\n            owner.transfer(address(this).balance);\n        } else {\n            uint256 expend = balance.div(rate);\n            assert(vnetToken.transfer(msg.sender, balance));\n            msg.sender.transfer(weiAmount - expend.mul(10 ** 12));\n            owner.transfer(address(this).balance);\n        }\n    }\n\n    /**\n     * @dev Send VNET Token\n     *\n     * @param _to address\n     * @param _amount uint256\n     */ \n    function sendVNET(address _to, uint256 _amount) external onlyOwner {\n        assert(vnetToken.transfer(_to, _amount));\n    }\n\n    /**\n     * @dev Set Description\n     * \n     * @param _description string\n     */\n    function setDescription(string _description) external onlyOwner {\n        description = _description;\n    }\n    \n    /**\n     * @dev Set Rate\n     * \n     * @param _rate uint256\n     */\n    function setRate(uint256 _rate, uint256 _min, uint256 _max) external onlyOwner {\n        rate = _rate;\n        etherMinimum = _min;\n        etherMaximum = _max;\n    }\n}",
        "debug": "calldata_VNETPrivatePlacement_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c\ncalldata_VNETPrivatePlacement_4 + calldata_VNETPrivatePlacement_4: 0x21\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VNETPrivatePlacement_0: 0x90c3f38f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNETPrivatePlacement: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setDescription(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x01c8bb9205fec775deb38534ea50a84c9b30a84b.sol",
        "function": "setDescription(string)",
        "lineno": 138,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}