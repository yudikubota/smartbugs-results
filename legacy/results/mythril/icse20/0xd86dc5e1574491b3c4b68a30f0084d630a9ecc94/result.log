{"error": null, "issues": [{"address": 1117, "code": "nt256 initialSupply,\n string tokenName,\n string tokenSymbol\n ) public {\n totalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount\n balanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens\n name = tokenName; // Set the name for display purposes\n symbol = tokenSymbol; // Set the symbol for display purposes\n }\n /**\n * Internal transfer, only ", "debug": "calldata_tokenRecipient_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd86dc5e1574491b3c4b68a30f0084d630a9ecc94.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 26, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1435, "code": "ss) {\n tokenRecipient spender = tokenRecipient(_spender);\n if (approve(_spender, _value)) {\n spender.receiveApproval(msg.sender, _value, this, _extraData);\n return true;\n }\n }\n /**\n * Destroy tokens\n *\n * Remove `_value` tokens from the system irreversibly\n *\n * @param _value the amount", "debug": "calldata_tokenRecipient_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd86dc5e1574491b3c4b68a30f0084d630a9ecc94.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 107, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2541, "code": "other account\n *\n * R", "debug": "calldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `burn(uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/24/0xd86dc5e1574491b3c4b68a30f0084d630a9ecc94.sol", "function": "burn(uint256)", "lineno": 129, "title": "Integer Underflow", "type": "Warning"}, {"address": 3102, "debug": "calldata_tokenRecipient_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0x79cc679000000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `burnFrom(address,uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/24/0xd86dc5e1574491b3c4b68a30f0084d630a9ecc94.sol", "function": "burnFrom(address,uint256)", "lineno": 145, "title": "Integer Underflow", "type": "Warning"}, {"address": 3379, "code": "(decimals); // Update total supply with", "debug": "calldata_tokenRecipient_4: 0xff3717ddf147ba7fd6976a72ee859c9c251431c6dd4346e384e0fd941c87b69c\n10_EXP_Concat(0, Extract(15, 8, storage_2)): 0xde9aa0007ffff9dbbb05d00001000207fffdffbfffbfbfbfffbfbfefbfbff7f6\ncalldata_tokenRecipient_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd86dc5e1574491b3c4b68a30f0084d630a9ecc94.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 30, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3877, "code": " * Remove `_value` tokens from the system irreversibly\n *\n * ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/24/0xd86dc5e1574491b3c4b68a30f0084d630a9ecc94.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 117, "title": "Message call to external contract", "type": "Warning"}, {"address": 4342, "code": "ct from the sender\n balanceOf[_fr", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0x104000000100000000000107600000020000000000000000000000000\ncalldata_tokenRecipient_32 + 4: 0x0\ncalldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd86dc5e1574491b3c4b68a30f0084d630a9ecc94.sol", "function": "transfer(address,uint256)", "lineno": 47, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4729, "code": "s);\n }\n /**\n * Transfer tokens\n *", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0x800000000000000000000000000000000000000000000000000000000000\ncalldata_tokenRecipient_32 + 4: 0x1\ncalldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd86dc5e1574491b3c4b68a30f0084d630a9ecc94.sol", "function": "transfer(address,uint256)", "lineno": 53, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4812, "code": "ntract Token {\n // Public variables of the token\n string public name;\n string public symbol;\n uint8 public decimals = 18;\n // 18 decimals is the strongly suggested default, avoid changing it\n uint256 public totalSupply;\n // This creates an array with all balances\n mapping (address => uint256) public balanceOf;\n mapping (address => mapping (address => uint256)) public allowance;\n // This generates a public event on the blockchain that will notify clients\n event Transfer(address indexed from, address indexed to, uint256 value);\n\n // This generates a public event on the blockchain that will notify clients\n event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n // This notifies clients about the amount burnt\n event Burn(address indexed from, uint256 value);\n /**\n * Constructor function\n *\n * Initializes contract with initial supply tokens to the creator of the contract\n */\n function TokenERC20(\n uint256 initialSupply,\n string tokenName,\n string tokenSymbol\n ) public {\n totalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount\n balanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens\n name = tokenName; // Set the name for display purposes\n symbol = tokenSymbol; // Set the symbol for display purposes\n }\n /**\n * Internal transfer, only can be called by this contract\n */\n function _transfer(address _from, address _to, uint _value) internal {\n // Prevent transfer to 0x0 address. Use burn() instead\n require(_to != 0x0);\n // Check if the sender has enough\n require(balanceOf[_from] >= _value);\n // Check for overflows\n require(balanceOf[_to] + _value >= balanceOf[_to]);\n // Save this for an assertion in the future\n uint previousBalances = balanceOf[_from] + balanceOf[_to];\n // Subtract from the sender\n balanceOf[_from] -= _value;\n // Add the same to the recipient\n balanceOf[_to] += _value;\n emit Transfer(_from, _to, _value);\n // Asserts are used to use static analysis to find bugs in your code. They should never fail\n assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n }\n /**\n * Transfer tokens\n *\n * Send `_value` tokens to `_to` from your account\n *\n * @param _to The address of the recipient\n * @param _value the amount to send\n */\n function transfer(address _to, uint256 _value) public returns (bool success) {\n _transfer(msg.sender, _to, _value);\n return true;\n }\n /**\n * Transfer tokens from other address\n *\n * Send `_value` tokens to `_to` on behalf of `_from`\n *\n * @param _from The address of the sender\n * @param _to The address of the recipient\n * @param _value the amount to send\n */\n function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n require(_value <= allowance[_from][msg.sender]); // Check allowance\n allowance[_from][msg.sender] -= _value;\n _transfer(_from, _to, _value);\n return true;\n }\n /**\n * Set allowance for other address\n *\n * Allows `_spender` to spend no more than `_value` tokens on your behalf\n *\n * @param _spender The address authorized to spend\n * @param _value the max amount they can spend\n */\n function approve(address _spender, uint256 _value) public\n returns (bool success) {\n allowance[msg.sender][_spender] = _value;\n emit Approval(msg.sender, _spender, _value);\n return true;\n }\n /**\n * Set allowance for other address and notify\n *\n * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n *\n * @param _spender The address authorized to spend\n * @param _value the max amount they can spend\n * @param _extraData some extra information to send to the approved contract\n */\n function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n public\n returns (bool success) {\n tokenRecipient spender = tokenRecipient(_spender);\n if (approve(_spender, _value)) {\n spender.receiveApproval(msg.sender, _value, this, _extraData);\n return true;\n }\n }\n /**\n * Destroy tokens\n *\n * Remove `_value` tokens from the system irreversibly\n *\n * @param _value the amount of money to burn\n */\n function burn(uint256 _value) public returns (bool success) {\n require(balanceOf[msg.sender] >= _value); // Check if the sender has enough\n balanceOf[msg.sender] -= _value; // Subtract from the sender\n totalSupply -= _value; // Updates totalSupply\n emit Burn(msg.sender, _value);\n return true;\n }\n /**\n * Destroy tokens from other account\n *\n * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n *\n * @param _from the address of the sender\n * @param _value the amount of money to burn\n */\n function burnFrom(address _from, uint256 _value) public returns (bool success) {\n require(balanceOf[_from] >= _value); // Check if the targeted balance is enough\n require(_value <= allowance[_from][msg.sender]); // Check allowance\n balanceOf[_from] -= _value; // Subtract from the targeted balance\n allowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance\n totalSupply -= _value; // Update totalSupply\n emit Burn(_from, _value);\n return true;\n }\n}", "debug": "calldata_tokenRecipient_4 + calldata_tokenRecipient_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_tokenRecipient_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd86dc5e1574491b3c4b68a30f0084d630a9ecc94.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4826, "code": "ntract Token {\n // Public variables of the token\n string public name;\n string public symbol;\n uint8 public decimals = 18;\n // 18 decimals is the strongly suggested default, avoid changing it\n uint256 public totalSupply;\n // This creates an array with all balances\n mapping (address => uint256) public balanceOf;\n mapping (address => mapping (address => uint256)) public allowance;\n // This generates a public event on the blockchain that will notify clients\n event Transfer(address indexed from, address indexed to, uint256 value);\n\n // This generates a public event on the blockchain that will notify clients\n event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n // This notifies clients about the amount burnt\n event Burn(address indexed from, uint256 value);\n /**\n * Constructor function\n *\n * Initializes contract with initial supply tokens to the creator of the contract\n */\n function TokenERC20(\n uint256 initialSupply,\n string tokenName,\n string tokenSymbol\n ) public {\n totalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount\n balanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens\n name = tokenName; // Set the name for display purposes\n symbol = tokenSymbol; // Set the symbol for display purposes\n }\n /**\n * Internal transfer, only can be called by this contract\n */\n function _transfer(address _from, address _to, uint _value) internal {\n // Prevent transfer to 0x0 address. Use burn() instead\n require(_to != 0x0);\n // Check if the sender has enough\n require(balanceOf[_from] >= _value);\n // Check for overflows\n require(balanceOf[_to] + _value >= balanceOf[_to]);\n // Save this for an assertion in the future\n uint previousBalances = balanceOf[_from] + balanceOf[_to];\n // Subtract from the sender\n balanceOf[_from] -= _value;\n // Add the same to the recipient\n balanceOf[_to] += _value;\n emit Transfer(_from, _to, _value);\n // Asserts are used to use static analysis to find bugs in your code. They should never fail\n assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n }\n /**\n * Transfer tokens\n *\n * Send `_value` tokens to `_to` from your account\n *\n * @param _to The address of the recipient\n * @param _value the amount to send\n */\n function transfer(address _to, uint256 _value) public returns (bool success) {\n _transfer(msg.sender, _to, _value);\n return true;\n }\n /**\n * Transfer tokens from other address\n *\n * Send `_value` tokens to `_to` on behalf of `_from`\n *\n * @param _from The address of the sender\n * @param _to The address of the recipient\n * @param _value the amount to send\n */\n function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n require(_value <= allowance[_from][msg.sender]); // Check allowance\n allowance[_from][msg.sender] -= _value;\n _transfer(_from, _to, _value);\n return true;\n }\n /**\n * Set allowance for other address\n *\n * Allows `_spender` to spend no more than `_value` tokens on your behalf\n *\n * @param _spender The address authorized to spend\n * @param _value the max amount they can spend\n */\n function approve(address _spender, uint256 _value) public\n returns (bool success) {\n allowance[msg.sender][_spender] = _value;\n emit Approval(msg.sender, _spender, _value);\n return true;\n }\n /**\n * Set allowance for other address and notify\n *\n * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n *\n * @param _spender The address authorized to spend\n * @param _value the max amount they can spend\n * @param _extraData some extra information to send to the approved contract\n */\n function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n public\n returns (bool success) {\n tokenRecipient spender = tokenRecipient(_spender);\n if (approve(_spender, _value)) {\n spender.receiveApproval(msg.sender, _value, this, _extraData);\n return true;\n }\n }\n /**\n * Destroy tokens\n *\n * Remove `_value` tokens from the system irreversibly\n *\n * @param _value the amount of money to burn\n */\n function burn(uint256 _value) public returns (bool success) {\n require(balanceOf[msg.sender] >= _value); // Check if the sender has enough\n balanceOf[msg.sender] -= _value; // Subtract from the sender\n totalSupply -= _value; // Updates totalSupply\n emit Burn(msg.sender, _value);\n return true;\n }\n /**\n * Destroy tokens from other account\n *\n * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n *\n * @param _from the address of the sender\n * @param _value the amount of money to burn\n */\n function burnFrom(address _from, uint256 _value) public returns (bool success) {\n require(balanceOf[_from] >= _value); // Check if the targeted balance is enough\n require(_value <= allowance[_from][msg.sender]); // Check allowance\n balanceOf[_from] -= _value; // Subtract from the targeted balance\n allowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance\n totalSupply -= _value; // Update totalSupply\n emit Burn(_from, _value);\n return true;\n }\n}", "debug": "calldata_tokenRecipient_4 + calldata_tokenRecipient_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_tokenRecipient_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd86dc5e1574491b3c4b68a30f0084d630a9ecc94.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}