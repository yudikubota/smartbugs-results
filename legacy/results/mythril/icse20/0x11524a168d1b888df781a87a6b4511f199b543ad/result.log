{"error": null, "issues": [{"address": 501, "code": "  external payable {\n        assert(msg.value == registrationBounty);\n        assert(membership[_pubish] <= Membership.REJECTED);\n        membership[_pubish] = Membership.APPLIED;\n        abis[_pubish] = _abi;\n        PubRegistered(_pubish);\n    }\n\n    function accept(address _pubish)\n    external {\n   ", "debug": "calldata_AllPubs_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_AllPubs_0: 0x32434a2e00000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\n", "description": "A possible integer overflow exists in the function `register(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "register(address,string)", "lineno": 52, "title": "Integer Overflow ", "type": "Warning"}, {"address": 507, "code": "  external payable {\n        assert(msg.value == registrationBounty);\n        assert(membership[_pubish] <= Membership.REJECTED);\n        membership[_pubish] = Membership.APPLIED;\n        abis[_pubish] = _abi;\n        PubRegistered(_pubish);\n    }\n\n    function accept(address _pubish)\n    external {\n   ", "debug": "calldata_AllPubs_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_AllPubs_0: 0x32434a2e00000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\n", "description": "A possible integer overflow exists in the function `register(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "register(address,string)", "lineno": 52, "title": "Integer Overflow ", "type": "Warning"}, {"address": 868, "code": "hip) public membership;\n    // please do not trus", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0x8000\ncalldata_AllPubs_0: 0x772ccf5d00000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "_function_0x772ccf5d", "lineno": 28, "title": "Exception state", "type": "Informational"}, {"address": 1274, "code": "_pubish] == Membership.APPLIED);\n        m", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8000\ncalldata_AllPubs_0: 0x227d029100000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "reject(address,string)", "lineno": 73, "title": "Exception state", "type": "Informational"}, {"address": 1284, "code": "ership[_pubish] == Membership.APPLIED);\n        me", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_AllPubs_0: 0x227d029100000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "reject(address,string)", "lineno": 73, "title": "Exception state", "type": "Informational"}, {"address": 1384, "code": "= Membership.REJECTED;\n        msg.sender", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x400\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0x8000\ncalldata_AllPubs_0: 0x227d029100000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "reject(address,string)", "lineno": 74, "title": "Exception state", "type": "Informational"}, {"address": 1393, "code": "ubish] = Membership.REJECTED;\n        msg.sender.", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x400\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0x0\ncalldata_AllPubs_0: 0x227d029100000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "reject(address,string)", "lineno": 74, "title": "Exception state", "type": "Informational"}, {"address": 1723, "code": "ert(membership[_pubish] <= Membership.R", "debug": "The exception is triggered under the following conditions:\n\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffff4e5d43d13affff\ncalldata_AllPubs_0: 0x32434a2e00000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "register(address,string)", "lineno": 54, "title": "Exception state", "type": "Informational"}, {"address": 1823, "code": "membership[_pubish] = Membership.APPLIED;\n", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0x8000\ncalldata_AllPubs_0: 0x32434a2e00000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0xb1a2bc2ec50000\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "register(address,string)", "lineno": 55, "title": "Exception state", "type": "Informational"}, {"address": 1833, "code": "       membership[_pubish] = Membership.APPLIED;\n ", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0x200\ncalldata_AllPubs_0: 0x32434a2e00000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0xb1a2bc2ec50000\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "register(address,string)", "lineno": 55, "title": "Exception state", "type": "Informational"}, {"address": 2212, "code": "== Membership.UNCONTACTED);\n        member", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8000\ncalldata_AllPubs_0: 0x37f1a47000000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "appoint(address)", "lineno": 84, "title": "Exception state", "type": "Informational"}, {"address": 2222, "code": "egate] == Membership.UNCONTACTED);\n        members", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_AllPubs_0: 0x37f1a47000000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "appoint(address)", "lineno": 84, "title": "Exception state", "type": "Informational"}, {"address": 2322, "code": "embership.BOARD;\n        NewBoardMember(_delega", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x400\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0x8000\ncalldata_AllPubs_0: 0x37f1a47000000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "appoint(address)", "lineno": 85, "title": "Exception state", "type": "Informational"}, {"address": 2331, "code": "te] = Membership.BOARD;\n        NewBoardMember(_delegat", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x400\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0x400\ncalldata_AllPubs_0: 0x37f1a47000000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "appoint(address)", "lineno": 85, "title": "Exception state", "type": "Informational"}, {"address": 2566, "code": "nction AllPubs()\n    ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_AllPubs_4: 0x0\nstorage_2: 0x0\ncalldata_AllPubs_0: 0x721fa63000000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "_function_0x721fa630", "lineno": 33, "title": "Exception state", "type": "Informational"}, {"address": 2745, "code": "embership[_pubish] == Membership.APPLIED);", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8000\ncalldata_AllPubs_0: 0x9f00592000000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "accept(address)", "lineno": 63, "title": "Exception state", "type": "Informational"}, {"address": 2755, "code": "ssert(membership[_pubish] == Membership.APPLIED);\n", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_AllPubs_0: 0x9f00592000000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "accept(address)", "lineno": 63, "title": "Exception state", "type": "Informational"}, {"address": 2855, "code": "[_pubish] = Membership.ACCEPTED;\n        ", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x400\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0x8000\ncalldata_AllPubs_0: 0x9f00592000000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "accept(address)", "lineno": 64, "title": "Exception state", "type": "Informational"}, {"address": 2864, "code": "bership[_pubish] = Membership.ACCEPTED;\n        m", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x400\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0x0\ncalldata_AllPubs_0: 0x9f00592000000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "accept(address)", "lineno": 64, "title": "Exception state", "type": "Informational"}, {"address": 3049, "code": ";\n\n/**\n * Manually", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x400\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0x200\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_3016: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_AllPubs_0: 0x9f00592000000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `accept(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "accept(address)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3295, "code": "Pubs {\n    // the application fee serves to incentivize the board to review applications quickly\n    uint256 constant public registrationBounty = 50 finney;\n    // the board receives less when it rejects candidates\n    uint256 constant public invalidationBounty = 5 finney;\n\n    enum Membership {\n        UNCONTACTED, // default\n        REJECTED, // rejected applicant\n        APPLIED, // application\n        ACCEPTED, // accepted applicant\n        BOARD, // allowed to approve pubs\n        SOURCE // AllPubs creator\n    }\n\n    mapping (address => Membership) public membership;\n    // please do not trust REJECTED abis\n    mapping (address => string) public abis;\n    address[] public pubs;\n\n    function AllPubs()\n    public {\n        membership[msg.sender] = Membership.SOURCE;\n    }\n\n    event PubRegistered(address location);\n\n    event PubAccepted(address location);\n\n    event PubRejected(address location, string reason);\n\n    function pubCount()\n    public view\n    returns (uint256) {\n        return pubs.length;\n    }\n\n\n    function register(address _pubish, string _abi)\n    external payable {\n        assert(msg.value == registrationBounty);\n        assert(membership[_pubish] <= Membership.REJECTED);\n        membership[_pubish] = Membership.APPLIED;\n        abis[_pubish] = _abi;\n        PubRegistered(_pubish);\n    }\n\n    function accept(address _pubish)\n    external {\n        assert(membership[msg.sender] >= Membership.BOARD);\n        assert(membership[_pubish] == Membership.APPLIED);\n        membership[_pubish] = Membership.ACCEPTED;\n        msg.sender.transfer(registrationBounty);\n        pubs.push(_pubish);\n        PubAccepted(_pubish);\n    }\n\n    function reject(address _pubish, string _reason)\n    external {\n        assert(membership[msg.sender] >= Membership.BOARD);\n        assert(membership[_pubish] == Membership.APPLIED);\n        membership[_pubish] = Membership.REJECTED;\n        msg.sender.transfer(invalidationBounty);\n        PubRejected(_pubish, _reason);\n    }\n\n    event NewBoardMember(address _boardMember);\n\n    function appoint(address _delegate)\n    external {\n        assert(membership[msg.sender] >= Membership.BOARD);\n        assert(membership[_delegate] == Membership.UNCONTACTED);\n        membership[_delegate] = Membership.BOARD;\n        NewBoardMember(_delegate);\n    }\n}", "debug": "keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0xff902ce5996ee1ffdfe3002d44b173ad6ec8b6f7ed5aaaaecbfff7bec5a9cefb\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0xb7ea6d04d7bf7ffef8c5dbdd935ed25a3a4da102748aa23c3ffdcc3b4b170009\ncalldata_AllPubs_0: 0x32434a2e00000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0xb1a2bc2ec50000\n", "description": "A possible integer overflow exists in the function `register(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "register(address,string)", "lineno": 13, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3324, "code": "Pubs {\n    // the application fee serves to incentivize the board to review applications quickly\n    uint256 constant public registrationBounty = 50 finney;\n    // the board receives less when it rejects candidates\n    uint256 constant public invalidationBounty = 5 finney;\n\n    enum Membership {\n        UNCONTACTED, // default\n        REJECTED, // rejected applicant\n        APPLIED, // application\n        ACCEPTED, // accepted applicant\n        BOARD, // allowed to approve pubs\n        SOURCE // AllPubs creator\n    }\n\n    mapping (address => Membership) public membership;\n    // please do not trust REJECTED abis\n    mapping (address => string) public abis;\n    address[] public pubs;\n\n    function AllPubs()\n    public {\n        membership[msg.sender] = Membership.SOURCE;\n    }\n\n    event PubRegistered(address location);\n\n    event PubAccepted(address location);\n\n    event PubRejected(address location, string reason);\n\n    function pubCount()\n    public view\n    returns (uint256) {\n        return pubs.length;\n    }\n\n\n    function register(address _pubish, string _abi)\n    external payable {\n        assert(msg.value == registrationBounty);\n        assert(membership[_pubish] <= Membership.REJECTED);\n        membership[_pubish] = Membership.APPLIED;\n        abis[_pubish] = _abi;\n        PubRegistered(_pubish);\n    }\n\n    function accept(address _pubish)\n    external {\n        assert(membership[msg.sender] >= Membership.BOARD);\n        assert(membership[_pubish] == Membership.APPLIED);\n        membership[_pubish] = Membership.ACCEPTED;\n        msg.sender.transfer(registrationBounty);\n        pubs.push(_pubish);\n        PubAccepted(_pubish);\n    }\n\n    function reject(address _pubish, string _reason)\n    external {\n        assert(membership[msg.sender] >= Membership.BOARD);\n        assert(membership[_pubish] == Membership.APPLIED);\n        membership[_pubish] = Membership.REJECTED;\n        msg.sender.transfer(invalidationBounty);\n        PubRejected(_pubish, _reason);\n    }\n\n    event NewBoardMember(address _boardMember);\n\n    function appoint(address _delegate)\n    external {\n        assert(membership[msg.sender] >= Membership.BOARD);\n        assert(membership[_delegate] == Membership.UNCONTACTED);\n        membership[_delegate] = Membership.BOARD;\n        NewBoardMember(_delegate);\n    }\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0x0\ncalldata_AllPubs_4 + calldata_AllPubs_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_AllPubs_0: 0x32434a2e00000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0xb1a2bc2ec50000\n", "description": "A possible integer overflow exists in the function `register(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "register(address,string)", "lineno": 13, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3338, "code": "Pubs {\n    // the application fee serves to incentivize the board to review applications quickly\n    uint256 constant public registrationBounty = 50 finney;\n    // the board receives less when it rejects candidates\n    uint256 constant public invalidationBounty = 5 finney;\n\n    enum Membership {\n        UNCONTACTED, // default\n        REJECTED, // rejected applicant\n        APPLIED, // application\n        ACCEPTED, // accepted applicant\n        BOARD, // allowed to approve pubs\n        SOURCE // AllPubs creator\n    }\n\n    mapping (address => Membership) public membership;\n    // please do not trust REJECTED abis\n    mapping (address => string) public abis;\n    address[] public pubs;\n\n    function AllPubs()\n    public {\n        membership[msg.sender] = Membership.SOURCE;\n    }\n\n    event PubRegistered(address location);\n\n    event PubAccepted(address location);\n\n    event PubRejected(address location, string reason);\n\n    function pubCount()\n    public view\n    returns (uint256) {\n        return pubs.length;\n    }\n\n\n    function register(address _pubish, string _abi)\n    external payable {\n        assert(msg.value == registrationBounty);\n        assert(membership[_pubish] <= Membership.REJECTED);\n        membership[_pubish] = Membership.APPLIED;\n        abis[_pubish] = _abi;\n        PubRegistered(_pubish);\n    }\n\n    function accept(address _pubish)\n    external {\n        assert(membership[msg.sender] >= Membership.BOARD);\n        assert(membership[_pubish] == Membership.APPLIED);\n        membership[_pubish] = Membership.ACCEPTED;\n        msg.sender.transfer(registrationBounty);\n        pubs.push(_pubish);\n        PubAccepted(_pubish);\n    }\n\n    function reject(address _pubish, string _reason)\n    external {\n        assert(membership[msg.sender] >= Membership.BOARD);\n        assert(membership[_pubish] == Membership.APPLIED);\n        membership[_pubish] = Membership.REJECTED;\n        msg.sender.transfer(invalidationBounty);\n        PubRejected(_pubish, _reason);\n    }\n\n    event NewBoardMember(address _boardMember);\n\n    function appoint(address _delegate)\n    external {\n        assert(membership[msg.sender] >= Membership.BOARD);\n        assert(membership[_delegate] == Membership.UNCONTACTED);\n        membership[_delegate] = Membership.BOARD;\n        NewBoardMember(_delegate);\n    }\n}", "debug": "calldata_AllPubs_32 + 4: 0xda439b2041c8c00602000000000000000000000000000000000000000000001a\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0x0\ncalldata_AllPubs_4 + calldata_AllPubs_32 + 4: 0x98b80124e0c0001a297fffffffffffffffffffffffffffffffffffffffffffc4\ncalldata_AllPubs_0: 0x32434a2e00000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0xb1a2bc2ec50000\n", "description": "A possible integer overflow exists in the function `register(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "register(address,string)", "lineno": 13, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3355, "code": "Pubs {\n    // the application fee serves to incentivize the board to review applications quickly\n    uint256 constant public registrationBounty = 50 finney;\n    // the board receives less when it rejects candidates\n    uint256 constant public invalidationBounty = 5 finney;\n\n    enum Membership {\n        UNCONTACTED, // default\n        REJECTED, // rejected applicant\n        APPLIED, // application\n        ACCEPTED, // accepted applicant\n        BOARD, // allowed to approve pubs\n        SOURCE // AllPubs creator\n    }\n\n    mapping (address => Membership) public membership;\n    // please do not trust REJECTED abis\n    mapping (address => string) public abis;\n    address[] public pubs;\n\n    function AllPubs()\n    public {\n        membership[msg.sender] = Membership.SOURCE;\n    }\n\n    event PubRegistered(address location);\n\n    event PubAccepted(address location);\n\n    event PubRejected(address location, string reason);\n\n    function pubCount()\n    public view\n    returns (uint256) {\n        return pubs.length;\n    }\n\n\n    function register(address _pubish, string _abi)\n    external payable {\n        assert(msg.value == registrationBounty);\n        assert(membership[_pubish] <= Membership.REJECTED);\n        membership[_pubish] = Membership.APPLIED;\n        abis[_pubish] = _abi;\n        PubRegistered(_pubish);\n    }\n\n    function accept(address _pubish)\n    external {\n        assert(membership[msg.sender] >= Membership.BOARD);\n        assert(membership[_pubish] == Membership.APPLIED);\n        membership[_pubish] = Membership.ACCEPTED;\n        msg.sender.transfer(registrationBounty);\n        pubs.push(_pubish);\n        PubAccepted(_pubish);\n    }\n\n    function reject(address _pubish, string _reason)\n    external {\n        assert(membership[msg.sender] >= Membership.BOARD);\n        assert(membership[_pubish] == Membership.APPLIED);\n        membership[_pubish] = Membership.REJECTED;\n        msg.sender.transfer(invalidationBounty);\n        PubRejected(_pubish, _reason);\n    }\n\n    event NewBoardMember(address _boardMember);\n\n    function appoint(address _delegate)\n    external {\n        assert(membership[msg.sender] >= Membership.BOARD);\n        assert(membership[_delegate] == Membership.UNCONTACTED);\n        membership[_delegate] = Membership.BOARD;\n        NewBoardMember(_delegate);\n    }\n}", "debug": "calldata_AllPubs_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0x0\ncalldata_AllPubs_4 + calldata_AllPubs_32 + 4: 0x21\ncalldata_AllPubs_0: 0x32434a2e00000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0xb1a2bc2ec50000\n", "description": "A possible integer overflow exists in the function `register(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "register(address,string)", "lineno": 13, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3360, "code": "Pubs {\n    // the application fee serves to incentivize the board to review applications quickly\n    uint256 constant public registrationBounty = 50 finney;\n    // the board receives less when it rejects candidates\n    uint256 constant public invalidationBounty = 5 finney;\n\n    enum Membership {\n        UNCONTACTED, // default\n        REJECTED, // rejected applicant\n        APPLIED, // application\n        ACCEPTED, // accepted applicant\n        BOARD, // allowed to approve pubs\n        SOURCE // AllPubs creator\n    }\n\n    mapping (address => Membership) public membership;\n    // please do not trust REJECTED abis\n    mapping (address => string) public abis;\n    address[] public pubs;\n\n    function AllPubs()\n    public {\n        membership[msg.sender] = Membership.SOURCE;\n    }\n\n    event PubRegistered(address location);\n\n    event PubAccepted(address location);\n\n    event PubRejected(address location, string reason);\n\n    function pubCount()\n    public view\n    returns (uint256) {\n        return pubs.length;\n    }\n\n\n    function register(address _pubish, string _abi)\n    external payable {\n        assert(msg.value == registrationBounty);\n        assert(membership[_pubish] <= Membership.REJECTED);\n        membership[_pubish] = Membership.APPLIED;\n        abis[_pubish] = _abi;\n        PubRegistered(_pubish);\n    }\n\n    function accept(address _pubish)\n    external {\n        assert(membership[msg.sender] >= Membership.BOARD);\n        assert(membership[_pubish] == Membership.APPLIED);\n        membership[_pubish] = Membership.ACCEPTED;\n        msg.sender.transfer(registrationBounty);\n        pubs.push(_pubish);\n        PubAccepted(_pubish);\n    }\n\n    function reject(address _pubish, string _reason)\n    external {\n        assert(membership[msg.sender] >= Membership.BOARD);\n        assert(membership[_pubish] == Membership.APPLIED);\n        membership[_pubish] = Membership.REJECTED;\n        msg.sender.transfer(invalidationBounty);\n        PubRejected(_pubish, _reason);\n    }\n\n    event NewBoardMember(address _boardMember);\n\n    function appoint(address _delegate)\n    external {\n        assert(membership[msg.sender] >= Membership.BOARD);\n        assert(membership[_delegate] == Membership.UNCONTACTED);\n        membership[_delegate] = Membership.BOARD;\n        NewBoardMember(_delegate);\n    }\n}", "debug": "calldata_AllPubs_32 + 4: 0x8638cebc3ef479b69080227bf800000000000006ebdfb9c10e3eff4826476bf\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AllPubs_4: 0x0\ncalldata_AllPubs_4 + calldata_AllPubs_32 + 4: 0x987c2551f8080d0a0016240787c0618800000000002903c3e006100b780cc80d\ncalldata_AllPubs_0: 0x32434a2e00000000000000000000000000000000000000000000000000000000\ncalldatasize_AllPubs: 0x4\ncallvalue: 0xb1a2bc2ec50000\n", "description": "A possible integer overflow exists in the function `register(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x11524a168d1b888df781a87a6b4511f199b543ad.sol", "function": "register(address,string)", "lineno": 13, "title": "Integer Overflow ", "type": "Warning"}], "success": true}