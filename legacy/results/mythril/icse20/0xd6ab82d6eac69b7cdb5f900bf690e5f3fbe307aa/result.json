{
  "contract": "0xd6ab82d6eac69b7cdb5f900bf690e5f3fbe307aa",
  "tool": "mythril",
  "start": 1563637930.53832,
  "end": 1563638150.59632,
  "duration": 220.05799984931946,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 734,
        "code": "\n        require(_DACusers.length > 0);\n        require(_DACusers.length == _values.length);\n        uint256 amount = 0;\n        uint i = 0;\n        for (i = 0; i < _DACusers.length; i++) {\n            require(amount + _values[i] >= amount);\n            amount += _values[i];  \n        }\n        require(balanceOf[msg.sender] >= amount);\n        balanceOf[msg.sender] -= amount;\n        for (i = 0; i < _DACusers.length; i++) {\n            require(balanceOf[_DACusers[i]] + _values[i] >= balanceOf[_DACusers[i]]);\n            balanceOf[_DACusers[i]] += _values[i];\n            emit Transfer(msg.sender, _DACusers[i], _values[i]);\n        }\n    }\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    ",
        "debug": "calldata_DACCToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_DACCToken_0: 0x6724348200000000000000000000000000000000000000000000000000000000\ncalldatasize_DACCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `airdrop(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xd6ab82d6eac69b7cdb5f900bf690e5f3fbe307aa.sol",
        "function": "airdrop(address[],uint256[])",
        "lineno": 75,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1305,
        "code": "    }\n\n    function airdrop(address[] _DACusers,uint256[] _values) isRunning ",
        "debug": "calldata_DACCToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_DACCToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_DACCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xd6ab82d6eac69b7cdb5f900bf690e5f3fbe307aa.sol",
        "function": "setName(string)",
        "lineno": 73,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1741,
        "code": "msg.sender);\n        _;\n   ",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_DACCToken_0: 0x7da68f500000000000000000000000000000000000000000000000000000000\ncalldatasize_DACCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/25/0xd6ab82d6eac69b7cdb5f900bf690e5f3fbe307aa.sol",
        "function": "stop()",
        "lineno": 17,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1797,
        "code": "     _;\n    }\n\n ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0xff00\ncalldata_DACCToken_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncalldatasize_DACCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/25/0xd6ab82d6eac69b7cdb5f900bf690e5f3fbe307aa.sol",
        "function": "approve(address,uint256)",
        "lineno": 23,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1832,
        "code": "\n        _;\n    }\n\n    co",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0x0\ncalldata_DACCToken_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncalldatasize_DACCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/25/0xd6ab82d6eac69b7cdb5f900bf690e5f3fbe307aa.sol",
        "function": "approve(address,uint256)",
        "lineno": 27,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2255,
        "code": "     _;\n    }\n\n ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0xff00\ncalldata_DACCToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_DACCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/25/0xd6ab82d6eac69b7cdb5f900bf690e5f3fbe307aa.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 23,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2290,
        "code": "\n        _;\n    }\n\n    co",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0x0\ncalldata_DACCToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_DACCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/25/0xd6ab82d6eac69b7cdb5f900bf690e5f3fbe307aa.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 27,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3088,
        "code": "     _;\n    }\n\n ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0xff00\ncalldata_DACCToken_0: 0x6724348200000000000000000000000000000000000000000000000000000000\ncalldatasize_DACCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/25/0xd6ab82d6eac69b7cdb5f900bf690e5f3fbe307aa.sol",
        "function": "airdrop(address[],uint256[])",
        "lineno": 23,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4121,
        "code": "     _;\n    }\n\n ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0xff00\ncalldata_DACCToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_DACCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/25/0xd6ab82d6eac69b7cdb5f900bf690e5f3fbe307aa.sol",
        "function": "transfer(address,uint256)",
        "lineno": 23,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4156,
        "code": "\n        _;\n    }\n\n    co",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0x0\ncalldata_DACCToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_DACCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/25/0xd6ab82d6eac69b7cdb5f900bf690e5f3fbe307aa.sol",
        "function": "transfer(address,uint256)",
        "lineno": 27,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4731,
        "code": "msg.sender);\n        _;\n   ",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_DACCToken_0: 0xbe9a655500000000000000000000000000000000000000000000000000000000\ncalldatasize_DACCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/25/0xd6ab82d6eac69b7cdb5f900bf690e5f3fbe307aa.sol",
        "function": "start()",
        "lineno": 17,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4849,
        "code": "msg.sender);\n        _;\n   ",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_DACCToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_DACCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/25/0xd6ab82d6eac69b7cdb5f900bf690e5f3fbe307aa.sol",
        "function": "setName(string)",
        "lineno": 17,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4981,
        "code": "ntract DACCToken {\n\n    string public name = \"Decentralized Accessible Content Chain\";\n    string public symbol = \"DACC\";\n    uint256 public decimals = 6;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 30000000000000000;\n    bool public stopped = false;\n    address owner = 0x1e113613C889C76b792AdfdcbBd155904F3310a5;\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier isRunning {\n        assert(!stopped);\n        _;\n    }\n\n    modifier isValidAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    constructor() public {\n        balanceOf[owner] = totalSupply;\n        emit Transfer(0x0, owner, totalSupply);\n    }\n\n    function transfer(address _to, uint256 _value) isRunning isValidAddress public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) isRunning isValidAddress public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) isRunning isValidAddress public returns (bool success) {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function stop() isOwner public {\n        stopped = true;\n    }\n\n    function start() isOwner public {\n        stopped = false;\n    }\n\n    function setName(string _name) isOwner public {\n        name = _name;\n    }\n\n    function airdrop(address[] _DACusers,uint256[] _values) isRunning public {\n        require(_DACusers.length > 0);\n        require(_DACusers.length == _values.length);\n        uint256 amount = 0;\n        uint i = 0;\n        for (i = 0; i < _DACusers.length; i++) {\n            require(amount + _values[i] >= amount);\n            amount += _values[i];  \n        }\n        require(balanceOf[msg.sender] >= amount);\n        balanceOf[msg.sender] -= amount;\n        for (i = 0; i < _DACusers.length; i++) {\n            require(balanceOf[_DACusers[i]] + _values[i] >= balanceOf[_DACusers[i]]);\n            balanceOf[_DACusers[i]] += _values[i];\n            emit Transfer(msg.sender, _DACusers[i], _values[i]);\n        }\n    }\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
        "debug": "calldata_DACCToken_4 + calldata_DACCToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_6: 0x0\ncalldata_DACCToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_DACCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xd6ab82d6eac69b7cdb5f900bf690e5f3fbe307aa.sol",
        "function": "setName(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4995,
        "code": "ntract DACCToken {\n\n    string public name = \"Decentralized Accessible Content Chain\";\n    string public symbol = \"DACC\";\n    uint256 public decimals = 6;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 30000000000000000;\n    bool public stopped = false;\n    address owner = 0x1e113613C889C76b792AdfdcbBd155904F3310a5;\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier isRunning {\n        assert(!stopped);\n        _;\n    }\n\n    modifier isValidAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    constructor() public {\n        balanceOf[owner] = totalSupply;\n        emit Transfer(0x0, owner, totalSupply);\n    }\n\n    function transfer(address _to, uint256 _value) isRunning isValidAddress public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) isRunning isValidAddress public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) isRunning isValidAddress public returns (bool success) {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function stop() isOwner public {\n        stopped = true;\n    }\n\n    function start() isOwner public {\n        stopped = false;\n    }\n\n    function setName(string _name) isOwner public {\n        name = _name;\n    }\n\n    function airdrop(address[] _DACusers,uint256[] _values) isRunning public {\n        require(_DACusers.length > 0);\n        require(_DACusers.length == _values.length);\n        uint256 amount = 0;\n        uint i = 0;\n        for (i = 0; i < _DACusers.length; i++) {\n            require(amount + _values[i] >= amount);\n            amount += _values[i];  \n        }\n        require(balanceOf[msg.sender] >= amount);\n        balanceOf[msg.sender] -= amount;\n        for (i = 0; i < _DACusers.length; i++) {\n            require(balanceOf[_DACusers[i]] + _values[i] >= balanceOf[_DACusers[i]]);\n            balanceOf[_DACusers[i]] += _values[i];\n            emit Transfer(msg.sender, _DACusers[i], _values[i]);\n        }\n    }\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
        "debug": "calldata_DACCToken_4 + calldata_DACCToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_6: 0x0\ncalldata_DACCToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_DACCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xd6ab82d6eac69b7cdb5f900bf690e5f3fbe307aa.sol",
        "function": "setName(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}