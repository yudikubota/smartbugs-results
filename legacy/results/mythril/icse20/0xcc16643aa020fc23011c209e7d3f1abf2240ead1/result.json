{
  "contract": "0xcc16643aa020fc23011c209e7d3f1abf2240ead1",
  "tool": "mythril",
  "start": 1563499805.9180512,
  "end": 1563499832.465144,
  "duration": 26.54709267616272,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 147,
        "code": "_token, address[] addresses, uint amount) public {\n    ERC20 token = ERC20(_token);\n    for(uint i = 0; i < addresses.length; i++) {\n      require(token.transferFrom(msg.sender, addresses[i], amount));\n    }\n  }\n  function multiSendEth(address",
        "debug": "calldata_MultiSend_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MultiSend_0: 0x5b2a0e9600000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSend: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `multiSend(address,address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xcc16643aa020fc23011c209e7d3f1abf2240ead1.sol",
        "function": "multiSend(address,address[],uint256)",
        "lineno": 28,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 246,
        "code": "ddresses) public payable {\n    uint256 amount = msg.value / addresses.length;\n    for(uint i = 0; i < addresses.length; i++) {\n      addresses[i].transfer(amount);\n    }\n  }\n}",
        "debug": "calldata_MultiSend_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MultiSend_0: 0xaafafbf300000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSend: 0x4\n",
        "description": "A possible integer overflow exists in the function `multiSendEth(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xcc16643aa020fc23011c209e7d3f1abf2240ead1.sol",
        "function": "multiSendEth(address[])",
        "lineno": 34,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 575,
        "code": " addresses[i], amount));\n    }\n  }\n  function multiS",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/7/0xcc16643aa020fc23011c209e7d3f1abf2240ead1.sol",
        "function": "multiSend(address,address[],uint256)",
        "lineno": 31,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 575,
        "code": " addresses[i], amount));\n    }\n  }\n  function multiS",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 575\nCall at address: 575\n",
        "filename": "/unique_chucks/7/0xcc16643aa020fc23011c209e7d3f1abf2240ead1.sol",
        "function": "multiSend(address,address[],uint256)",
        "lineno": 31,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 676,
        "code": "for(uint i = 0; i < addresse",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSend_0: 0xaafafbf300000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSend: 0x4\ncalldata_MultiSend_4 + calldata_MultiSend_4: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xcc16643aa020fc23011c209e7d3f1abf2240ead1.sol",
        "function": "multiSendEth(address[])",
        "lineno": 36,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}