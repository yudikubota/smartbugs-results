{"error": null, "issues": [{"address": 2110, "code": ") internal view {\n        uint256 l", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0xe0824724ea4c1a8dc7f80bb343c8b61ba16851d9.sol", "function": "_function_0x1e1401f8", "lineno": 197, "title": "Message call to external contract", "type": "Informational"}, {"address": 2566, "code": "result[i - 1] = conve", "debug": "storage_1: 0x0\ncalldata_TokenConverterRouter_0: 0x56f0912500000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenConverterRouter: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `getConverters()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/24/0xe0824724ea4c1a8dc7f80bb343c8b61ba16851d9.sol", "function": "getConverters()", "lineno": 97, "title": "Integer Underflow", "type": "Warning"}, {"address": 3308, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/24/0xe0824724ea4c1a8dc7f80bb343c8b61ba16851d9.sol", "function": "_function_0x5e35359e", "lineno": 254, "title": "Message call to external contract", "type": "Warning"}, {"address": 3387, "code": "> uint256) private converterToInde", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenConverterRouter_4: 0x0\nstorage_1: 0x0\ncalldata_TokenConverterRouter_0: 0x60a6e23a00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenConverterRouter: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0xe0824724ea4c1a8dc7f80bb343c8b61ba16851d9.sol", "function": "_function_0x60a6e23a", "lineno": 65, "title": "Exception state", "type": "Informational"}, {"address": 3771, "code": ";\n\n// File: contra", "debug": "storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenConverterRouter_0: 0x6ce1c4dc00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenConverterRouter: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenConverterRouter_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x6ce1c4dc`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xe0824724ea4c1a8dc7f80bb343c8b61ba16851d9.sol", "function": "_function_0x6ce1c4dc", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3863, "code": "onverter);\n        return true;", "debug": "storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenConverterRouter_0: 0x6ce1c4dc00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenConverterRouter: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenConverterRouter_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `_function_0x6ce1c4dc`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/24/0xe0824724ea4c1a8dc7f80bb343c8b61ba16851d9.sol", "function": "_function_0x6ce1c4dc", "lineno": 112, "title": "Integer Underflow", "type": "Warning"}, {"address": 4597, "code": "en transfer\");\n        }\n\n        uint256 res", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/24/0xe0824724ea4c1a8dc7f80bb343c8b61ba16851d9.sol", "function": "_function_0x75892cf1", "lineno": 155, "title": "Message call to external contract", "type": "Warning"}, {"address": 4597, "code": "en transfer\");\n        }\n\n        uint256 res", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4935\n", "filename": "/unique_chucks/24/0xe0824724ea4c1a8dc7f80bb343c8b61ba16851d9.sol", "function": "_function_0x75892cf1", "lineno": 155, "title": "Multiple Calls", "type": "Information"}, {"address": 4935, "code": "amount, _minReturn);\n        requ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/24/0xe0824724ea4c1a8dc7f80bb343c8b61ba16851d9.sol", "function": "_function_0x75892cf1", "lineno": 158, "title": "Message call to external contract", "type": "Warning"}, {"address": 5980, "code": " require(_to.transfer(msg.s", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/24/0xe0824724ea4c1a8dc7f80bb343c8b61ba16851d9.sol", "function": "_function_0x75892cf1", "lineno": 177, "title": "Message call to external contract", "type": "Warning"}, {"address": 7122, "code": "r;\n        converters.length--;\n ", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenConverterRouter_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenConverterRouter_0: 0x9e76a00700000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenConverterRouter: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0xe0824724ea4c1a8dc7f80bb343c8b61ba16851d9.sol", "function": "removeConverter(address)", "lineno": 127, "title": "Exception state", "type": "Informational"}, {"address": 7251, "code": "vedConverter(_con", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenConverterRouter_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x10000000000000000000000000000000001000001\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenConverterRouter_0: 0x9e76a00700000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenConverterRouter: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0xe0824724ea4c1a8dc7f80bb343c8b61ba16851d9.sol", "function": "removeConverter(address)", "lineno": 130, "title": "Exception state", "type": "Informational"}, {"address": 8948, "code": "return (best, evaluated);\n    }\n\n    fun", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0xe0824724ea4c1a8dc7f80bb343c8b61ba16851d9.sol", "function": "_function_0x75892cf1", "lineno": 228, "title": "Message call to external contract", "type": "Informational"}, {"address": 8948, "code": "return (best, evaluated);\n    }\n\n    fun", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2110\n", "filename": "/unique_chucks/24/0xe0824724ea4c1a8dc7f80bb343c8b61ba16851d9.sol", "function": "_function_0x1e1401f8", "lineno": 228, "title": "Multiple Calls", "type": "Information"}, {"address": 9558, "code": "}\n\n    function withdrawTokens(\n        T", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0xe0824724ea4c1a8dc7f80bb343c8b61ba16851d9.sol", "function": "_function_0x75892cf1", "lineno": 242, "title": "Message call to external contract", "type": "Informational"}, {"address": 9558, "code": "}\n\n    function withdrawTokens(\n        T", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 8948\n", "filename": "/unique_chucks/24/0xe0824724ea4c1a8dc7f80bb343c8b61ba16851d9.sol", "function": "_function_0x75892cf1", "lineno": 242, "title": "Multiple Calls", "type": "Information"}], "success": true}