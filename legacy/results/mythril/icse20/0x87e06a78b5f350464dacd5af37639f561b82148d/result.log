{"error": null, "issues": [{"address": 288, "code": "     // Checkout req", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x87e06a78b5f350464dacd5af37639f561b82148d.sol", "function": "fallback", "lineno": 27, "title": "Message call to external contract", "type": "Informational"}, {"address": 288, "code": "     // Checkout req", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 738\nCall at address: 738\nCall at address: 597\nCall at address: 738\nCall at address: 738\nCall at address: 597\nCall at address: 738\nCall at address: 738\nCall at address: 597\nCall at address: 738\nCall at address: 738\nCall at address: 597\nCall at address: 738\nCall at address: 738\nCall at address: 597\nCall at address: 738\nCall at address: 738\nCall at address: 597\nCall at address: 738\nCall at address: 738\nCall at address: 597\nCall at address: 738\nCall at address: 738\nCall at address: 597\n", "filename": "/unique_contracts/0x87e06a78b5f350464dacd5af37639f561b82148d.sol", "function": "fallback", "lineno": 27, "title": "Multiple Calls", "type": "Information"}, {"address": 597, "code": ");\n        // Calculate remainin", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x87e06a78b5f350464dacd5af37639f561b82148d.sol", "function": "fallback", "lineno": 33, "title": "Message call to external contract", "type": "Informational"}, {"address": 597, "code": ");\n        // Calculate remainin", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 738\n", "filename": "/unique_contracts/0x87e06a78b5f350464dacd5af37639f561b82148d.sol", "function": "fallback", "lineno": 33, "title": "Multiple Calls", "type": "Information"}, {"address": 1473, "code": "\n    }\n}", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x87e06a78b5f350464dacd5af37639f561b82148d.sol", "function": "withdrawFunds(address)", "lineno": 57, "title": "Message call to external contract", "type": "Warning"}, {"address": 1473, "code": "\n    }\n}", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1665\n", "filename": "/unique_contracts/0x87e06a78b5f350464dacd5af37639f561b82148d.sol", "function": "withdrawFunds(address)", "lineno": 57, "title": "Multiple Calls", "type": "Information"}, {"address": 1665, "code": "}\n        return true;\n    }\n}", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x87e06a78b5f350464dacd5af37639f561b82148d.sol", "function": "withdrawFunds(address)", "lineno": 56, "title": "Message call to external contract", "type": "Warning"}, {"address": 1833, "code": "   }\n\n    function", "debug": "calldata_Token_4: 0x541250e575bb18197c52e1cf3d6a6eb3bcdb681b1c66122daa075000736d60\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x9078316a00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `icoPrice(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x87e06a78b5f350464dacd5af37639f561b82148d.sol", "function": "icoPrice(uint256)", "lineno": 46, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1850, "code": "urn true;\n    }\n\n    function ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x9078316a00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x87e06a78b5f350464dacd5af37639f561b82148d.sol", "function": "icoPrice(uint256)", "lineno": 45, "title": "Exception state", "type": "Informational"}], "success": true}