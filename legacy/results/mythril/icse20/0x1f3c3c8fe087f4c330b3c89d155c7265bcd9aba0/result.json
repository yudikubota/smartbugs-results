{
  "contract": "0x1f3c3c8fe087f4c330b3c89d155c7265bcd9aba0",
  "tool": "mythril",
  "start": 1563574850.0388017,
  "end": 1563574856.40794,
  "duration": 6.369138240814209,
  "analysis": {
    "success": false,
    "error": "Solc experienced a fatal error (code 1).\n\n/unique_chucks/12/0x1f3c3c8fe087f4c330b3c89d155c7265bcd9aba0.sol:1:1: Error: Source file requires different compiler version (current compiler is 0.4.25+commit.59dbf8f1.Linux.g++ - note that nightly builds are considered to be strictly less than the released version\npragma solidity 0.4.18;\r\n^---------------------^\n/unique_chucks/12/0x1f3c3c8fe087f4c330b3c89d155c7265bcd9aba0.sol:1328:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function usingP4D(address _P4D_address) public {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/12/0x1f3c3c8fe087f4c330b3c89d155c7265bcd9aba0.sol:1410:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function CoinPair(string _fSym, string _tSym, address _ownerAddress, address _devAddress, address _P4D_address) public payable usingP4D(_P4D_address) {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/12/0x1f3c3c8fe087f4c330b3c89d155c7265bcd9aba0.sol:1731:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function FluxDelta(address _P4D_address) public usingP4D(_P4D_address) {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/12/0x1f3c3c8fe087f4c330b3c89d155c7265bcd9aba0.sol:991:50: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        oraclize_randomDS_setCommitment(queryId, keccak256(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\r\n                                                 ^-------------------------------------------------------------^\n/unique_chucks/12/0x1f3c3c8fe087f4c330b3c89d155c7265bcd9aba0.sol:1103:47: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;\r\n                                              ^---------------------------^\n/unique_chucks/12/0x1f3c3c8fe087f4c330b3c89d155c7265bcd9aba0.sol:1103:37: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;\r\n                                    ^--------------------------------------^\n/unique_chucks/12/0x1f3c3c8fe087f4c330b3c89d155c7265bcd9aba0.sol:1103:37: Warning: The provided argument of type bytes32 is not implicitly convertible to expected type bytes memory.\n        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;\r\n                                    ^--------------------------------------^\n/unique_chucks/12/0x1f3c3c8fe087f4c330b3c89d155c7265bcd9aba0.sol:1121:48: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (oraclize_randomDS_args[queryId] == keccak256(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\r\n                                               ^--------------------------------------------^\n/unique_chucks/12/0x1f3c3c8fe087f4c330b3c89d155c7265bcd9aba0.sol:1503:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        RequestSubmitted(queryId);\r\n        ^-----------------------^\n",
    "issues": []
  }
}