{
  "contract": "0xfa1a95e1f2922c0652f159a1922379d712aa7953",
  "tool": "mythril",
  "start": 1563698428.7337894,
  "end": 1563698464.4056501,
  "duration": 35.671860694885254,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 136,
        "code": "rdrop( address tokAddr,\n                    address[] dests,\n                    uint[] quantities ) public returns (uint) {\n\n    for (uint ii = 0; ii < dests.length; ii++) {\n      ERC20(tokAddr).transfer( dests[ii], quantities[ii] );\n    }\n\n    return ii;\n  }\n}",
        "debug": "calldata_ERC20_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20_0: 0x25ff12f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x025ff12f`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/39/0xfa1a95e1f2922c0652f159a1922379d712aa7953.sol",
        "function": "_function_0x025ff12f",
        "lineno": 12,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 373,
        "code": ";\n    }\n\n    r",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC20_4 + calldata_ERC20_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20_0: 0x25ff12f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\nmem_128 + 32 + 32*calldata_ERC20_4 + calldata_ERC20_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/39/0xfa1a95e1f2922c0652f159a1922379d712aa7953.sol",
        "function": "_function_0x025ff12f",
        "lineno": 17,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 520,
        "code": "ransfer( dests[ii], quantities[ii] );\n    }\n\n    ret",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/39/0xfa1a95e1f2922c0652f159a1922379d712aa7953.sol",
        "function": "_function_0x025ff12f",
        "lineno": 17,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 520,
        "code": "ransfer( dests[ii], quantities[ii] );\n    }\n\n    ret",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 520\nCall at address: 520\n",
        "filename": "/unique_chucks/39/0xfa1a95e1f2922c0652f159a1922379d712aa7953.sol",
        "function": "_function_0x025ff12f",
        "lineno": 17,
        "title": "Multiple Calls",
        "type": "Information"
      }
    ],
    "success": true
  }
}