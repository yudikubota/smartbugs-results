{
  "contract": "0x804c8336846d8206c95cee24752d514210b5a240",
  "tool": "mythril",
  "start": 1563591812.9379852,
  "end": 1563591900.6653645,
  "duration": 87.727379322052,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 370,
        "code": "orsLength);\n        ipAddresses = new bytes4[](validatorsLength);\n\n        for (uint i = 0; i < validatorsLength; i++) {\n            bytes4 ip;\n            bytes20 orbsAddr;\n            ( , ip , , orbsAddr) = orbsValidatorsRegistry.getValidatorData(validators[i]);\n            nodeAddresses[i] = orbsAddr;\n            ipAddresses[i] = ip;\n        }\n    }\n\n    /// @dev internal method that returns a slice of an array.\n    function sliceArray(address[] memory arr, uint len)\n        internal\n        pure\n        returns (address[] memory)\n    {\n        require(len <= arr.length, \"sub array must be longer then array\");\n\n        address[] memory result = new address[](len);\n        for(u",
        "debug": "mem_160 + 32*storage_3 + 32: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_Ownable_0: 0x2042967300000000000000000000000000000000000000000000000000000000\ncalldatasize_Ownable: 0x4\nmem_128 + 32 + 32*storage_3: 0x0\nstorage_3: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getNetworkTopology()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x804c8336846d8206c95cee24752d514210b5a240.sol",
        "function": "getNetworkTopology()",
        "lineno": 326,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 436,
        "code": "orsLength);\n        ipAddresses = new bytes4[](validatorsLength);\n\n        for (uint i = 0; i < validatorsLength; i++) {\n            bytes4 ip;\n            bytes20 orbsAddr;\n            ( , ip , , orbsAddr) = orbsValidatorsRegistry.getValidatorData(validators[i]);\n            nodeAddresses[i] = orbsAddr;\n            ipAddresses[i] = ip;\n        }\n    }\n\n    /// @dev internal method that returns a slice of an array.\n    function sliceArray(address[] memory arr, uint len)\n        internal\n        pure\n        returns (address[] memory)\n    {\n        require(len <= arr.length, \"sub array must be longer then array\");\n\n        address[] memory result = new address[](len);\n        for(u",
        "debug": "mem_160 + 32*storage_3 + 32: 0x1\nmem_192 + 32*storage_3 + 32 + 32*mem_128 + 32 + 32*storage_3: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_Ownable_0: 0x2042967300000000000000000000000000000000000000000000000000000000\ncalldatasize_Ownable: 0x4\nmem_128 + 32 + 32*storage_3: 0x0\nstorage_3: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getNetworkTopology()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x804c8336846d8206c95cee24752d514210b5a240.sol",
        "function": "getNetworkTopology()",
        "lineno": 326,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 991,
        "code": "     if (orbsValidatorsRegistry.isValidator(approvedValidators[i])) {\n                validators[pushAt] = approvedValidators[i];\n                pushAt++;\n            }\n        }\n\n        return sliceArray(validators, pushAt);\n    }\n\n    /// @dev returns a list of all validators that have been approved and exist in the validator registration\n    ///      database. same as getValidators but returns addresses represented as byte20.\n    function getValidatorsBytes20() external view returns (bytes20[]) {\n        address[",
        "debug": "mem_128 + 32 + 32*storage_3: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_Ownable_0: 0xb7ab4db500000000000000000000000000000000000000000000000000000000\ncalldatasize_Ownable: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getValidators()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x804c8336846d8206c95cee24752d514210b5a240.sol",
        "function": "getValidators()",
        "lineno": 284,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1811,
        "code": "    {\n        require(len <= arr.length, \"sub array mu",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/21/0x804c8336846d8206c95cee24752d514210b5a240.sol",
        "function": "getNetworkTopology()",
        "lineno": 343,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3673,
        "code": "een approved and exist in the validator registration\n    ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/21/0x804c8336846d8206c95cee24752d514210b5a240.sol",
        "function": "getValidatorsBytes20()",
        "lineno": 293,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3673,
        "code": "een approved and exist in the validator registration\n    ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3673\nCall at address: 3673\n",
        "filename": "/unique_chucks/21/0x804c8336846d8206c95cee24752d514210b5a240.sol",
        "function": "getNetworkTopology()",
        "lineno": 293,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5070,
        "code": "n approvalBlockNumber[validator] > 0;\n    }\n\n",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/21/0x804c8336846d8206c95cee24752d514210b5a240.sol",
        "function": "isValidator(address)",
        "lineno": 274,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5764,
        "code": "of validators.\n    uint internal constant MAX_VALIDATOR_LIMIT = 100;\n    uint public validatorsLimit;\n\n    // The validators metadata registration database smart contract\n    IOrbsValidatorsRegistry public orbsValidatorsRegistry;\n\n    // Array of approved validators addresses\n    address[] internal approvedValidators;\n\n    // Mapping of address and in which block it was approved.\n    mapping(address => uint) internal approvalBlockNumber;\n\n    /// @dev Constructor that initializes the validators smart contract with the validators metadata registration\n    ///     database smart contract.\n    /// @param registry_ IOrbsValidatorsRegistry The address of the validators metadata registration database.\n    /// @param validatorsLimit_ uint Maximum number of validators list maximum size.\n    constructor(IOrbsValidatorsRegistry registry_, uint validatorsLimit_) public {\n        require(registry_ != IOrbsValidatorsRegistry(0), \"Registry contract address 0\");\n        require(validatorsLimit_ > 0, \"Limit must be positive\");\n        require(validatorsLimit_ <= MAX_VALIDATOR_LIMIT, \"Limit is too high\");\n\n        validatorsLimit = validatorsLimit_;\n        orbsValidatorsRegistry = registry_;\n    }\n\n    /// @dev Adds a validator to participate in network\n    /// @param validator address The address of the validators.\n    function approve(address validator) external onlyOwner {\n        require(validator != address(0), \"Address must not be 0!\");\n        require(approvedValidators.length < validatorsLimit, \"Can't add more members!\");\n        require(!isApproved(validator), \"Address must not be already approved\");\n\n        approvedValidators.push(validator);\n        approvalBlockNumber[validator] = block.number;\n        emit ValidatorApproved(validator);\n    }\n\n    /// @dev Remove a validator from the List based on Guardians votes.\n    /// @param validator address The address of the validators.\n    function remove(address validator) external onlyOwner {\n        require(isApproved(validator), \"Not an approved validator\");\n\n        uint approvedLength = approvedValidators.length;\n        for (uint i = 0; i < approvedLength; ++i) {\n            if (approvedValidators[i] == validator) {\n\n                // Replace with last element and remove from end\n                approvedValidators[i] = approvedValidators[approvedLength - 1];\n                approvedValidators.length--;\n\n                // Clear approval block height\n                delete approvalBlockNumber[validator];\n\n                emit ValidatorRemoved(validator);\n                return;\n            }\n        }\n    }\n\n    /// @dev returns if an address belongs to the approved list & exists in the validators metadata registration database.\n    /// @param validator address The address of the validators.\n    function isValidator(address validator) public view returns (bool) {\n        return isApproved(validator) && orbsValidatorsRegistry.isValidator(validator);\n    }\n\n    /// @dev returns if an address belongs to the approved list\n    /// @param validator address The address of the validators.\n    function isApproved(address validator) public view returns (bool) {\n        return approvalBlockNumber[validator] > 0;\n    }\n\n    /// @dev returns a list of all validators that have been approved and exist in the validator registration database.\n    function getValidators() public view returns (address[] memory) {\n        uint approvedLength = approvedValidators.length;\n        address[] memory validators = new address[](approvedLength);\n\n        uint pushAt = 0;\n        for (uint i = 0; i < approvedLength; i++) {\n            if (orbsValidatorsRegistry.isValidator(approvedValidators[i])) {\n                validators[pushAt] = approvedValidators[i];\n                pushAt++;\n            }\n        }\n\n        return sliceArray(validators, pushAt);\n    }\n\n    /// @dev returns a list of all validators that have been approved and exist in the validator registration\n    ///      database. same as getValidators but returns addresses represented as byte20.\n    function getValidatorsBytes20() external view returns (bytes20[]) {\n        address[] memory validatorAddresses = getValidators();\n        uint validatorAddressesLength = validatorAddresses.length;\n\n        bytes20[] memory result = new bytes20[](validatorAddressesLength);\n\n        for (uint i = 0; i < validatorAddressesLength; i++) {\n            result[i] = bytes20(validatorAddresses[i]);\n        }\n\n        return result;\n    }\n\n    /// @dev returns the block number in which the validator was approved.\n    /// @param validator address The address of the validators.\n    function getApprovalBlockNumber(address validator)\n        public\n        view\n        returns (uint)\n    {\n        return approvalBlockNumber[validator];\n    }\n\n    /// @dev returns an array of pairs with node addresses and ip addresses.\n    function getNetworkTopology()\n        external\n        view\n        returns (bytes20[] memory nodeAddresses, bytes4[] memory ipAddresses)\n    {\n        address[] memory validators = getValidators(); // filter unregistered\n        uint validatorsLength = validators.length;\n        nodeAddresses = new bytes20[](validatorsLength);\n        ipAddresses = new bytes4[](validatorsLength);\n\n        for (uint i = 0; i < validatorsLength; i++) {\n            bytes4 ip;\n            bytes20 orbsAddr;\n            ( , ip , , orbsAddr) = orbsValidatorsRegistry.getValidatorData(validators[i]);\n            nodeAddresses[i] = orbsAddr;\n            ipAddresses[i] = ip;\n        }\n    }\n\n    /// @dev internal method that returns a slice of an array.\n    function sliceArray(address[] memory arr, uint len)\n        internal\n        pure\n        returns (address[] memory)\n    {\n        require(len <= arr.length, \"sub array must be longer then array\");\n\n        address[] memory result = new address[](len);\n        for(uint i = 0; i < len; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n}",
        "debug": "storage_3: 0x7ffffffffffffffffffffffffffffffffffffffffffff8000000000000000000\ncalldata_Ownable_4: 0x0\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Ownable_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Ownable_0: 0x29092d0e00000000000000000000000000000000000000000000000000000000\ncalldatasize_Ownable: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `remove(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x804c8336846d8206c95cee24752d514210b5a240.sol",
        "function": "remove(address)",
        "lineno": 205,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5766,
        "code": "of validators.\n    uint internal constant MAX_VALIDATOR_LIMIT = 100;\n    uint public validatorsLimit;\n\n    // The validators metadata registration database smart contract\n    IOrbsValidatorsRegistry public orbsValidatorsRegistry;\n\n    // Array of approved validators addresses\n    address[] internal approvedValidators;\n\n    // Mapping of address and in which block it was approved.\n    mapping(address => uint) internal approvalBlockNumber;\n\n    /// @dev Constructor that initializes the validators smart contract with the validators metadata registration\n    ///     database smart contract.\n    /// @param registry_ IOrbsValidatorsRegistry The address of the validators metadata registration database.\n    /// @param validatorsLimit_ uint Maximum number of validators list maximum size.\n    constructor(IOrbsValidatorsRegistry registry_, uint validatorsLimit_) public {\n        require(registry_ != IOrbsValidatorsRegistry(0), \"Registry contract address 0\");\n        require(validatorsLimit_ > 0, \"Limit must be positive\");\n        require(validatorsLimit_ <= MAX_VALIDATOR_LIMIT, \"Limit is too high\");\n\n        validatorsLimit = validatorsLimit_;\n        orbsValidatorsRegistry = registry_;\n    }\n\n    /// @dev Adds a validator to participate in network\n    /// @param validator address The address of the validators.\n    function approve(address validator) external onlyOwner {\n        require(validator != address(0), \"Address must not be 0!\");\n        require(approvedValidators.length < validatorsLimit, \"Can't add more members!\");\n        require(!isApproved(validator), \"Address must not be already approved\");\n\n        approvedValidators.push(validator);\n        approvalBlockNumber[validator] = block.number;\n        emit ValidatorApproved(validator);\n    }\n\n    /// @dev Remove a validator from the List based on Guardians votes.\n    /// @param validator address The address of the validators.\n    function remove(address validator) external onlyOwner {\n        require(isApproved(validator), \"Not an approved validator\");\n\n        uint approvedLength = approvedValidators.length;\n        for (uint i = 0; i < approvedLength; ++i) {\n            if (approvedValidators[i] == validator) {\n\n                // Replace with last element and remove from end\n                approvedValidators[i] = approvedValidators[approvedLength - 1];\n                approvedValidators.length--;\n\n                // Clear approval block height\n                delete approvalBlockNumber[validator];\n\n                emit ValidatorRemoved(validator);\n                return;\n            }\n        }\n    }\n\n    /// @dev returns if an address belongs to the approved list & exists in the validators metadata registration database.\n    /// @param validator address The address of the validators.\n    function isValidator(address validator) public view returns (bool) {\n        return isApproved(validator) && orbsValidatorsRegistry.isValidator(validator);\n    }\n\n    /// @dev returns if an address belongs to the approved list\n    /// @param validator address The address of the validators.\n    function isApproved(address validator) public view returns (bool) {\n        return approvalBlockNumber[validator] > 0;\n    }\n\n    /// @dev returns a list of all validators that have been approved and exist in the validator registration database.\n    function getValidators() public view returns (address[] memory) {\n        uint approvedLength = approvedValidators.length;\n        address[] memory validators = new address[](approvedLength);\n\n        uint pushAt = 0;\n        for (uint i = 0; i < approvedLength; i++) {\n            if (orbsValidatorsRegistry.isValidator(approvedValidators[i])) {\n                validators[pushAt] = approvedValidators[i];\n                pushAt++;\n            }\n        }\n\n        return sliceArray(validators, pushAt);\n    }\n\n    /// @dev returns a list of all validators that have been approved and exist in the validator registration\n    ///      database. same as getValidators but returns addresses represented as byte20.\n    function getValidatorsBytes20() external view returns (bytes20[]) {\n        address[] memory validatorAddresses = getValidators();\n        uint validatorAddressesLength = validatorAddresses.length;\n\n        bytes20[] memory result = new bytes20[](validatorAddressesLength);\n\n        for (uint i = 0; i < validatorAddressesLength; i++) {\n            result[i] = bytes20(validatorAddresses[i]);\n        }\n\n        return result;\n    }\n\n    /// @dev returns the block number in which the validator was approved.\n    /// @param validator address The address of the validators.\n    function getApprovalBlockNumber(address validator)\n        public\n        view\n        returns (uint)\n    {\n        return approvalBlockNumber[validator];\n    }\n\n    /// @dev returns an array of pairs with node addresses and ip addresses.\n    function getNetworkTopology()\n        external\n        view\n        returns (bytes20[] memory nodeAddresses, bytes4[] memory ipAddresses)\n    {\n        address[] memory validators = getValidators(); // filter unregistered\n        uint validatorsLength = validators.length;\n        nodeAddresses = new bytes20[](validatorsLength);\n        ipAddresses = new bytes4[](validatorsLength);\n\n        for (uint i = 0; i < validatorsLength; i++) {\n            bytes4 ip;\n            bytes20 orbsAddr;\n            ( , ip , , orbsAddr) = orbsValidatorsRegistry.getValidatorData(validators[i]);\n            nodeAddresses[i] = orbsAddr;\n            ipAddresses[i] = ip;\n        }\n    }\n\n    /// @dev internal method that returns a slice of an array.\n    function sliceArray(address[] memory arr, uint len)\n        internal\n        pure\n        returns (address[] memory)\n    {\n        require(len <= arr.length, \"sub array must be longer then array\");\n\n        address[] memory result = new address[](len);\n        for(uint i = 0; i < len; i++) {\n            result[i] = arr[i];\n        }\n        return result;\n    }\n}",
        "debug": "storage_3: 0xdfffffffffffffedfffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_Ownable_4: 0x0\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Ownable_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Ownable_0: 0x29092d0e00000000000000000000000000000000000000000000000000000000\ncalldatasize_Ownable: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `remove(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x804c8336846d8206c95cee24752d514210b5a240.sol",
        "function": "remove(address)",
        "lineno": 205,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}