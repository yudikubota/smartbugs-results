{
  "contract": "0x83ea6fdf106ebfad88ab4edfe8cb501b32dfce38",
  "tool": "mythril",
  "start": 1563635384.1143095,
  "end": 1563635632.3402584,
  "duration": 248.2259488105774,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 999,
        "code": "s indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(addres",
        "debug": "calldata_Netinance_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Netinance_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_Netinance: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0x83ea6fdf106ebfad88ab4edfe8cb501b32dfce38.sol",
        "function": "setName(string)",
        "lineno": 111,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3274,
        "code": "        _;\n\n    }\n\n    func",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_Netinance_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_Netinance: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/28/0x83ea6fdf106ebfad88ab4edfe8cb501b32dfce38.sol",
        "function": "setName(string)",
        "lineno": 33,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3406,
        "code": "ract Netinance  {\n\n \n\n    string public name = \"Netinance\";      //  (token name)\n\n    string public symbol = \"NET\";           //  (token symbol)\n\n    uint256 public decimals = 8;            //   (token digit)\n\n \n\n    mapping (address => uint256) public balanceOf;\n\n    mapping (address => mapping (address => uint256)) public allowance;\n\n \n\n    uint256 public totalSupply = 25000000 * (10**decimals);   // (total supply)\n\n    address owner;\n\n \n\n    modifier isOwner {\n\n        assert(owner == msg.sender);\n\n        _;\n\n    }\n\n    function Netinance () {\n\n        owner = msg.sender;\n\n        balanceOf[owner] = totalSupply;\n\n    }\n\n \n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n\n        require(balanceOf[msg.sender] >= _value);\n\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        balanceOf[msg.sender] -= _value;\n\n        balanceOf[_to] += _value;\n\n        Transfer(msg.sender, _to, _value);\n\n        return true;\n\n    }\n\n \n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n\n        require(balanceOf[_from] >= _value);\n\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        require(allowance[_from][msg.sender] >= _value);\n\n        balanceOf[_to] += _value;\n\n        balanceOf[_from] -= _value;\n\n        allowance[_from][msg.sender] -= _value;\n\n        Transfer(_from, _to, _value);\n\n        return true;\n\n    }\n\n \n\n    function approve(address _spender, uint256 _value) returns (bool success)\n\n    {\n\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n\n        allowance[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n\n    }\n\n   \n\n    function setName(string _name) isOwner\n\n    {\n\n        name = _name;\n\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}",
        "debug": "calldata_Netinance_4 + calldata_Netinance_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_6: 0x0\ncalldata_Netinance_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_Netinance: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0x83ea6fdf106ebfad88ab4edfe8cb501b32dfce38.sol",
        "function": "setName(string)",
        "lineno": 5,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3420,
        "code": "ract Netinance  {\n\n \n\n    string public name = \"Netinance\";      //  (token name)\n\n    string public symbol = \"NET\";           //  (token symbol)\n\n    uint256 public decimals = 8;            //   (token digit)\n\n \n\n    mapping (address => uint256) public balanceOf;\n\n    mapping (address => mapping (address => uint256)) public allowance;\n\n \n\n    uint256 public totalSupply = 25000000 * (10**decimals);   // (total supply)\n\n    address owner;\n\n \n\n    modifier isOwner {\n\n        assert(owner == msg.sender);\n\n        _;\n\n    }\n\n    function Netinance () {\n\n        owner = msg.sender;\n\n        balanceOf[owner] = totalSupply;\n\n    }\n\n \n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n\n        require(balanceOf[msg.sender] >= _value);\n\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        balanceOf[msg.sender] -= _value;\n\n        balanceOf[_to] += _value;\n\n        Transfer(msg.sender, _to, _value);\n\n        return true;\n\n    }\n\n \n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n\n        require(balanceOf[_from] >= _value);\n\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        require(allowance[_from][msg.sender] >= _value);\n\n        balanceOf[_to] += _value;\n\n        balanceOf[_from] -= _value;\n\n        allowance[_from][msg.sender] -= _value;\n\n        Transfer(_from, _to, _value);\n\n        return true;\n\n    }\n\n \n\n    function approve(address _spender, uint256 _value) returns (bool success)\n\n    {\n\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n\n        allowance[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n\n    }\n\n   \n\n    function setName(string _name) isOwner\n\n    {\n\n        name = _name;\n\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}",
        "debug": "calldata_Netinance_4 + calldata_Netinance_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_6: 0x0\ncalldata_Netinance_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_Netinance: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0x83ea6fdf106ebfad88ab4edfe8cb501b32dfce38.sol",
        "function": "setName(string)",
        "lineno": 5,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}