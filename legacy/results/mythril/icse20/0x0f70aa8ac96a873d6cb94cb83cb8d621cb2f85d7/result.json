{
  "contract": "0x0f70aa8ac96a873d6cb94cb83cb8d621cb2f85d7",
  "tool": "mythril",
  "start": 1563236996.1976507,
  "end": 1563237277.8549562,
  "duration": 281.6573054790497,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 904,
        "code": "lic currentPeriodStartBlock",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0xfe00\ncalldata_UP1KToken_0: 0xc3f6acf00000000000000000000000000000000000000000000000000000000\ncalldatasize_UP1KToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x0f70aa8ac96a873d6cb94cb83cb8d621cb2f85d7.sol",
        "function": "_function_0x0c3f6acf",
        "lineno": 369,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1393,
        "code": "lFeeMilliPercent).div(MILLI_PERCENT_DIVIDER);\n            etherAmount = etherAmount.sub(fee);\n            \n            soldTokens[seller] = 0;\n            currentPeriodTokenCollected = currentPeriodTokenCollected.sub(tokenAmount);\n            if(!seller.send(etherAmount)){\n                //in this case we can only log error and let owner to handle it manually\n                DistributionError(seller, etherAmount);\n                owner.transfer(etherAmount); //assume this should not fail..., overwise - change owner\n            }\n        }\n    }\n\n    function startCollecting(uint256 _collectingEndTimestamp) onlyOwner public {\n        require(_collectingEndTimestamp > now);      //Need some time for collection\n        require(currentState == State.Distribution);    //Do not allow to change collection terms after it is started\n        require(currentPeriodEtherCollected == 0);      //All sold tokens are distributed\n        require(currentPeriodTokenCollected == 0);      //All redeemed tokens are paid\n        previousPeriodRate = currentPeriodRate;\n        currentPeriodRate = 0;\n        currentPeriodSta",
        "debug": "calldata_UP1KToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_UP1KToken_0: 0x3c0ff79100000000000000000000000000000000000000000000000000000000\ncalldatasize_UP1KToken: 0x4\n",
        "description": "A possible integer overflow exists in the function `distributeEther(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x0f70aa8ac96a873d6cb94cb83cb8d621cb2f85d7.sol",
        "function": "distributeEther(address[])",
        "lineno": 554,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3515,
        "code": "buy tokens\n    */\n    function()",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0xfe00\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_UP1KToken: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x0f70aa8ac96a873d6cb94cb83cb8d621cb2f85d7.sol",
        "function": "fallback",
        "lineno": 398,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4527,
        "code": "2\u03c0.com>\n * @dev This ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x0f70aa8ac96a873d6cb94cb83cb8d621cb2f85d7.sol",
        "function": "_function_0x17ffc320",
        "lineno": 162,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4527,
        "code": "2\u03c0.com>\n * @dev This ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 11282\n",
        "filename": "/unique_contracts/0x0f70aa8ac96a873d6cb94cb83cb8d621cb2f85d7.sol",
        "function": "_function_0x17ffc320",
        "lineno": 162,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5200,
        "code": "s allow a contract to recover any ERC",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x0f70aa8ac96a873d6cb94cb83cb8d621cb2f85d7.sol",
        "function": "reclaimContract(address)",
        "lineno": 143,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5368,
        "code": "fee);\n            \n            sol",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0xfe00\ncaller: 0xfe\ncalldata_UP1KToken_0: 0x3c0ff79100000000000000000000000000000000000000000000000000000000\ncalldatasize_UP1KToken: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x0f70aa8ac96a873d6cb94cb83cb8d621cb2f85d7.sol",
        "function": "distributeEther(address[])",
        "lineno": 555,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 11092,
        "code": " retu",
        "debug": "storage_0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_UP1KToken_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_15: 0x0\nstorage_3: 0x0\ncaller: 0x0\ncalldata_UP1KToken_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_UP1KToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `mint(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x0f70aa8ac96a873d6cb94cb83cb8d621cb2f85d7.sol",
        "function": "mint(address,uint256)",
        "lineno": 33,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 11105,
        "code": " }\n}\n\n/**\n * @",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x1\ncalldata_UP1KToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_15: 0x0\nstorage_3: 0x0\ncaller: 0x0\ncalldata_UP1KToken_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_UP1KToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x0f70aa8ac96a873d6cb94cb83cb8d621cb2f85d7.sol",
        "function": "mint(address,uint256)",
        "lineno": 34,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 11282,
        "code": "token, address from, addr",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x0f70aa8ac96a873d6cb94cb83cb8d621cb2f85d7.sol",
        "function": "_function_0x17ffc320",
        "lineno": 71,
        "title": "Message call to external contract",
        "type": "Warning"
      }
    ],
    "success": true
  }
}