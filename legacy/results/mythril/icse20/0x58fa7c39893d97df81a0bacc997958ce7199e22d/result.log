{"error": null, "issues": [{"address": 158, "code": "EIP20 newToken = (new EIP20(_initialAmount, _name, _decimals, _symbol));\n        created[msg.sender].push(address(newToken));\n        isEIP20[address(newToken)] = true;\n        //the factory will own the created tokens. You must transfer them.\n        newToken.transfer(msg.sender, _initialAmount); \n        return address(newToken);\n    }\n\n    //for now, keeping this internal. Ideally there should also be a live version of this that \n    // any contract can use, lib-style.\n    //retrieve", "debug": "calldata_EIP20Interface_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_EIP20Interface_0: 0x1e5f356900000000000000000000000000000000000000000000000000000000\ncalldatasize_EIP20Interface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `createEIP20(uint256,string,uint8,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/22/0x58fa7c39893d97df81a0bacc997958ce7199e22d.sol", "function": "createEIP20(uint256,string,uint8,string)", "lineno": 147, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1638, "code": " to do a bytecode check.\n    bytes public EI", "debug": "The exception is triggered under the following conditions:\n\ncalldata_EIP20Interface_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_EIP20Interface_4: 0x0\ncalldata_EIP20Interface_0: 0x5f8dead300000000000000000000000000000000000000000000000000000000\ncalldatasize_EIP20Interface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0x58fa7c39893d97df81a0bacc997958ce7199e22d.sol", "function": "_function_0x5f8dead3", "lineno": 116, "title": "Exception state", "type": "Informational"}], "success": true}