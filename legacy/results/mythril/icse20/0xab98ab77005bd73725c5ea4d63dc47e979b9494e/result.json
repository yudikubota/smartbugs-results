{
  "contract": "0xab98ab77005bd73725c5ea4d63dc47e979b9494e",
  "tool": "mythril",
  "start": 1563306856.4316018,
  "end": 1563308060.0427892,
  "duration": 1203.6111874580383,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 417,
        "code": "iptionHash(\n            from, to, tokenAddress, tokenAmount, periodSeconds, gasPrice\n        );\n        address signer = getSubscriptionSigner(subscriptionHash, signature);\n        uint256 allowance = ERC20(tokenAddress).allowance(from, address(this));\n        uint256 balance = ERC20(tokenAddress).balanceOf(from);\n        return (\n            signer == from &&\n            block.timestamp >= nextValidTimestamp[subscriptionHash] &&\n            allowance >= tokenAmount.add(gasPrice) &&\n            balance >= tokenAmount.add(gasPrice)\n        );\n    }\n\n    // you don't really need this if you are using the approve/transferFrom method\n    // because you control the flow of tokens by approving this contract address,\n    // but to make the contract an extensible example for later user I'll add this\n    function cancelSubscription(\n        address from, //the subscriber\n        address to, //the publisher\n        address tokenAddress, //the token address paid to the publisher\n        uint256 tokenAmount, //the token amount paid to the publisher\n        uint256 periodSeconds, //the period in seconds between payments\n        uint256 gasPrice, //the amount",
        "debug": "calldata_Subscription_32 + 164: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Subscription_0: 0xad8ad6600000000000000000000000000000000000000000000000000000000\ncalldatasize_Subscription: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x0ad8ad66`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xab98ab77005bd73725c5ea4d63dc47e979b9494e.sol",
        "function": "_function_0x0ad8ad66",
        "lineno": 597,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 603,
        "code": "he token address paid to the publisher\n        uint256 tokenAmount, //the token amount paid to the publisher\n        uint256 periodSeconds, //the period in seconds between payments\n        uint256 gasPrice, //the amount of the token to incentivize the relay network\n        bytes signature //proof the subscriber signed ",
        "debug": "calldata_Subscription_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Subscription_0: 0x18f321a300000000000000000000000000000000000000000000000000000000\ncalldatasize_Subscription: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x18f321a3`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xab98ab77005bd73725c5ea4d63dc47e979b9494e.sol",
        "function": "_function_0x18f321a3",
        "lineno": 587,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1028,
        "code": "d be exact code as \"isSubscriptionReady\"\n        bytes32 subscriptionHash = getSubscriptionHash(\n            from, to, tokenAddress, tokenAmount, periodSeconds, gasPrice\n        );\n        address signer = getSubscriptionSigner(subscriptionHash, signature);\n        uint256 allowance = ERC20(tokenAddress).allowance(from, address(this));\n        uint256 balance = ERC20(tokenAddress).balanceOf(from);\n\n\n        //the signature must be valid\n        require(signer == from, \"Invalid Signature\");\n        //timestamp must be equal to or past the next period\n        require(\n            block.timestamp >= nextValidTimestamp[subscriptionHash],\n            \"Subscription is not ready\"\n        );\n        //from account must have enough funds \n        require(\n            allowance >= tokenAmount.add(gasPrice) && balance >= tokenAmount.add(gasPrice),\n            \"Not enough tokens in from account or not enough allowed.\"\n        );\n\n        // if there are requirements from the deployer, let's make sure\n        // those are met exactly\n        require( requiredToAddress == address(0) || to == requiredToAddress );\n        require( requiredTokenAddress == address(0) || tokenAddress == requiredTokenAddress );\n        require( requiredTokenAmount == 0 || tokenAmount == requiredTokenAmount );\n        require( requiredPeriodSeconds == 0 || periodSeconds == requiredPeriodSeconds );\n        require( requiredGasPrice == 0 || gasPrice == requiredGasPrice );\n\n        nextValidTimestamp[subscriptionHash] = block.timestamp.add(periodSeconds);\n\n        // now, let make the transfer from the subscriber to the publisher\n        uint256 startingBalance = ERC20(tokenAddress).balanceOf(to);\n        require(\n          ERC20(tokenAddress).transferFrom(from,to,tokenAmount),\n          \"Transfer Failed\"\n        );\n        require(\n          (startingBalance+tokenAmount) == ERC20(tokenAddress).balanceOf(to),\n          \"Crappy ERC20 is a bad kitty.\"\n        );\n\n        emit ExecuteSubscription(\n            from, to, tokenAddress, tokenAmount, periodSeconds, gasPrice\n        );\n\n        // it is possible for the subscription execution to be run by a third party\n        // incentivized in the terms of the subscription with a gasPrice of the tokens\n        //  - pay that out now...\n        if (gasPrice > 0) {\n            //the relayer is incentivized by a little of the same token from\n            // the subscriber ... as far as the subscriber knows, they are\n            // just sending X tokens to the publisher, but the publisher can\n            // choose to send Y of those X to a relayer to run their transactions\n            // the publisher will receive X - Y tokens\n            // this must all be setup in the constructor\n            // if not, the subscriber chooses all the params including what goes\n            // to the publisher and what goes to the relayer\n\n            require(\n                ERC20(tokenAddress).transferFrom(from, msg.sender, gasPrice),\n                \"Failed to pay gas as from account\"\n            );\n        }\n\n        return true;\n    }\n}",
        "debug": "calldata_Subscription_32 + 164: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Subscription_0: 0x691d935200000000000000000000000000000000000000000000000000000000\ncalldatasize_Subscription: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x691d9352`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xab98ab77005bd73725c5ea4d63dc47e979b9494e.sol",
        "function": "_function_0x691d9352",
        "lineno": 656,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2607,
        "code": "    function cancelSubscription(\n        address f",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0xab98ab77005bd73725c5ea4d63dc47e979b9494e.sol",
        "function": "_function_0x0ad8ad66",
        "lineno": 614,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2607,
        "code": "    function cancelSubscription(\n        address f",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2823\n",
        "filename": "/unique_contracts/0xab98ab77005bd73725c5ea4d63dc47e979b9494e.sol",
        "function": "_function_0x0ad8ad66",
        "lineno": 614,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2823,
        "code": " address to, //the publisher\n      ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0xab98ab77005bd73725c5ea4d63dc47e979b9494e.sol",
        "function": "_function_0x0ad8ad66",
        "lineno": 616,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3386,
        "code": "ere are requirements from the deployer, let's make",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0xab98ab77005bd73725c5ea4d63dc47e979b9494e.sol",
        "function": "_function_0x691d9352",
        "lineno": 678,
        "title": "Message call to external contract",
        "type": "Warning"
      }
    ],
    "success": true
  }
}