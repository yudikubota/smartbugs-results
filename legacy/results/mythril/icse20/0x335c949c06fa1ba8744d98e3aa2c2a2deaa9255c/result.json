{
  "contract": "0x335c949c06fa1ba8744d98e3aa2c2a2deaa9255c",
  "tool": "mythril",
  "start": 1563570866.9926598,
  "end": 1563570903.3938992,
  "duration": 36.4012393951416,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2573,
        "code": "thdrawEther(uint amountInWei) onlyOwner pu",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/12/0x335c949c06fa1ba8744d98e3aa2c2a2deaa9255c.sol",
        "function": "withdrawTokens(uint256)",
        "lineno": 133,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2573,
        "code": "thdrawEther(uint amountInWei) onlyOwner pu",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdrawTokens(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/12/0x335c949c06fa1ba8744d98e3aa2c2a2deaa9255c.sol",
        "function": "withdrawTokens(uint256)",
        "lineno": 133,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3229,
        "code": " require (amountInWei <= addr",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/12/0x335c949c06fa1ba8744d98e3aa2c2a2deaa9255c.sol",
        "function": "receiveApproval(address,uint256,address,bytes)",
        "lineno": 312,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3229,
        "code": " require (amountInWei <= addr",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3676\nCall at address: 3447\n",
        "filename": "/unique_chucks/12/0x335c949c06fa1ba8744d98e3aa2c2a2deaa9255c.sol",
        "function": "sellOneStep(uint256,uint256,address)",
        "lineno": 312,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3229,
        "code": " require (amountInWei <= addr",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function receiveApproval(address,uint256,address,bytes). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/12/0x335c949c06fa1ba8744d98e3aa2c2a2deaa9255c.sol",
        "function": "receiveApproval(address,uint256,address,bytes)",
        "lineno": 312,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3447,
        "code": "uire (amountInWei >= minSal",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/12/0x335c949c06fa1ba8744d98e3aa2c2a2deaa9255c.sol",
        "function": "sellOneStep(uint256,uint256,address)",
        "lineno": 311,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3447,
        "code": "uire (amountInWei >= minSal",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3676\n",
        "filename": "/unique_chucks/12/0x335c949c06fa1ba8744d98e3aa2c2a2deaa9255c.sol",
        "function": "sellOneStep(uint256,uint256,address)",
        "lineno": 311,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3447,
        "code": "uire (amountInWei >= minSal",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function sellOneStep(uint256,uint256,address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/12/0x335c949c06fa1ba8744d98e3aa2c2a2deaa9255c.sol",
        "function": "sellOneStep(uint256,uint256,address)",
        "lineno": 311,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3511,
        "code": "uire (amountInWei >= minSaleReturn);\n   ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nretval_3447: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_3229: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0x63f8a21100000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/12/0x335c949c06fa1ba8744d98e3aa2c2a2deaa9255c.sol",
        "function": "sellOneStep(uint256,uint256,address)",
        "lineno": 311,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3676,
        "code": "  require (enabled); // ADDED SEMICOLON\n        require (amountInWei >= minSaleReturn);\n        require (amountInWei <= address(this).balance);\n        require (tokenContract.transferFrom(seller, this, quantity));\n\n   ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/12/0x335c949c06fa1ba8744d98e3aa2c2a2deaa9255c.sol",
        "function": "sellOneStep(uint256,uint256,address)",
        "lineno": 310,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3676,
        "code": "  require (enabled); // ADDED SEMICOLON\n        require (amountInWei >= minSaleReturn);\n        require (amountInWei <= address(this).balance);\n        require (tokenContract.transferFrom(seller, this, quantity));\n\n   ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function sellOneStep(uint256,uint256,address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/12/0x335c949c06fa1ba8744d98e3aa2c2a2deaa9255c.sol",
        "function": "sellOneStep(uint256,uint256,address)",
        "lineno": 310,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5010,
        "code": "c view returns(uint) {\n      ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/12/0x335c949c06fa1ba8744d98e3aa2c2a2deaa9255c.sol",
        "function": "getReserveBalances()",
        "lineno": 187,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5010,
        "code": "c view returns(uint) {\n      ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function getReserveBalances(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/12/0x335c949c06fa1ba8744d98e3aa2c2a2deaa9255c.sol",
        "function": "getReserveBalances()",
        "lineno": 187,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}