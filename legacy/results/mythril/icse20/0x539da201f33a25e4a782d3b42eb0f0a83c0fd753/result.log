{"error": null, "issues": [{"address": 1540, "code": "rns (address[] memory _confirmations)\n\t{\n\t\taddress[] memory confirmationsTemp = new address", "debug": "storage_3: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_MultiSigWallet_0: 0xa0e67e2b00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getOwners()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "getOwners()", "lineno": 332, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1718, "code": "ed)\n\t\t{\n\t\t\ttransactionIdsTemp[count] = i;\n\t\t\tcount += 1;\n\t\t}\n\t\t_transactionIds = new uint[](to - from);\n\t\tfor (i=from; i<to; i++)\n\t\t_transactionIds[i - from] = transactionIdsTemp[i];\n\t}\n}", "debug": "calldata_MultiSigWallet_4: 0xfffffffffe9494a52a601b1b24ad59519fee4ccfe00000000000000000000000\ncalldatasize_MultiSigWallet: 0x4000000000000000000000000000000000000000000000000000000000000000\nmem_128 + 32 + 32*storage_5: 0x800000000000003df000000000000000000000000000003def80001a0001efc0\ncalldata_MultiSigWallet_32 + 4: 0x482000240280120010000442504a2000000000000000000000001\nstorage_5: 0x1\ncalldata_MultiSigWallet_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_78338746147236970124700731725183845421594913511827187288591969170390706184120: 0xff00\ncalldata_MultiSigWallet_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_0: 0xa8abe69a00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getTransactionIds(uint256,uint256,bool,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "getTransactionIds(uint256,uint256,bool,bool)", "lineno": 363, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1862, "code": "\t\tcount += 1;\n\t\t}\n\t\t_confirmations = new address[](count);\n\t\tfor (i=0; i<count; i++)\n\t\t_confirmations[i] = confirmationsTemp[i];\n\t}\n\n\t/// @dev Returns list of transaction IDs in defined range.\n\t/// @param from Index start position of transaction array.\n\t/// @param to Index end position of transaction array.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Returns array of transaction IDs.\n\tfunction getTran", "debug": "storage_3: 0x1\ncalldatasize_MultiSigWallet: 0x8000000000000000000000000000000000000000000000\nmem_128 + 32 + 32*storage_3: 0x104210800000003df000000000000000000000000000003def800360884258f8\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_87903029871075914254377627908054574944891091886930582284385770809450030037083,\n_____256): 0x0\ncalldata_MultiSigWallet_0: 0xb5dc40c300000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getConfirmations(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "getConfirmations(uint256)", "lineno": 340, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2610, "code": ";\n\tuint public required", "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_MultiSigWallet: 0xa0\ncalldata_MultiSigWallet_4: 0x0\nstorage_3: 0x0\ncalldata_MultiSigWallet_0: 0x25e7c2700000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "_function_0x025e7c27", "lineno": 24, "title": "Exception state", "type": "Informational"}, {"address": 2908, "code": "red > owners.leng", "debug": "calldatasize_MultiSigWallet: 0xa0\nstorage_3: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `removeOwner(address)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "removeOwner(address)", "lineno": 148, "title": "Integer Underflow", "type": "Warning"}, {"address": 2952, "code": "equiremen", "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_MultiSigWallet: 0xa0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\nstorage_3: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "removeOwner(address)", "lineno": 149, "title": "Exception state", "type": "Informational"}, {"address": 4183, "code": "ws to remove an o", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_MultiSigWallet: 0x200\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0x0\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x7065cb4800000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "addOwner(address)", "lineno": 134, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5219, "code": "Temp = new ad", "debug": "storage_3: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_MultiSigWallet_0: 0xa0e67e2b00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getOwners()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "getOwners()", "lineno": 334, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5221, "code": "Temp = new ad", "debug": "storage_3: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_MultiSigWallet_0: 0xa0e67e2b00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getOwners()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "getOwners()", "lineno": 334, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5546, "debug": "calldatasize_MultiSigWallet: 0x280\nstorage_5: 0x1\ncalldata_MultiSigWallet_32 + 4: 0x0\ncalldata_MultiSigWallet_4: 0x1\ncalldata_MultiSigWallet_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_78338746147236970124700731725183845421594913511827187288591969170390706184120: 0xff00\ncalldata_MultiSigWallet_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_0: 0xa8abe69a00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `getTransactionIds(uint256,uint256,bool,bool)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "getTransactionIds(uint256,uint256,bool,bool)", "lineno": 372, "title": "Integer Underflow", "type": "Warning"}, {"address": 5620, "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSigWallet_4: 0x4000000000000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x8000000000000000000000000000000000000000000000000000000000000080\ncalldata_MultiSigWallet_32 + 4: 0x4000000000000000000000000000000000000000000000000000000000000001\nstorage_5: 0x1\ncalldata_MultiSigWallet_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_78338746147236970124700731725183845421594913511827187288591969170390706184120: 0xff00\ncalldata_MultiSigWallet_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_0: 0xa8abe69a00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "getTransactionIds(uint256,uint256,bool,bool)", "lineno": 372, "title": "Exception state", "type": "Informational"}, {"address": 5646, "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSigWallet_4: 0x0\ncalldatasize_MultiSigWallet: 0x2000000000000000\ncalldata_MultiSigWallet_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_5: 0x1\ncalldata_MultiSigWallet_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_78338746147236970124700731725183845421594913511827187288591969170390706184120: 0xff00\ncalldata_MultiSigWallet_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_0: 0xa8abe69a00000000000000000000000000000000000000000000000000000000\nmem_128 + 32 + 32*storage_5: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "getTransactionIds(uint256,uint256,bool,bool)", "lineno": 372, "title": "Exception state", "type": "Informational"}, {"address": 6175, "code": "s array of transa", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x1\ncalldatasize_MultiSigWallet: 0xa0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_87903029871075914254377627908054574944891091886930582284385770809450030037083,\n_____256): 0xff00\ncalldata_MultiSigWallet_0: 0xb5dc40c300000000000000000000000000000000000000000000000000000000\nmem_128 + 32 + 32*storage_3: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "getConfirmations(uint256)", "lineno": 352, "title": "Exception state", "type": "Informational"}, {"address": 8056, "code": "Returns the confirmation status of a transaction.\n\t/// @param transacti", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "executeTransaction(uint256)", "lineno": 244, "title": "Message call to external contract", "type": "Warning"}, {"address": 8056, "code": "Returns the confirmation status of a transaction.\n\t/// @param transacti", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "executeTransaction(uint256)", "lineno": 244, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 8497, "code": "nsaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Number of confirmations.\n\tfunction getConfirmationCount(uint transac", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0xd769acc1\ncalldatasize_MultiSigWallet: 0x200000000000000000000000000000000000000000000000198206fc1\ncalldata_MultiSigWallet_32 + 36: 0xc8849341\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_0: 0xc642747400000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "submitTransaction(address,uint256,bytes)", "lineno": 288, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8555, "code": "d)\n\tpublic\n\tview\n\tret", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x100000000\nkeccac_2_+_keccac_storage_5: 0xfc00000000000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4000000000000000000000000000000000000000000000000000000000000080\ncalldata_MultiSigWallet_32 + 36: 0x1\nstorage_2 + keccac_storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x0\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_0: 0xc642747400000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "submitTransaction(address,uint256,bytes)", "lineno": 291, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8641, "code": "ct MultiSigWallet {\n\n\tuint constant public MAX_OWNER_COUNT = 50;\n\n\tevent Confirmation(address indexed sender, uint indexed transactionId);\n\tevent Revocation(address indexed sender, uint indexed transactionId);\n\tevent Submission(uint indexed transactionId);\n\tevent Execution(uint indexed transactionId);\n\tevent ExecutionFailure(uint indexed transactionId);\n\tevent Deposit(address indexed sender, uint value);\n\tevent OwnerAddition(address indexed owner);\n\tevent OwnerRemoval(address indexed owner);\n\tevent RequirementChange(uint required);\n\n\tmapping (uint => Transaction) public transactions;\n\tmapping (uint => mapping (address => bool)) public confirmations;\n\tmapping (address => bool) public isOwner;\n\taddress[] public owners;\n\tuint public required;\n\tuint public transactionCount;\n\n\tstruct Transaction {\n\t\taddress destination;\n\t\tuint value;\n\t\tbytes data;\n\t\tbool executed;\n\t}\n\n\tmodifier onlyWallet() {\n\t\tif (msg.sender != address(this))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier ownerDoesNotExist(address owner) {\n\t\tif (isOwner[owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier ownerExists(address owner) {\n\t\tif (!isOwner[owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier transactionExists(uint transactionId) {\n\t\tif (transactions[transactionId].destination == address(0))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier confirmed(uint transactionId, address owner) {\n\t\tif (!confirmations[transactionId][owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notConfirmed(uint transactionId, address owner) {\n\t\tif (confirmations[transactionId][owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notExecuted(uint transactionId) {\n\t\tif (transactions[transactionId].executed)\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notNull(address _address) {\n\t\tif (_address == address(0))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier validRequirement(uint ownerCount, uint _required) {\n\t\tif (   ownerCount > MAX_OWNER_COUNT\n\t\t\t|| _required > ownerCount\n\t\t\t\t|| _required == 0\n\t\t\t\t\t|| ownerCount == 0)\n\t\t\t\t\trevert();\n\t\t\t\t\t_;\n\t}\n\n\t/// @dev Fallback function allows to deposit ether.\n\tfunction()\n\texternal\n\tpayable\n\t{\n\t\tif (msg.value > 0)\n\t\t\temit Deposit(msg.sender, msg.value);\n\t}\n\n\t/*\n\t* Public functions\n\t*/\n\t/// @dev Contract constructor sets initial owners and required number of confirmations.\n\t/// @param _owners List of initial owners.\n\t/// @param _required Number of required confirmations.\n\tconstructor(address[] memory _owners, uint _required)\n\tpublic\n\tvalidRequirement(_owners.length, _required)\n\t{\n\t\tfor (uint i=0; i<_owners.length; i++) {\n\t\t\tif (isOwner[_owners[i]] || _owners[i] == address(0))\n\t\t\t\trevert();\n\t\t\tisOwner[_owners[i]] = true;\n\t\t}\n\t\towners = _owners;\n\t\trequired = _required;\n\t}\n\n\t/// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of new owner.\n\tfunction addOwner(address owner)\n\tpublic\n\tonlyWallet\n\townerDoesNotExist(owner)\n\tnotNull(owner)\n\tvalidRequirement(owners.length + 1, required)\n\t{\n\t\tisOwner[owner] = true;\n\t\towners.push(owner);\n\t\temit OwnerAddition(owner);\n\t}\n\n\t/// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of owner.\n\tfunction removeOwner(address owner)\n\tpublic\n\tonlyWallet\n\townerExists(owner)\n\t{\n\t\tisOwner[owner] = false;\n\t\tfor (uint i=0; i<owners.length - 1; i++)\n\t\tif (owners[i] == owner) {\n\t\t\towners[i] = owners[owners.length - 1];\n\t\t\tbreak;\n\t\t}\n\t\towners.length -= 1;\n\t\tif (required > owners.length)\n\t\t\tchangeRequirement(owners.length);\n\t\temit OwnerRemoval(owner);\n\t}\n\n\t/// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of owner to be replaced.\n\t/// @param owner Address of new owner.\n\tfunction replaceOwner(address owner, address newOwner)\n\tpublic\n\tonlyWallet\n\townerExists(owner)\n\townerDoesNotExist(newOwner)\n\t{\n\t\tfor (uint i=0; i<owners.length; i++)\n\t\tif (owners[i] == owner) {\n\t\t\towners[i] = newOwner;\n\t\t\tbreak;\n\t\t}\n\t\tisOwner[owner] = false;\n\t\tisOwner[newOwner] = true;\n\t\temit OwnerRemoval(owner);\n\t\temit OwnerAddition(newOwner);\n\t}\n\n\t/// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n\t/// @param _required Number of required confirmations.\n\tfunction changeRequirement(uint _required)\n\tpublic\n\tonlyWallet\n\tvalidRequirement(owners.length, _required)\n\t{\n\t\trequired = _required;\n\t\temit RequirementChange(_required);\n\t}\n\n\t/// @dev Allows an owner to submit and confirm a transaction.\n\t/// @param destination Transaction target address.\n\t/// @param value Transaction ether value.\n\t/// @param data Transaction data payload.\n\t/// @return Returns transaction ID.\n\tfunction submitTransaction(address destination, uint value, bytes memory data)\n\tpublic\n\treturns (uint transactionId)\n\t{\n\t\ttransactionId = addTransaction(destination, value, data);\n\t\tconfirmTransaction(transactionId);\n\t}\n\n\t/// @dev Allows an owner to confirm a transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction confirmTransaction(uint transactionId)\n\tpublic\n\townerExists(msg.sender)\n\ttransactionExists(transactionId)\n\tnotConfirmed(transactionId, msg.sender)\n\t{\n\t\tconfirmations[transactionId][msg.sender] = true;\n\t\temit Confirmation(msg.sender, transactionId);\n\t\texecuteTransaction(transactionId);\n\t}\n\n\t/// @dev Allows an owner to revoke a confirmation for a transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction revokeConfirmation(uint transactionId)\n\tpublic\n\townerExists(msg.sender)\n\tconfirmed(transactionId, msg.sender)\n\tnotExecuted(transactionId)\n\t{\n\t\tconfirmations[transactionId][msg.sender] = false;\n\t\temit Revocation(msg.sender, transactionId);\n\t}\n\n\t/// @dev Allows anyone to execute a confirmed transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction executeTransaction(uint transactionId)\n\tpublic\n\tnotExecuted(transactionId)\n\t{\n\t\tif (isConfirmed(transactionId)) {\n\t\t\tTransaction storage transaction = transactions[transactionId];\n\t\t\ttransaction.executed = true;\n\n\t\t\tbool success;\n\t\t\tbytes memory _returnData;\n\t\t\t(success, _returnData) = transaction.destination.call.value(transaction.value)(transaction.data);\n\t\t\tif (success)\n\t\t\t\temit Execution(transactionId);\n\t\t\telse {\n\t\t\t\temit ExecutionFailure(transactionId);\n\t\t\t\ttransaction.executed = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @dev Returns the confirmation status of a transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Confirmation status.\n\tfunction isConfirmed(uint transactionId)\n\tpublic\n\tview\n\treturns (bool)\n\t{\n\t\tuint count = 0;\n\t\tfor (uint i=0; i<owners.length; i++) {\n\t\t\tif (confirmations[transactionId][owners[i]])\n\t\t\t\tcount += 1;\n\t\t\tif (count == required)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\t/*\n\t* Internal functions\n\t*/\n\t/// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n\t/// @param destination Transaction target address.\n\t/// @param value Transaction ether value.\n\t/// @param data Transaction data payload.\n\t/// @return Returns transaction ID.\n\tfunction addTransaction(address destination, uint value, bytes memory data)\n\tinternal\n\tnotNull(destination)\n\treturns (uint transactionId)\n\t{\n\t\ttransactionId = transactionCount;\n\t\ttransactions[transactionId] = Transaction({\n\t\t\tdestination: destination,\n\t\t\tvalue: value,\n\t\t\tdata: data,\n\t\t\texecuted: false\n\t\t});\n\t\ttransactionCount += 1;\n\t\temit Submission(transactionId);\n\t}\n\n\t/*\n\t* Web3 call functions\n\t*/\n\t/// @dev Returns number of confirmations of a transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Number of confirmations.\n\tfunction getConfirmationCount(uint transactionId)\n\tpublic\n\tview\n\treturns (uint count)\n\t{\n\t\tfor (uint i=0; i<owners.length; i++)\n\t\tif (confirmations[transactionId][owners[i]])\n\t\t\tcount += 1;\n\t}\n\n\t/// @dev Returns total number of transactions after filers are applied.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Total number of transactions after filters are applied.\n\tfunction getTransactionCount(bool pending, bool executed)\n\tpublic\n\tview\n\treturns (uint count)\n\t{\n\t\tfor (uint i=0; i<transactionCount; i++)\n\t\tif (   pending && !transactions[i].executed\n\t\t\t|| executed && transactions[i].executed)\n\t\tcount += 1;\n\t}\n\n\t/// @dev Returns list of owners.\n\t/// @return List of owner addresses.\n\tfunction getOwners()\n\tpublic\n\tview\n\treturns (address[] memory)\n\t{\n\t\treturn owners;\n\t}\n\n\t/// @dev Returns array with owner addresses, which confirmed transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Returns array of owner addresses.\n\tfunction getConfirmations(uint transactionId)\n\tpublic\n\tview\n\treturns (address[] memory _confirmations)\n\t{\n\t\taddress[] memory confirmationsTemp = new address[](owners.length);\n\t\tuint count = 0;\n\t\tuint i;\n\t\tfor (i=0; i<owners.length; i++)\n\t\tif (confirmations[transactionId][owners[i]]) {\n\t\t\tconfirmationsTemp[count] = owners[i];\n\t\t\tcount += 1;\n\t\t}\n\t\t_confirmations = new address[](count);\n\t\tfor (i=0; i<count; i++)\n\t\t_confirmations[i] = confirmationsTemp[i];\n\t}\n\n\t/// @dev Returns list of transaction IDs in defined range.\n\t/// @param from Index start position of transaction array.\n\t/// @param to Index end position of transaction array.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Returns array of transaction IDs.\n\tfunction getTransactionIds(uint from, uint to, bool pending, bool executed)\n\tpublic\n\tview\n\treturns (uint[] memory _transactionIds)\n\t{\n\t\tuint[] memory transactionIdsTemp = new uint[](transactionCount);\n\t\tuint count = 0;\n\t\tuint i;\n\t\tfor (i=0; i<transactionCount; i++)\n\t\tif (   pending && !transactions[i].executed\n\t\t\t|| executed && transactions[i].executed)\n\t\t{\n\t\t\ttransactionIdsTemp[count] = i;\n\t\t\tcount += 1;\n\t\t}\n\t\t_transactionIds = new uint[](to - from);\n\t\tfor (i=from; i<to; i++)\n\t\t_transactionIds[i - from] = transactionIdsTemp[i];\n\t}\n}", "debug": "storage_3: 0x7ffffffffffffffffffffffffffffffffdffffffffffffbffffffffffffffffd\ncalldatasize_MultiSigWallet: 0x8000000000000000000000000000000000000000000000000000000000000020\ncalldata_MultiSigWallet_4: 0x0\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "removeOwner(address)", "lineno": 7, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8643, "code": "ct MultiSigWallet {\n\n\tuint constant public MAX_OWNER_COUNT = 50;\n\n\tevent Confirmation(address indexed sender, uint indexed transactionId);\n\tevent Revocation(address indexed sender, uint indexed transactionId);\n\tevent Submission(uint indexed transactionId);\n\tevent Execution(uint indexed transactionId);\n\tevent ExecutionFailure(uint indexed transactionId);\n\tevent Deposit(address indexed sender, uint value);\n\tevent OwnerAddition(address indexed owner);\n\tevent OwnerRemoval(address indexed owner);\n\tevent RequirementChange(uint required);\n\n\tmapping (uint => Transaction) public transactions;\n\tmapping (uint => mapping (address => bool)) public confirmations;\n\tmapping (address => bool) public isOwner;\n\taddress[] public owners;\n\tuint public required;\n\tuint public transactionCount;\n\n\tstruct Transaction {\n\t\taddress destination;\n\t\tuint value;\n\t\tbytes data;\n\t\tbool executed;\n\t}\n\n\tmodifier onlyWallet() {\n\t\tif (msg.sender != address(this))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier ownerDoesNotExist(address owner) {\n\t\tif (isOwner[owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier ownerExists(address owner) {\n\t\tif (!isOwner[owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier transactionExists(uint transactionId) {\n\t\tif (transactions[transactionId].destination == address(0))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier confirmed(uint transactionId, address owner) {\n\t\tif (!confirmations[transactionId][owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notConfirmed(uint transactionId, address owner) {\n\t\tif (confirmations[transactionId][owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notExecuted(uint transactionId) {\n\t\tif (transactions[transactionId].executed)\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notNull(address _address) {\n\t\tif (_address == address(0))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier validRequirement(uint ownerCount, uint _required) {\n\t\tif (   ownerCount > MAX_OWNER_COUNT\n\t\t\t|| _required > ownerCount\n\t\t\t\t|| _required == 0\n\t\t\t\t\t|| ownerCount == 0)\n\t\t\t\t\trevert();\n\t\t\t\t\t_;\n\t}\n\n\t/// @dev Fallback function allows to deposit ether.\n\tfunction()\n\texternal\n\tpayable\n\t{\n\t\tif (msg.value > 0)\n\t\t\temit Deposit(msg.sender, msg.value);\n\t}\n\n\t/*\n\t* Public functions\n\t*/\n\t/// @dev Contract constructor sets initial owners and required number of confirmations.\n\t/// @param _owners List of initial owners.\n\t/// @param _required Number of required confirmations.\n\tconstructor(address[] memory _owners, uint _required)\n\tpublic\n\tvalidRequirement(_owners.length, _required)\n\t{\n\t\tfor (uint i=0; i<_owners.length; i++) {\n\t\t\tif (isOwner[_owners[i]] || _owners[i] == address(0))\n\t\t\t\trevert();\n\t\t\tisOwner[_owners[i]] = true;\n\t\t}\n\t\towners = _owners;\n\t\trequired = _required;\n\t}\n\n\t/// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of new owner.\n\tfunction addOwner(address owner)\n\tpublic\n\tonlyWallet\n\townerDoesNotExist(owner)\n\tnotNull(owner)\n\tvalidRequirement(owners.length + 1, required)\n\t{\n\t\tisOwner[owner] = true;\n\t\towners.push(owner);\n\t\temit OwnerAddition(owner);\n\t}\n\n\t/// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of owner.\n\tfunction removeOwner(address owner)\n\tpublic\n\tonlyWallet\n\townerExists(owner)\n\t{\n\t\tisOwner[owner] = false;\n\t\tfor (uint i=0; i<owners.length - 1; i++)\n\t\tif (owners[i] == owner) {\n\t\t\towners[i] = owners[owners.length - 1];\n\t\t\tbreak;\n\t\t}\n\t\towners.length -= 1;\n\t\tif (required > owners.length)\n\t\t\tchangeRequirement(owners.length);\n\t\temit OwnerRemoval(owner);\n\t}\n\n\t/// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of owner to be replaced.\n\t/// @param owner Address of new owner.\n\tfunction replaceOwner(address owner, address newOwner)\n\tpublic\n\tonlyWallet\n\townerExists(owner)\n\townerDoesNotExist(newOwner)\n\t{\n\t\tfor (uint i=0; i<owners.length; i++)\n\t\tif (owners[i] == owner) {\n\t\t\towners[i] = newOwner;\n\t\t\tbreak;\n\t\t}\n\t\tisOwner[owner] = false;\n\t\tisOwner[newOwner] = true;\n\t\temit OwnerRemoval(owner);\n\t\temit OwnerAddition(newOwner);\n\t}\n\n\t/// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n\t/// @param _required Number of required confirmations.\n\tfunction changeRequirement(uint _required)\n\tpublic\n\tonlyWallet\n\tvalidRequirement(owners.length, _required)\n\t{\n\t\trequired = _required;\n\t\temit RequirementChange(_required);\n\t}\n\n\t/// @dev Allows an owner to submit and confirm a transaction.\n\t/// @param destination Transaction target address.\n\t/// @param value Transaction ether value.\n\t/// @param data Transaction data payload.\n\t/// @return Returns transaction ID.\n\tfunction submitTransaction(address destination, uint value, bytes memory data)\n\tpublic\n\treturns (uint transactionId)\n\t{\n\t\ttransactionId = addTransaction(destination, value, data);\n\t\tconfirmTransaction(transactionId);\n\t}\n\n\t/// @dev Allows an owner to confirm a transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction confirmTransaction(uint transactionId)\n\tpublic\n\townerExists(msg.sender)\n\ttransactionExists(transactionId)\n\tnotConfirmed(transactionId, msg.sender)\n\t{\n\t\tconfirmations[transactionId][msg.sender] = true;\n\t\temit Confirmation(msg.sender, transactionId);\n\t\texecuteTransaction(transactionId);\n\t}\n\n\t/// @dev Allows an owner to revoke a confirmation for a transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction revokeConfirmation(uint transactionId)\n\tpublic\n\townerExists(msg.sender)\n\tconfirmed(transactionId, msg.sender)\n\tnotExecuted(transactionId)\n\t{\n\t\tconfirmations[transactionId][msg.sender] = false;\n\t\temit Revocation(msg.sender, transactionId);\n\t}\n\n\t/// @dev Allows anyone to execute a confirmed transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction executeTransaction(uint transactionId)\n\tpublic\n\tnotExecuted(transactionId)\n\t{\n\t\tif (isConfirmed(transactionId)) {\n\t\t\tTransaction storage transaction = transactions[transactionId];\n\t\t\ttransaction.executed = true;\n\n\t\t\tbool success;\n\t\t\tbytes memory _returnData;\n\t\t\t(success, _returnData) = transaction.destination.call.value(transaction.value)(transaction.data);\n\t\t\tif (success)\n\t\t\t\temit Execution(transactionId);\n\t\t\telse {\n\t\t\t\temit ExecutionFailure(transactionId);\n\t\t\t\ttransaction.executed = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @dev Returns the confirmation status of a transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Confirmation status.\n\tfunction isConfirmed(uint transactionId)\n\tpublic\n\tview\n\treturns (bool)\n\t{\n\t\tuint count = 0;\n\t\tfor (uint i=0; i<owners.length; i++) {\n\t\t\tif (confirmations[transactionId][owners[i]])\n\t\t\t\tcount += 1;\n\t\t\tif (count == required)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\t/*\n\t* Internal functions\n\t*/\n\t/// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n\t/// @param destination Transaction target address.\n\t/// @param value Transaction ether value.\n\t/// @param data Transaction data payload.\n\t/// @return Returns transaction ID.\n\tfunction addTransaction(address destination, uint value, bytes memory data)\n\tinternal\n\tnotNull(destination)\n\treturns (uint transactionId)\n\t{\n\t\ttransactionId = transactionCount;\n\t\ttransactions[transactionId] = Transaction({\n\t\t\tdestination: destination,\n\t\t\tvalue: value,\n\t\t\tdata: data,\n\t\t\texecuted: false\n\t\t});\n\t\ttransactionCount += 1;\n\t\temit Submission(transactionId);\n\t}\n\n\t/*\n\t* Web3 call functions\n\t*/\n\t/// @dev Returns number of confirmations of a transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Number of confirmations.\n\tfunction getConfirmationCount(uint transactionId)\n\tpublic\n\tview\n\treturns (uint count)\n\t{\n\t\tfor (uint i=0; i<owners.length; i++)\n\t\tif (confirmations[transactionId][owners[i]])\n\t\t\tcount += 1;\n\t}\n\n\t/// @dev Returns total number of transactions after filers are applied.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Total number of transactions after filters are applied.\n\tfunction getTransactionCount(bool pending, bool executed)\n\tpublic\n\tview\n\treturns (uint count)\n\t{\n\t\tfor (uint i=0; i<transactionCount; i++)\n\t\tif (   pending && !transactions[i].executed\n\t\t\t|| executed && transactions[i].executed)\n\t\tcount += 1;\n\t}\n\n\t/// @dev Returns list of owners.\n\t/// @return List of owner addresses.\n\tfunction getOwners()\n\tpublic\n\tview\n\treturns (address[] memory)\n\t{\n\t\treturn owners;\n\t}\n\n\t/// @dev Returns array with owner addresses, which confirmed transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Returns array of owner addresses.\n\tfunction getConfirmations(uint transactionId)\n\tpublic\n\tview\n\treturns (address[] memory _confirmations)\n\t{\n\t\taddress[] memory confirmationsTemp = new address[](owners.length);\n\t\tuint count = 0;\n\t\tuint i;\n\t\tfor (i=0; i<owners.length; i++)\n\t\tif (confirmations[transactionId][owners[i]]) {\n\t\t\tconfirmationsTemp[count] = owners[i];\n\t\t\tcount += 1;\n\t\t}\n\t\t_confirmations = new address[](count);\n\t\tfor (i=0; i<count; i++)\n\t\t_confirmations[i] = confirmationsTemp[i];\n\t}\n\n\t/// @dev Returns list of transaction IDs in defined range.\n\t/// @param from Index start position of transaction array.\n\t/// @param to Index end position of transaction array.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Returns array of transaction IDs.\n\tfunction getTransactionIds(uint from, uint to, bool pending, bool executed)\n\tpublic\n\tview\n\treturns (uint[] memory _transactionIds)\n\t{\n\t\tuint[] memory transactionIdsTemp = new uint[](transactionCount);\n\t\tuint count = 0;\n\t\tuint i;\n\t\tfor (i=0; i<transactionCount; i++)\n\t\tif (   pending && !transactions[i].executed\n\t\t\t|| executed && transactions[i].executed)\n\t\t{\n\t\t\ttransactionIdsTemp[count] = i;\n\t\t\tcount += 1;\n\t\t}\n\t\t_transactionIds = new uint[](to - from);\n\t\tfor (i=from; i<to; i++)\n\t\t_transactionIds[i - from] = transactionIdsTemp[i];\n\t}\n}", "debug": "storage_3: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldatasize_MultiSigWallet: 0x20000000000000\ncalldata_MultiSigWallet_4: 0x0\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "removeOwner(address)", "lineno": 7, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8698, "code": "ct MultiSigWallet {\n\n\tuint constant public MAX_OWNER_COUNT = 50;\n\n\tevent Confirmation(address indexed sender, uint indexed transactionId);\n\tevent Revocation(address indexed sender, uint indexed transactionId);\n\tevent Submission(uint indexed transactionId);\n\tevent Execution(uint indexed transactionId);\n\tevent ExecutionFailure(uint indexed transactionId);\n\tevent Deposit(address indexed sender, uint value);\n\tevent OwnerAddition(address indexed owner);\n\tevent OwnerRemoval(address indexed owner);\n\tevent RequirementChange(uint required);\n\n\tmapping (uint => Transaction) public transactions;\n\tmapping (uint => mapping (address => bool)) public confirmations;\n\tmapping (address => bool) public isOwner;\n\taddress[] public owners;\n\tuint public required;\n\tuint public transactionCount;\n\n\tstruct Transaction {\n\t\taddress destination;\n\t\tuint value;\n\t\tbytes data;\n\t\tbool executed;\n\t}\n\n\tmodifier onlyWallet() {\n\t\tif (msg.sender != address(this))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier ownerDoesNotExist(address owner) {\n\t\tif (isOwner[owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier ownerExists(address owner) {\n\t\tif (!isOwner[owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier transactionExists(uint transactionId) {\n\t\tif (transactions[transactionId].destination == address(0))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier confirmed(uint transactionId, address owner) {\n\t\tif (!confirmations[transactionId][owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notConfirmed(uint transactionId, address owner) {\n\t\tif (confirmations[transactionId][owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notExecuted(uint transactionId) {\n\t\tif (transactions[transactionId].executed)\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notNull(address _address) {\n\t\tif (_address == address(0))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier validRequirement(uint ownerCount, uint _required) {\n\t\tif (   ownerCount > MAX_OWNER_COUNT\n\t\t\t|| _required > ownerCount\n\t\t\t\t|| _required == 0\n\t\t\t\t\t|| ownerCount == 0)\n\t\t\t\t\trevert();\n\t\t\t\t\t_;\n\t}\n\n\t/// @dev Fallback function allows to deposit ether.\n\tfunction()\n\texternal\n\tpayable\n\t{\n\t\tif (msg.value > 0)\n\t\t\temit Deposit(msg.sender, msg.value);\n\t}\n\n\t/*\n\t* Public functions\n\t*/\n\t/// @dev Contract constructor sets initial owners and required number of confirmations.\n\t/// @param _owners List of initial owners.\n\t/// @param _required Number of required confirmations.\n\tconstructor(address[] memory _owners, uint _required)\n\tpublic\n\tvalidRequirement(_owners.length, _required)\n\t{\n\t\tfor (uint i=0; i<_owners.length; i++) {\n\t\t\tif (isOwner[_owners[i]] || _owners[i] == address(0))\n\t\t\t\trevert();\n\t\t\tisOwner[_owners[i]] = true;\n\t\t}\n\t\towners = _owners;\n\t\trequired = _required;\n\t}\n\n\t/// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of new owner.\n\tfunction addOwner(address owner)\n\tpublic\n\tonlyWallet\n\townerDoesNotExist(owner)\n\tnotNull(owner)\n\tvalidRequirement(owners.length + 1, required)\n\t{\n\t\tisOwner[owner] = true;\n\t\towners.push(owner);\n\t\temit OwnerAddition(owner);\n\t}\n\n\t/// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of owner.\n\tfunction removeOwner(address owner)\n\tpublic\n\tonlyWallet\n\townerExists(owner)\n\t{\n\t\tisOwner[owner] = false;\n\t\tfor (uint i=0; i<owners.length - 1; i++)\n\t\tif (owners[i] == owner) {\n\t\t\towners[i] = owners[owners.length - 1];\n\t\t\tbreak;\n\t\t}\n\t\towners.length -= 1;\n\t\tif (required > owners.length)\n\t\t\tchangeRequirement(owners.length);\n\t\temit OwnerRemoval(owner);\n\t}\n\n\t/// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of owner to be replaced.\n\t/// @param owner Address of new owner.\n\tfunction replaceOwner(address owner, address newOwner)\n\tpublic\n\tonlyWallet\n\townerExists(owner)\n\townerDoesNotExist(newOwner)\n\t{\n\t\tfor (uint i=0; i<owners.length; i++)\n\t\tif (owners[i] == owner) {\n\t\t\towners[i] = newOwner;\n\t\t\tbreak;\n\t\t}\n\t\tisOwner[owner] = false;\n\t\tisOwner[newOwner] = true;\n\t\temit OwnerRemoval(owner);\n\t\temit OwnerAddition(newOwner);\n\t}\n\n\t/// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n\t/// @param _required Number of required confirmations.\n\tfunction changeRequirement(uint _required)\n\tpublic\n\tonlyWallet\n\tvalidRequirement(owners.length, _required)\n\t{\n\t\trequired = _required;\n\t\temit RequirementChange(_required);\n\t}\n\n\t/// @dev Allows an owner to submit and confirm a transaction.\n\t/// @param destination Transaction target address.\n\t/// @param value Transaction ether value.\n\t/// @param data Transaction data payload.\n\t/// @return Returns transaction ID.\n\tfunction submitTransaction(address destination, uint value, bytes memory data)\n\tpublic\n\treturns (uint transactionId)\n\t{\n\t\ttransactionId = addTransaction(destination, value, data);\n\t\tconfirmTransaction(transactionId);\n\t}\n\n\t/// @dev Allows an owner to confirm a transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction confirmTransaction(uint transactionId)\n\tpublic\n\townerExists(msg.sender)\n\ttransactionExists(transactionId)\n\tnotConfirmed(transactionId, msg.sender)\n\t{\n\t\tconfirmations[transactionId][msg.sender] = true;\n\t\temit Confirmation(msg.sender, transactionId);\n\t\texecuteTransaction(transactionId);\n\t}\n\n\t/// @dev Allows an owner to revoke a confirmation for a transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction revokeConfirmation(uint transactionId)\n\tpublic\n\townerExists(msg.sender)\n\tconfirmed(transactionId, msg.sender)\n\tnotExecuted(transactionId)\n\t{\n\t\tconfirmations[transactionId][msg.sender] = false;\n\t\temit Revocation(msg.sender, transactionId);\n\t}\n\n\t/// @dev Allows anyone to execute a confirmed transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction executeTransaction(uint transactionId)\n\tpublic\n\tnotExecuted(transactionId)\n\t{\n\t\tif (isConfirmed(transactionId)) {\n\t\t\tTransaction storage transaction = transactions[transactionId];\n\t\t\ttransaction.executed = true;\n\n\t\t\tbool success;\n\t\t\tbytes memory _returnData;\n\t\t\t(success, _returnData) = transaction.destination.call.value(transaction.value)(transaction.data);\n\t\t\tif (success)\n\t\t\t\temit Execution(transactionId);\n\t\t\telse {\n\t\t\t\temit ExecutionFailure(transactionId);\n\t\t\t\ttransaction.executed = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @dev Returns the confirmation status of a transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Confirmation status.\n\tfunction isConfirmed(uint transactionId)\n\tpublic\n\tview\n\treturns (bool)\n\t{\n\t\tuint count = 0;\n\t\tfor (uint i=0; i<owners.length; i++) {\n\t\t\tif (confirmations[transactionId][owners[i]])\n\t\t\t\tcount += 1;\n\t\t\tif (count == required)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\t/*\n\t* Internal functions\n\t*/\n\t/// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n\t/// @param destination Transaction target address.\n\t/// @param value Transaction ether value.\n\t/// @param data Transaction data payload.\n\t/// @return Returns transaction ID.\n\tfunction addTransaction(address destination, uint value, bytes memory data)\n\tinternal\n\tnotNull(destination)\n\treturns (uint transactionId)\n\t{\n\t\ttransactionId = transactionCount;\n\t\ttransactions[transactionId] = Transaction({\n\t\t\tdestination: destination,\n\t\t\tvalue: value,\n\t\t\tdata: data,\n\t\t\texecuted: false\n\t\t});\n\t\ttransactionCount += 1;\n\t\temit Submission(transactionId);\n\t}\n\n\t/*\n\t* Web3 call functions\n\t*/\n\t/// @dev Returns number of confirmations of a transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Number of confirmations.\n\tfunction getConfirmationCount(uint transactionId)\n\tpublic\n\tview\n\treturns (uint count)\n\t{\n\t\tfor (uint i=0; i<owners.length; i++)\n\t\tif (confirmations[transactionId][owners[i]])\n\t\t\tcount += 1;\n\t}\n\n\t/// @dev Returns total number of transactions after filers are applied.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Total number of transactions after filters are applied.\n\tfunction getTransactionCount(bool pending, bool executed)\n\tpublic\n\tview\n\treturns (uint count)\n\t{\n\t\tfor (uint i=0; i<transactionCount; i++)\n\t\tif (   pending && !transactions[i].executed\n\t\t\t|| executed && transactions[i].executed)\n\t\tcount += 1;\n\t}\n\n\t/// @dev Returns list of owners.\n\t/// @return List of owner addresses.\n\tfunction getOwners()\n\tpublic\n\tview\n\treturns (address[] memory)\n\t{\n\t\treturn owners;\n\t}\n\n\t/// @dev Returns array with owner addresses, which confirmed transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Returns array of owner addresses.\n\tfunction getConfirmations(uint transactionId)\n\tpublic\n\tview\n\treturns (address[] memory _confirmations)\n\t{\n\t\taddress[] memory confirmationsTemp = new address[](owners.length);\n\t\tuint count = 0;\n\t\tuint i;\n\t\tfor (i=0; i<owners.length; i++)\n\t\tif (confirmations[transactionId][owners[i]]) {\n\t\t\tconfirmationsTemp[count] = owners[i];\n\t\t\tcount += 1;\n\t\t}\n\t\t_confirmations = new address[](count);\n\t\tfor (i=0; i<count; i++)\n\t\t_confirmations[i] = confirmationsTemp[i];\n\t}\n\n\t/// @dev Returns list of transaction IDs in defined range.\n\t/// @param from Index start position of transaction array.\n\t/// @param to Index end position of transaction array.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Returns array of transaction IDs.\n\tfunction getTransactionIds(uint from, uint to, bool pending, bool executed)\n\tpublic\n\tview\n\treturns (uint[] memory _transactionIds)\n\t{\n\t\tuint[] memory transactionIdsTemp = new uint[](transactionCount);\n\t\tuint count = 0;\n\t\tuint i;\n\t\tfor (i=0; i<transactionCount; i++)\n\t\tif (   pending && !transactions[i].executed\n\t\t\t|| executed && transactions[i].executed)\n\t\t{\n\t\t\ttransactionIdsTemp[count] = i;\n\t\t\tcount += 1;\n\t\t}\n\t\t_transactionIds = new uint[](to - from);\n\t\tfor (i=from; i<to; i++)\n\t\t_transactionIds[i - from] = transactionIdsTemp[i];\n\t}\n}", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0xfffffff8\nkeccac_2_+_keccac_storage_5: 0xfdfc2192000000000000000000000000225bbebf880dfffffffffffffffaaa7e\ncalldatasize_MultiSigWallet: 0xc00000000000000000000000000000000200000000\ncalldata_MultiSigWallet_32 + 36: 0x100000000\nstorage_2 + keccac_storage_5: 0xbfb1640000000000000000000000000dbff0f7222bc0000000000000020000c5\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_0: 0xc642747400000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "submitTransaction(address,uint256,bytes)", "lineno": 7, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8727, "code": "ct MultiSigWallet {\n\n\tuint constant public MAX_OWNER_COUNT = 50;\n\n\tevent Confirmation(address indexed sender, uint indexed transactionId);\n\tevent Revocation(address indexed sender, uint indexed transactionId);\n\tevent Submission(uint indexed transactionId);\n\tevent Execution(uint indexed transactionId);\n\tevent ExecutionFailure(uint indexed transactionId);\n\tevent Deposit(address indexed sender, uint value);\n\tevent OwnerAddition(address indexed owner);\n\tevent OwnerRemoval(address indexed owner);\n\tevent RequirementChange(uint required);\n\n\tmapping (uint => Transaction) public transactions;\n\tmapping (uint => mapping (address => bool)) public confirmations;\n\tmapping (address => bool) public isOwner;\n\taddress[] public owners;\n\tuint public required;\n\tuint public transactionCount;\n\n\tstruct Transaction {\n\t\taddress destination;\n\t\tuint value;\n\t\tbytes data;\n\t\tbool executed;\n\t}\n\n\tmodifier onlyWallet() {\n\t\tif (msg.sender != address(this))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier ownerDoesNotExist(address owner) {\n\t\tif (isOwner[owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier ownerExists(address owner) {\n\t\tif (!isOwner[owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier transactionExists(uint transactionId) {\n\t\tif (transactions[transactionId].destination == address(0))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier confirmed(uint transactionId, address owner) {\n\t\tif (!confirmations[transactionId][owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notConfirmed(uint transactionId, address owner) {\n\t\tif (confirmations[transactionId][owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notExecuted(uint transactionId) {\n\t\tif (transactions[transactionId].executed)\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notNull(address _address) {\n\t\tif (_address == address(0))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier validRequirement(uint ownerCount, uint _required) {\n\t\tif (   ownerCount > MAX_OWNER_COUNT\n\t\t\t|| _required > ownerCount\n\t\t\t\t|| _required == 0\n\t\t\t\t\t|| ownerCount == 0)\n\t\t\t\t\trevert();\n\t\t\t\t\t_;\n\t}\n\n\t/// @dev Fallback function allows to deposit ether.\n\tfunction()\n\texternal\n\tpayable\n\t{\n\t\tif (msg.value > 0)\n\t\t\temit Deposit(msg.sender, msg.value);\n\t}\n\n\t/*\n\t* Public functions\n\t*/\n\t/// @dev Contract constructor sets initial owners and required number of confirmations.\n\t/// @param _owners List of initial owners.\n\t/// @param _required Number of required confirmations.\n\tconstructor(address[] memory _owners, uint _required)\n\tpublic\n\tvalidRequirement(_owners.length, _required)\n\t{\n\t\tfor (uint i=0; i<_owners.length; i++) {\n\t\t\tif (isOwner[_owners[i]] || _owners[i] == address(0))\n\t\t\t\trevert();\n\t\t\tisOwner[_owners[i]] = true;\n\t\t}\n\t\towners = _owners;\n\t\trequired = _required;\n\t}\n\n\t/// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of new owner.\n\tfunction addOwner(address owner)\n\tpublic\n\tonlyWallet\n\townerDoesNotExist(owner)\n\tnotNull(owner)\n\tvalidRequirement(owners.length + 1, required)\n\t{\n\t\tisOwner[owner] = true;\n\t\towners.push(owner);\n\t\temit OwnerAddition(owner);\n\t}\n\n\t/// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of owner.\n\tfunction removeOwner(address owner)\n\tpublic\n\tonlyWallet\n\townerExists(owner)\n\t{\n\t\tisOwner[owner] = false;\n\t\tfor (uint i=0; i<owners.length - 1; i++)\n\t\tif (owners[i] == owner) {\n\t\t\towners[i] = owners[owners.length - 1];\n\t\t\tbreak;\n\t\t}\n\t\towners.length -= 1;\n\t\tif (required > owners.length)\n\t\t\tchangeRequirement(owners.length);\n\t\temit OwnerRemoval(owner);\n\t}\n\n\t/// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of owner to be replaced.\n\t/// @param owner Address of new owner.\n\tfunction replaceOwner(address owner, address newOwner)\n\tpublic\n\tonlyWallet\n\townerExists(owner)\n\townerDoesNotExist(newOwner)\n\t{\n\t\tfor (uint i=0; i<owners.length; i++)\n\t\tif (owners[i] == owner) {\n\t\t\towners[i] = newOwner;\n\t\t\tbreak;\n\t\t}\n\t\tisOwner[owner] = false;\n\t\tisOwner[newOwner] = true;\n\t\temit OwnerRemoval(owner);\n\t\temit OwnerAddition(newOwner);\n\t}\n\n\t/// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n\t/// @param _required Number of required confirmations.\n\tfunction changeRequirement(uint _required)\n\tpublic\n\tonlyWallet\n\tvalidRequirement(owners.length, _required)\n\t{\n\t\trequired = _required;\n\t\temit RequirementChange(_required);\n\t}\n\n\t/// @dev Allows an owner to submit and confirm a transaction.\n\t/// @param destination Transaction target address.\n\t/// @param value Transaction ether value.\n\t/// @param data Transaction data payload.\n\t/// @return Returns transaction ID.\n\tfunction submitTransaction(address destination, uint value, bytes memory data)\n\tpublic\n\treturns (uint transactionId)\n\t{\n\t\ttransactionId = addTransaction(destination, value, data);\n\t\tconfirmTransaction(transactionId);\n\t}\n\n\t/// @dev Allows an owner to confirm a transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction confirmTransaction(uint transactionId)\n\tpublic\n\townerExists(msg.sender)\n\ttransactionExists(transactionId)\n\tnotConfirmed(transactionId, msg.sender)\n\t{\n\t\tconfirmations[transactionId][msg.sender] = true;\n\t\temit Confirmation(msg.sender, transactionId);\n\t\texecuteTransaction(transactionId);\n\t}\n\n\t/// @dev Allows an owner to revoke a confirmation for a transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction revokeConfirmation(uint transactionId)\n\tpublic\n\townerExists(msg.sender)\n\tconfirmed(transactionId, msg.sender)\n\tnotExecuted(transactionId)\n\t{\n\t\tconfirmations[transactionId][msg.sender] = false;\n\t\temit Revocation(msg.sender, transactionId);\n\t}\n\n\t/// @dev Allows anyone to execute a confirmed transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction executeTransaction(uint transactionId)\n\tpublic\n\tnotExecuted(transactionId)\n\t{\n\t\tif (isConfirmed(transactionId)) {\n\t\t\tTransaction storage transaction = transactions[transactionId];\n\t\t\ttransaction.executed = true;\n\n\t\t\tbool success;\n\t\t\tbytes memory _returnData;\n\t\t\t(success, _returnData) = transaction.destination.call.value(transaction.value)(transaction.data);\n\t\t\tif (success)\n\t\t\t\temit Execution(transactionId);\n\t\t\telse {\n\t\t\t\temit ExecutionFailure(transactionId);\n\t\t\t\ttransaction.executed = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @dev Returns the confirmation status of a transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Confirmation status.\n\tfunction isConfirmed(uint transactionId)\n\tpublic\n\tview\n\treturns (bool)\n\t{\n\t\tuint count = 0;\n\t\tfor (uint i=0; i<owners.length; i++) {\n\t\t\tif (confirmations[transactionId][owners[i]])\n\t\t\t\tcount += 1;\n\t\t\tif (count == required)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\t/*\n\t* Internal functions\n\t*/\n\t/// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n\t/// @param destination Transaction target address.\n\t/// @param value Transaction ether value.\n\t/// @param data Transaction data payload.\n\t/// @return Returns transaction ID.\n\tfunction addTransaction(address destination, uint value, bytes memory data)\n\tinternal\n\tnotNull(destination)\n\treturns (uint transactionId)\n\t{\n\t\ttransactionId = transactionCount;\n\t\ttransactions[transactionId] = Transaction({\n\t\t\tdestination: destination,\n\t\t\tvalue: value,\n\t\t\tdata: data,\n\t\t\texecuted: false\n\t\t});\n\t\ttransactionCount += 1;\n\t\temit Submission(transactionId);\n\t}\n\n\t/*\n\t* Web3 call functions\n\t*/\n\t/// @dev Returns number of confirmations of a transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Number of confirmations.\n\tfunction getConfirmationCount(uint transactionId)\n\tpublic\n\tview\n\treturns (uint count)\n\t{\n\t\tfor (uint i=0; i<owners.length; i++)\n\t\tif (confirmations[transactionId][owners[i]])\n\t\t\tcount += 1;\n\t}\n\n\t/// @dev Returns total number of transactions after filers are applied.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Total number of transactions after filters are applied.\n\tfunction getTransactionCount(bool pending, bool executed)\n\tpublic\n\tview\n\treturns (uint count)\n\t{\n\t\tfor (uint i=0; i<transactionCount; i++)\n\t\tif (   pending && !transactions[i].executed\n\t\t\t|| executed && transactions[i].executed)\n\t\tcount += 1;\n\t}\n\n\t/// @dev Returns list of owners.\n\t/// @return List of owner addresses.\n\tfunction getOwners()\n\tpublic\n\tview\n\treturns (address[] memory)\n\t{\n\t\treturn owners;\n\t}\n\n\t/// @dev Returns array with owner addresses, which confirmed transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Returns array of owner addresses.\n\tfunction getConfirmations(uint transactionId)\n\tpublic\n\tview\n\treturns (address[] memory _confirmations)\n\t{\n\t\taddress[] memory confirmationsTemp = new address[](owners.length);\n\t\tuint count = 0;\n\t\tuint i;\n\t\tfor (i=0; i<owners.length; i++)\n\t\tif (confirmations[transactionId][owners[i]]) {\n\t\t\tconfirmationsTemp[count] = owners[i];\n\t\t\tcount += 1;\n\t\t}\n\t\t_confirmations = new address[](count);\n\t\tfor (i=0; i<count; i++)\n\t\t_confirmations[i] = confirmationsTemp[i];\n\t}\n\n\t/// @dev Returns list of transaction IDs in defined range.\n\t/// @param from Index start position of transaction array.\n\t/// @param to Index end position of transaction array.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Returns array of transaction IDs.\n\tfunction getTransactionIds(uint from, uint to, bool pending, bool executed)\n\tpublic\n\tview\n\treturns (uint[] memory _transactionIds)\n\t{\n\t\tuint[] memory transactionIdsTemp = new uint[](transactionCount);\n\t\tuint count = 0;\n\t\tuint i;\n\t\tfor (i=0; i<transactionCount; i++)\n\t\tif (   pending && !transactions[i].executed\n\t\t\t|| executed && transactions[i].executed)\n\t\t{\n\t\t\ttransactionIdsTemp[count] = i;\n\t\t\tcount += 1;\n\t\t}\n\t\t_transactionIds = new uint[](to - from);\n\t\tfor (i=from; i<to; i++)\n\t\t_transactionIds[i - from] = transactionIdsTemp[i];\n\t}\n}", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x7ffe7fe3\ncalldatasize_MultiSigWallet: 0x7f80000000000000000000000000000000000000000000000000000000000082\ncalldata_MultiSigWallet_32 + 36: 0x0\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_0: 0xc642747400000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "submitTransaction(address,uint256,bytes)", "lineno": 7, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8741, "code": "ct MultiSigWallet {\n\n\tuint constant public MAX_OWNER_COUNT = 50;\n\n\tevent Confirmation(address indexed sender, uint indexed transactionId);\n\tevent Revocation(address indexed sender, uint indexed transactionId);\n\tevent Submission(uint indexed transactionId);\n\tevent Execution(uint indexed transactionId);\n\tevent ExecutionFailure(uint indexed transactionId);\n\tevent Deposit(address indexed sender, uint value);\n\tevent OwnerAddition(address indexed owner);\n\tevent OwnerRemoval(address indexed owner);\n\tevent RequirementChange(uint required);\n\n\tmapping (uint => Transaction) public transactions;\n\tmapping (uint => mapping (address => bool)) public confirmations;\n\tmapping (address => bool) public isOwner;\n\taddress[] public owners;\n\tuint public required;\n\tuint public transactionCount;\n\n\tstruct Transaction {\n\t\taddress destination;\n\t\tuint value;\n\t\tbytes data;\n\t\tbool executed;\n\t}\n\n\tmodifier onlyWallet() {\n\t\tif (msg.sender != address(this))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier ownerDoesNotExist(address owner) {\n\t\tif (isOwner[owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier ownerExists(address owner) {\n\t\tif (!isOwner[owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier transactionExists(uint transactionId) {\n\t\tif (transactions[transactionId].destination == address(0))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier confirmed(uint transactionId, address owner) {\n\t\tif (!confirmations[transactionId][owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notConfirmed(uint transactionId, address owner) {\n\t\tif (confirmations[transactionId][owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notExecuted(uint transactionId) {\n\t\tif (transactions[transactionId].executed)\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notNull(address _address) {\n\t\tif (_address == address(0))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier validRequirement(uint ownerCount, uint _required) {\n\t\tif (   ownerCount > MAX_OWNER_COUNT\n\t\t\t|| _required > ownerCount\n\t\t\t\t|| _required == 0\n\t\t\t\t\t|| ownerCount == 0)\n\t\t\t\t\trevert();\n\t\t\t\t\t_;\n\t}\n\n\t/// @dev Fallback function allows to deposit ether.\n\tfunction()\n\texternal\n\tpayable\n\t{\n\t\tif (msg.value > 0)\n\t\t\temit Deposit(msg.sender, msg.value);\n\t}\n\n\t/*\n\t* Public functions\n\t*/\n\t/// @dev Contract constructor sets initial owners and required number of confirmations.\n\t/// @param _owners List of initial owners.\n\t/// @param _required Number of required confirmations.\n\tconstructor(address[] memory _owners, uint _required)\n\tpublic\n\tvalidRequirement(_owners.length, _required)\n\t{\n\t\tfor (uint i=0; i<_owners.length; i++) {\n\t\t\tif (isOwner[_owners[i]] || _owners[i] == address(0))\n\t\t\t\trevert();\n\t\t\tisOwner[_owners[i]] = true;\n\t\t}\n\t\towners = _owners;\n\t\trequired = _required;\n\t}\n\n\t/// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of new owner.\n\tfunction addOwner(address owner)\n\tpublic\n\tonlyWallet\n\townerDoesNotExist(owner)\n\tnotNull(owner)\n\tvalidRequirement(owners.length + 1, required)\n\t{\n\t\tisOwner[owner] = true;\n\t\towners.push(owner);\n\t\temit OwnerAddition(owner);\n\t}\n\n\t/// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of owner.\n\tfunction removeOwner(address owner)\n\tpublic\n\tonlyWallet\n\townerExists(owner)\n\t{\n\t\tisOwner[owner] = false;\n\t\tfor (uint i=0; i<owners.length - 1; i++)\n\t\tif (owners[i] == owner) {\n\t\t\towners[i] = owners[owners.length - 1];\n\t\t\tbreak;\n\t\t}\n\t\towners.length -= 1;\n\t\tif (required > owners.length)\n\t\t\tchangeRequirement(owners.length);\n\t\temit OwnerRemoval(owner);\n\t}\n\n\t/// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of owner to be replaced.\n\t/// @param owner Address of new owner.\n\tfunction replaceOwner(address owner, address newOwner)\n\tpublic\n\tonlyWallet\n\townerExists(owner)\n\townerDoesNotExist(newOwner)\n\t{\n\t\tfor (uint i=0; i<owners.length; i++)\n\t\tif (owners[i] == owner) {\n\t\t\towners[i] = newOwner;\n\t\t\tbreak;\n\t\t}\n\t\tisOwner[owner] = false;\n\t\tisOwner[newOwner] = true;\n\t\temit OwnerRemoval(owner);\n\t\temit OwnerAddition(newOwner);\n\t}\n\n\t/// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n\t/// @param _required Number of required confirmations.\n\tfunction changeRequirement(uint _required)\n\tpublic\n\tonlyWallet\n\tvalidRequirement(owners.length, _required)\n\t{\n\t\trequired = _required;\n\t\temit RequirementChange(_required);\n\t}\n\n\t/// @dev Allows an owner to submit and confirm a transaction.\n\t/// @param destination Transaction target address.\n\t/// @param value Transaction ether value.\n\t/// @param data Transaction data payload.\n\t/// @return Returns transaction ID.\n\tfunction submitTransaction(address destination, uint value, bytes memory data)\n\tpublic\n\treturns (uint transactionId)\n\t{\n\t\ttransactionId = addTransaction(destination, value, data);\n\t\tconfirmTransaction(transactionId);\n\t}\n\n\t/// @dev Allows an owner to confirm a transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction confirmTransaction(uint transactionId)\n\tpublic\n\townerExists(msg.sender)\n\ttransactionExists(transactionId)\n\tnotConfirmed(transactionId, msg.sender)\n\t{\n\t\tconfirmations[transactionId][msg.sender] = true;\n\t\temit Confirmation(msg.sender, transactionId);\n\t\texecuteTransaction(transactionId);\n\t}\n\n\t/// @dev Allows an owner to revoke a confirmation for a transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction revokeConfirmation(uint transactionId)\n\tpublic\n\townerExists(msg.sender)\n\tconfirmed(transactionId, msg.sender)\n\tnotExecuted(transactionId)\n\t{\n\t\tconfirmations[transactionId][msg.sender] = false;\n\t\temit Revocation(msg.sender, transactionId);\n\t}\n\n\t/// @dev Allows anyone to execute a confirmed transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction executeTransaction(uint transactionId)\n\tpublic\n\tnotExecuted(transactionId)\n\t{\n\t\tif (isConfirmed(transactionId)) {\n\t\t\tTransaction storage transaction = transactions[transactionId];\n\t\t\ttransaction.executed = true;\n\n\t\t\tbool success;\n\t\t\tbytes memory _returnData;\n\t\t\t(success, _returnData) = transaction.destination.call.value(transaction.value)(transaction.data);\n\t\t\tif (success)\n\t\t\t\temit Execution(transactionId);\n\t\t\telse {\n\t\t\t\temit ExecutionFailure(transactionId);\n\t\t\t\ttransaction.executed = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @dev Returns the confirmation status of a transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Confirmation status.\n\tfunction isConfirmed(uint transactionId)\n\tpublic\n\tview\n\treturns (bool)\n\t{\n\t\tuint count = 0;\n\t\tfor (uint i=0; i<owners.length; i++) {\n\t\t\tif (confirmations[transactionId][owners[i]])\n\t\t\t\tcount += 1;\n\t\t\tif (count == required)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\t/*\n\t* Internal functions\n\t*/\n\t/// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n\t/// @param destination Transaction target address.\n\t/// @param value Transaction ether value.\n\t/// @param data Transaction data payload.\n\t/// @return Returns transaction ID.\n\tfunction addTransaction(address destination, uint value, bytes memory data)\n\tinternal\n\tnotNull(destination)\n\treturns (uint transactionId)\n\t{\n\t\ttransactionId = transactionCount;\n\t\ttransactions[transactionId] = Transaction({\n\t\t\tdestination: destination,\n\t\t\tvalue: value,\n\t\t\tdata: data,\n\t\t\texecuted: false\n\t\t});\n\t\ttransactionCount += 1;\n\t\temit Submission(transactionId);\n\t}\n\n\t/*\n\t* Web3 call functions\n\t*/\n\t/// @dev Returns number of confirmations of a transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Number of confirmations.\n\tfunction getConfirmationCount(uint transactionId)\n\tpublic\n\tview\n\treturns (uint count)\n\t{\n\t\tfor (uint i=0; i<owners.length; i++)\n\t\tif (confirmations[transactionId][owners[i]])\n\t\t\tcount += 1;\n\t}\n\n\t/// @dev Returns total number of transactions after filers are applied.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Total number of transactions after filters are applied.\n\tfunction getTransactionCount(bool pending, bool executed)\n\tpublic\n\tview\n\treturns (uint count)\n\t{\n\t\tfor (uint i=0; i<transactionCount; i++)\n\t\tif (   pending && !transactions[i].executed\n\t\t\t|| executed && transactions[i].executed)\n\t\tcount += 1;\n\t}\n\n\t/// @dev Returns list of owners.\n\t/// @return List of owner addresses.\n\tfunction getOwners()\n\tpublic\n\tview\n\treturns (address[] memory)\n\t{\n\t\treturn owners;\n\t}\n\n\t/// @dev Returns array with owner addresses, which confirmed transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Returns array of owner addresses.\n\tfunction getConfirmations(uint transactionId)\n\tpublic\n\tview\n\treturns (address[] memory _confirmations)\n\t{\n\t\taddress[] memory confirmationsTemp = new address[](owners.length);\n\t\tuint count = 0;\n\t\tuint i;\n\t\tfor (i=0; i<owners.length; i++)\n\t\tif (confirmations[transactionId][owners[i]]) {\n\t\t\tconfirmationsTemp[count] = owners[i];\n\t\t\tcount += 1;\n\t\t}\n\t\t_confirmations = new address[](count);\n\t\tfor (i=0; i<count; i++)\n\t\t_confirmations[i] = confirmationsTemp[i];\n\t}\n\n\t/// @dev Returns list of transaction IDs in defined range.\n\t/// @param from Index start position of transaction array.\n\t/// @param to Index end position of transaction array.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Returns array of transaction IDs.\n\tfunction getTransactionIds(uint from, uint to, bool pending, bool executed)\n\tpublic\n\tview\n\treturns (uint[] memory _transactionIds)\n\t{\n\t\tuint[] memory transactionIdsTemp = new uint[](transactionCount);\n\t\tuint count = 0;\n\t\tuint i;\n\t\tfor (i=0; i<transactionCount; i++)\n\t\tif (   pending && !transactions[i].executed\n\t\t\t|| executed && transactions[i].executed)\n\t\t{\n\t\t\ttransactionIdsTemp[count] = i;\n\t\t\tcount += 1;\n\t\t}\n\t\t_transactionIds = new uint[](to - from);\n\t\tfor (i=from; i<to; i++)\n\t\t_transactionIds[i - from] = transactionIdsTemp[i];\n\t}\n}", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0xfffe000d\ncalldatasize_MultiSigWallet: 0x190282b08\ncalldata_MultiSigWallet_32 + 36: 0x7fffffe1\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0xa1c6e68067583b803df557048c7798c304034024040e825ab9dfffffffffffef\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x882f64f684580f8031a50401dc7c14505964a65bf8efd424382000000000000f\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_0: 0xc642747400000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "submitTransaction(address,uint256,bytes)", "lineno": 7, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8758, "code": "ct MultiSigWallet {\n\n\tuint constant public MAX_OWNER_COUNT = 50;\n\n\tevent Confirmation(address indexed sender, uint indexed transactionId);\n\tevent Revocation(address indexed sender, uint indexed transactionId);\n\tevent Submission(uint indexed transactionId);\n\tevent Execution(uint indexed transactionId);\n\tevent ExecutionFailure(uint indexed transactionId);\n\tevent Deposit(address indexed sender, uint value);\n\tevent OwnerAddition(address indexed owner);\n\tevent OwnerRemoval(address indexed owner);\n\tevent RequirementChange(uint required);\n\n\tmapping (uint => Transaction) public transactions;\n\tmapping (uint => mapping (address => bool)) public confirmations;\n\tmapping (address => bool) public isOwner;\n\taddress[] public owners;\n\tuint public required;\n\tuint public transactionCount;\n\n\tstruct Transaction {\n\t\taddress destination;\n\t\tuint value;\n\t\tbytes data;\n\t\tbool executed;\n\t}\n\n\tmodifier onlyWallet() {\n\t\tif (msg.sender != address(this))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier ownerDoesNotExist(address owner) {\n\t\tif (isOwner[owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier ownerExists(address owner) {\n\t\tif (!isOwner[owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier transactionExists(uint transactionId) {\n\t\tif (transactions[transactionId].destination == address(0))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier confirmed(uint transactionId, address owner) {\n\t\tif (!confirmations[transactionId][owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notConfirmed(uint transactionId, address owner) {\n\t\tif (confirmations[transactionId][owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notExecuted(uint transactionId) {\n\t\tif (transactions[transactionId].executed)\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notNull(address _address) {\n\t\tif (_address == address(0))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier validRequirement(uint ownerCount, uint _required) {\n\t\tif (   ownerCount > MAX_OWNER_COUNT\n\t\t\t|| _required > ownerCount\n\t\t\t\t|| _required == 0\n\t\t\t\t\t|| ownerCount == 0)\n\t\t\t\t\trevert();\n\t\t\t\t\t_;\n\t}\n\n\t/// @dev Fallback function allows to deposit ether.\n\tfunction()\n\texternal\n\tpayable\n\t{\n\t\tif (msg.value > 0)\n\t\t\temit Deposit(msg.sender, msg.value);\n\t}\n\n\t/*\n\t* Public functions\n\t*/\n\t/// @dev Contract constructor sets initial owners and required number of confirmations.\n\t/// @param _owners List of initial owners.\n\t/// @param _required Number of required confirmations.\n\tconstructor(address[] memory _owners, uint _required)\n\tpublic\n\tvalidRequirement(_owners.length, _required)\n\t{\n\t\tfor (uint i=0; i<_owners.length; i++) {\n\t\t\tif (isOwner[_owners[i]] || _owners[i] == address(0))\n\t\t\t\trevert();\n\t\t\tisOwner[_owners[i]] = true;\n\t\t}\n\t\towners = _owners;\n\t\trequired = _required;\n\t}\n\n\t/// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of new owner.\n\tfunction addOwner(address owner)\n\tpublic\n\tonlyWallet\n\townerDoesNotExist(owner)\n\tnotNull(owner)\n\tvalidRequirement(owners.length + 1, required)\n\t{\n\t\tisOwner[owner] = true;\n\t\towners.push(owner);\n\t\temit OwnerAddition(owner);\n\t}\n\n\t/// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of owner.\n\tfunction removeOwner(address owner)\n\tpublic\n\tonlyWallet\n\townerExists(owner)\n\t{\n\t\tisOwner[owner] = false;\n\t\tfor (uint i=0; i<owners.length - 1; i++)\n\t\tif (owners[i] == owner) {\n\t\t\towners[i] = owners[owners.length - 1];\n\t\t\tbreak;\n\t\t}\n\t\towners.length -= 1;\n\t\tif (required > owners.length)\n\t\t\tchangeRequirement(owners.length);\n\t\temit OwnerRemoval(owner);\n\t}\n\n\t/// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of owner to be replaced.\n\t/// @param owner Address of new owner.\n\tfunction replaceOwner(address owner, address newOwner)\n\tpublic\n\tonlyWallet\n\townerExists(owner)\n\townerDoesNotExist(newOwner)\n\t{\n\t\tfor (uint i=0; i<owners.length; i++)\n\t\tif (owners[i] == owner) {\n\t\t\towners[i] = newOwner;\n\t\t\tbreak;\n\t\t}\n\t\tisOwner[owner] = false;\n\t\tisOwner[newOwner] = true;\n\t\temit OwnerRemoval(owner);\n\t\temit OwnerAddition(newOwner);\n\t}\n\n\t/// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n\t/// @param _required Number of required confirmations.\n\tfunction changeRequirement(uint _required)\n\tpublic\n\tonlyWallet\n\tvalidRequirement(owners.length, _required)\n\t{\n\t\trequired = _required;\n\t\temit RequirementChange(_required);\n\t}\n\n\t/// @dev Allows an owner to submit and confirm a transaction.\n\t/// @param destination Transaction target address.\n\t/// @param value Transaction ether value.\n\t/// @param data Transaction data payload.\n\t/// @return Returns transaction ID.\n\tfunction submitTransaction(address destination, uint value, bytes memory data)\n\tpublic\n\treturns (uint transactionId)\n\t{\n\t\ttransactionId = addTransaction(destination, value, data);\n\t\tconfirmTransaction(transactionId);\n\t}\n\n\t/// @dev Allows an owner to confirm a transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction confirmTransaction(uint transactionId)\n\tpublic\n\townerExists(msg.sender)\n\ttransactionExists(transactionId)\n\tnotConfirmed(transactionId, msg.sender)\n\t{\n\t\tconfirmations[transactionId][msg.sender] = true;\n\t\temit Confirmation(msg.sender, transactionId);\n\t\texecuteTransaction(transactionId);\n\t}\n\n\t/// @dev Allows an owner to revoke a confirmation for a transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction revokeConfirmation(uint transactionId)\n\tpublic\n\townerExists(msg.sender)\n\tconfirmed(transactionId, msg.sender)\n\tnotExecuted(transactionId)\n\t{\n\t\tconfirmations[transactionId][msg.sender] = false;\n\t\temit Revocation(msg.sender, transactionId);\n\t}\n\n\t/// @dev Allows anyone to execute a confirmed transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction executeTransaction(uint transactionId)\n\tpublic\n\tnotExecuted(transactionId)\n\t{\n\t\tif (isConfirmed(transactionId)) {\n\t\t\tTransaction storage transaction = transactions[transactionId];\n\t\t\ttransaction.executed = true;\n\n\t\t\tbool success;\n\t\t\tbytes memory _returnData;\n\t\t\t(success, _returnData) = transaction.destination.call.value(transaction.value)(transaction.data);\n\t\t\tif (success)\n\t\t\t\temit Execution(transactionId);\n\t\t\telse {\n\t\t\t\temit ExecutionFailure(transactionId);\n\t\t\t\ttransaction.executed = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @dev Returns the confirmation status of a transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Confirmation status.\n\tfunction isConfirmed(uint transactionId)\n\tpublic\n\tview\n\treturns (bool)\n\t{\n\t\tuint count = 0;\n\t\tfor (uint i=0; i<owners.length; i++) {\n\t\t\tif (confirmations[transactionId][owners[i]])\n\t\t\t\tcount += 1;\n\t\t\tif (count == required)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\t/*\n\t* Internal functions\n\t*/\n\t/// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n\t/// @param destination Transaction target address.\n\t/// @param value Transaction ether value.\n\t/// @param data Transaction data payload.\n\t/// @return Returns transaction ID.\n\tfunction addTransaction(address destination, uint value, bytes memory data)\n\tinternal\n\tnotNull(destination)\n\treturns (uint transactionId)\n\t{\n\t\ttransactionId = transactionCount;\n\t\ttransactions[transactionId] = Transaction({\n\t\t\tdestination: destination,\n\t\t\tvalue: value,\n\t\t\tdata: data,\n\t\t\texecuted: false\n\t\t});\n\t\ttransactionCount += 1;\n\t\temit Submission(transactionId);\n\t}\n\n\t/*\n\t* Web3 call functions\n\t*/\n\t/// @dev Returns number of confirmations of a transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Number of confirmations.\n\tfunction getConfirmationCount(uint transactionId)\n\tpublic\n\tview\n\treturns (uint count)\n\t{\n\t\tfor (uint i=0; i<owners.length; i++)\n\t\tif (confirmations[transactionId][owners[i]])\n\t\t\tcount += 1;\n\t}\n\n\t/// @dev Returns total number of transactions after filers are applied.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Total number of transactions after filters are applied.\n\tfunction getTransactionCount(bool pending, bool executed)\n\tpublic\n\tview\n\treturns (uint count)\n\t{\n\t\tfor (uint i=0; i<transactionCount; i++)\n\t\tif (   pending && !transactions[i].executed\n\t\t\t|| executed && transactions[i].executed)\n\t\tcount += 1;\n\t}\n\n\t/// @dev Returns list of owners.\n\t/// @return List of owner addresses.\n\tfunction getOwners()\n\tpublic\n\tview\n\treturns (address[] memory)\n\t{\n\t\treturn owners;\n\t}\n\n\t/// @dev Returns array with owner addresses, which confirmed transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Returns array of owner addresses.\n\tfunction getConfirmations(uint transactionId)\n\tpublic\n\tview\n\treturns (address[] memory _confirmations)\n\t{\n\t\taddress[] memory confirmationsTemp = new address[](owners.length);\n\t\tuint count = 0;\n\t\tuint i;\n\t\tfor (i=0; i<owners.length; i++)\n\t\tif (confirmations[transactionId][owners[i]]) {\n\t\t\tconfirmationsTemp[count] = owners[i];\n\t\t\tcount += 1;\n\t\t}\n\t\t_confirmations = new address[](count);\n\t\tfor (i=0; i<count; i++)\n\t\t_confirmations[i] = confirmationsTemp[i];\n\t}\n\n\t/// @dev Returns list of transaction IDs in defined range.\n\t/// @param from Index start position of transaction array.\n\t/// @param to Index end position of transaction array.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Returns array of transaction IDs.\n\tfunction getTransactionIds(uint from, uint to, bool pending, bool executed)\n\tpublic\n\tview\n\treturns (uint[] memory _transactionIds)\n\t{\n\t\tuint[] memory transactionIdsTemp = new uint[](transactionCount);\n\t\tuint count = 0;\n\t\tuint i;\n\t\tfor (i=0; i<transactionCount; i++)\n\t\tif (   pending && !transactions[i].executed\n\t\t\t|| executed && transactions[i].executed)\n\t\t{\n\t\t\ttransactionIdsTemp[count] = i;\n\t\t\tcount += 1;\n\t\t}\n\t\t_transactionIds = new uint[](to - from);\n\t\tfor (i=from; i<to; i++)\n\t\t_transactionIds[i - from] = transactionIdsTemp[i];\n\t}\n}", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x1\ncalldatasize_MultiSigWallet: 0x1108002200000000000000000000000000000000\ncalldata_MultiSigWallet_32 + 36: 0xffffffdc\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x2b\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_0: 0xc642747400000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "submitTransaction(address,uint256,bytes)", "lineno": 7, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8763, "code": "ct MultiSigWallet {\n\n\tuint constant public MAX_OWNER_COUNT = 50;\n\n\tevent Confirmation(address indexed sender, uint indexed transactionId);\n\tevent Revocation(address indexed sender, uint indexed transactionId);\n\tevent Submission(uint indexed transactionId);\n\tevent Execution(uint indexed transactionId);\n\tevent ExecutionFailure(uint indexed transactionId);\n\tevent Deposit(address indexed sender, uint value);\n\tevent OwnerAddition(address indexed owner);\n\tevent OwnerRemoval(address indexed owner);\n\tevent RequirementChange(uint required);\n\n\tmapping (uint => Transaction) public transactions;\n\tmapping (uint => mapping (address => bool)) public confirmations;\n\tmapping (address => bool) public isOwner;\n\taddress[] public owners;\n\tuint public required;\n\tuint public transactionCount;\n\n\tstruct Transaction {\n\t\taddress destination;\n\t\tuint value;\n\t\tbytes data;\n\t\tbool executed;\n\t}\n\n\tmodifier onlyWallet() {\n\t\tif (msg.sender != address(this))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier ownerDoesNotExist(address owner) {\n\t\tif (isOwner[owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier ownerExists(address owner) {\n\t\tif (!isOwner[owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier transactionExists(uint transactionId) {\n\t\tif (transactions[transactionId].destination == address(0))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier confirmed(uint transactionId, address owner) {\n\t\tif (!confirmations[transactionId][owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notConfirmed(uint transactionId, address owner) {\n\t\tif (confirmations[transactionId][owner])\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notExecuted(uint transactionId) {\n\t\tif (transactions[transactionId].executed)\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier notNull(address _address) {\n\t\tif (_address == address(0))\n\t\t\trevert();\n\t\t_;\n\t}\n\n\tmodifier validRequirement(uint ownerCount, uint _required) {\n\t\tif (   ownerCount > MAX_OWNER_COUNT\n\t\t\t|| _required > ownerCount\n\t\t\t\t|| _required == 0\n\t\t\t\t\t|| ownerCount == 0)\n\t\t\t\t\trevert();\n\t\t\t\t\t_;\n\t}\n\n\t/// @dev Fallback function allows to deposit ether.\n\tfunction()\n\texternal\n\tpayable\n\t{\n\t\tif (msg.value > 0)\n\t\t\temit Deposit(msg.sender, msg.value);\n\t}\n\n\t/*\n\t* Public functions\n\t*/\n\t/// @dev Contract constructor sets initial owners and required number of confirmations.\n\t/// @param _owners List of initial owners.\n\t/// @param _required Number of required confirmations.\n\tconstructor(address[] memory _owners, uint _required)\n\tpublic\n\tvalidRequirement(_owners.length, _required)\n\t{\n\t\tfor (uint i=0; i<_owners.length; i++) {\n\t\t\tif (isOwner[_owners[i]] || _owners[i] == address(0))\n\t\t\t\trevert();\n\t\t\tisOwner[_owners[i]] = true;\n\t\t}\n\t\towners = _owners;\n\t\trequired = _required;\n\t}\n\n\t/// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of new owner.\n\tfunction addOwner(address owner)\n\tpublic\n\tonlyWallet\n\townerDoesNotExist(owner)\n\tnotNull(owner)\n\tvalidRequirement(owners.length + 1, required)\n\t{\n\t\tisOwner[owner] = true;\n\t\towners.push(owner);\n\t\temit OwnerAddition(owner);\n\t}\n\n\t/// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of owner.\n\tfunction removeOwner(address owner)\n\tpublic\n\tonlyWallet\n\townerExists(owner)\n\t{\n\t\tisOwner[owner] = false;\n\t\tfor (uint i=0; i<owners.length - 1; i++)\n\t\tif (owners[i] == owner) {\n\t\t\towners[i] = owners[owners.length - 1];\n\t\t\tbreak;\n\t\t}\n\t\towners.length -= 1;\n\t\tif (required > owners.length)\n\t\t\tchangeRequirement(owners.length);\n\t\temit OwnerRemoval(owner);\n\t}\n\n\t/// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n\t/// @param owner Address of owner to be replaced.\n\t/// @param owner Address of new owner.\n\tfunction replaceOwner(address owner, address newOwner)\n\tpublic\n\tonlyWallet\n\townerExists(owner)\n\townerDoesNotExist(newOwner)\n\t{\n\t\tfor (uint i=0; i<owners.length; i++)\n\t\tif (owners[i] == owner) {\n\t\t\towners[i] = newOwner;\n\t\t\tbreak;\n\t\t}\n\t\tisOwner[owner] = false;\n\t\tisOwner[newOwner] = true;\n\t\temit OwnerRemoval(owner);\n\t\temit OwnerAddition(newOwner);\n\t}\n\n\t/// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n\t/// @param _required Number of required confirmations.\n\tfunction changeRequirement(uint _required)\n\tpublic\n\tonlyWallet\n\tvalidRequirement(owners.length, _required)\n\t{\n\t\trequired = _required;\n\t\temit RequirementChange(_required);\n\t}\n\n\t/// @dev Allows an owner to submit and confirm a transaction.\n\t/// @param destination Transaction target address.\n\t/// @param value Transaction ether value.\n\t/// @param data Transaction data payload.\n\t/// @return Returns transaction ID.\n\tfunction submitTransaction(address destination, uint value, bytes memory data)\n\tpublic\n\treturns (uint transactionId)\n\t{\n\t\ttransactionId = addTransaction(destination, value, data);\n\t\tconfirmTransaction(transactionId);\n\t}\n\n\t/// @dev Allows an owner to confirm a transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction confirmTransaction(uint transactionId)\n\tpublic\n\townerExists(msg.sender)\n\ttransactionExists(transactionId)\n\tnotConfirmed(transactionId, msg.sender)\n\t{\n\t\tconfirmations[transactionId][msg.sender] = true;\n\t\temit Confirmation(msg.sender, transactionId);\n\t\texecuteTransaction(transactionId);\n\t}\n\n\t/// @dev Allows an owner to revoke a confirmation for a transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction revokeConfirmation(uint transactionId)\n\tpublic\n\townerExists(msg.sender)\n\tconfirmed(transactionId, msg.sender)\n\tnotExecuted(transactionId)\n\t{\n\t\tconfirmations[transactionId][msg.sender] = false;\n\t\temit Revocation(msg.sender, transactionId);\n\t}\n\n\t/// @dev Allows anyone to execute a confirmed transaction.\n\t/// @param transactionId Transaction ID.\n\tfunction executeTransaction(uint transactionId)\n\tpublic\n\tnotExecuted(transactionId)\n\t{\n\t\tif (isConfirmed(transactionId)) {\n\t\t\tTransaction storage transaction = transactions[transactionId];\n\t\t\ttransaction.executed = true;\n\n\t\t\tbool success;\n\t\t\tbytes memory _returnData;\n\t\t\t(success, _returnData) = transaction.destination.call.value(transaction.value)(transaction.data);\n\t\t\tif (success)\n\t\t\t\temit Execution(transactionId);\n\t\t\telse {\n\t\t\t\temit ExecutionFailure(transactionId);\n\t\t\t\ttransaction.executed = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @dev Returns the confirmation status of a transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Confirmation status.\n\tfunction isConfirmed(uint transactionId)\n\tpublic\n\tview\n\treturns (bool)\n\t{\n\t\tuint count = 0;\n\t\tfor (uint i=0; i<owners.length; i++) {\n\t\t\tif (confirmations[transactionId][owners[i]])\n\t\t\t\tcount += 1;\n\t\t\tif (count == required)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\t/*\n\t* Internal functions\n\t*/\n\t/// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n\t/// @param destination Transaction target address.\n\t/// @param value Transaction ether value.\n\t/// @param data Transaction data payload.\n\t/// @return Returns transaction ID.\n\tfunction addTransaction(address destination, uint value, bytes memory data)\n\tinternal\n\tnotNull(destination)\n\treturns (uint transactionId)\n\t{\n\t\ttransactionId = transactionCount;\n\t\ttransactions[transactionId] = Transaction({\n\t\t\tdestination: destination,\n\t\t\tvalue: value,\n\t\t\tdata: data,\n\t\t\texecuted: false\n\t\t});\n\t\ttransactionCount += 1;\n\t\temit Submission(transactionId);\n\t}\n\n\t/*\n\t* Web3 call functions\n\t*/\n\t/// @dev Returns number of confirmations of a transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Number of confirmations.\n\tfunction getConfirmationCount(uint transactionId)\n\tpublic\n\tview\n\treturns (uint count)\n\t{\n\t\tfor (uint i=0; i<owners.length; i++)\n\t\tif (confirmations[transactionId][owners[i]])\n\t\t\tcount += 1;\n\t}\n\n\t/// @dev Returns total number of transactions after filers are applied.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Total number of transactions after filters are applied.\n\tfunction getTransactionCount(bool pending, bool executed)\n\tpublic\n\tview\n\treturns (uint count)\n\t{\n\t\tfor (uint i=0; i<transactionCount; i++)\n\t\tif (   pending && !transactions[i].executed\n\t\t\t|| executed && transactions[i].executed)\n\t\tcount += 1;\n\t}\n\n\t/// @dev Returns list of owners.\n\t/// @return List of owner addresses.\n\tfunction getOwners()\n\tpublic\n\tview\n\treturns (address[] memory)\n\t{\n\t\treturn owners;\n\t}\n\n\t/// @dev Returns array with owner addresses, which confirmed transaction.\n\t/// @param transactionId Transaction ID.\n\t/// @return Returns array of owner addresses.\n\tfunction getConfirmations(uint transactionId)\n\tpublic\n\tview\n\treturns (address[] memory _confirmations)\n\t{\n\t\taddress[] memory confirmationsTemp = new address[](owners.length);\n\t\tuint count = 0;\n\t\tuint i;\n\t\tfor (i=0; i<owners.length; i++)\n\t\tif (confirmations[transactionId][owners[i]]) {\n\t\t\tconfirmationsTemp[count] = owners[i];\n\t\t\tcount += 1;\n\t\t}\n\t\t_confirmations = new address[](count);\n\t\tfor (i=0; i<count; i++)\n\t\t_confirmations[i] = confirmationsTemp[i];\n\t}\n\n\t/// @dev Returns list of transaction IDs in defined range.\n\t/// @param from Index start position of transaction array.\n\t/// @param to Index end position of transaction array.\n\t/// @param pending Include pending transactions.\n\t/// @param executed Include executed transactions.\n\t/// @return Returns array of transaction IDs.\n\tfunction getTransactionIds(uint from, uint to, bool pending, bool executed)\n\tpublic\n\tview\n\treturns (uint[] memory _transactionIds)\n\t{\n\t\tuint[] memory transactionIdsTemp = new uint[](transactionCount);\n\t\tuint count = 0;\n\t\tuint i;\n\t\tfor (i=0; i<transactionCount; i++)\n\t\tif (   pending && !transactions[i].executed\n\t\t\t|| executed && transactions[i].executed)\n\t\t{\n\t\t\ttransactionIdsTemp[count] = i;\n\t\t\tcount += 1;\n\t\t}\n\t\t_transactionIds = new uint[](to - from);\n\t\tfor (i=from; i<to; i++)\n\t\t_transactionIds[i - from] = transactionIdsTemp[i];\n\t}\n}", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x0\nkeccac_2_+_keccac_storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_MultiSigWallet: 0x3fffffffe\ncalldata_MultiSigWallet_32 + 36: 0x0\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x9dfdbfb557feaffaabff8000017fffffffffffffffffffffffffffffffffffe2\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x200ffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_0: 0xc642747400000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol", "function": "submitTransaction(address,uint256,bytes)", "lineno": 7, "title": "Integer Overflow ", "type": "Warning"}], "success": true}