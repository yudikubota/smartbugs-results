{
  "contract": "0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7",
  "tool": "mythril",
  "start": 1563810456.0241416,
  "end": 1563810462.5878766,
  "duration": 6.563735008239746,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 145,
        "code": "sender] += msg.value;\n    }\n    \n",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xab7df5eb31c8ca0f10372046fefe6eff5f6eeb07cd0163ef982835d851b3f830\ncallvalue: 0x82a0fd47bdeec80f10b2180100c0c8f05e700bc72e7d7ac7240b88dfa12befb1\ncalldata_keepMyEther_0: 0x100000000000000000000000000000000000000000000000000000000\ncalldatasize_keepMyEther: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/32/0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol",
        "function": "fallback",
        "lineno": 14,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 390,
        "code": "alue(balances[msg.sender])();\n        balance",
        "debug": "SOLVER OUTPUT:\ncalldata_keepMyEther_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_keepMyEther: 0x4\ncallvalue: 0x0\n",
        "description": "In the function `withdraw()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.",
        "filename": "/unique_chucks/32/0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol",
        "function": "withdraw()",
        "lineno": 18,
        "title": "Ether send",
        "type": "Warning"
      },
      {
        "address": 390,
        "code": "alue(balances[msg.sender])();\n        balance",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/32/0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol",
        "function": "withdraw()",
        "lineno": 18,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 390,
        "code": "alue(balances[msg.sender])();\n        balance",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/32/0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol",
        "function": "withdraw()",
        "lineno": 18,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 462,
        "code": "r] = 0;\n    }\n}",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/32/0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol",
        "function": "withdraw()",
        "lineno": 19,
        "title": "State change after external call",
        "type": "Warning"
      }
    ],
    "success": true
  }
}