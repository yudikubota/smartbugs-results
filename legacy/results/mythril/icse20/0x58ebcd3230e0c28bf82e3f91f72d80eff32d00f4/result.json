{
  "contract": "0x58ebcd3230e0c28bf82e3f91f72d80eff32d00f4",
  "tool": "mythril",
  "start": 1563264987.834431,
  "end": 1563265194.4550881,
  "duration": 206.62065720558167,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2499,
        "code": "\n   * @param _start uint64 Time of the beginnin",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_VestedToken_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_VestedToken_4: 0x0\ncalldata_VestedToken_0: 0x2c71e60a00000000000000000000000000000000000000000000000000000000\ncalldatasize_VestedToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x58ebcd3230e0c28bf82e3f91f72d80eff32d00f4.sol",
        "function": "_function_0x2c71e60a",
        "lineno": 339,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2774,
        "code": "representing the amount o",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_VestedToken_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VestedToken_4: 0x0\ncalldata_VestedToken_0: 0x600e85b700000000000000000000000000000000000000000000000000000000\ncalldatasize_VestedToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x58ebcd3230e0c28bf82e3f91f72d80eff32d00f4.sol",
        "function": "tokenGrant(address,uint256)",
        "lineno": 486,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5249,
        "code": "b(grants[_holder].length,",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_VestedToken_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VestedToken_4: 0x0\ncalldata_VestedToken_0: 0xeb944e4c00000000000000000000000000000000000000000000000000000000\ncalldatasize_VestedToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x58ebcd3230e0c28bf82e3f91f72d80eff32d00f4.sol",
        "function": "revokeTokenGrant(address,uint256)",
        "lineno": 383,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8419,
        "code": "ternal constan",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_VestedToken_32 + 4: 0x0\ncalldata_VestedToken_32 + 36: 0x1\ncalldata_VestedToken_32 + 100: 0x1\ncalldata_VestedToken_32 + 68: 0x0\ncalldata_VestedToken_0: 0xdf3c211b00000000000000000000000000000000000000000000000000000000\ncalldatasize_VestedToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x58ebcd3230e0c28bf82e3f91f72d80eff32d00f4.sol",
        "function": "calculateVestedTokens(uint256,uint256,uint256,uint256,uint256)",
        "lineno": 81,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}