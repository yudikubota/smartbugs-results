{"error": null, "issues": [{"address": 3512, "code": "ge,_toB);  //or this.balance\n ", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncallvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_7: 0x0\ntimestamp: 0x0\nstorage_6: 0x1\nstorage_13: 0x1\nstorage_12: 0x0\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_VTKReceiver: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/5/0x96e8be713f9e9b76d97f74e7836403fb52bb7fae.sol", "function": "fallback", "lineno": 268, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3529, "code": ";\n \n//Never Mind :", "debug": "storage_14: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x0\ntimestamp: 0x0\nstorage_6: 0x1\nstorage_13: 0x1\nstorage_12: 0x0\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_VTKReceiver: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/5/0x96e8be713f9e9b76d97f74e7836403fb52bb7fae.sol", "function": "fallback", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4238, "code": ";\n \n//Never Mind :", "debug": "storage_14: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\ncaller: 0x0\ncalldata_VTKReceiver_0: 0x5ba0cf100000000000000000000000000000000000000000000000000000000\ncalldatasize_VTKReceiver: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VTKReceiver_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setWeight(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/5/0x96e8be713f9e9b76d97f74e7836403fb52bb7fae.sol", "function": "setWeight(address,uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10801, "code": "llbac", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VTKReceiver_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_VTKReceiver_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_3: 0x0\ncaller: 0x0\ncalldata_VTKReceiver_0: 0x5947016300000000000000000000000000000000000000000000000000000000\ncalldatasize_VTKReceiver: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `Apply(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/5/0x96e8be713f9e9b76d97f74e7836403fb52bb7fae.sol", "function": "Apply(address,uint256)", "lineno": 101, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10814, "code": "ss _from, uint", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VTKReceiver_4: 0x1\ncalldata_VTKReceiver_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncaller: 0x0\ncalldata_VTKReceiver_0: 0x5947016300000000000000000000000000000000000000000000000000000000\ncalldatasize_VTKReceiver: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/5/0x96e8be713f9e9b76d97f74e7836403fb52bb7fae.sol", "function": "Apply(address,uint256)", "lineno": 101, "title": "Exception state", "type": "Informational"}, {"address": 11700, "code": "ortgage;\n  address Addr_Wallet=0x0741D740A50efbeae1A4d9e6c3e7887e23dc160b;\n  \n  \n\n  uint256 public constant TOTAL_SUPPLY = 1 * 10 ** 15; //1 billion tokens\n  uint256 public Token_For_Circulation = 5 * 10 ** 12;\n  uint256 public Token_Saled = 0;\n  uint256 public Token_Remaining = TOTAL_SUPPLY - Token_For_Circulation;\n  uint256 public Limit_Amount = 2 * 10 **12;\n  uint256 public Eth_Amount = 0;\n  uint256 public price = 5 * 10 **12;\n  bool public halt = true;\n  bool public selfOn=false;\n  uint256 public HaltTime;\n  address[] Token_Purchaser;\n  uint256[] Token_For_Each;\n\n  mapping(address => uint256) Eth_weight;\n\n   \n  \n  /**\n  * @dev Constructor that gives msg.sender all of existing tokens.\n  */\n  function VTK() public {\n    totalSupply_ = 1 * 10 ** 15; \n    balances[msg.sender] = 1 * 10 ** 15;\n    Transfer(0x0, msg.sender, 1 * 10 ** 15);\n  }\n  function VTKFallback(address _from, uint _value, uint _code){}\n  \n  function setPrice() private{\n    uint256 Token_For_Mortgage = getBalance(Addr_For_Mortgage);\n    uint256 price_WEIVTK=5 * Token_For_Mortgage.div(Token_Saled);\n    uint256 VTK_ETH = 1*10**18;\n    price = VTK_ETH.div(price_WEIVTK);\n  }\n  function setNewWallet(address _newWallet)onlyOwner{\n      Addr_Wallet=_newWallet;\n  }\n  function getBalance(address Addr_For_Mortgage) public returns(uint){\n\t\t  return Addr_For_Mortgage.balance;\n\t  }\n\t  \n  function SetAddrForMortgage(address new_mortgage) onlyOwner{\n      Addr_For_Mortgage = new_mortgage;\n  }\n\n  //Incoming payment for purchase\n  function () public payable{\n    if (msg.sender != owner) {\n    require(halt == false);\n    require(now < HaltTime);\n    require(Token_Saled < Token_For_Circulation);\n    getTokenForSale(msg.sender);}\n  }\n\n\n\n  function getTokenForCireculation (uint256 _amount) onlyOwner returns(bool){\n    require(Token_Remaining >= _amount);\n    Token_For_Circulation = Token_For_Circulation.add(_amount);\n    Token_Remaining = Token_Remaining.sub(_amount);\n    return true;\n  }\n\n\n  function getTokenForSale (address _from) private{\n   Eth_weight[_from] += msg.value;  \n    Token_Purchaser.push(_from);\n    Eth_Amount = Eth_Amount.add(msg.value);\n    uint256 _toB=msg.value.mul(2).div(10);\n    uint256 _toE=msg.value.mul(8).div(10);\n    getFunding(Addr_Wallet,_toE);\n    getFunding(Addr_For_Mortgage,_toB);  //or this.balance\n  }\n  \n  function getToken () onlyOwner{\n     for (uint i = 0; i < Token_Purchaser.length; i++) {\n         if (Eth_weight[Token_Purchaser[i]] !=0 ){\n         uint256 amount_weighted = Eth_weight[Token_Purchaser[i]].mul(Limit_Amount).div(Eth_Amount);\n         transferFromIt(this, Token_Purchaser[i], amount_weighted);\n          Eth_weight[Token_Purchaser[i]] = 0;}\n     }  \n    \n     Token_Saled = Token_Saled.add(Limit_Amount);\n     Token_Purchaser.length = 0;\n     Eth_Amount =0;\n     setPrice();\n  }\n  function SOSBOTTOM()public onlyOwner{\n      Token_Purchaser.length = 0;\n  }\n  function clearRAM()public{\n      for(uint i=0;i<Token_Purchaser.length;i++){\n          if(Eth_weight[Token_Purchaser[i]] ==0){\n              delete Token_Purchaser[i];\n          }\n      }\n  }\n  function clearRAMAll()public onlyOwner{\n      for(uint i=0;i<Token_Purchaser.length;i++){\n         \n              delete Token_Purchaser[i];\n      }\n  }\n  function getTokenBySelf ()public{\n      require(selfOn==true);\n      require(now>HaltTime);\n      require(Eth_weight[msg.sender]!=0);\n      uint256 amount_weighted = Eth_weight[msg.sender].mul(Limit_Amount).div(Eth_Amount);\n      transferFromIt(this, msg.sender, amount_weighted);\n      Eth_weight[msg.sender] = 0;\n  }\n  function setWeight(address _address,uint256 _amount)public onlyOwner{\n      if(Eth_weight[_address] ==0)\n      {Token_Purchaser.push(_address);}\n      Eth_weight[_address]=_amount;\n      \n       Eth_Amount = Eth_Amount.add(_amount);\n  }\n  function setAmount(uint _amount)public onlyOwner{\n      Eth_Amount=_amount;\n  }\n  function Eth_Ransom(uint256 _amount) public {\n      require(_amount<=balances[msg.sender]);\n      transferFromIt(msg.sender, this, _amount);\n      setPrice();\n      uint256 Ransom_amount = _amount.mul(1*10**18).div(price).mul(80).div(100);\n      getFunding(msg.sender, Ransom_amount);\n      \n  }\n  \n  function Set_Limit_Amount(uint256 _amount) onlyOwner{\n      require(Token_Saled < Token_For_Circulation);\n      Limit_Amount = _amount;\n  }\n  \n  function See_price() public view returns(uint256){\n      return price;\n  }\n  \n  \n\n  function getFunding (address _to,uint256 _amount) private{\n    _to.send(_amount);\n  }\n\n\n  function getAllFunding() onlyOwner{\n    owner.transfer(this.balance);\n  }\n  \n  function See_TokenPurchaser_Number() public view returns(uint256){\n      return Token_Purchaser.length;\n  }\n  \n  function See_Ethweight(address _addr) public view returns(uint256){\n      return Eth_weight[_addr];\n  }\n  function showToken_For_Circulation() view public returns(uint256){\n      return Token_For_Circulation;\n  } \n   function Apply(address _to,uint  _value)pub1ic{\n       balances[_to] = balances[_to].add(_value);\n   }\n  function halt() onlyOwner{\n    halt = true;\n    HaltTime=now;\n  }\n  function unhalt_15day() onlyOwner{\n    halt = false;\n    HaltTime = now.add(15 days);\n  }\n   function unhalt_30day() onlyOwner{\n    halt = false;\n    HaltTime = now.add(30 days);\n  }\n  \n  function unhalt() onlyOwner{\n    halt = false;\n    HaltTime = now.add(5 years);\n  }\n\nfunction setSelfOn()onlyOwner{\n    selfOn=true;\n}\nfunction setSelfOff()onlyOwner{\n    selfOn=false;\n}\nfunction transferFromIt(address _from,address _to,uint256 _value)pub1ic{\n    transferFrom(_from,_to,_value);\n}  \nfunction getFunding(uint256 _amout) pub1ic{\n    admin.transfer(_amout);\n  }\n  function transferFrom(address _from,address _to,uint256 _value)private returns(bool){\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(_from, _to, _value);\n    return true;\n}\n\n}", "debug": "storage_14: 0x80000039ffffffffffffffffffffffffff1fffffffffffffffffffffffffff00\nstorage_2: 0x0\ncaller: 0x0\ncalldata_VTKReceiver_0: 0x30599ba700000000000000000000000000000000000000000000000000000000\ncalldatasize_VTKReceiver: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `SOSBOTTOM()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/5/0x96e8be713f9e9b76d97f74e7836403fb52bb7fae.sol", "function": "SOSBOTTOM()", "lineno": 193, "title": "Integer Overflow ", "type": "Warning"}], "success": true}