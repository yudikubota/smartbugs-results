{
  "contract": "0x64c6000e088bfe297cb7c8a1fcaf01c440153cb9",
  "tool": "mythril",
  "start": 1563768448.4270673,
  "end": 1563768815.186123,
  "duration": 366.75905561447144,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 281,
        "code": "sha256 hash string to check\n  function verify(string sha256) constant returns (string) {\n    var timestamp =  proofs[sha256];\n    if ( timestamp == 0 ){\n        return \"No data found\";\n    }else{\n        DateTime dt = DateTime(msg.sender);\n        \n        uint year",
        "debug": "calldata_ProofOfExistence_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ProofOfExistence_0: 0x7183616c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ProofOfExistence: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `notarize(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/45/0x64c6000e088bfe297cb7c8a1fcaf01c440153cb9.sol",
        "function": "notarize(string)",
        "lineno": 284,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 386,
        "code": "t.getMonth(timestamp);\n        uint day = dt.getDay(timestamp);\n        uint hour = dt.getHour(timestamp);\n        uint minute = dt.getMinute(timestamp);\n        uint second = dt.getSecond(timestamp);\n        \n        result = strConcat(uintToString(year) , \"-\" , uintToString(month),\"-\",uintToString(day));\n        result = strConcat(result,\" \");\n        result = strConcat( uintToString(hour) , \":\" , uintToString(minute),\":\",uintToString(second));\n        result = strConcat(result,\" UTC\");\n        \n\n\n        //UTC Format: 2013-10-26 14:37:48 UTC\n\n        return result;\n    }\n  }\n  \n}",
        "debug": "calldata_ProofOfExistence_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ProofOfExistence_0: 0xbb9c6c3e00000000000000000000000000000000000000000000000000000000\ncalldatasize_ProofOfExistence: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `verify(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/45/0x64c6000e088bfe297cb7c8a1fcaf01c440153cb9.sol",
        "function": "verify(string)",
        "lineno": 293,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1456,
        "code": "ing(year) , \"-\" , uin",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/45/0x64c6000e088bfe297cb7c8a1fcaf01c440153cb9.sol",
        "function": "verify(string)",
        "lineno": 299,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1456,
        "code": "ing(year) , \"-\" , uin",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1632\n",
        "filename": "/unique_chucks/45/0x64c6000e088bfe297cb7c8a1fcaf01c440153cb9.sol",
        "function": "verify(string)",
        "lineno": 299,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1632,
        "code": "tToString(day));\n     ",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/45/0x64c6000e088bfe297cb7c8a1fcaf01c440153cb9.sol",
        "function": "verify(string)",
        "lineno": 299,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1632,
        "code": "tToString(day));\n     ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1807\n",
        "filename": "/unique_chucks/45/0x64c6000e088bfe297cb7c8a1fcaf01c440153cb9.sol",
        "function": "verify(string)",
        "lineno": 299,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1807,
        "code": "result,\" \");\n       ",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/45/0x64c6000e088bfe297cb7c8a1fcaf01c440153cb9.sol",
        "function": "verify(string)",
        "lineno": 300,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1807,
        "code": "result,\" \");\n       ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1982\n",
        "filename": "/unique_chucks/45/0x64c6000e088bfe297cb7c8a1fcaf01c440153cb9.sol",
        "function": "verify(string)",
        "lineno": 300,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1982,
        "code": "ntToString(hour) , \":",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/45/0x64c6000e088bfe297cb7c8a1fcaf01c440153cb9.sol",
        "function": "verify(string)",
        "lineno": 301,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1982,
        "code": "ntToString(hour) , \":",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2157\n",
        "filename": "/unique_chucks/45/0x64c6000e088bfe297cb7c8a1fcaf01c440153cb9.sol",
        "function": "verify(string)",
        "lineno": 301,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2157,
        "code": "\":\",uintToString(second",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/45/0x64c6000e088bfe297cb7c8a1fcaf01c440153cb9.sol",
        "function": "verify(string)",
        "lineno": 301,
        "title": "Message call to external contract",
        "type": "Warning"
      }
    ],
    "success": true
  }
}