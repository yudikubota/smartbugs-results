{"error": null, "issues": [{"address": 1408, "code": "_;\n    }\n", "debug": "", "description": "Function setOwner(address) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "setOwner(address)", "lineno": 31, "title": "Use of tx.origin", "type": "Warning"}, {"address": 2174, "code": "ator.call.value(arbitratorValue)();\n        \n     ", "debug": "", "description": "In the function `_function_0x6d4a37ef` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "_function_0x6d4a37ef", "lineno": 99, "title": "Dependence on predictable environment variable", "type": "Warning"}, {"address": 2174, "code": "ator.call.value(arbitratorValue)();\n        \n     ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "_function_0x6d4a37ef", "lineno": 99, "title": "Message call to external contract", "type": "Warning"}, {"address": 2174, "code": "ator.call.value(arbitratorValue)();\n        \n     ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2254\n", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "_function_0x6d4a37ef", "lineno": 99, "title": "Multiple Calls", "type": "Information"}, {"address": 2174, "code": "ator.call.value(arbitratorValue)();\n        \n     ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function _function_0x6d4a37ef. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "_function_0x6d4a37ef", "lineno": 99, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2174, "code": "ator.call.value(arbitratorValue)();\n        \n     ", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "_function_0x6d4a37ef", "lineno": 99, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 2254, "code": "ceivedMoney )\n        {    \n            ", "debug": "", "description": "In the function `_function_0x6d4a37ef` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "_function_0x6d4a37ef", "lineno": 101, "title": "Dependence on predictable environment variable", "type": "Warning"}, {"address": 2254, "code": "ceivedMoney )\n        {    \n            ", "debug": "", "description": "This contract executes a message call to an address found at storage slot 1. This storage slot can be written to by calling the function `setArbitrator(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "_function_0x6d4a37ef", "lineno": 101, "title": "Message call to external contract", "type": "Warning"}, {"address": 2254, "code": "ceivedMoney )\n        {    \n            ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function _function_0x6d4a37ef. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "_function_0x6d4a37ef", "lineno": 101, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2805, "code": "h] = Escrow(true, _seller, _b", "debug": "calldata_SysEscrow_32 + 68: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ntimestamp: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncallvalue: 0x0\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n340282366920938463463374607431768211455_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n340282366920938463463374607431768211455_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n340282366920938463463374607431768211455_&\ncalldata_SysEscrow_4: 0x0\nstorage_2: 0x0\ncalldata_SysEscrow_0: 0x919be88000000000000000000000000000000000000000000000000000000000\ncalldatasize_SysEscrow: 0x4\n", "description": "A possible integer overflow exists in the function `_function_0x919be880`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "_function_0x919be880", "lineno": 58, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3266, "code": "_;\n    }\n", "debug": "", "description": "Function setArbitrator(address) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "setArbitrator(address)", "lineno": 31, "title": "Use of tx.origin", "type": "Warning"}, {"address": 4580, "code": "        if ( sellerReceivedMoney && arbitratorRecei", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "_function_0xde57e8b4", "lineno": 147, "title": "Message call to external contract", "type": "Warning"}, {"address": 4580, "code": "        if ( sellerReceivedMoney && arbitratorRecei", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4660\n", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "_function_0xde57e8b4", "lineno": 147, "title": "Multiple Calls", "type": "Information"}, {"address": 4580, "code": "        if ( sellerReceivedMoney && arbitratorRecei", "debug": "", "description": "A possible transaction order independence vulnerability exists in function _function_0xde57e8b4. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "_function_0xde57e8b4", "lineno": 147, "title": "Transaction order dependence", "type": "Warning"}, {"address": 4580, "code": "        if ( sellerReceivedMoney && arbitratorRecei", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "_function_0xde57e8b4", "lineno": 147, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 4660, "code": "e escrows[_tradeHash];\n        } else {\n", "debug": "", "description": "This contract executes a message call to an address found at storage slot 1. This storage slot can be written to by calling the function `setArbitrator(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "_function_0xde57e8b4", "lineno": 149, "title": "Message call to external contract", "type": "Warning"}, {"address": 4660, "code": "e escrows[_tradeHash];\n        } else {\n", "debug": "", "description": "A possible transaction order independence vulnerability exists in function _function_0xde57e8b4. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/33/0x903643251af408a3c5269c836b9a2a4a1f04d1cf.sol", "function": "_function_0xde57e8b4", "lineno": 149, "title": "Transaction order dependence", "type": "Warning"}], "success": true}