{"error": null, "issues": [{"address": 4439, "code": "\t\t\tPayToken(s.user, s.tokenAdd", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xf5aec8082b57f31a6af7af198b480b771b42c29d.sol", "function": "Holdplatform_Withdraw(uint256)", "lineno": 528, "title": "Message call to external contract", "type": "Informational"}, {"address": 4439, "code": "\t\t\tPayToken(s.user, s.tokenAdd", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4674\n", "filename": "/unique_contracts/0xf5aec8082b57f31a6af7af198b480b771b42c29d.sol", "function": "Holdplatform_Withdraw(uint256)", "lineno": 528, "title": "Multiple Calls", "type": "Information"}, {"address": 4674, "code": "amountbalance\t\t\t\t\t\t\t= 0;\n\t\t\t\t\ts.ca", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xf5aec8082b57f31a6af7af198b480b771b42c29d.sol", "function": "Holdplatform_Withdraw(uint256)", "lineno": 529, "title": "Message call to external contract", "type": "Informational"}, {"address": 6064, "code": "======================*/  \t\n\n/", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0xf5aec8082b57f31a6af7af198b480b771b42c29d.sol", "function": "WithdrawAffiliate(address,address)", "lineno": 452, "title": "Message call to external contract", "type": "Warning"}, {"address": 7377, "code": " ID\t\t\t\n\tmapping(address => address[]) \t\tpublic a", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ldoh_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_ldoh_4: 0x0\ncalldata_ldoh_0: 0x4b698aff00000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xf5aec8082b57f31a6af7af198b480b771b42c29d.sol", "function": "_function_0x4b698aff", "lineno": 83, "title": "Exception state", "type": "Informational"}, {"address": 8380, "code": "dlTokens2(address ERC, uint256 amount) public {\n\t\t\n\t\t", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0xf5aec8082b57f31a6af7af198b480b771b42c29d.sol", "function": "Holdplatform(address,uint256)", "lineno": 185, "title": "Message call to external contract", "type": "Warning"}, {"address": 9090, "code": "D\t\t\t\t\t\n\tmapping(address => string) \t\t\tpublic C", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ldoh_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_ldoh_4: 0x0\ncalldata_ldoh_0: 0x7028b6a300000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xf5aec8082b57f31a6af7af198b480b771b42c29d.sol", "function": "_function_0x7028b6a3", "lineno": 84, "title": "Exception state", "type": "Informational"}, {"address": 20449, "code": ");\n  ", "debug": "storage_5 +\nkeccac_storage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0x0\nstorage_7 +\nkeccac_storage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0x232300b48a12d7ec4808184e0229707003000064115ab848524acdbc10e16775\nstorage_6 +\nkeccac_storage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0xe2bb8124024cf91268e4035fd2655165bbefff7add5affa7656847001cfc3741\nstorage_2 +\nkeccac_storage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0x0\ntimestamp: 0x1\nstorage_0 +\nkeccac_storage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4 +\nkeccac_storage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_3 +\nkeccac_storage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0x0\nstorage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_81222191986226809103279119994707868322855741819905904417953092666699096963116: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\nstorage_81222191986226809103279119994707868322855741819905904417953092666699096963115: 0x0\nstorage_1: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldatasize_ldoh: 0x3\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0xf5aec8082b57f31a6af7af198b480b771b42c29d.sol", "function": "fallback", "lineno": 584, "title": "Integer Overflow ", "type": "Warning"}], "success": true}