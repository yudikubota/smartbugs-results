{"success": false, "error": "Solc experienced a fatal error (code 1).\n\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:59:1: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\nfunction Contest() payable{\r\n^ (Relevant source part starts here and spans across multiple lines).\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:79:1: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nthrow;\r\n^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:81:1: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nthrow;\r\n^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:89:1: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nthrow;\r\n^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:91:1: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nthrow;\r\n^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:93:1: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nthrow;\r\n^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:95:1: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nthrow;\r\n^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:109:1: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nthrow;\r\n^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:111:1: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nthrow;\r\n^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:113:1: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nthrow;\r\n^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:115:1: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nthrow;\r\n^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:117:1: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nthrow;\r\n^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:123:5: Warning: Use of the \"var\" keyword is deprecated.\nfor(var i = 0; i < winners.length; i++){//from the first to the last\r\n    ^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:128:5: Warning: Use of the \"var\" keyword is deprecated.\nfor(var j = getCandidatePosition(candidate, i+1); j>i; j--){\r\n    ^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:208:42: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nif(!c4c.send(this.balance/10000*c4cfee)) throw;\r\n                                         ^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:210:63: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nif(prizeOwner!=0 && !owner.send(totalPrize/10000*prizeOwner)) throw;\r\n                                                              ^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:211:69: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nif(prizeReferee!=0 && !referee.send(totalPrize/10000*prizeReferee)) throw;\r\n                                                                    ^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:213:78: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nif(prizeWinners[i]!=0 && !winners[i].send(totalPrize/10000*prizeWinners[i])) throw;\r\n                                                                             ^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:218:34: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nif(!luckyVoters[j].send(amount)) throw;\r\n                                 ^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:221:36: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\nelse if(!owner.send(this.balance)) throw;//if there is no lucky voter, give remainder to the owner\r\n                                   ^---^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:60:7: Warning: This looks like an address but has an invalid checksum. If this is not used as an address, please prepend '00'. Correct checksummed address: '0x87B0DE512502f3e86fD22654B72a640c8e0f59cc'. For more information please see https://solidity.readthedocs.io/en/develop/types.html#address-literals\nc4c = 0x87b0de512502f3e86fd22654b72a640c8e0f59cc;\r\n      ^----------------------------------------^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:123:5: Warning: The type of this variable was inferred as uint8, which can hold values between 0 and 255. This is probably not desired. Use an explicit type to silence this warning.\nfor(var i = 0; i < winners.length; i++){//from the first to the last\r\n    ^-------^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:168:4: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\nif(this.balance>10000) distributePrizes(); //more than 10000 wei so every party gets at least 1 wei (if s.b. gets 0.01%)\r\n   ^----------^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:169:1: Warning: Invoking events without \"emit\" prefix is deprecated.\nContestClosed(totalPrize, winners, luckyVoters);\r\n^---------------------------------------------^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:180:1: Error: Uninitialized mapping. Mappings cannot be created dynamically, you have to assign them from a state variable.\nmapping (uint => bool) chosen;\r\n^---------------------------^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:208:14: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\nif(!c4c.send(this.balance/10000*c4cfee)) throw;\r\n             ^----------^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:209:14: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\ntotalPrize = this.balance;\r\n             ^----------^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:215:4: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\nif(this.balance>luckyVoters.length){//if there is ether left to be distributed amongst the lucky voters\r\n   ^----------^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:216:15: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\nuint amount = this.balance/luckyVoters.length;\r\n              ^----------^\n/unique_contracts/0xaf522608bf9355345bb1fed33219ee4623b9b81f.sol:221:21: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\nelse if(!owner.send(this.balance)) throw;//if there is no lucky voter, give remainder to the owner\r\n                    ^----------^\n", "issues": []}