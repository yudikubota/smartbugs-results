{"error": null, "issues": [{"address": 197, "code": "ken is owned,", "debug": "The exception is triggered under the following conditions:\n\ncalldata_tokenRecipient_0: 0x6fdde1300000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/6/0xe6923e9b56db1eed1c9f430ea761da7565e260fe.sol", "function": "fallback", "lineno": 94, "title": "Exception state", "type": "Informational"}, {"address": 1198, "code": "xtraData)\n        returns (bool success) {    \n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /* A contract attempts to get the coins */\n    function transferFro", "debug": "calldata_tokenRecipient_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xe6923e9b56db1eed1c9f430ea761da7565e260fe.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 67, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3670, "code": "     return true;\n        }\n    }\n\n    /* A contract attempts", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/6/0xe6923e9b56db1eed1c9f430ea761da7565e260fe.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 72, "title": "Message call to external contract", "type": "Warning"}], "success": true}