{
  "contract": "0x3b9a3c062bdb640b5039c0ccda4157737d732f95",
  "tool": "mythril",
  "start": 1563520928.573756,
  "end": 1563521060.2720447,
  "duration": 131.69828867912292,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 449,
        "code": "th owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array ",
        "debug": "storage_1: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_MultiSigStub_0: 0x273cbaa000000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigStub: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getTokenList()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x3b9a3c062bdb640b5039c0ccda4157737d732f95.sol",
        "function": "getTokenList()",
        "lineno": 158,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1471,
        "code": "ist of tokens.\n    /// @return List of token addresses.\n    function getTokenList()\n        public\n        constant\n     ",
        "debug": "storage_0: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_MultiSigStub_0: 0xa0e67e2b00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigStub: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getOwners()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x3b9a3c062bdb640b5039c0ccda4157737d732f95.sol",
        "function": "getOwners()",
        "lineno": 148,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1635,
        "code": "onIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        }\n        _transactionIds = new uint[](to - from);\n        for (i = from; i < to; i++) {\n            _transactionIds[i - from] = transactionIdsTemp[i];\n        }\n    }\n\n\n    function _malloc(uint size) \n        private \n        returns(bytes32 mData) \n    {\n        assembly {\n            mData := mload(0x40)\n            mstore(0x40, add(mData, size))\n        }\n    }\n\n ",
        "debug": "calldata_MultiSigStub_4: 0xb894e3f8fc03bd6f006d0784632ad5021800000000000007ffbc098287ab0026\nmem_128 + 32 + 32*storage_4: 0x41f062108000000000000000000003e01f082e8b04000070798bc51a841086f8\ncalldata_MultiSigStub_32 + 4: 0x4102040800084406008900240000c00420000000000000080000101008002021\ncalldata_MultiSigStub_0: 0xa8abe69a00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigStub: 0x4\nstorage_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getTransactionIds(uint256,uint256,bool,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x3b9a3c062bdb640b5039c0ccda4157737d732f95.sol",
        "function": "getTransactionIds(uint256,uint256,bool,bool)",
        "lineno": 192,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2143,
        "code": "ion create(address[] owners, uint256 required) returns (address w",
        "debug": "",
        "description": "This contract forwards its call data via DELEGATECALL in its fallback function. This means that any function in the called contract can be executed. Note that the callee contract will have access to the storage of the calling contract.\n DELEGATECALL target: 0xc0ffeee61948d8993864a73a099c0e38d887d3f4",
        "filename": "/unique_chucks/7/0x3b9a3c062bdb640b5039c0ccda4157737d732f95.sol",
        "function": "fallback",
        "lineno": 239,
        "title": "Call data forwarded with delegatecall()",
        "type": "Informational"
      },
      {
        "address": 2155,
        "code": " new MultiSigSt",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSigStub_0: 0x8b51d13f00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigStub: 0x4\nretval_2143: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x3b9a3c062bdb640b5039c0ccda4157737d732f95.sol",
        "function": "getConfirmationCount(uint256)",
        "lineno": 240,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2178,
        "code": " public owners;\n    add",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSigStub_4: 0x0\nstorage_0: 0x0\ncalldata_MultiSigStub_0: 0x25e7c2700000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigStub: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x3b9a3c062bdb640b5039c0ccda4157737d732f95.sol",
        "function": "_function_0x025e7c27",
        "lineno": 10,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2270,
        "code": "return Return",
        "debug": "storage_1: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_MultiSigStub_0: 0x273cbaa000000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigStub: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getTokenList()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x3b9a3c062bdb640b5039c0ccda4157737d732f95.sol",
        "function": "getTokenList()",
        "lineno": 160,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2272,
        "code": "return Return",
        "debug": "storage_1: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_MultiSigStub_0: 0x273cbaa000000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigStub: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getTokenList()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x3b9a3c062bdb640b5039c0ccda4157737d732f95.sol",
        "function": "getTokenList()",
        "lineno": 160,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2473,
        "code": "public tokens;\n    mapp",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSigStub_4: 0x0\nstorage_1: 0x0\ncalldata_MultiSigStub_0: 0x4f64b2be00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigStub: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x3b9a3c062bdb640b5039c0ccda4157737d732f95.sol",
        "function": "_function_0x4f64b2be",
        "lineno": 11,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3038,
        "code": "       consta",
        "debug": "storage_0: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_MultiSigStub_0: 0xa0e67e2b00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigStub: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getOwners()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x3b9a3c062bdb640b5039c0ccda4157737d732f95.sol",
        "function": "getOwners()",
        "lineno": 152,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3040,
        "code": "       consta",
        "debug": "storage_0: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_MultiSigStub_0: 0xa0e67e2b00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigStub: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getOwners()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x3b9a3c062bdb640b5039c0ccda4157737d732f95.sol",
        "function": "getOwners()",
        "lineno": 152,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3368,
        "code": "es32 mDat",
        "debug": "calldata_MultiSigStub_32 + 4: 0x0\ncalldata_MultiSigStub_4: 0x1\ncalldata_MultiSigStub_0: 0xa8abe69a00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigStub: 0x4\nstorage_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `getTransactionIds(uint256,uint256,bool,bool)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/7/0x3b9a3c062bdb640b5039c0ccda4157737d732f95.sol",
        "function": "getTransactionIds(uint256,uint256,bool,bool)",
        "lineno": 210,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3442,
        "code": "40, add(mData, size))",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSigStub_4: 0x1fffd0000003f81dc0800618f66bc096c6c0037143e6012e84288ce6b983960\ncalldata_MultiSigStub_32 + 4: 0x10ff000000004c02802001204011002000000040005000900810010100008444\ncalldata_MultiSigStub_0: 0xa8abe69a00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigStub: 0x4\nstorage_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x3b9a3c062bdb640b5039c0ccda4157737d732f95.sol",
        "function": "getTransactionIds(uint256,uint256,bool,bool)",
        "lineno": 214,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}