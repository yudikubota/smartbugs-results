{
  "contract": "0x696a846252e7d19cae1ca30dd918768c0623ed6c",
  "tool": "mythril",
  "start": 1563513548.0545044,
  "end": 1563513821.3185961,
  "duration": 273.2640917301178,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 613,
        "code": "255);\n        \n        for (uint8 i = 0; i < _addrs.length; i++)   {\n            airDeliver(_addrs[i],   _amount);\n        }\n    }\n    \n    function airDeliverStandalone(address[] _addrs, uint256[] _amounts) onlyOwner public {\n        require(_addrs.",
        "debug": "calldata_THESMP_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_THESMP_0: 0xc3e564a00000000000000000000000000000000000000000000000000000000\ncalldatasize_THESMP: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `airDeliverMulti(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0x696a846252e7d19cae1ca30dd918768c0623ed6c.sol",
        "function": "airDeliverMulti(address[],uint256)",
        "lineno": 116,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 845,
        "code": "addrs.length <=  255);\n        \n        for(uint i=0;i< _addrs.length;i++){\n            freezeDeliver(_addrs[i], _deliverAmount, _freezeAmount, _freezeMonth, _unfreezeBeginTime);\n        }\n    }\n\n    function  freezeDeliverMultiStandalone(address[] _addrs, uint[] _deliverAmounts, uint[] _freezeAmounts, uint _freezeMonth, uint _unfreezeBeginTime ) onlyOwner public {\n",
        "debug": "calldata_THESMP_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_THESMP_0: 0x2111c0f900000000000000000000000000000000000000000000000000000000\ncalldatasize_THESMP: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `freezeDeliverMuti(address[],uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0x696a846252e7d19cae1ca30dd918768c0623ed6c.sol",
        "function": "freezeDeliverMuti(address[],uint256,uint256,uint256,uint256)",
        "lineno": 170,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1336,
        "code": "require(_addrs.length <=  255);\n        require(_addrs.length == _deliverAmounts.length);\n        require(_addrs.length == _freezeAmounts.length);\n        \n        for(uint i=0;i< _addrs.length;i++){\n            freezeDeliver(_addrs[i], _deliverAmounts[i], _freezeAmounts[i], _freezeMonth, _unfreezeBeginTime);\n        }\n    }\n    \n    function addWhitelist(address[] _addrs) public onlyOwner {\n        require(_addrs.length <=  255);\n\n        for (uint8 i = 0; i < _addrs.length; i++) {\n            if (!white",
        "debug": "calldata_THESMP_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_THESMP_0: 0x679019ba00000000000000000000000000000000000000000000000000000000\ncalldatasize_THESMP: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x679019ba`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0x696a846252e7d19cae1ca30dd918768c0623ed6c.sol",
        "function": "_function_0x679019ba",
        "lineno": 178,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4432,
        "code": "nction safeMul(uint256 a, uint256 b",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_THESMP: 0x60\nstorage_4: 0xff00\ncalldata_THESMP_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x696a846252e7d19cae1ca30dd918768c0623ed6c.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 66,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6937,
        "code": "r].balance = safeSub(balances[bur",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/9/0x696a846252e7d19cae1ca30dd918768c0623ed6c.sol",
        "function": "withdraw()",
        "lineno": 262,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 9341,
        "code": "2) public returns",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_THESMP: 0x70\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_THESMP_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_THESMP_32 + 36: 0x0\ncalldata_THESMP_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_THESMP_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0xff00\ncalldata_THESMP_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_THESMP_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x696a846252e7d19cae1ca30dd918768c0623ed6c.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 213,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10187,
        "code": " tran",
        "debug": "storage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_THESMP_4: 0x60e6a91d1cba3c6604b126818d3db6ef8599c870bd68aeea92534258c7fcf5f5\ncalldata_THESMP_32 + 4: 0xcc2f4dda3e01266a76b3b6439931c688f0dd2e42254940cbd2284696f000f7e7\nstorage_1: 0xcc2f4dda3e01266a76b3b6439931c688f0dd2e42254940cbd2284696f000f7e7\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_4,_256): 0xcc2f4dda3e01266a76b3b6439931c688f0dd2e42254940cbd2284696f000f7e7\ncalldata_THESMP_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x0\ncaller: 0x0\ncalldata_THESMP_0: 0xea7c8cd00000000000000000000000000000000000000000000000000000000\ncalldatasize_THESMP: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `airDeliver(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0x696a846252e7d19cae1ca30dd918768c0623ed6c.sol",
        "function": "airDeliver(address,uint256)",
        "lineno": 84,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 10200,
        "code": "ip(address _ne",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_THESMP_4: 0x9dfdedbfd16e00000000000000000002fffffffffffbfffc162d7f579419044d\ncalldata_THESMP_32 + 4: 0x920189ae96d000000000000000000000fffffffffffbfffffdffffcbefa1545d\nstorage_1: 0x920189ae96d000000000000000000000fffffffffffbfffffdffffcbefa1545d\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_4,_256): 0x920189ae96d000000000000000000000fffffffffffbfffffdffffcbefa1545d\ncalldata_THESMP_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x0\ncaller: 0x0\ncalldata_THESMP_0: 0xea7c8cd00000000000000000000000000000000000000000000000000000000\ncalldatasize_THESMP: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x696a846252e7d19cae1ca30dd918768c0623ed6c.sol",
        "function": "airDeliver(address,uint256)",
        "lineno": 84,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}