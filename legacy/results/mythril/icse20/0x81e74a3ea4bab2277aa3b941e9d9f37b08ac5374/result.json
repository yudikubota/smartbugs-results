{
  "contract": "0x81e74a3ea4bab2277aa3b941e9d9f37b08ac5374",
  "tool": "mythril",
  "start": 1563459780.240149,
  "end": 1563460015.7350004,
  "duration": 235.4948513507843,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 815,
        "code": "sub will throw if there is not enough balance.\n      balances[msg.sender] = balances[msg.sender].sub(_amounts[i]);\n      balances[_addresses[i]] = balances[_addresses[i]].add(_amounts[i]);\n      Transfer(msg.sender, _addresses[i], _amounts[i]);\n    }\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() only(ifoodDev) canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished(msg.sender);\n    return true;\n  }\n\n  function getCurrentBlockNumber() private view returns (uin",
        "debug": "calldata_ifoodToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ifoodToken_0: 0x204009d200000000000000000000000000000000000000000000000000000000\ncalldatasize_ifoodToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferForMultiAddresses(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/1/0x81e74a3ea4bab2277aa3b941e9d9f37b08ac5374.sol",
        "function": "transferForMultiAddresses(address[],uint256[])",
        "lineno": 321,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3898,
        "code": "], _amounts",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ifoodToken_cpy: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_ifoodToken_4 + calldata_ifoodToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_13: 0xff00\ncalldata_ifoodToken_0: 0x204009d200000000000000000000000000000000000000000000000000000000\ncalldatasize_ifoodToken: 0x4\nmem_128 + 32 + 32*calldata_ifoodToken_4 + calldata_ifoodToken_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/1/0x81e74a3ea4bab2277aa3b941e9d9f37b08ac5374.sol",
        "function": "transferForMultiAddresses(address[],uint256[])",
        "lineno": 324,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10035,
        "code": "  }\n}\n\n/**\n * ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ifoodToken_32_+_4: 0xd32ba62e013a1e544c40f8298f8c838ef0ca495e903244487f8ba1f8c2a013e7\ncalldata_ifoodToken_32 + 36: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ifoodToken_4: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\ncalldata_ifoodToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_13: 0xff00\ncalldata_ifoodToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_ifoodToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/1/0x81e74a3ea4bab2277aa3b941e9d9f37b08ac5374.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 33,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}