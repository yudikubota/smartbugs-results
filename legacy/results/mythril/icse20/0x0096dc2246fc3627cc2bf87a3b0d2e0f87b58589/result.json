{
  "contract": "0x0096dc2246fc3627cc2bf87a3b0d2e0f87b58589",
  "tool": "mythril",
  "start": 1563702257.0409331,
  "end": 1563702285.9509325,
  "duration": 28.90999937057495,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2281,
        "code": "\n  */\n  function mul(uint a, uint b) internal",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function dumpdivs(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/39/0x0096dc2246fc3627cc2bf87a3b0d2e0f87b58589.sol",
        "function": "dumpdivs()",
        "lineno": 399,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3526,
        "code": "HTKN.transfer(owner, contractBal",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/39/0x0096dc2246fc3627cc2bf87a3b0d2e0f87b58589.sol",
        "function": "ownerSetBankroll(address)",
        "lineno": 378,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3526,
        "code": "HTKN.transfer(owner, contractBal",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3880\n",
        "filename": "/unique_chucks/39/0x0096dc2246fc3627cc2bf87a3b0d2e0f87b58589.sol",
        "function": "ownerSetBankroll(address)",
        "lineno": 378,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3647,
        "code": "    selfdestruct(owner);\n  ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/39/0x0096dc2246fc3627cc2bf87a3b0d2e0f87b58589.sol",
        "function": "ownerSetBankroll(address)",
        "lineno": 379,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3880,
        "code": "function dumpdivs() public{\n      Ze",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/39/0x0096dc2246fc3627cc2bf87a3b0d2e0f87b58589.sol",
        "function": "ownerSetBankroll(address)",
        "lineno": 382,
        "title": "Message call to external contract",
        "type": "Informational"
      }
    ],
    "success": true
  }
}