{
  "contract": "0xd41d48be0a81690a785bf1df336163f7b78eadca",
  "tool": "mythril",
  "start": 1563529105.3127315,
  "end": 1563529155.0990324,
  "duration": 49.78630089759827,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1946,
        "code": "25][4] public elements;\n  mappin",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Crypland_4: 0x4\ncalldata_Crypland_0: 0x2eca51e200000000000000000000000000000000000000000000000000000000\ncalldatasize_Crypland: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xd41d48be0a81690a785bf1df336163f7b78eadca.sol",
        "function": "_function_0x2eca51e2",
        "lineno": 11,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1963,
        "code": "25][4] public elements;\n  mappin",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Crypland_32 + 4: 0x19\ncalldata_Crypland_4: 0x3\ncalldata_Crypland_0: 0x2eca51e200000000000000000000000000000000000000000000000000000000\ncalldatasize_Crypland: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xd41d48be0a81690a785bf1df336163f7b78eadca.sol",
        "function": "_function_0x2eca51e2",
        "lineno": 11,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1977,
        "code": "25][4] public elements;\n  mappin",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Crypland_32 + 36: 0x0\nstorage_calldata_Crypland_32 + 4 + 1 + 25*calldata_Crypland_4: 0x0\ncalldata_Crypland_32 + 4: 0x18\ncalldata_Crypland_4: 0x3\ncalldata_Crypland_0: 0x2eca51e200000000000000000000000000000000000000000000000000000000\ncalldatasize_Crypland: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xd41d48be0a81690a785bf1df336163f7b78eadca.sol",
        "function": "_function_0x2eca51e2",
        "lineno": 11,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2196,
        "code": "nOwner {\n    selfdestr",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function ownerWithdraw(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/9/0xd41d48be0a81690a785bf1df336163f7b78eadca.sol",
        "function": "ownerWithdraw(uint256)",
        "lineno": 71,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 6419,
        "code": "alcElementCoold",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Crypland_4: 0x4\ncalldata_Crypland_0: 0xbfe86bbe00000000000000000000000000000000000000000000000000000000\ncalldatasize_Crypland: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xd41d48be0a81690a785bf1df336163f7b78eadca.sol",
        "function": "publicGetElement(uint256,uint256,uint256)",
        "lineno": 90,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6436,
        "code": "alcElementCooldown(gro",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Crypland_32 + 4: 0x19\ncalldata_Crypland_4: 0x3\ncalldata_Crypland_0: 0xbfe86bbe00000000000000000000000000000000000000000000000000000000\ncalldatasize_Crypland: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xd41d48be0a81690a785bf1df336163f7b78eadca.sol",
        "function": "publicGetElement(uint256,uint256,uint256)",
        "lineno": 90,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6450,
        "code": "alcElementCooldown(group, as",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Crypland_32 + 36: 0x0\nstorage_calldata_Crypland_32 + 4 + 1 + 25*calldata_Crypland_4: 0x0\ncalldata_Crypland_32 + 4: 0x18\ncalldata_Crypland_4: 0x3\ncalldata_Crypland_0: 0xbfe86bbe00000000000000000000000000000000000000000000000000000000\ncalldatasize_Crypland: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0xd41d48be0a81690a785bf1df336163f7b78eadca.sol",
        "function": "publicGetElement(uint256,uint256,uint256)",
        "lineno": 90,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}