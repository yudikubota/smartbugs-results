{"success": false, "error": "Solc experienced a fatal error (code 1).\n\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:24:1: Error: Source file requires different compiler version (current compiler is 0.4.25+commit.59dbf8f1.Linux.g++ - note that nightly builds are considered to be strictly less than the released version\n ... pragma solidity >=0.4.1 <=0.4.20; ... \n     ^-------------------------------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:927:45: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if ((_nbytes == 0)||(_nbytes > 32)) throw;\r\n                                            ^---^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1046:71: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) throw;\r\n                                                                      ^---^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1049:37: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if (proofVerified == false) throw;\r\n                                    ^---^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1067:39: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n\tif (prefix.length != n_random_bytes) throw;\r\n\t                                     ^---^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1125:13: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n            throw; // Should be a better way?\r\n            ^---^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1247:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n  function Roll100() public {\r\n  ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:211:21: Warning: Result of exponentiation has type uint8 and thus might overflow. Silence this warning by converting the literal to the expected type.\n        return x * (2 ** y);\r\n                    ^----^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:970:50: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        oraclize_randomDS_setCommitment(queryId, sha3(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\r\n                                                 ^--------------------------------------------------------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:970:50: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        oraclize_randomDS_setCommitment(queryId, sha3(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\r\n                                                 ^--------------------------------------------------------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1002:21: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        if (address(sha3(pubkey)) == signer) return true;\r\n                    ^----------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1005:29: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n            return (address(sha3(pubkey)) == signer);\r\n                            ^----------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1020:22: Warning: Decimal literal assigned to bytesXX variable will be left-aligned. Use an explicit conversion to silence this warning.\n        tosign2[0] = 1; //role\r\n                     ^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1082:15: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\r\n              ^-----------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1082:37: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\r\n                                    ^---------------------------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1082:32: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\r\n                               ^---------------------------------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1082:32: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\r\n                               ^---------------------------------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1082:32: Warning: The provided argument of type bytes32 is not implicitly convertible to expected type bytes memory.\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\r\n                               ^---------------------------------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1100:48: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\r\n                                               ^---------------------------------------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1100:48: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\r\n                                               ^---------------------------------------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1315:5: Warning: Invoking events without \"emit\" prefix is deprecated.\n    LogPlayerBet(msg.sender, queryId, ratio, msg.value);\r\n    ^-------------------------------------------------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1330:31: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n      uint luckyNumber = uint(keccak256(_result)) % 100 + 1;\r\n                              ^----------------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1330:31: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.\n      uint luckyNumber = uint(keccak256(_result)) % 100 + 1;\r\n                              ^----------------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1342:7: Warning: Invoking events without \"emit\" prefix is deprecated.\n      LogBetResult(player, _queryId, luckyNumber);\r\n      ^-----------------------------------------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1346:7: Warning: Invoking events without \"emit\" prefix is deprecated.\n      LogString(\"oraclize error!!!\");\r\n      ^----------------------------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1369:5: Warning: Invoking events without \"emit\" prefix is deprecated.\n    LogBeBanker(msg.sender, msg.value);\r\n    ^--------------------------------^\n/unique_chucks/11/0xb117e420c331cdca76121a7c2d521d9c44931e10.sol:1396:5: Warning: Invoking events without \"emit\" prefix is deprecated.\n    LogQuitBanker(msg.sender, value);\r\n    ^------------------------------^\n", "issues": []}