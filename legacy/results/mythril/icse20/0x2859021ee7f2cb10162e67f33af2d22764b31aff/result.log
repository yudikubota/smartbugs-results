{"error": null, "issues": [{"address": 2599, "code": ";\n\n /// @title Saf", "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_SilentNotaryToken: 0x44\nstorage_4: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SilentNotaryToken_32_+_4: 0x0\ncaller: 0x0\ncalldata_SilentNotaryToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/1/0x2859021ee7f2cb10162e67f33af2d22764b31aff.sol", "function": "transferFrom(address,address,uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3518, "code": "int value;\n    /// Objec", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SilentNotaryToken_4: 0x0\nstorage_2: 0x0\ncalldata_SilentNotaryToken_0: 0x2a11ced000000000000000000000000000000000000000000000000000000000\ncalldatasize_SilentNotaryToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/1/0x2859021ee7f2cb10162e67f33af2d22764b31aff.sol", "function": "_function_0x2a11ced0", "lineno": 96, "title": "Exception state", "type": "Informational"}, {"address": 3988, "code": ";\n\n /// @title Saf", "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SilentNotaryToken_4: 0x0\ncaller: 0x0\ncalldata_SilentNotaryToken_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_SilentNotaryToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `mint(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/1/0x2859021ee7f2cb10162e67f33af2d22764b31aff.sol", "function": "mint(address,uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6066, "code": "&& c>", "debug": "calldata_SilentNotaryToken_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_4: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SilentNotaryToken_4: 0x0\ncaller: 0x0\ncalldata_SilentNotaryToken_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_SilentNotaryToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `mint(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/1/0x2859021ee7f2cb10162e67f33af2d22764b31aff.sol", "function": "mint(address,uint256)", "lineno": 25, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6091, "code": "  return c;\n  }\n\n  f", "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x0\nstorage_0: 0x1\ncalldata_SilentNotaryToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SilentNotaryToken_4: 0x0\ncaller: 0x0\ncalldata_SilentNotaryToken_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_SilentNotaryToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/1/0x2859021ee7f2cb10162e67f33af2d22764b31aff.sol", "function": "mint(address,uint256)", "lineno": 26, "title": "Exception state", "type": "Informational"}, {"address": 6115, "code": "  return a - b", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SilentNotaryToken_32 + 36: 0xd48bb13c13a4dfe6da9a46b685dc21d8ffd98ea630a089fff02406393ec3fd99\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SilentNotaryToken_32_+_4: 0xc9c2a199b2f1751128a14a4b92d3b5cff05f097083f75fef73767283adc0093\ncalldatasize_SilentNotaryToken: 0x48\nstorage_4: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SilentNotaryToken_4: 0xd48bb13c13a4dfe6da9a46b685dc21d8ffd98ea630a089fff02406393ec3fd98\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SilentNotaryToken_32_+_4: 0x0\ncaller: 0x0\ncalldata_SilentNotaryToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/1/0x2859021ee7f2cb10162e67f33af2d22764b31aff.sol", "function": "transferFrom(address,address,uint256)", "lineno": 20, "title": "Exception state", "type": "Informational"}], "success": true}