{
  "contract": "0xb4e8d821b5b43fca08f5986d9b52a8dc00565cc5",
  "tool": "mythril",
  "start": 1563318955.8413706,
  "end": 1563319470.2805073,
  "duration": 514.4391367435455,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1307,
        "code": "urns (uint8){\n        return Collection[recordId].funding_percentage;\n    }\n\n    function doStateChanges() public {\n\n        var (CurrentRecordState, RecordStateRequired, EntityStateRequired) = getRequiredStateChanges();\n        bool callAgain = false;\n\n        DebugRecordRequiredChanges( assetName, CurrentRecordState, RecordStateRequired );\n        DebugEntityRequiredChanges( assetName, CurrentEntityState, EntityStateRequired );\n\n        if( RecordStateRequired != getRecordState(\"__IGNORED__\") ) {\n            // process record changes.\n            Recor",
        "debug": "calldata_Milestones_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Milestones_0: 0x5e8669f000000000000000000000000000000000000000000000000000000000\ncalldatasize_Milestones: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addRecord(bytes32,string,uint256,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xb4e8d821b5b43fca08f5986d9b52a8dc00565cc5.sol",
        "function": "addRecord(bytes32,string,uint256,uint8)",
        "lineno": 639,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3517,
        "code": "rrentProposalId() internal view returns ( uint256 ) {\n        r",
        "debug": "retval_13190: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\nstorage_12: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0xff00\ncalldata_Milestones_0: 0x2c684eb600000000000000000000000000000000000000000000000000000000\ncalldatasize_Milestones: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `afterVoteNoCashBackTime()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xb4e8d821b5b43fca08f5986d9b52a8dc00565cc5.sol",
        "function": "afterVoteNoCashBackTime()",
        "lineno": 820,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4919,
        "code": ";\n    }\n\n    function getAppBylawUint256(bytes32",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0xb4e8d821b5b43fca08f5986d9b52a8dc00565cc5.sol",
        "function": "getApplicationState()",
        "lineno": 208,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4919,
        "code": ";\n    }\n\n    function getAppBylawUint256(bytes32",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function getApplicationState(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0xb4e8d821b5b43fca08f5986d9b52a8dc00565cc5.sol",
        "function": "getApplicationState()",
        "lineno": 208,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5619,
        "code": "ApplicationState() public view returns (uint8) {\n       ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0xb4e8d821b5b43fca08f5986d9b52a8dc00565cc5.sol",
        "function": "getApplicationAssetAddressByName(bytes32)",
        "lineno": 203,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5619,
        "code": "ApplicationState() public view returns (uint8) {\n       ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function getApplicationAssetAddressByName(bytes32). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0xb4e8d821b5b43fca08f5986d9b52a8dc00565cc5.sol",
        "function": "getApplicationAssetAddressByName(bytes32)",
        "lineno": 203,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 13190,
        "code": "     return CurrentApp.getBylawB",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0xb4e8d821b5b43fca08f5986d9b52a8dc00565cc5.sol",
        "function": "MeetingTimeSetFailure()",
        "lineno": 218,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 13190,
        "code": "     return CurrentApp.getBylawB",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function MeetingTimeSetFailure(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0xb4e8d821b5b43fca08f5986d9b52a8dc00565cc5.sol",
        "function": "MeetingTimeSetFailure()",
        "lineno": 218,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 19218,
        "code": "_end;                       // estimated end time >> can be increased by proposal\n        uint256 time_ended;                     // actual end time\n        uint256 meeting_time;\n        uint8 funding_percentage;\n        uint8 index;\n    }\n\n    mapping (uint8 => Record) public Collection;\n    uint8 public currentRecord = 1;\n\n    event DebugRecordRequiredChanges( bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required );\n    event DebugCallAgain(uint8 indexed _who);\n\n    event EventEntityProcessor(bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required);\n    event EventRecordProcessor(bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required);\n\n    event DebugAction(bytes32 indexed _name, bool indexed _allowed);\n\n\n    function setAssetStates() internal {\n\n        // Contract States\n        EntityStates[\"__IGNORED__\"]                  = 0;\n        EntityStates[\"NEW\"]                          = 1;\n        EntityStates[\"WAITING\"]                      = 2;\n\n        EntityStates[\"IN_DEVELOPMENT\"]               = 5;\n\n        EntityStates[\"WAITING_MEETING_TIME\"]         = 10;\n        EntityStates[\"DEADLINE_MEETING_TIME_YES\"]    = 11;\n        EntityStates[\"DEADLINE_MEETING_TIME_FAILED\"] = 12;\n\n        EntityStates[\"VOTING_IN_PROGRESS\"]           = 20;\n        // EntityStates[\"VOTING_ENDED\"]              = 21;\n        EntityStates[\"VOTING_ENDED_YES\"]             = 22;\n        EntityStates[\"VOTING_ENDED_NO\"]              = 23;\n        EntityStates[\"VOTING_ENDED_NO_FINAL\"]        = 25;\n\n        EntityStates[\"VOTING_FUNDS_PROCESSED\"]       = 30;\n        EntityStates[\"FINAL\"]                        = 50;\n\n        EntityStates[\"CASHBACK_OWNER_MIA\"]           = 99;\n        EntityStates[\"DEVELOPMENT_COMPLETE\"]         = 250;\n\n        // Funding Stage States\n        RecordStates[\"__IGNORED__\"]     = 0;\n        RecordStates[\"NEW\"]             = 1;\n        RecordStates[\"IN_PROGRESS\"]     = 2;\n        RecordStates[\"FINAL\"]           = 3;\n    }\n\n    function runBeforeInitialization() internal requireNotInitialised {\n        FundingManagerEntity = ABIFundingManager( getApplicationAssetAddressByName('FundingManager') );\n        MeetingsEntity = ABIMeetings( getApplicationAssetAddressByName('Meetings') );\n        ProposalsEntity = ABIProposals( getApplicationAssetAddressByName('Proposals') );\n        EventRunBeforeInit(assetName);\n    }\n\n    function runBeforeApplyingSettings() internal requireInitialised requireSettingsNotApplied  {\n        // setup first milestone\n        Record storage rec = Collection[currentRecord];\n            rec.time_start = getBylawsProjectDevelopmentStart();\n            rec.time_end = rec.time_start + rec.duration;\n        EventRunBeforeApplyingSettings(assetName);\n    }\n\n    function getBylawsProjectDevelopmentStart() public view returns (uint256) {\n        return getAppBylawUint256(\"development_start\");\n    }\n\n    function getBylawsMinTimeInTheFutureForMeetingCreation() public view returns (uint256) {\n        return getAppBylawUint256(\"meeting_time_set_req\");\n    }\n\n    function getBylawsCashBackVoteRejectedDuration() public view returns (uint256) {\n        return getAppBylawUint256(\"cashback_investor_no\");\n    }\n\n    /*\n    * Add Record\n    *\n    * @param        bytes32 _name\n    * @param        string _description\n    * @param        uint256 _duration\n    * @param        uint256 _funding_percentage\n    *\n    * @access       public\n    * @type         method\n    * @modifiers    onlyDeployer, requireNotInitialised\n    */\n    function addRecord(\n        bytes32 _name,\n        string _description,\n        uint256 _duration,\n        uint8   _perc\n    )\n        public\n        onlyDeployer\n        requireSettingsNotApplied\n    {\n\n        Record storage rec = Collection[++RecordNum];\n\n        rec.name                = _name;\n        rec.description         = _description;\n        rec.duration            = _duration;\n        rec.funding_percentage  = _perc;\n        rec.state               = getRecordState(\"NEW\");\n        rec.index               = RecordNum;\n    }\n\n    function getMilestoneFundingPercentage(uint8 recordId) public view returns (uint8){\n        return Collection[recordId].funding_percentage;\n    }\n\n    function doStateChanges() public {\n\n        var (CurrentRecordState, RecordStateRequired, EntityStateRequired) = getRequiredStateChanges();\n        bool callAgain = false;\n\n        DebugRecordRequiredChanges( assetName, CurrentRecordState, RecordStateRequired );\n        DebugEntityRequiredChanges( assetName, CurrentEntityState, EntityStateRequired );\n\n        if( RecordStateRequired != getRecordState(\"__IGNORED__\") ) {\n            // process record changes.\n            RecordProcessor(CurrentRecordState, RecordStateRequired);\n            DebugCallAgain(2);\n            callAgain = true;\n        }\n\n        if(EntityStateRequired != getEntityState(\"__IGNORED__\") ) {\n            // process entity changes.\n            EntityProcessor(EntityStateRequired);\n            DebugCallAgain(1);\n            callAgain = true;\n        }\n\n\n    }\n\n    function MilestonesCanChange() internal view returns (bool) {\n        if(\n            CurrentEntityState == getEntityState(\"WAITING\") ||\n            CurrentEntityState == getEntityState(\"IN_DEVELOPMENT\") ||\n            CurrentEntityState == getEntityState(\"VOTING_FUNDS_PROCESSED\")\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n\n    /*\n     * Method: Get Record Required State Changes\n     *\n     * @access       public\n     * @type         method\n     *\n     * @return       uint8 RecordStateRequired\n     */\n    function getRecordStateRequiredChanges() public view returns (uint8) {\n        Record memory record = Collection[currentRecord];\n        uint8 RecordStateRequired = getRecordState(\"__IGNORED__\");\n\n        if( ApplicationIsInDevelopment() && MilestonesCanChange() ) {\n\n            if( record.state == getRecordState(\"NEW\") ) {\n\n                if( getTimestamp() >= record.time_start ) {\n                    RecordStateRequired = getRecordState(\"IN_PROGRESS\");\n                }\n\n            } else if( record.state == getRecordState(\"IN_PROGRESS\") ) {\n\n                if( getTimestamp() >= record.time_end || ( getTimestamp() >= record.meeting_time && record.meeting_time > 0 ) ) {\n                    RecordStateRequired = getRecordState(\"FINAL\");\n                }\n            }\n\n            if( record.state == RecordStateRequired ) {\n                RecordStateRequired = getRecordState(\"__IGNORED__\");\n            }\n        }\n        return RecordStateRequired;\n    }\n\n\n    function hasRequiredStateChanges() public view returns (bool) {\n        bool hasChanges = false;\n        var (CurrentRecordState, RecordStateRequired, EntityStateRequired) = getRequiredStateChanges();\n        CurrentRecordState = 0;\n\n        if( RecordStateRequired != getRecordState(\"__IGNORED__\") ) {\n            hasChanges = true;\n        }\n        if(EntityStateRequired != getEntityState(\"__IGNORED__\") ) {\n            hasChanges = true;\n        }\n\n        return hasChanges;\n    }\n\n    // view methods decide if changes are to be made\n    // in case of tasks, we do them in the Processors.\n\n    function RecordProcessor(uint8 CurrentRecordState, uint8 RecordStateRequired) internal {\n        EventRecordProcessor( assetName, CurrentRecordState, RecordStateRequired );\n        updateRecord( RecordStateRequired );\n    }\n\n\n    function EntityProcessor(uint8 EntityStateRequired) internal {\n        EventEntityProcessor( assetName, CurrentEntityState, EntityStateRequired );\n\n        // Do State Specific Updates\n        // Update our Entity State\n        CurrentEntityState = EntityStateRequired;\n\n        if ( CurrentEntityState == getEntityState(\"DEADLINE_MEETING_TIME_YES\") ) {\n            // create meeting\n            // Meetings.create(\"internal\", \"MILESTONE_END\", \"\");\n\n        } else if( CurrentEntityState == getEntityState(\"VOTING_IN_PROGRESS\") ) {\n            // create proposal and start voting on it\n            createMilestoneAcceptanceProposal();\n\n        } else if( CurrentEntityState == getEntityState(\"WAITING_MEETING_TIME\") ) {\n\n            PostponeMeetingIfApproved();\n\n        } else if( CurrentEntityState == getEntityState(\"VOTING_ENDED_YES\") ) {\n\n        } else if( CurrentEntityState == getEntityState(\"VOTING_ENDED_NO\") ) {\n\n            // possible cashback time starts from now\n            MilestoneCashBackTime = getTimestamp();\n\n        } else if( CurrentEntityState == getEntityState(\"VOTING_FUNDS_PROCESSED\") ) {\n            MilestoneCashBackTime = 0;\n            startNextMilestone();\n        }\n\n    }\n\n    mapping (bytes32 => bool) public MilestonePostponingHash;\n\n    function PostponeMeetingIfApproved() internal {\n        if(MilestonePostponingHash[ bytes32(currentRecord) ] == false ) {\n            if(PostponeForCurrentMilestoneIsApproved()) {\n                uint256 time = ProposalsEntity.getCurrentMilestonePostponingProposalDuration();\n                Record storage record = Collection[currentRecord];\n                record.time_end = record.time_end + time;\n                MilestonePostponingHash[ bytes32(currentRecord) ] = true;\n            }\n        }\n    }\n\n    function PostponeForCurrentMilestoneIsApproved() internal view returns ( bool ) {\n        uint8 ProposalActionType = ProposalsEntity.getActionType(\"MILESTONE_POSTPONING\");\n        uint8 ProposalRecordState = ProposalsEntity.getCurrentMilestoneProposalStatusForType( ProposalActionType  );\n        if(ProposalRecordState == ProposalsEntity.getRecordState(\"VOTING_RESULT_YES\") ) {\n            return true;\n        }\n        return false;\n    }\n\n    uint256 public MilestoneCashBackTime = 0;\n\n    function afterVoteNoCashBackTime() public view returns ( bool ) {\n        uint256 time =  MilestoneCashBackTime + getBylawsCashBackVoteRejectedDuration();\n        // after cash back time\n        if(getTimestamp() > time) {\n            return true;\n        }\n        return false;\n    }\n\n    function getHash(uint8 actionType, bytes32 arg1, bytes32 arg2) public pure returns ( bytes32 ) {\n        return keccak256(actionType, arg1, arg2);\n    }\n\n    function getCurrentHash() public view returns ( bytes32 ) {\n        return getHash(1, bytes32(currentRecord), 0);\n    }\n\n    mapping (bytes32 => uint256) public ProposalIdByHash;\n    function createMilestoneAcceptanceProposal() internal {\n        if(ProposalIdByHash[ getCurrentHash() ] == 0x0 ) {\n            ProposalIdByHash[ getCurrentHash() ] = ProposalsEntity.createMilestoneAcceptanceProposal();\n        }\n    }\n\n    function getCurrentProposalId() internal view returns ( uint256 ) {\n        return ProposalIdByHash[ getCurrentHash() ];\n    }\n\n    function setCurrentMilestoneMeetingTime(uint256 _meeting_time) public onlyDeployer {\n        if ( CurrentEntityState == getEntityState(\"WAITING_MEETING_TIME\") ) {\n            if(MeetingTimeSetFailure() == false ) {\n                Record storage record = Collection[currentRecord];\n                // minimum x days into the future\n                uint256 min = getTimestamp() + getBylawsMinTimeInTheFutureForMeetingCreation();\n                // minimum days before end date\n                uint256 max = record.time_end + 24 * 3600;\n                if(_meeting_time > min && _meeting_time < max ) {\n                    record.meeting_time = _meeting_time;\n                }\n            } else {\n                revert();\n            }\n        } else {\n            revert();\n        }\n    }\n\n    function startNextMilestone() internal {\n        Record storage rec = Collection[currentRecord];\n\n        // set current record end date etc\n        rec.time_ended = getTimestamp();\n        rec.state = getRecordState(\"FINAL\");\n\n        if(currentRecord < RecordNum) {\n            // jump to next milestone\n            currentRecord++;\n\n            Record storage nextRec = Collection[currentRecord];\n                nextRec.time_start = rec.time_ended;\n                nextRec.time_end = rec.time_ended + nextRec.duration;\n        }\n\n    }\n\n    /*\n    * Update Existing Record\n    *\n    * @param        uint8 _record_id\n    * @param        uint8 _new_state\n    * @param        uint8 _duration\n    *\n    * @access       public\n    * @type         method\n    * @modifiers    onlyOwner, requireInitialised, RecordUpdateAllowed\n    *\n    * @return       void\n    */\n\n    function updateRecord( uint8 _new_state )\n        internal\n        requireInitialised\n        RecordUpdateAllowed(_new_state)\n        returns (bool)\n    {\n        Record storage rec = Collection[currentRecord];\n        rec.state       = _new_state;\n        return true;\n    }\n\n\n    /*\n    * Modifier: Validate if record updates are allowed\n    *\n    * @type         modifier\n    *\n    * @param        uint8 _record_id\n    * @param        uint8 _new_state\n    * @param        uint256 _duration\n    *\n    * @return       bool\n    */\n\n    modifier RecordUpdateAllowed(uint8 _new_state) {\n        require( isRecordUpdateAllowed( _new_state )  );\n        _;\n    }\n\n    /*\n     * Method: Validate if record can be updated to requested state\n     *\n     * @access       public\n     * @type         method\n     *\n     * @param        uint8 _record_id\n     * @param        uint8 _new_state\n     *\n     * @return       bool\n     */\n    function isRecordUpdateAllowed(uint8 _new_state ) public view returns (bool) {\n\n        var (CurrentRecordState, RecordStateRequired, EntityStateRequired) = getRequiredStateChanges();\n\n        CurrentRecordState = 0;\n        EntityStateRequired = 0;\n\n        if(_new_state == uint8(RecordStateRequired)) {\n            return true;\n        }\n        return false;\n    }\n\n    /*\n     * Method: Get Record and Entity State Changes\n     *\n     * @access       public\n     * @type         method\n     *\n     * @return       ( uint8 CurrentRecordState, uint8 RecordStateRequired, uint8 EntityStateRequired)\n     */\n    function getRequiredStateChanges() public view returns (uint8, uint8, uint8) {\n\n        Record memory record = Collection[currentRecord];\n\n        uint8 CurrentRecordState = record.state;\n        uint8 RecordStateRequired = getRecordStateRequiredChanges();\n        uint8 EntityStateRequired = getEntityState(\"__IGNORED__\");\n\n        if( ApplicationIsInDevelopment() ) {\n\n            // Do Entity Checks\n\n            if ( CurrentEntityState == getEntityState(\"WAITING\") ) {\n\n                if(RecordStateRequired == getRecordState(\"IN_PROGRESS\") ) {\n                    // both record and entity states need to move to IN_PROGRESS\n                    EntityStateRequired = getEntityState(\"IN_DEVELOPMENT\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"IN_DEVELOPMENT\") ) {\n\n                EntityStateRequired = getEntityState(\"WAITING_MEETING_TIME\");\n\n            } else if ( CurrentEntityState == getEntityState(\"WAITING_MEETING_TIME\") ) {\n\n                if(record.meeting_time > 0) {\n\n                    EntityStateRequired = getEntityState(\"DEADLINE_MEETING_TIME_YES\");\n\n                } else {\n\n                    if(MilestonePostponingHash[ bytes32(currentRecord) ] == false) {\n                        if(PostponeForCurrentMilestoneIsApproved()) {\n                            EntityStateRequired = getEntityState(\"WAITING_MEETING_TIME\");\n                        }\n                    }\n\n                    if(MeetingTimeSetFailure()) {\n                        // Force Owner Missing in Action - Cash Back Procedure\n                        EntityStateRequired = getEntityState(\"DEADLINE_MEETING_TIME_FAILED\");\n                    }\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"DEADLINE_MEETING_TIME_FAILED\") ) {\n\n\n            } else if ( CurrentEntityState == getEntityState(\"DEADLINE_MEETING_TIME_YES\") ) {\n\n                // create proposal\n                // start voting if time passed\n                if(getTimestamp() >= record.meeting_time ) {\n                    EntityStateRequired = getEntityState(\"VOTING_IN_PROGRESS\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"VOTING_IN_PROGRESS\") ) {\n\n                uint8 ProposalRecordState = ProposalsEntity.getProposalState( getCurrentProposalId() );\n\n                if ( ProposalRecordState == ProposalsEntity.getRecordState(\"VOTING_RESULT_YES\") ) {\n                    EntityStateRequired = getEntityState(\"VOTING_ENDED_YES\");\n                }\n\n                if (ProposalRecordState == ProposalsEntity.getRecordState(\"VOTING_RESULT_NO\") ) {\n                    EntityStateRequired = getEntityState(\"VOTING_ENDED_NO\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"VOTING_ENDED_YES\") ) {\n\n                if( FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState(\"MILESTONE_PROCESS_DONE\")) {\n                    EntityStateRequired = getEntityState(\"VOTING_FUNDS_PROCESSED\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"VOTING_ENDED_NO\") ) {\n\n                // check if milestone cashout period has passed and if so process fund releases\n                if(afterVoteNoCashBackTime()) {\n                    EntityStateRequired = getEntityState(\"VOTING_ENDED_NO_FINAL\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"VOTING_ENDED_NO_FINAL\") ) {\n\n                if( FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState(\"MILESTONE_PROCESS_DONE\")) {\n                    EntityStateRequired = getEntityState(\"VOTING_FUNDS_PROCESSED\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"VOTING_FUNDS_PROCESSED\") ) {\n\n\n                if(currentRecord < RecordNum) {\n                    EntityStateRequired = getEntityState(\"IN_DEVELOPMENT\");\n                } else {\n\n                    if(FundingManagerEntity.getCurrentMilestoneProcessed() == true) {\n                        if(FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState(\"COMPLETE_PROCESS_DONE\")) {\n                            EntityStateRequired = getEntityState(\"DEVELOPMENT_COMPLETE\");\n                        } else {\n                            EntityStateRequired = getEntityState(\"VOTING_FUNDS_PROCESSED\");\n                        }\n                    } else {\n                        EntityStateRequired = getEntityState(\"IN_DEVELOPMENT\");\n                    }\n                }\n\n            }\n            /*\n            else if ( CurrentEntityState == getEntityState(\"DEVELOPMENT_COMPLETE\") ) {\n\n            }\n            */\n\n        } else {\n\n            if( CurrentEntityState == getEntityState(\"NEW\") ) {\n                EntityStateRequired = getEntityState(\"WAITING\");\n            }\n        }\n\n        return (CurrentRecordState, RecordStateRequired, EntityStateRequired);\n    }\n\n    function ApplicationIsInDevelopment() public view returns(bool) {\n        if( getApplicationState() == getApplicationEntityState(\"IN_DEVELOPMENT\") ) {\n            return true;\n        }\n        return false;\n    }\n\n    function MeetingTimeSetFailure() public view returns (bool) {\n        Record memory record = Collection[currentRecord];\n        uint256 meetingCreationMaxTime = record.time_end - getBylawsMinTimeInTheFutureForMeetingCreation();\n        if(getTimestamp() >= meetingCreationMaxTime ) {\n            return true;\n        }\n        return false;\n    }\n\n}",
        "debug": "keccac_1_+\nkeccac_255_&_255_&_1_+_Concat(0,_Extract(15,_8,_storage_4)): 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_1 +\nkeccac_255_&_255_&_1_+_Concat(0,_Extract(15,_8,_storage_4)): 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_4: 0x0\nstorage_5: 0x0\ncaller: 0x0\ncalldata_Milestones_0: 0x5e8669f000000000000000000000000000000000000000000000000000000000\ncalldatasize_Milestones: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addRecord(bytes32,string,uint256,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xb4e8d821b5b43fca08f5986d9b52a8dc00565cc5.sol",
        "function": "addRecord(bytes32,string,uint256,uint8)",
        "lineno": 528,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 19247,
        "code": "_end;                       // estimated end time >> can be increased by proposal\n        uint256 time_ended;                     // actual end time\n        uint256 meeting_time;\n        uint8 funding_percentage;\n        uint8 index;\n    }\n\n    mapping (uint8 => Record) public Collection;\n    uint8 public currentRecord = 1;\n\n    event DebugRecordRequiredChanges( bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required );\n    event DebugCallAgain(uint8 indexed _who);\n\n    event EventEntityProcessor(bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required);\n    event EventRecordProcessor(bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required);\n\n    event DebugAction(bytes32 indexed _name, bool indexed _allowed);\n\n\n    function setAssetStates() internal {\n\n        // Contract States\n        EntityStates[\"__IGNORED__\"]                  = 0;\n        EntityStates[\"NEW\"]                          = 1;\n        EntityStates[\"WAITING\"]                      = 2;\n\n        EntityStates[\"IN_DEVELOPMENT\"]               = 5;\n\n        EntityStates[\"WAITING_MEETING_TIME\"]         = 10;\n        EntityStates[\"DEADLINE_MEETING_TIME_YES\"]    = 11;\n        EntityStates[\"DEADLINE_MEETING_TIME_FAILED\"] = 12;\n\n        EntityStates[\"VOTING_IN_PROGRESS\"]           = 20;\n        // EntityStates[\"VOTING_ENDED\"]              = 21;\n        EntityStates[\"VOTING_ENDED_YES\"]             = 22;\n        EntityStates[\"VOTING_ENDED_NO\"]              = 23;\n        EntityStates[\"VOTING_ENDED_NO_FINAL\"]        = 25;\n\n        EntityStates[\"VOTING_FUNDS_PROCESSED\"]       = 30;\n        EntityStates[\"FINAL\"]                        = 50;\n\n        EntityStates[\"CASHBACK_OWNER_MIA\"]           = 99;\n        EntityStates[\"DEVELOPMENT_COMPLETE\"]         = 250;\n\n        // Funding Stage States\n        RecordStates[\"__IGNORED__\"]     = 0;\n        RecordStates[\"NEW\"]             = 1;\n        RecordStates[\"IN_PROGRESS\"]     = 2;\n        RecordStates[\"FINAL\"]           = 3;\n    }\n\n    function runBeforeInitialization() internal requireNotInitialised {\n        FundingManagerEntity = ABIFundingManager( getApplicationAssetAddressByName('FundingManager') );\n        MeetingsEntity = ABIMeetings( getApplicationAssetAddressByName('Meetings') );\n        ProposalsEntity = ABIProposals( getApplicationAssetAddressByName('Proposals') );\n        EventRunBeforeInit(assetName);\n    }\n\n    function runBeforeApplyingSettings() internal requireInitialised requireSettingsNotApplied  {\n        // setup first milestone\n        Record storage rec = Collection[currentRecord];\n            rec.time_start = getBylawsProjectDevelopmentStart();\n            rec.time_end = rec.time_start + rec.duration;\n        EventRunBeforeApplyingSettings(assetName);\n    }\n\n    function getBylawsProjectDevelopmentStart() public view returns (uint256) {\n        return getAppBylawUint256(\"development_start\");\n    }\n\n    function getBylawsMinTimeInTheFutureForMeetingCreation() public view returns (uint256) {\n        return getAppBylawUint256(\"meeting_time_set_req\");\n    }\n\n    function getBylawsCashBackVoteRejectedDuration() public view returns (uint256) {\n        return getAppBylawUint256(\"cashback_investor_no\");\n    }\n\n    /*\n    * Add Record\n    *\n    * @param        bytes32 _name\n    * @param        string _description\n    * @param        uint256 _duration\n    * @param        uint256 _funding_percentage\n    *\n    * @access       public\n    * @type         method\n    * @modifiers    onlyDeployer, requireNotInitialised\n    */\n    function addRecord(\n        bytes32 _name,\n        string _description,\n        uint256 _duration,\n        uint8   _perc\n    )\n        public\n        onlyDeployer\n        requireSettingsNotApplied\n    {\n\n        Record storage rec = Collection[++RecordNum];\n\n        rec.name                = _name;\n        rec.description         = _description;\n        rec.duration            = _duration;\n        rec.funding_percentage  = _perc;\n        rec.state               = getRecordState(\"NEW\");\n        rec.index               = RecordNum;\n    }\n\n    function getMilestoneFundingPercentage(uint8 recordId) public view returns (uint8){\n        return Collection[recordId].funding_percentage;\n    }\n\n    function doStateChanges() public {\n\n        var (CurrentRecordState, RecordStateRequired, EntityStateRequired) = getRequiredStateChanges();\n        bool callAgain = false;\n\n        DebugRecordRequiredChanges( assetName, CurrentRecordState, RecordStateRequired );\n        DebugEntityRequiredChanges( assetName, CurrentEntityState, EntityStateRequired );\n\n        if( RecordStateRequired != getRecordState(\"__IGNORED__\") ) {\n            // process record changes.\n            RecordProcessor(CurrentRecordState, RecordStateRequired);\n            DebugCallAgain(2);\n            callAgain = true;\n        }\n\n        if(EntityStateRequired != getEntityState(\"__IGNORED__\") ) {\n            // process entity changes.\n            EntityProcessor(EntityStateRequired);\n            DebugCallAgain(1);\n            callAgain = true;\n        }\n\n\n    }\n\n    function MilestonesCanChange() internal view returns (bool) {\n        if(\n            CurrentEntityState == getEntityState(\"WAITING\") ||\n            CurrentEntityState == getEntityState(\"IN_DEVELOPMENT\") ||\n            CurrentEntityState == getEntityState(\"VOTING_FUNDS_PROCESSED\")\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n\n    /*\n     * Method: Get Record Required State Changes\n     *\n     * @access       public\n     * @type         method\n     *\n     * @return       uint8 RecordStateRequired\n     */\n    function getRecordStateRequiredChanges() public view returns (uint8) {\n        Record memory record = Collection[currentRecord];\n        uint8 RecordStateRequired = getRecordState(\"__IGNORED__\");\n\n        if( ApplicationIsInDevelopment() && MilestonesCanChange() ) {\n\n            if( record.state == getRecordState(\"NEW\") ) {\n\n                if( getTimestamp() >= record.time_start ) {\n                    RecordStateRequired = getRecordState(\"IN_PROGRESS\");\n                }\n\n            } else if( record.state == getRecordState(\"IN_PROGRESS\") ) {\n\n                if( getTimestamp() >= record.time_end || ( getTimestamp() >= record.meeting_time && record.meeting_time > 0 ) ) {\n                    RecordStateRequired = getRecordState(\"FINAL\");\n                }\n            }\n\n            if( record.state == RecordStateRequired ) {\n                RecordStateRequired = getRecordState(\"__IGNORED__\");\n            }\n        }\n        return RecordStateRequired;\n    }\n\n\n    function hasRequiredStateChanges() public view returns (bool) {\n        bool hasChanges = false;\n        var (CurrentRecordState, RecordStateRequired, EntityStateRequired) = getRequiredStateChanges();\n        CurrentRecordState = 0;\n\n        if( RecordStateRequired != getRecordState(\"__IGNORED__\") ) {\n            hasChanges = true;\n        }\n        if(EntityStateRequired != getEntityState(\"__IGNORED__\") ) {\n            hasChanges = true;\n        }\n\n        return hasChanges;\n    }\n\n    // view methods decide if changes are to be made\n    // in case of tasks, we do them in the Processors.\n\n    function RecordProcessor(uint8 CurrentRecordState, uint8 RecordStateRequired) internal {\n        EventRecordProcessor( assetName, CurrentRecordState, RecordStateRequired );\n        updateRecord( RecordStateRequired );\n    }\n\n\n    function EntityProcessor(uint8 EntityStateRequired) internal {\n        EventEntityProcessor( assetName, CurrentEntityState, EntityStateRequired );\n\n        // Do State Specific Updates\n        // Update our Entity State\n        CurrentEntityState = EntityStateRequired;\n\n        if ( CurrentEntityState == getEntityState(\"DEADLINE_MEETING_TIME_YES\") ) {\n            // create meeting\n            // Meetings.create(\"internal\", \"MILESTONE_END\", \"\");\n\n        } else if( CurrentEntityState == getEntityState(\"VOTING_IN_PROGRESS\") ) {\n            // create proposal and start voting on it\n            createMilestoneAcceptanceProposal();\n\n        } else if( CurrentEntityState == getEntityState(\"WAITING_MEETING_TIME\") ) {\n\n            PostponeMeetingIfApproved();\n\n        } else if( CurrentEntityState == getEntityState(\"VOTING_ENDED_YES\") ) {\n\n        } else if( CurrentEntityState == getEntityState(\"VOTING_ENDED_NO\") ) {\n\n            // possible cashback time starts from now\n            MilestoneCashBackTime = getTimestamp();\n\n        } else if( CurrentEntityState == getEntityState(\"VOTING_FUNDS_PROCESSED\") ) {\n            MilestoneCashBackTime = 0;\n            startNextMilestone();\n        }\n\n    }\n\n    mapping (bytes32 => bool) public MilestonePostponingHash;\n\n    function PostponeMeetingIfApproved() internal {\n        if(MilestonePostponingHash[ bytes32(currentRecord) ] == false ) {\n            if(PostponeForCurrentMilestoneIsApproved()) {\n                uint256 time = ProposalsEntity.getCurrentMilestonePostponingProposalDuration();\n                Record storage record = Collection[currentRecord];\n                record.time_end = record.time_end + time;\n                MilestonePostponingHash[ bytes32(currentRecord) ] = true;\n            }\n        }\n    }\n\n    function PostponeForCurrentMilestoneIsApproved() internal view returns ( bool ) {\n        uint8 ProposalActionType = ProposalsEntity.getActionType(\"MILESTONE_POSTPONING\");\n        uint8 ProposalRecordState = ProposalsEntity.getCurrentMilestoneProposalStatusForType( ProposalActionType  );\n        if(ProposalRecordState == ProposalsEntity.getRecordState(\"VOTING_RESULT_YES\") ) {\n            return true;\n        }\n        return false;\n    }\n\n    uint256 public MilestoneCashBackTime = 0;\n\n    function afterVoteNoCashBackTime() public view returns ( bool ) {\n        uint256 time =  MilestoneCashBackTime + getBylawsCashBackVoteRejectedDuration();\n        // after cash back time\n        if(getTimestamp() > time) {\n            return true;\n        }\n        return false;\n    }\n\n    function getHash(uint8 actionType, bytes32 arg1, bytes32 arg2) public pure returns ( bytes32 ) {\n        return keccak256(actionType, arg1, arg2);\n    }\n\n    function getCurrentHash() public view returns ( bytes32 ) {\n        return getHash(1, bytes32(currentRecord), 0);\n    }\n\n    mapping (bytes32 => uint256) public ProposalIdByHash;\n    function createMilestoneAcceptanceProposal() internal {\n        if(ProposalIdByHash[ getCurrentHash() ] == 0x0 ) {\n            ProposalIdByHash[ getCurrentHash() ] = ProposalsEntity.createMilestoneAcceptanceProposal();\n        }\n    }\n\n    function getCurrentProposalId() internal view returns ( uint256 ) {\n        return ProposalIdByHash[ getCurrentHash() ];\n    }\n\n    function setCurrentMilestoneMeetingTime(uint256 _meeting_time) public onlyDeployer {\n        if ( CurrentEntityState == getEntityState(\"WAITING_MEETING_TIME\") ) {\n            if(MeetingTimeSetFailure() == false ) {\n                Record storage record = Collection[currentRecord];\n                // minimum x days into the future\n                uint256 min = getTimestamp() + getBylawsMinTimeInTheFutureForMeetingCreation();\n                // minimum days before end date\n                uint256 max = record.time_end + 24 * 3600;\n                if(_meeting_time > min && _meeting_time < max ) {\n                    record.meeting_time = _meeting_time;\n                }\n            } else {\n                revert();\n            }\n        } else {\n            revert();\n        }\n    }\n\n    function startNextMilestone() internal {\n        Record storage rec = Collection[currentRecord];\n\n        // set current record end date etc\n        rec.time_ended = getTimestamp();\n        rec.state = getRecordState(\"FINAL\");\n\n        if(currentRecord < RecordNum) {\n            // jump to next milestone\n            currentRecord++;\n\n            Record storage nextRec = Collection[currentRecord];\n                nextRec.time_start = rec.time_ended;\n                nextRec.time_end = rec.time_ended + nextRec.duration;\n        }\n\n    }\n\n    /*\n    * Update Existing Record\n    *\n    * @param        uint8 _record_id\n    * @param        uint8 _new_state\n    * @param        uint8 _duration\n    *\n    * @access       public\n    * @type         method\n    * @modifiers    onlyOwner, requireInitialised, RecordUpdateAllowed\n    *\n    * @return       void\n    */\n\n    function updateRecord( uint8 _new_state )\n        internal\n        requireInitialised\n        RecordUpdateAllowed(_new_state)\n        returns (bool)\n    {\n        Record storage rec = Collection[currentRecord];\n        rec.state       = _new_state;\n        return true;\n    }\n\n\n    /*\n    * Modifier: Validate if record updates are allowed\n    *\n    * @type         modifier\n    *\n    * @param        uint8 _record_id\n    * @param        uint8 _new_state\n    * @param        uint256 _duration\n    *\n    * @return       bool\n    */\n\n    modifier RecordUpdateAllowed(uint8 _new_state) {\n        require( isRecordUpdateAllowed( _new_state )  );\n        _;\n    }\n\n    /*\n     * Method: Validate if record can be updated to requested state\n     *\n     * @access       public\n     * @type         method\n     *\n     * @param        uint8 _record_id\n     * @param        uint8 _new_state\n     *\n     * @return       bool\n     */\n    function isRecordUpdateAllowed(uint8 _new_state ) public view returns (bool) {\n\n        var (CurrentRecordState, RecordStateRequired, EntityStateRequired) = getRequiredStateChanges();\n\n        CurrentRecordState = 0;\n        EntityStateRequired = 0;\n\n        if(_new_state == uint8(RecordStateRequired)) {\n            return true;\n        }\n        return false;\n    }\n\n    /*\n     * Method: Get Record and Entity State Changes\n     *\n     * @access       public\n     * @type         method\n     *\n     * @return       ( uint8 CurrentRecordState, uint8 RecordStateRequired, uint8 EntityStateRequired)\n     */\n    function getRequiredStateChanges() public view returns (uint8, uint8, uint8) {\n\n        Record memory record = Collection[currentRecord];\n\n        uint8 CurrentRecordState = record.state;\n        uint8 RecordStateRequired = getRecordStateRequiredChanges();\n        uint8 EntityStateRequired = getEntityState(\"__IGNORED__\");\n\n        if( ApplicationIsInDevelopment() ) {\n\n            // Do Entity Checks\n\n            if ( CurrentEntityState == getEntityState(\"WAITING\") ) {\n\n                if(RecordStateRequired == getRecordState(\"IN_PROGRESS\") ) {\n                    // both record and entity states need to move to IN_PROGRESS\n                    EntityStateRequired = getEntityState(\"IN_DEVELOPMENT\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"IN_DEVELOPMENT\") ) {\n\n                EntityStateRequired = getEntityState(\"WAITING_MEETING_TIME\");\n\n            } else if ( CurrentEntityState == getEntityState(\"WAITING_MEETING_TIME\") ) {\n\n                if(record.meeting_time > 0) {\n\n                    EntityStateRequired = getEntityState(\"DEADLINE_MEETING_TIME_YES\");\n\n                } else {\n\n                    if(MilestonePostponingHash[ bytes32(currentRecord) ] == false) {\n                        if(PostponeForCurrentMilestoneIsApproved()) {\n                            EntityStateRequired = getEntityState(\"WAITING_MEETING_TIME\");\n                        }\n                    }\n\n                    if(MeetingTimeSetFailure()) {\n                        // Force Owner Missing in Action - Cash Back Procedure\n                        EntityStateRequired = getEntityState(\"DEADLINE_MEETING_TIME_FAILED\");\n                    }\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"DEADLINE_MEETING_TIME_FAILED\") ) {\n\n\n            } else if ( CurrentEntityState == getEntityState(\"DEADLINE_MEETING_TIME_YES\") ) {\n\n                // create proposal\n                // start voting if time passed\n                if(getTimestamp() >= record.meeting_time ) {\n                    EntityStateRequired = getEntityState(\"VOTING_IN_PROGRESS\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"VOTING_IN_PROGRESS\") ) {\n\n                uint8 ProposalRecordState = ProposalsEntity.getProposalState( getCurrentProposalId() );\n\n                if ( ProposalRecordState == ProposalsEntity.getRecordState(\"VOTING_RESULT_YES\") ) {\n                    EntityStateRequired = getEntityState(\"VOTING_ENDED_YES\");\n                }\n\n                if (ProposalRecordState == ProposalsEntity.getRecordState(\"VOTING_RESULT_NO\") ) {\n                    EntityStateRequired = getEntityState(\"VOTING_ENDED_NO\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"VOTING_ENDED_YES\") ) {\n\n                if( FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState(\"MILESTONE_PROCESS_DONE\")) {\n                    EntityStateRequired = getEntityState(\"VOTING_FUNDS_PROCESSED\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"VOTING_ENDED_NO\") ) {\n\n                // check if milestone cashout period has passed and if so process fund releases\n                if(afterVoteNoCashBackTime()) {\n                    EntityStateRequired = getEntityState(\"VOTING_ENDED_NO_FINAL\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"VOTING_ENDED_NO_FINAL\") ) {\n\n                if( FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState(\"MILESTONE_PROCESS_DONE\")) {\n                    EntityStateRequired = getEntityState(\"VOTING_FUNDS_PROCESSED\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"VOTING_FUNDS_PROCESSED\") ) {\n\n\n                if(currentRecord < RecordNum) {\n                    EntityStateRequired = getEntityState(\"IN_DEVELOPMENT\");\n                } else {\n\n                    if(FundingManagerEntity.getCurrentMilestoneProcessed() == true) {\n                        if(FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState(\"COMPLETE_PROCESS_DONE\")) {\n                            EntityStateRequired = getEntityState(\"DEVELOPMENT_COMPLETE\");\n                        } else {\n                            EntityStateRequired = getEntityState(\"VOTING_FUNDS_PROCESSED\");\n                        }\n                    } else {\n                        EntityStateRequired = getEntityState(\"IN_DEVELOPMENT\");\n                    }\n                }\n\n            }\n            /*\n            else if ( CurrentEntityState == getEntityState(\"DEVELOPMENT_COMPLETE\") ) {\n\n            }\n            */\n\n        } else {\n\n            if( CurrentEntityState == getEntityState(\"NEW\") ) {\n                EntityStateRequired = getEntityState(\"WAITING\");\n            }\n        }\n\n        return (CurrentRecordState, RecordStateRequired, EntityStateRequired);\n    }\n\n    function ApplicationIsInDevelopment() public view returns(bool) {\n        if( getApplicationState() == getApplicationEntityState(\"IN_DEVELOPMENT\") ) {\n            return true;\n        }\n        return false;\n    }\n\n    function MeetingTimeSetFailure() public view returns (bool) {\n        Record memory record = Collection[currentRecord];\n        uint256 meetingCreationMaxTime = record.time_end - getBylawsMinTimeInTheFutureForMeetingCreation();\n        if(getTimestamp() >= meetingCreationMaxTime ) {\n            return true;\n        }\n        return false;\n    }\n\n}",
        "debug": "calldata_Milestones_4 + calldata_Milestones_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_4: 0x0\nstorage_5: 0x0\ncaller: 0x0\ncalldata_Milestones_0: 0x5e8669f000000000000000000000000000000000000000000000000000000000\ncalldatasize_Milestones: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addRecord(bytes32,string,uint256,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xb4e8d821b5b43fca08f5986d9b52a8dc00565cc5.sol",
        "function": "addRecord(bytes32,string,uint256,uint8)",
        "lineno": 528,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 19261,
        "code": "_end;                       // estimated end time >> can be increased by proposal\n        uint256 time_ended;                     // actual end time\n        uint256 meeting_time;\n        uint8 funding_percentage;\n        uint8 index;\n    }\n\n    mapping (uint8 => Record) public Collection;\n    uint8 public currentRecord = 1;\n\n    event DebugRecordRequiredChanges( bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required );\n    event DebugCallAgain(uint8 indexed _who);\n\n    event EventEntityProcessor(bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required);\n    event EventRecordProcessor(bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required);\n\n    event DebugAction(bytes32 indexed _name, bool indexed _allowed);\n\n\n    function setAssetStates() internal {\n\n        // Contract States\n        EntityStates[\"__IGNORED__\"]                  = 0;\n        EntityStates[\"NEW\"]                          = 1;\n        EntityStates[\"WAITING\"]                      = 2;\n\n        EntityStates[\"IN_DEVELOPMENT\"]               = 5;\n\n        EntityStates[\"WAITING_MEETING_TIME\"]         = 10;\n        EntityStates[\"DEADLINE_MEETING_TIME_YES\"]    = 11;\n        EntityStates[\"DEADLINE_MEETING_TIME_FAILED\"] = 12;\n\n        EntityStates[\"VOTING_IN_PROGRESS\"]           = 20;\n        // EntityStates[\"VOTING_ENDED\"]              = 21;\n        EntityStates[\"VOTING_ENDED_YES\"]             = 22;\n        EntityStates[\"VOTING_ENDED_NO\"]              = 23;\n        EntityStates[\"VOTING_ENDED_NO_FINAL\"]        = 25;\n\n        EntityStates[\"VOTING_FUNDS_PROCESSED\"]       = 30;\n        EntityStates[\"FINAL\"]                        = 50;\n\n        EntityStates[\"CASHBACK_OWNER_MIA\"]           = 99;\n        EntityStates[\"DEVELOPMENT_COMPLETE\"]         = 250;\n\n        // Funding Stage States\n        RecordStates[\"__IGNORED__\"]     = 0;\n        RecordStates[\"NEW\"]             = 1;\n        RecordStates[\"IN_PROGRESS\"]     = 2;\n        RecordStates[\"FINAL\"]           = 3;\n    }\n\n    function runBeforeInitialization() internal requireNotInitialised {\n        FundingManagerEntity = ABIFundingManager( getApplicationAssetAddressByName('FundingManager') );\n        MeetingsEntity = ABIMeetings( getApplicationAssetAddressByName('Meetings') );\n        ProposalsEntity = ABIProposals( getApplicationAssetAddressByName('Proposals') );\n        EventRunBeforeInit(assetName);\n    }\n\n    function runBeforeApplyingSettings() internal requireInitialised requireSettingsNotApplied  {\n        // setup first milestone\n        Record storage rec = Collection[currentRecord];\n            rec.time_start = getBylawsProjectDevelopmentStart();\n            rec.time_end = rec.time_start + rec.duration;\n        EventRunBeforeApplyingSettings(assetName);\n    }\n\n    function getBylawsProjectDevelopmentStart() public view returns (uint256) {\n        return getAppBylawUint256(\"development_start\");\n    }\n\n    function getBylawsMinTimeInTheFutureForMeetingCreation() public view returns (uint256) {\n        return getAppBylawUint256(\"meeting_time_set_req\");\n    }\n\n    function getBylawsCashBackVoteRejectedDuration() public view returns (uint256) {\n        return getAppBylawUint256(\"cashback_investor_no\");\n    }\n\n    /*\n    * Add Record\n    *\n    * @param        bytes32 _name\n    * @param        string _description\n    * @param        uint256 _duration\n    * @param        uint256 _funding_percentage\n    *\n    * @access       public\n    * @type         method\n    * @modifiers    onlyDeployer, requireNotInitialised\n    */\n    function addRecord(\n        bytes32 _name,\n        string _description,\n        uint256 _duration,\n        uint8   _perc\n    )\n        public\n        onlyDeployer\n        requireSettingsNotApplied\n    {\n\n        Record storage rec = Collection[++RecordNum];\n\n        rec.name                = _name;\n        rec.description         = _description;\n        rec.duration            = _duration;\n        rec.funding_percentage  = _perc;\n        rec.state               = getRecordState(\"NEW\");\n        rec.index               = RecordNum;\n    }\n\n    function getMilestoneFundingPercentage(uint8 recordId) public view returns (uint8){\n        return Collection[recordId].funding_percentage;\n    }\n\n    function doStateChanges() public {\n\n        var (CurrentRecordState, RecordStateRequired, EntityStateRequired) = getRequiredStateChanges();\n        bool callAgain = false;\n\n        DebugRecordRequiredChanges( assetName, CurrentRecordState, RecordStateRequired );\n        DebugEntityRequiredChanges( assetName, CurrentEntityState, EntityStateRequired );\n\n        if( RecordStateRequired != getRecordState(\"__IGNORED__\") ) {\n            // process record changes.\n            RecordProcessor(CurrentRecordState, RecordStateRequired);\n            DebugCallAgain(2);\n            callAgain = true;\n        }\n\n        if(EntityStateRequired != getEntityState(\"__IGNORED__\") ) {\n            // process entity changes.\n            EntityProcessor(EntityStateRequired);\n            DebugCallAgain(1);\n            callAgain = true;\n        }\n\n\n    }\n\n    function MilestonesCanChange() internal view returns (bool) {\n        if(\n            CurrentEntityState == getEntityState(\"WAITING\") ||\n            CurrentEntityState == getEntityState(\"IN_DEVELOPMENT\") ||\n            CurrentEntityState == getEntityState(\"VOTING_FUNDS_PROCESSED\")\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n\n    /*\n     * Method: Get Record Required State Changes\n     *\n     * @access       public\n     * @type         method\n     *\n     * @return       uint8 RecordStateRequired\n     */\n    function getRecordStateRequiredChanges() public view returns (uint8) {\n        Record memory record = Collection[currentRecord];\n        uint8 RecordStateRequired = getRecordState(\"__IGNORED__\");\n\n        if( ApplicationIsInDevelopment() && MilestonesCanChange() ) {\n\n            if( record.state == getRecordState(\"NEW\") ) {\n\n                if( getTimestamp() >= record.time_start ) {\n                    RecordStateRequired = getRecordState(\"IN_PROGRESS\");\n                }\n\n            } else if( record.state == getRecordState(\"IN_PROGRESS\") ) {\n\n                if( getTimestamp() >= record.time_end || ( getTimestamp() >= record.meeting_time && record.meeting_time > 0 ) ) {\n                    RecordStateRequired = getRecordState(\"FINAL\");\n                }\n            }\n\n            if( record.state == RecordStateRequired ) {\n                RecordStateRequired = getRecordState(\"__IGNORED__\");\n            }\n        }\n        return RecordStateRequired;\n    }\n\n\n    function hasRequiredStateChanges() public view returns (bool) {\n        bool hasChanges = false;\n        var (CurrentRecordState, RecordStateRequired, EntityStateRequired) = getRequiredStateChanges();\n        CurrentRecordState = 0;\n\n        if( RecordStateRequired != getRecordState(\"__IGNORED__\") ) {\n            hasChanges = true;\n        }\n        if(EntityStateRequired != getEntityState(\"__IGNORED__\") ) {\n            hasChanges = true;\n        }\n\n        return hasChanges;\n    }\n\n    // view methods decide if changes are to be made\n    // in case of tasks, we do them in the Processors.\n\n    function RecordProcessor(uint8 CurrentRecordState, uint8 RecordStateRequired) internal {\n        EventRecordProcessor( assetName, CurrentRecordState, RecordStateRequired );\n        updateRecord( RecordStateRequired );\n    }\n\n\n    function EntityProcessor(uint8 EntityStateRequired) internal {\n        EventEntityProcessor( assetName, CurrentEntityState, EntityStateRequired );\n\n        // Do State Specific Updates\n        // Update our Entity State\n        CurrentEntityState = EntityStateRequired;\n\n        if ( CurrentEntityState == getEntityState(\"DEADLINE_MEETING_TIME_YES\") ) {\n            // create meeting\n            // Meetings.create(\"internal\", \"MILESTONE_END\", \"\");\n\n        } else if( CurrentEntityState == getEntityState(\"VOTING_IN_PROGRESS\") ) {\n            // create proposal and start voting on it\n            createMilestoneAcceptanceProposal();\n\n        } else if( CurrentEntityState == getEntityState(\"WAITING_MEETING_TIME\") ) {\n\n            PostponeMeetingIfApproved();\n\n        } else if( CurrentEntityState == getEntityState(\"VOTING_ENDED_YES\") ) {\n\n        } else if( CurrentEntityState == getEntityState(\"VOTING_ENDED_NO\") ) {\n\n            // possible cashback time starts from now\n            MilestoneCashBackTime = getTimestamp();\n\n        } else if( CurrentEntityState == getEntityState(\"VOTING_FUNDS_PROCESSED\") ) {\n            MilestoneCashBackTime = 0;\n            startNextMilestone();\n        }\n\n    }\n\n    mapping (bytes32 => bool) public MilestonePostponingHash;\n\n    function PostponeMeetingIfApproved() internal {\n        if(MilestonePostponingHash[ bytes32(currentRecord) ] == false ) {\n            if(PostponeForCurrentMilestoneIsApproved()) {\n                uint256 time = ProposalsEntity.getCurrentMilestonePostponingProposalDuration();\n                Record storage record = Collection[currentRecord];\n                record.time_end = record.time_end + time;\n                MilestonePostponingHash[ bytes32(currentRecord) ] = true;\n            }\n        }\n    }\n\n    function PostponeForCurrentMilestoneIsApproved() internal view returns ( bool ) {\n        uint8 ProposalActionType = ProposalsEntity.getActionType(\"MILESTONE_POSTPONING\");\n        uint8 ProposalRecordState = ProposalsEntity.getCurrentMilestoneProposalStatusForType( ProposalActionType  );\n        if(ProposalRecordState == ProposalsEntity.getRecordState(\"VOTING_RESULT_YES\") ) {\n            return true;\n        }\n        return false;\n    }\n\n    uint256 public MilestoneCashBackTime = 0;\n\n    function afterVoteNoCashBackTime() public view returns ( bool ) {\n        uint256 time =  MilestoneCashBackTime + getBylawsCashBackVoteRejectedDuration();\n        // after cash back time\n        if(getTimestamp() > time) {\n            return true;\n        }\n        return false;\n    }\n\n    function getHash(uint8 actionType, bytes32 arg1, bytes32 arg2) public pure returns ( bytes32 ) {\n        return keccak256(actionType, arg1, arg2);\n    }\n\n    function getCurrentHash() public view returns ( bytes32 ) {\n        return getHash(1, bytes32(currentRecord), 0);\n    }\n\n    mapping (bytes32 => uint256) public ProposalIdByHash;\n    function createMilestoneAcceptanceProposal() internal {\n        if(ProposalIdByHash[ getCurrentHash() ] == 0x0 ) {\n            ProposalIdByHash[ getCurrentHash() ] = ProposalsEntity.createMilestoneAcceptanceProposal();\n        }\n    }\n\n    function getCurrentProposalId() internal view returns ( uint256 ) {\n        return ProposalIdByHash[ getCurrentHash() ];\n    }\n\n    function setCurrentMilestoneMeetingTime(uint256 _meeting_time) public onlyDeployer {\n        if ( CurrentEntityState == getEntityState(\"WAITING_MEETING_TIME\") ) {\n            if(MeetingTimeSetFailure() == false ) {\n                Record storage record = Collection[currentRecord];\n                // minimum x days into the future\n                uint256 min = getTimestamp() + getBylawsMinTimeInTheFutureForMeetingCreation();\n                // minimum days before end date\n                uint256 max = record.time_end + 24 * 3600;\n                if(_meeting_time > min && _meeting_time < max ) {\n                    record.meeting_time = _meeting_time;\n                }\n            } else {\n                revert();\n            }\n        } else {\n            revert();\n        }\n    }\n\n    function startNextMilestone() internal {\n        Record storage rec = Collection[currentRecord];\n\n        // set current record end date etc\n        rec.time_ended = getTimestamp();\n        rec.state = getRecordState(\"FINAL\");\n\n        if(currentRecord < RecordNum) {\n            // jump to next milestone\n            currentRecord++;\n\n            Record storage nextRec = Collection[currentRecord];\n                nextRec.time_start = rec.time_ended;\n                nextRec.time_end = rec.time_ended + nextRec.duration;\n        }\n\n    }\n\n    /*\n    * Update Existing Record\n    *\n    * @param        uint8 _record_id\n    * @param        uint8 _new_state\n    * @param        uint8 _duration\n    *\n    * @access       public\n    * @type         method\n    * @modifiers    onlyOwner, requireInitialised, RecordUpdateAllowed\n    *\n    * @return       void\n    */\n\n    function updateRecord( uint8 _new_state )\n        internal\n        requireInitialised\n        RecordUpdateAllowed(_new_state)\n        returns (bool)\n    {\n        Record storage rec = Collection[currentRecord];\n        rec.state       = _new_state;\n        return true;\n    }\n\n\n    /*\n    * Modifier: Validate if record updates are allowed\n    *\n    * @type         modifier\n    *\n    * @param        uint8 _record_id\n    * @param        uint8 _new_state\n    * @param        uint256 _duration\n    *\n    * @return       bool\n    */\n\n    modifier RecordUpdateAllowed(uint8 _new_state) {\n        require( isRecordUpdateAllowed( _new_state )  );\n        _;\n    }\n\n    /*\n     * Method: Validate if record can be updated to requested state\n     *\n     * @access       public\n     * @type         method\n     *\n     * @param        uint8 _record_id\n     * @param        uint8 _new_state\n     *\n     * @return       bool\n     */\n    function isRecordUpdateAllowed(uint8 _new_state ) public view returns (bool) {\n\n        var (CurrentRecordState, RecordStateRequired, EntityStateRequired) = getRequiredStateChanges();\n\n        CurrentRecordState = 0;\n        EntityStateRequired = 0;\n\n        if(_new_state == uint8(RecordStateRequired)) {\n            return true;\n        }\n        return false;\n    }\n\n    /*\n     * Method: Get Record and Entity State Changes\n     *\n     * @access       public\n     * @type         method\n     *\n     * @return       ( uint8 CurrentRecordState, uint8 RecordStateRequired, uint8 EntityStateRequired)\n     */\n    function getRequiredStateChanges() public view returns (uint8, uint8, uint8) {\n\n        Record memory record = Collection[currentRecord];\n\n        uint8 CurrentRecordState = record.state;\n        uint8 RecordStateRequired = getRecordStateRequiredChanges();\n        uint8 EntityStateRequired = getEntityState(\"__IGNORED__\");\n\n        if( ApplicationIsInDevelopment() ) {\n\n            // Do Entity Checks\n\n            if ( CurrentEntityState == getEntityState(\"WAITING\") ) {\n\n                if(RecordStateRequired == getRecordState(\"IN_PROGRESS\") ) {\n                    // both record and entity states need to move to IN_PROGRESS\n                    EntityStateRequired = getEntityState(\"IN_DEVELOPMENT\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"IN_DEVELOPMENT\") ) {\n\n                EntityStateRequired = getEntityState(\"WAITING_MEETING_TIME\");\n\n            } else if ( CurrentEntityState == getEntityState(\"WAITING_MEETING_TIME\") ) {\n\n                if(record.meeting_time > 0) {\n\n                    EntityStateRequired = getEntityState(\"DEADLINE_MEETING_TIME_YES\");\n\n                } else {\n\n                    if(MilestonePostponingHash[ bytes32(currentRecord) ] == false) {\n                        if(PostponeForCurrentMilestoneIsApproved()) {\n                            EntityStateRequired = getEntityState(\"WAITING_MEETING_TIME\");\n                        }\n                    }\n\n                    if(MeetingTimeSetFailure()) {\n                        // Force Owner Missing in Action - Cash Back Procedure\n                        EntityStateRequired = getEntityState(\"DEADLINE_MEETING_TIME_FAILED\");\n                    }\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"DEADLINE_MEETING_TIME_FAILED\") ) {\n\n\n            } else if ( CurrentEntityState == getEntityState(\"DEADLINE_MEETING_TIME_YES\") ) {\n\n                // create proposal\n                // start voting if time passed\n                if(getTimestamp() >= record.meeting_time ) {\n                    EntityStateRequired = getEntityState(\"VOTING_IN_PROGRESS\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"VOTING_IN_PROGRESS\") ) {\n\n                uint8 ProposalRecordState = ProposalsEntity.getProposalState( getCurrentProposalId() );\n\n                if ( ProposalRecordState == ProposalsEntity.getRecordState(\"VOTING_RESULT_YES\") ) {\n                    EntityStateRequired = getEntityState(\"VOTING_ENDED_YES\");\n                }\n\n                if (ProposalRecordState == ProposalsEntity.getRecordState(\"VOTING_RESULT_NO\") ) {\n                    EntityStateRequired = getEntityState(\"VOTING_ENDED_NO\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"VOTING_ENDED_YES\") ) {\n\n                if( FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState(\"MILESTONE_PROCESS_DONE\")) {\n                    EntityStateRequired = getEntityState(\"VOTING_FUNDS_PROCESSED\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"VOTING_ENDED_NO\") ) {\n\n                // check if milestone cashout period has passed and if so process fund releases\n                if(afterVoteNoCashBackTime()) {\n                    EntityStateRequired = getEntityState(\"VOTING_ENDED_NO_FINAL\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"VOTING_ENDED_NO_FINAL\") ) {\n\n                if( FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState(\"MILESTONE_PROCESS_DONE\")) {\n                    EntityStateRequired = getEntityState(\"VOTING_FUNDS_PROCESSED\");\n                }\n\n            } else if ( CurrentEntityState == getEntityState(\"VOTING_FUNDS_PROCESSED\") ) {\n\n\n                if(currentRecord < RecordNum) {\n                    EntityStateRequired = getEntityState(\"IN_DEVELOPMENT\");\n                } else {\n\n                    if(FundingManagerEntity.getCurrentMilestoneProcessed() == true) {\n                        if(FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState(\"COMPLETE_PROCESS_DONE\")) {\n                            EntityStateRequired = getEntityState(\"DEVELOPMENT_COMPLETE\");\n                        } else {\n                            EntityStateRequired = getEntityState(\"VOTING_FUNDS_PROCESSED\");\n                        }\n                    } else {\n                        EntityStateRequired = getEntityState(\"IN_DEVELOPMENT\");\n                    }\n                }\n\n            }\n            /*\n            else if ( CurrentEntityState == getEntityState(\"DEVELOPMENT_COMPLETE\") ) {\n\n            }\n            */\n\n        } else {\n\n            if( CurrentEntityState == getEntityState(\"NEW\") ) {\n                EntityStateRequired = getEntityState(\"WAITING\");\n            }\n        }\n\n        return (CurrentRecordState, RecordStateRequired, EntityStateRequired);\n    }\n\n    function ApplicationIsInDevelopment() public view returns(bool) {\n        if( getApplicationState() == getApplicationEntityState(\"IN_DEVELOPMENT\") ) {\n            return true;\n        }\n        return false;\n    }\n\n    function MeetingTimeSetFailure() public view returns (bool) {\n        Record memory record = Collection[currentRecord];\n        uint256 meetingCreationMaxTime = record.time_end - getBylawsMinTimeInTheFutureForMeetingCreation();\n        if(getTimestamp() >= meetingCreationMaxTime ) {\n            return true;\n        }\n        return false;\n    }\n\n}",
        "debug": "calldata_Milestones_4 + calldata_Milestones_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_4: 0x0\nstorage_5: 0x0\ncaller: 0x0\ncalldata_Milestones_0: 0x5e8669f000000000000000000000000000000000000000000000000000000000\ncalldatasize_Milestones: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addRecord(bytes32,string,uint256,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xb4e8d821b5b43fca08f5986d9b52a8dc00565cc5.sol",
        "function": "addRecord(bytes32,string,uint256,uint8)",
        "lineno": 528,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}