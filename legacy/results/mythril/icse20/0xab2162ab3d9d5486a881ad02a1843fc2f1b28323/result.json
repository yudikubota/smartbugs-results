{
  "contract": "0xab2162ab3d9d5486a881ad02a1843fc2f1b28323",
  "tool": "mythril",
  "start": 1563410189.8181655,
  "end": 1563410220.4512255,
  "duration": 30.633059978485107,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 136,
        "code": "d(address _tokenAddr, address[] dests, uint256[] values)\n    public returns (uint256) {\n        uint256 i = 0;\n        while (i < dests.length) {\n           ERC20(_tokenAddr).transfer(dests[i], values[i]);\n           i += 1;\n        }\n        return(i);\n    }\n}",
        "debug": "calldata_ERC20Basic_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20Basic_0: 0xad8733ca00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Basic: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `multisend(address,address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xab2162ab3d9d5486a881ad02a1843fc2f1b28323.sol",
        "function": "multisend(address,address[],uint256[])",
        "lineno": 18,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 373,
        "code": "  i += 1;",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC20Basic_4 + calldata_ERC20Basic_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20Basic_0: 0xad8733ca00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Basic: 0x4\nmem_128 +\n32 +\n32*calldata_ERC20Basic_4 + calldata_ERC20Basic_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xab2162ab3d9d5486a881ad02a1843fc2f1b28323.sol",
        "function": "multisend(address,address[],uint256[])",
        "lineno": 23,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 520,
        "code": "nsfer(dests[i], values[i]);\n           i += 1;\n",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0xab2162ab3d9d5486a881ad02a1843fc2f1b28323.sol",
        "function": "multisend(address,address[],uint256[])",
        "lineno": 22,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 520,
        "code": "nsfer(dests[i], values[i]);\n           i += 1;\n",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 520\nCall at address: 520\n",
        "filename": "/unique_contracts/0xab2162ab3d9d5486a881ad02a1843fc2f1b28323.sol",
        "function": "multisend(address,address[],uint256[])",
        "lineno": 22,
        "title": "Multiple Calls",
        "type": "Information"
      }
    ],
    "success": true
  }
}