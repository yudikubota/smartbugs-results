{"error": null, "issues": [{"address": 341, "code": "t256[] _ETHUSD, uint256[] _token, uint256[] _value) onlyOwner public {\n        for(uint256 i = 0; i < _addr.length; i++){\n            State storage state = states[_addr[i]];\n            bool res;\n            if(!(state.exchange || state.payment)){\n                res=_addr[i].call(bytes4(keccak256(\"updateInfo(uint256,uint256,uint256)\")),_ETHUSD[i],_token[i],_value[i]);\n                emit InfoUpdated(bytes4(keccak256(\"updateInfo(uint256,uint256,uint256)\")),_addr[i],res,_ETHUSD[i],_token[i],_value[i]);\n                continue;\n            }\n            if(state.exchange){\n                res=_addr[i].call(bytes4(keccak256(\"changeExchange(uint256)\")),_ETHUSD[i]);\n                emit InfoUpdated(bytes4(keccak256(\"changeExchange(uint256)\")),_addr[i],res,_ETHUSD[i],0x0,0x0);\n            }\n            if(state.payment){\n                res=_addr[i].call(bytes4(keccak256(\"paymentsInOtherCurrency(uint256,uint256)\")),_token[i],_value[i]);\n                emit InfoUpdated(bytes4(keccak256(\"paymentsInOtherCurrency(uint256,uint256)\")),_addr[i],res,0x0,_token[i],_value[i]);\n            }\n        }\n    }\n}", "debug": "calldata_Updater_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Updater_0: 0x4e53a0b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Updater: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `update(address[],uint256[],uint256[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x6692e3a26c0057c16bdfb6ea41bc72c5fcbbc04b.sol", "function": "update(address[],uint256[],uint256[],uint256[])", "lineno": 37, "title": "Integer Overflow ", "type": "Warning"}, {"address": 723, "code": "_addr, uint8[] _exchange, uint8[] _payment) onlyOwner public {\n        for(uint256 i = 0; i < _addr.length; i++){\n            states[_addr[i]].exchange = _exchange[i]>0;\n            states[_addr[i]].payment = _payment[i]>0;\n        }\n    }\n\n    function update(address[] _a", "debug": "calldata_Updater_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Updater_0: 0xcdc0496100000000000000000000000000000000000000000000000000000000\ncalldatasize_Updater: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setStates(address[],uint8[],uint8[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x6692e3a26c0057c16bdfb6ea41bc72c5fcbbc04b.sol", "function": "setStates(address[],uint8[],uint8[])", "lineno": 30, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1445, "code": "        em", "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Updater_cpy: 0x0\ncalldata_Updater_4 + calldata_Updater_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Updater_0: 0x4e53a0b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Updater: 0x4\nmem_128 + 32 + 32*calldata_Updater_4 + calldata_Updater_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/14/0x6692e3a26c0057c16bdfb6ea41bc72c5fcbbc04b.sol", "function": "update(address[],uint256[],uint256[],uint256[])", "lineno": 43, "title": "Exception state", "type": "Informational"}, {"address": 1469, "code": "t InfoUpd", "debug": "The exception is triggered under the following conditions:\n\nmem_128 + 32 + 32*calldata_Updater_4 + calldata_Updater_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Updater_cpy: 0x0\ncalldata_Updater_4 + calldata_Updater_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Updater_0: 0x4e53a0b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Updater: 0x4\nmem_160 +\n32*calldata_Updater_4 + calldata_Updater_4 +\n32 +\n32*calldata_Updater_4 + calldata_Updater_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/14/0x6692e3a26c0057c16bdfb6ea41bc72c5fcbbc04b.sol", "function": "update(address[],uint256[],uint256[],uint256[])", "lineno": 43, "title": "Exception state", "type": "Informational"}, {"address": 1493, "code": "ted(bytes", "debug": "The exception is triggered under the following conditions:\n\nmem_160 +\n32*calldata_Updater_4 + calldata_Updater_4 +\n32 +\n32*calldata_Updater_4 + calldata_Updater_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 + 32 + 32*calldata_Updater_4 + calldata_Updater_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Updater_cpy: 0x0\ncalldata_Updater_4 + calldata_Updater_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Updater_0: 0x4e53a0b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Updater: 0x4\nmem_192 +\n32*calldata_Updater_4 + calldata_Updater_4 +\n32*calldata_Updater_4 + calldata_Updater_32 + 4 +\n32 +\n32*calldata_Updater_4 + calldata_Updater_32 + 36: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/14/0x6692e3a26c0057c16bdfb6ea41bc72c5fcbbc04b.sol", "function": "update(address[],uint256[],uint256[],uint256[])", "lineno": 43, "title": "Exception state", "type": "Informational"}, {"address": 1588, "code": "o(uint256,uint256,uint256)\")),_ETHUSD[i],_token[i],_value[i]);\n                emit InfoUpdated(bytes4", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/14/0x6692e3a26c0057c16bdfb6ea41bc72c5fcbbc04b.sol", "function": "update(address[],uint256[],uint256[],uint256[])", "lineno": 42, "title": "Message call to external contract", "type": "Warning"}, {"address": 2079, "code": "bytes4(kec", "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Updater_cpy: 0xff00\ncalldata_Updater_4 + calldata_Updater_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Updater_0: 0x4e53a0b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Updater: 0x4\nmem_128 + 32 + 32*calldata_Updater_4 + calldata_Updater_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/14/0x6692e3a26c0057c16bdfb6ea41bc72c5fcbbc04b.sol", "function": "update(address[],uint256[],uint256[],uint256[])", "lineno": 48, "title": "Exception state", "type": "Informational"}, {"address": 2160, "code": "(uint256)\")),_ETHUSD[i]);\n                emit InfoUpdated(bytes4(kecc", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/14/0x6692e3a26c0057c16bdfb6ea41bc72c5fcbbc04b.sol", "function": "update(address[],uint256[],uint256[],uint256[])", "lineno": 47, "title": "Message call to external contract", "type": "Warning"}, {"address": 2160, "code": "(uint256)\")),_ETHUSD[i]);\n                emit InfoUpdated(bytes4(kecc", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2714\n", "filename": "/unique_chucks/14/0x6692e3a26c0057c16bdfb6ea41bc72c5fcbbc04b.sol", "function": "update(address[],uint256[],uint256[],uint256[])", "lineno": 47, "title": "Multiple Calls", "type": "Information"}, {"address": 2602, "code": "ated(byte", "debug": "The exception is triggered under the following conditions:\n\nmem_128 + 32 + 32*calldata_Updater_4 + calldata_Updater_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Updater_cpy: 0xff00\ncalldata_Updater_4 + calldata_Updater_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Updater_0: 0x4e53a0b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Updater: 0x4\nmem_160 +\n32*calldata_Updater_4 + calldata_Updater_4 +\n32 +\n32*calldata_Updater_4 + calldata_Updater_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/14/0x6692e3a26c0057c16bdfb6ea41bc72c5fcbbc04b.sol", "function": "update(address[],uint256[],uint256[],uint256[])", "lineno": 52, "title": "Exception state", "type": "Informational"}, {"address": 2626, "code": "4(keccak2", "debug": "The exception is triggered under the following conditions:\n\nmem_160 +\n32*calldata_Updater_4 + calldata_Updater_4 +\n32 +\n32*calldata_Updater_4 + calldata_Updater_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 + 32 + 32*calldata_Updater_4 + calldata_Updater_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Updater_cpy: 0xff00\ncalldata_Updater_4 + calldata_Updater_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Updater_0: 0x4e53a0b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Updater: 0x4\nmem_192 +\n32*calldata_Updater_4 + calldata_Updater_4 +\n32*calldata_Updater_4 + calldata_Updater_32 + 4 +\n32 +\n32*calldata_Updater_4 + calldata_Updater_32 + 36: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/14/0x6692e3a26c0057c16bdfb6ea41bc72c5fcbbc04b.sol", "function": "update(address[],uint256[],uint256[],uint256[])", "lineno": 52, "title": "Exception state", "type": "Informational"}, {"address": 2714, "code": "rency(uint256,uint256)\")),_token[i],_value[i]);\n                emit InfoUpdated(bytes4(keccak25", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/14/0x6692e3a26c0057c16bdfb6ea41bc72c5fcbbc04b.sol", "function": "update(address[],uint256[],uint256[],uint256[])", "lineno": 51, "title": "Message call to external contract", "type": "Warning"}, {"address": 3411, "code": "tes[_addr[i]", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Updater_4 + calldata_Updater_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Updater_0: 0xcdc0496100000000000000000000000000000000000000000000000000000000\ncalldatasize_Updater: 0x4\nmem_128 + 32 + 32*calldata_Updater_4 + calldata_Updater_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/14/0x6692e3a26c0057c16bdfb6ea41bc72c5fcbbc04b.sol", "function": "setStates(address[],uint8[],uint8[])", "lineno": 33, "title": "Exception state", "type": "Informational"}, {"address": 3553, "code": "    functio", "debug": "The exception is triggered under the following conditions:\n\nmem_128 + 32 + 32*calldata_Updater_4 + calldata_Updater_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Updater_4 + calldata_Updater_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Updater_0: 0xcdc0496100000000000000000000000000000000000000000000000000000000\ncalldatasize_Updater: 0x4\nmem_160 +\n32*calldata_Updater_4 + calldata_Updater_4 +\n32 +\n32*calldata_Updater_4 + calldata_Updater_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/14/0x6692e3a26c0057c16bdfb6ea41bc72c5fcbbc04b.sol", "function": "setStates(address[],uint8[],uint8[])", "lineno": 37, "title": "Exception state", "type": "Informational"}], "success": true}