{"error": null, "issues": [{"address": 2093, "code": "   for (uint256 i = 0; i < len; i+", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/44/0x6b6dc333bb3e115fe75731ac60737a736b430467.sol", "function": "remainingTokens()", "lineno": 295, "title": "Message call to external contract", "type": "Informational"}, {"address": 2369, "code": ";\n\n// File: c:/ich", "debug": "calldata_crowdsaleContract_4: 0x1000000000000000000000000000000000000000000000000000000\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_crowdsaleContract_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_crowdsaleContract_32 + 4: 0x1000000000000000000000000000000000000000000000000000001\nstorage_0: 0x0\ncaller: 0x0\ncalldata_crowdsaleContract_0: 0x3be64ed700000000000000000000000000000000000000000000000000000000\ncalldatasize_crowdsaleContract: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addPeriod(uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/44/0x6b6dc333bb3e115fe75731ac60737a736b430467.sol", "function": "addPeriod(uint256,uint256,uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3850, "code": " Period[] private periods;\n\n  ERC20 public token;\n  address public wallet;\n  address public tokenWallet;\n  uint256 public weiRaised;\n\n  /**\n   * @dev A purchase was made.\n   * @param _purchaser Who paid for the tokens.\n   * @param _value Total purchase price in weis.\n   * @param _amount Amount of tokens purchased.\n   */\n  event TokensPurchased(address indexed _purchaser, uint256 _value, uint256 _amount);\n\n  /**\n   * @dev Constructor, takes initial parameters.\n   * @param _wallet Address where collected funds will be forwarded to.\n   * @param _token Address of the token being sold.\n   * @param _tokenWallet Address holding the tokens, which has approved allowance to this contract.\n   */\n  function crowdsaleContract (address _wallet, address _token, address _tokenWallet, uint maxToken, address realOwner) public {\n    require(_wallet != address(0));\n    require(_token != address(0));\n    require(_tokenWallet != address(0));\n    transferOwnership(realOwner);\n    wallet = _wallet;\n    token = ERC20(_token);\n    tokenWallet = _tokenWallet;\n    require(token.setCrowdsale(_tokenWallet, maxToken));\n  }\n\n  /**\n   * @dev Send weis, get tokens.\n   */\n  function () external payable {\n    // Preconditions.\n    require(msg.sender != address(0));\n    require(isOpen());\n    uint256 tokenAmount = getTokenAmount(msg.value);\n    if(tokenAmount > remainingTokens()){\n      revert();\n    }\n    weiRaised = weiRaised.add(msg.value);\n\n    token.transferFrom(tokenWallet, msg.sender, tokenAmount);\n    emit TokensPurchased(msg.sender, msg.value, tokenAmount);\n\n    wallet.transfer(msg.value);\n  }\n\n  /**\n   * @dev Add a sale period with its default rate.\n   * @param _startTimestamp Beginning of this sale period.\n   * @param _endTimestamp End of this sale period.\n   * @param _rate Rate at which tokens are sold during this sale period.\n   */\n  function addPeriod(uint256 _startTimestamp, uint256 _endTimestamp, uint256 _rate) onlyOwner public {\n    require(_startTimestamp != 0);\n    require(_endTimestamp > _startTimestamp);\n    require(_rate != 0);\n    Period memory period = Period(_startTimestamp, _endTimestamp, _rate);\n    periods.push(period);\n  }\n\n  /**\n   * @dev Emergency function to clear all sale periods (for example in case the sale is delayed).\n   */\n  function clearPeriods() onlyOwner public {\n    delete periods;\n  }\n\n  /**\n   * @dev True while the sale is open (i.e. accepting contributions). False otherwise.\n   */\n  function isOpen() view public returns (bool) {\n    return ((!paused) && (_getCurrentPeriod().rate != 0));\n  }\n\n  /**\n   * @dev Current rate for the specified purchaser.\n   * @return Custom rate for the purchaser, or current standard rate if no custom rate was whitelisted.\n   */\n  function getCurrentRate() public view returns (uint256 rate) {\n    Period memory currentPeriod = _getCurrentPeriod();\n    require(currentPeriod.rate != 0);\n    rate = currentPeriod.rate;\n  }\n\n  /**\n   * @dev Number of tokens that a specified address would get by sending right now\n   * the specified amount.\n   * @param _weiAmount Value in wei to be converted into tokens.\n   * @return Number of tokens that can be purchased with the specified _weiAmount.\n   */\n  function getTokenAmount(uint256 _weiAmount) public view returns (uint256) {\n    return _weiAmount.mul(getCurrentRate());\n  }\n\n  /**\n   * @dev Checks the amount of tokens left in the allowance.\n   * @return Amount of tokens remaining for sale.\n   */\n  function remainingTokens() public view returns (uint256) {\n    return token.allowance(tokenWallet, this);\n  }\n\n  /*\n   * Internal functions\n   */\n\n  /**\n   * @dev Returns the current period, or null.\n   */\n  function _getCurrentPeriod() view internal returns (Period memory _period) {\n    _period = Period(0, 0, 0);\n    uint256 len = periods.length;\n    for (uint256 i = 0; i < len; i++) {\n      if ((periods[i].startTimestamp <= block.timestamp) && (periods[i].endTimestamp >= block.timestamp)) {\n        _period = periods[i];\n        break;\n      }\n    }\n  }\n\n}\n\n// File: ..\\contracts\\cDep.sol\n\ncontract cDeployer is Ownable {\n\t\n\taddress private main;\n\n\tfunction cMain(address nM) public onlyOwner {\n\t\tmain = nM;\n\t}\n\n\tfunction deployCrowdsale(address _eWallet, address _token, address _tWallet, uint _maxToken, address reqBy) public returns (address) {\n\t\trequire(", "debug": "storage_1: 0xfefeeefeeeffffffffffffffffcc5ffe000001ee94fecc37e3ef3fdfff0000aa\nstorage_0: 0x0\ncaller: 0x0\ncalldata_crowdsaleContract_0: 0xd9bd079900000000000000000000000000000000000000000000000000000000\ncalldatasize_crowdsaleContract: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `clearPeriods()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/44/0x6b6dc333bb3e115fe75731ac60737a736b430467.sol", "function": "clearPeriods()", "lineno": 178, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3862, "code": " Period[] private periods;\n\n  ERC20 public token;\n  address public wallet;\n  address public tokenWallet;\n  uint256 public weiRaised;\n\n  /**\n   * @dev A purchase was made.\n   * @param _purchaser Who paid for the tokens.\n   * @param _value Total purchase price in weis.\n   * @param _amount Amount of tokens purchased.\n   */\n  event TokensPurchased(address indexed _purchaser, uint256 _value, uint256 _amount);\n\n  /**\n   * @dev Constructor, takes initial parameters.\n   * @param _wallet Address where collected funds will be forwarded to.\n   * @param _token Address of the token being sold.\n   * @param _tokenWallet Address holding the tokens, which has approved allowance to this contract.\n   */\n  function crowdsaleContract (address _wallet, address _token, address _tokenWallet, uint maxToken, address realOwner) public {\n    require(_wallet != address(0));\n    require(_token != address(0));\n    require(_tokenWallet != address(0));\n    transferOwnership(realOwner);\n    wallet = _wallet;\n    token = ERC20(_token);\n    tokenWallet = _tokenWallet;\n    require(token.setCrowdsale(_tokenWallet, maxToken));\n  }\n\n  /**\n   * @dev Send weis, get tokens.\n   */\n  function () external payable {\n    // Preconditions.\n    require(msg.sender != address(0));\n    require(isOpen());\n    uint256 tokenAmount = getTokenAmount(msg.value);\n    if(tokenAmount > remainingTokens()){\n      revert();\n    }\n    weiRaised = weiRaised.add(msg.value);\n\n    token.transferFrom(tokenWallet, msg.sender, tokenAmount);\n    emit TokensPurchased(msg.sender, msg.value, tokenAmount);\n\n    wallet.transfer(msg.value);\n  }\n\n  /**\n   * @dev Add a sale period with its default rate.\n   * @param _startTimestamp Beginning of this sale period.\n   * @param _endTimestamp End of this sale period.\n   * @param _rate Rate at which tokens are sold during this sale period.\n   */\n  function addPeriod(uint256 _startTimestamp, uint256 _endTimestamp, uint256 _rate) onlyOwner public {\n    require(_startTimestamp != 0);\n    require(_endTimestamp > _startTimestamp);\n    require(_rate != 0);\n    Period memory period = Period(_startTimestamp, _endTimestamp, _rate);\n    periods.push(period);\n  }\n\n  /**\n   * @dev Emergency function to clear all sale periods (for example in case the sale is delayed).\n   */\n  function clearPeriods() onlyOwner public {\n    delete periods;\n  }\n\n  /**\n   * @dev True while the sale is open (i.e. accepting contributions). False otherwise.\n   */\n  function isOpen() view public returns (bool) {\n    return ((!paused) && (_getCurrentPeriod().rate != 0));\n  }\n\n  /**\n   * @dev Current rate for the specified purchaser.\n   * @return Custom rate for the purchaser, or current standard rate if no custom rate was whitelisted.\n   */\n  function getCurrentRate() public view returns (uint256 rate) {\n    Period memory currentPeriod = _getCurrentPeriod();\n    require(currentPeriod.rate != 0);\n    rate = currentPeriod.rate;\n  }\n\n  /**\n   * @dev Number of tokens that a specified address would get by sending right now\n   * the specified amount.\n   * @param _weiAmount Value in wei to be converted into tokens.\n   * @return Number of tokens that can be purchased with the specified _weiAmount.\n   */\n  function getTokenAmount(uint256 _weiAmount) public view returns (uint256) {\n    return _weiAmount.mul(getCurrentRate());\n  }\n\n  /**\n   * @dev Checks the amount of tokens left in the allowance.\n   * @return Amount of tokens remaining for sale.\n   */\n  function remainingTokens() public view returns (uint256) {\n    return token.allowance(tokenWallet, this);\n  }\n\n  /*\n   * Internal functions\n   */\n\n  /**\n   * @dev Returns the current period, or null.\n   */\n  function _getCurrentPeriod() view internal returns (Period memory _period) {\n    _period = Period(0, 0, 0);\n    uint256 len = periods.length;\n    for (uint256 i = 0; i < len; i++) {\n      if ((periods[i].startTimestamp <= block.timestamp) && (periods[i].endTimestamp >= block.timestamp)) {\n        _period = periods[i];\n        break;\n      }\n    }\n  }\n\n}\n\n// File: ..\\contracts\\cDep.sol\n\ncontract cDeployer is Ownable {\n\t\n\taddress private main;\n\n\tfunction cMain(address nM) public onlyOwner {\n\t\tmain = nM;\n\t}\n\n\tfunction deployCrowdsale(address _eWallet, address _token, address _tWallet, uint _maxToken, address reqBy) public returns (address) {\n\t\trequire(", "debug": "storage_1: 0xa2904ab8959d41101184012020f00401fd586048d601ba836190055d855635dc\nstorage_0: 0x0\ncaller: 0x0\ncalldata_crowdsaleContract_0: 0xd9bd079900000000000000000000000000000000000000000000000000000000\ncalldatasize_crowdsaleContract: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `clearPeriods()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/44/0x6b6dc333bb3e115fe75731ac60737a736b430467.sol", "function": "clearPeriods()", "lineno": 178, "title": "Integer Overflow ", "type": "Warning"}], "success": true}