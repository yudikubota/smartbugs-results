{"error": null, "issues": [{"address": 2972, "code": "tible) end up in the ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x8aefbc7df185694f19fe1da7f499e95069761766.sol", "function": "_function_0x17ffc320", "lineno": 290, "title": "Message call to external contract", "type": "Warning"}, {"address": 2972, "code": "tible) end up in the ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7375\n", "filename": "/unique_contracts/0x8aefbc7df185694f19fe1da7f499e95069761766.sol", "function": "_function_0x17ffc320", "lineno": 290, "title": "Multiple Calls", "type": "Information"}, {"address": 3547, "code": " will prevent any accidental loss of ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x8aefbc7df185694f19fe1da7f499e95069761766.sol", "function": "reclaimContract(address)", "lineno": 270, "title": "Message call to external contract", "type": "Warning"}, {"address": 6082, "code": "of this contract to reclaim ownership", "debug": "", "description": "A possible transaction order independence vulnerability exists in function reclaimEther(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_contracts/0x8aefbc7df185694f19fe1da7f499e95069761766.sol", "function": "reclaimEther()", "lineno": 252, "title": "Transaction order dependence", "type": "Warning"}, {"address": 7375, "code": "om,\n    address to,\n    u", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x8aefbc7df185694f19fe1da7f499e95069761766.sol", "function": "_function_0x17ffc320", "lineno": 99, "title": "Message call to external contract", "type": "Warning"}, {"address": 8406, "code": "/**\n ", "debug": "storage_1: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_WOLFEXToken_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_3: 0x0\ncaller: 0x0\ncalldata_WOLFEXToken_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_WOLFEXToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `mint(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x8aefbc7df185694f19fe1da7f499e95069761766.sol", "function": "mint(address,uint256)", "lineno": 55, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8419, "code": "e ERC20Basic\n ", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nstorage_1: 0x1\ncalldata_WOLFEXToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\ncalldata_WOLFEXToken_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_WOLFEXToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x8aefbc7df185694f19fe1da7f499e95069761766.sol", "function": "mint(address,uint256)", "lineno": 56, "title": "Exception state", "type": "Informational"}], "success": true}