{
  "contract": "0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497",
  "tool": "mythril",
  "start": 1563585289.77824,
  "end": 1563585517.6908627,
  "duration": 227.9126226902008,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2085,
        "code": " a method to only be called by current admin",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Token: 0x4\ncalldata_Token_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "approve(address,uint256)",
        "lineno": 308,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2362,
        "code": " a method to only be called by current admin",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Token: 0x4\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 308,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3844,
        "code": "nagerAddress(address _lockinManager) adminOnly {\n       ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "tokenHolder(uint256)",
        "lineno": 314,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3925,
        "code": "       return true;\n   ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_4: 0x0\nstorage_2: 0x0\nreturndatasize: 0x20\nretval_3844: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0x862a4bf200000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "tokenHolder(uint256)",
        "lineno": 354,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4168,
        "code": "     refundManagerContractAddress = _refundManag",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "setRefundManagerContract(address)",
        "lineno": 319,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4299,
        "code": "PayloadSize(3) returns (bool) {\n        \n        if (availab",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "setRefundManagerContract(address)",
        "lineno": 323,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 4661,
        "code": "r, i);    \n                loc",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 9. This storage slot can be written to by calling the function `setLockinManagerAddress(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "transfer(address,uint256)",
        "lineno": 269,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4661,
        "code": "r, i);    \n                loc",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4937\n",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "transfer(address,uint256)",
        "lineno": 269,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4661,
        "code": "r, i);    \n                loc",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function transfer(address,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "transfer(address,uint256)",
        "lineno": 269,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4937,
        "code": "sub(lockedValue);\n    }\n\n    /* Fired when ",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 9. This storage slot can be written to by calling the function `setLockinManagerAddress(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "transfer(address,uint256)",
        "lineno": 274,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4937,
        "code": "sub(lockedValue);\n    }\n\n    /* Fired when ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4937\nCall at address: 5199\n",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 274,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4937,
        "code": "sub(lockedValue);\n    }\n\n    /* Fired when ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function transfer(address,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "transfer(address,uint256)",
        "lineno": 274,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5199,
        "code": "FundClosed();\n    \n    /* Our transfer ",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 9. This storage slot can be written to by calling the function `setLockinManagerAddress(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 278,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5199,
        "code": "FundClosed();\n    \n    /* Our transfer ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function transferFrom(address,address,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 278,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5409,
        "code": " a method to only be called by current admin",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Token: 0x4\ncalldata_Token_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "transfer(address,uint256)",
        "lineno": 308,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6353,
        "code": "     refundManagerContractAddress = _refundManag",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "setLockinManagerAddress(address)",
        "lineno": 319,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6484,
        "code": "s approval to have been set separately and fo",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "setLockinManagerAddress(address)",
        "lineno": 322,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 6682,
        "code": "nagerAddress(address _lockinManager) adminOnly {\n       ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "tokenHolderCount()",
        "lineno": 314,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 7333,
        "code": " a method to only be called by current admin",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Token: 0x4\ncalldata_Token_0: 0xf0dda65c00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0x58b334f15d7c7e08287b4ae57d11f35e0c2ad497.sol",
        "function": "mintTokens(address,uint256)",
        "lineno": 308,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}