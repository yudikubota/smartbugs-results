{"error": null, "issues": [{"address": 469, "code": "ssage(string newMessage) onlyOwner public {\n        message = newMessage;\n    }\n    \n    function ", "debug": "calldata_publish_text_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_publish_text_0: 0xe9024ff500000000000000000000000000000000000000000000000000000000\ncalldatasize_publish_text: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `modifyMessage(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x0dabb48a78e2216a1caa44839fb433699eb4700d.sol", "function": "modifyMessage(string)", "lineno": 18, "title": "Integer Overflow ", "type": "Warning"}, {"address": 801, "code": "ress);\n        if (forwarderBalance ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x0dabb48a78e2216a1caa44839fb433699eb4700d.sol", "function": "flushERC20(address)", "lineno": 32, "title": "Message call to external contract", "type": "Warning"}, {"address": 801, "code": "ress);\n        if (forwarderBalance ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1073\n", "filename": "/unique_contracts/0x0dabb48a78e2216a1caa44839fb433699eb4700d.sol", "function": "flushERC20(address)", "lineno": 32, "title": "Multiple Calls", "type": "Information"}, {"address": 1073, "code": "alance)) {\n          revert();\n        }\n ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x0dabb48a78e2216a1caa44839fb433699eb4700d.sol", "function": "flushERC20(address)", "lineno": 36, "title": "Message call to external contract", "type": "Warning"}, {"address": 1790, "code": "ntract publish_text {\n    \n    string public message;\n    address public owner;\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor(string initialMessage) public {\n        message = initialMessage;\n        owner = msg.sender;\n    }\n    \n    function modifyMessage(string newMessage) onlyOwner public {\n        message = newMessage;\n    }\n    \n    function flushETH() public onlyOwner {\n        uint my_balance = address(this).balance;\n        if (my_balance > 0){\n            owner.transfer(address(this).balance);\n        }\n    }\n    \n    function flushERC20(address tokenContractAddress) public onlyOwner {\n        ERC20Interface instance = ERC20Interface(tokenContractAddress);\n        address forwarderAddress = address(this);\n        uint forwarderBalance = instance.balanceOf(forwarderAddress);\n        if (forwarderBalance == 0) {\n          return;\n        }\n        if (!instance.transfer(owner, forwarderBalance)) {\n          revert();\n        }\n    }\n}\n\ncontract ERC20Interface {\n    functio", "debug": "calldata_publish_text_4 + calldata_publish_text_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_1: 0x0\ncaller: 0x0\ncalldata_publish_text_0: 0xe9024ff500000000000000000000000000000000000000000000000000000000\ncalldatasize_publish_text: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `modifyMessage(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x0dabb48a78e2216a1caa44839fb433699eb4700d.sol", "function": "modifyMessage(string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1804, "code": "ntract publish_text {\n    \n    string public message;\n    address public owner;\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor(string initialMessage) public {\n        message = initialMessage;\n        owner = msg.sender;\n    }\n    \n    function modifyMessage(string newMessage) onlyOwner public {\n        message = newMessage;\n    }\n    \n    function flushETH() public onlyOwner {\n        uint my_balance = address(this).balance;\n        if (my_balance > 0){\n            owner.transfer(address(this).balance);\n        }\n    }\n    \n    function flushERC20(address tokenContractAddress) public onlyOwner {\n        ERC20Interface instance = ERC20Interface(tokenContractAddress);\n        address forwarderAddress = address(this);\n        uint forwarderBalance = instance.balanceOf(forwarderAddress);\n        if (forwarderBalance == 0) {\n          return;\n        }\n        if (!instance.transfer(owner, forwarderBalance)) {\n          revert();\n        }\n    }\n}\n\ncontract ERC20Interface {\n    functio", "debug": "calldata_publish_text_4 + calldata_publish_text_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_1: 0x0\ncaller: 0x0\ncalldata_publish_text_0: 0xe9024ff500000000000000000000000000000000000000000000000000000000\ncalldatasize_publish_text: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `modifyMessage(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x0dabb48a78e2216a1caa44839fb433699eb4700d.sol", "function": "modifyMessage(string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}