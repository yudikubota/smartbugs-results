{"error": null, "issues": [{"address": 993, "code": "hip(address newOwner) extern", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/21/0xfc3c1c0550188c649f70e78787c8cd9ff9d3b8d4.sol", "function": "withdraw()", "lineno": 68, "title": "Transaction order dependence", "type": "Warning"}, {"address": 1174, "code": "dress(Cubes[", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/21/0xfc3c1c0550188c649f70e78787c8cd9ff9d3b8d4.sol", "function": "_function_0x9bcdd9e8", "lineno": 48, "title": "Message call to external contract", "type": "Warning"}, {"address": 1174, "code": "dress(Cubes[", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1835\nCall at address: 1835\nCall at address: 1688\n", "filename": "/unique_chucks/21/0xfc3c1c0550188c649f70e78787c8cd9ff9d3b8d4.sol", "function": "_function_0x9bcdd9e8", "lineno": 48, "title": "Multiple Calls", "type": "Information"}, {"address": 1246, "code": "1) {\n    ", "debug": "The exception is triggered under the following conditions:\n\nretval_1174: 0x1\nstorage_4: 0x1\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Cubic_0: 0x9bcdd9e800000000000000000000000000000000000000000000000000000000\ncalldatasize_Cubic: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/21/0xfc3c1c0550188c649f70e78787c8cd9ff9d3b8d4.sol", "function": "_function_0x9bcdd9e8", "lineno": 50, "title": "Exception state", "type": "Informational"}, {"address": 1688, "code": "--;        \n\n      ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/21/0xfc3c1c0550188c649f70e78787c8cd9ff9d3b8d4.sol", "function": "_function_0x9bcdd9e8", "lineno": 54, "title": "Message call to external contract", "type": "Informational"}, {"address": 1688, "code": "--;        \n\n      ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function _function_0x9bcdd9e8. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/21/0xfc3c1c0550188c649f70e78787c8cd9ff9d3b8d4.sol", "function": "_function_0x9bcdd9e8", "lineno": 54, "title": "Transaction order dependence", "type": "Warning"}, {"address": 1835, "code": "    Only Owner\n    */", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/21/0xfc3c1c0550188c649f70e78787c8cd9ff9d3b8d4.sol", "function": "_function_0x9bcdd9e8", "lineno": 60, "title": "Message call to external contract", "type": "Warning"}, {"address": 2032, "code": "es;\n\n    /*\n    Eve", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Cubic_4: 0x0\nstorage_4: 0x0\ncalldata_Cubic_0: 0xa584241500000000000000000000000000000000000000000000000000000000\ncalldatasize_Cubic: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/21/0xfc3c1c0550188c649f70e78787c8cd9ff9d3b8d4.sol", "function": "_function_0xa5842415", "lineno": 18, "title": "Exception state", "type": "Informational"}, {"address": 3220, "code": "     ", "debug": "storage_2: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\ncallvalue: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\ncalldata_Cubic_0: 0xf0a3d4fd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Cubic: 0x4\n", "description": "A possible integer overflow exists in the function `freezeAPI(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/21/0xfc3c1c0550188c649f70e78787c8cd9ff9d3b8d4.sol", "function": "freezeAPI(uint256,string)", "lineno": 122, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3233, "code": "> 0);\n        ", "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0xc63a21246c99b000ea0030728005ea6909080a424a47ca48059be3c0ff803205\ncallvalue: 0xd2bd697b67b8b7eebcef8ebaf405ca6a0b728a06c347eda3d5dbebfeffbdb977\ncalldata_Cubic_0: 0xf0a3d4fd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Cubic: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/21/0xfc3c1c0550188c649f70e78787c8cd9ff9d3b8d4.sol", "function": "freezeAPI(uint256,string)", "lineno": 122, "title": "Exception state", "type": "Informational"}, {"address": 3349, "code": "bic {\n\n    uint public creationTime = now;\n    address public owner = msg.sender;\n    uint256 public totalEthHandled = 0; \n    uint public rate = 0; \n    Cube[] public Cubes;\n\n    /*\n    Events\n    */\n\n    event Freeze(address indexed from, address indexed cubeAddress, uint amount, uint unlockedAfter, string api);\n    event Deliver(address indexed cube, address indexed destination, uint amount);\n\n    /*\n    Public/External functions\n    */\n\n    function() payable { }\n\n    function getCubeCount() external constant returns(uint) {\n        return Cubes.length;\n    }\n\n    function freeze(uint blocks) external payable {\n        secure(blocks, 'cubic');\n    }\n\n    function freezeAPI(uint blocks, string api) external payable {\n        secure(blocks, api);\n    }\n\n    function forgetCube(Cube iceCube) external {\n\n        uint id = iceCube.id();\n        require(msg.sender == address(Cubes[id]));\n\n        if (id != Cubes.length - 1) {\n            Cubes[id] = Cubes[Cubes.length - 1];\n            Cubes[id].setId(id);\n        }\n        Cubes.length--;        \n\n        Deliver(address(iceCube), iceCube.destination(), iceCube.balance);\n    }\n\n    /*\n    Only Owner\n    */\n\n    function withdraw() external {\n        require(msg.sender == owner);        \n        owner.transfer(this.balance);\n    }\n\n    function transferOwnership(address newOwner) external {\n        require(msg.sender == owner);        \n        owner = newOwner;\n    }\n\n    /*\n    Private\n    */\n\n\tfunction secure(uint blocks, string api) private {\n\n        require(msg.value > 0);\n        uint amountToFreeze = msg.value; \n        totalEthHandled = add(totalEthHandled, amountToFreeze);\n          \n        /* \n         The rate starts at zero, over time as this \n         contract is trusted the higher the fee \n         becomes with an upward limit of half of one\n         percent (.50%). The owner of the contract CAN NOT \n         adjust this. \n        */\n        if (rate != 200 ) {\n\n            if (totalEthHandled > 5000 ether) {\n                setRate(200);  //.50 of one percent\n            } else if (totalEthHandled > 1000 ether) { \n                setRate(500);  //.20 of one percent\n            } else if (totalEthHandled > 100 ether) { \n                setRate(1000); //.10 of one percent\n            }\n        }\n\n        if (rate > 0) {\n            uint fee = div(amountToFreeze, rate);\n            amountToFreeze = sub(amountToFreeze, fee);\n        }\n\n        Cube newCube = (new Cube).value(amountToFreeze)(msg.sender, add(block.number, blocks), this);\n        newCube.setId(Cubes.push(newCube) - 1);\n        Freeze(msg.sender, address(newCube), amountToFreeze, add(block.number, blocks), api);\n\t}\n\n    function setRate(uint _newRate) private {\n        rate = _newRate; \n    }\n\n    function add(uint a, uint b) private returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function div(uint a, uint b) private returns (uint) {\n        assert(b > 0);\n        uint c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function sub(uint a, uint b) private returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n}\n\ncontract Cube {\n\n    address public destination;\n    Cubic public cubicContract;    \n    uint public unlockedAfter;\n    uint publi", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/21/0xfc3c1c0550188c649f70e78787c8cd9ff9d3b8d4.sol", "function": "_function_0x9bcdd9e8", "lineno": 12, "title": "State change after external call", "type": "Warning"}, {"address": 3370, "code": "bic {\n\n    uint public creationTime = now;\n    address public owner = msg.sender;\n    uint256 public totalEthHandled = 0; \n    uint public rate = 0; \n    Cube[] public Cubes;\n\n    /*\n    Events\n    */\n\n    event Freeze(address indexed from, address indexed cubeAddress, uint amount, uint unlockedAfter, string api);\n    event Deliver(address indexed cube, address indexed destination, uint amount);\n\n    /*\n    Public/External functions\n    */\n\n    function() payable { }\n\n    function getCubeCount() external constant returns(uint) {\n        return Cubes.length;\n    }\n\n    function freeze(uint blocks) external payable {\n        secure(blocks, 'cubic');\n    }\n\n    function freezeAPI(uint blocks, string api) external payable {\n        secure(blocks, api);\n    }\n\n    function forgetCube(Cube iceCube) external {\n\n        uint id = iceCube.id();\n        require(msg.sender == address(Cubes[id]));\n\n        if (id != Cubes.length - 1) {\n            Cubes[id] = Cubes[Cubes.length - 1];\n            Cubes[id].setId(id);\n        }\n        Cubes.length--;        \n\n        Deliver(address(iceCube), iceCube.destination(), iceCube.balance);\n    }\n\n    /*\n    Only Owner\n    */\n\n    function withdraw() external {\n        require(msg.sender == owner);        \n        owner.transfer(this.balance);\n    }\n\n    function transferOwnership(address newOwner) external {\n        require(msg.sender == owner);        \n        owner = newOwner;\n    }\n\n    /*\n    Private\n    */\n\n\tfunction secure(uint blocks, string api) private {\n\n        require(msg.value > 0);\n        uint amountToFreeze = msg.value; \n        totalEthHandled = add(totalEthHandled, amountToFreeze);\n          \n        /* \n         The rate starts at zero, over time as this \n         contract is trusted the higher the fee \n         becomes with an upward limit of half of one\n         percent (.50%). The owner of the contract CAN NOT \n         adjust this. \n        */\n        if (rate != 200 ) {\n\n            if (totalEthHandled > 5000 ether) {\n                setRate(200);  //.50 of one percent\n            } else if (totalEthHandled > 1000 ether) { \n                setRate(500);  //.20 of one percent\n            } else if (totalEthHandled > 100 ether) { \n                setRate(1000); //.10 of one percent\n            }\n        }\n\n        if (rate > 0) {\n            uint fee = div(amountToFreeze, rate);\n            amountToFreeze = sub(amountToFreeze, fee);\n        }\n\n        Cube newCube = (new Cube).value(amountToFreeze)(msg.sender, add(block.number, blocks), this);\n        newCube.setId(Cubes.push(newCube) - 1);\n        Freeze(msg.sender, address(newCube), amountToFreeze, add(block.number, blocks), api);\n\t}\n\n    function setRate(uint _newRate) private {\n        rate = _newRate; \n    }\n\n    function add(uint a, uint b) private returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function div(uint a, uint b) private returns (uint) {\n        assert(b > 0);\n        uint c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function sub(uint a, uint b) private returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n}\n\ncontract Cube {\n\n    address public destination;\n    Cubic public cubicContract;    \n    uint public unlockedAfter;\n    uint publi", "debug": "retval_1174: 0x7fffff83ffffffffffffffffffffffffffffffffffdffffffffffffffffffffe\nstorage_4: 0x7fffff83ffffffffffffffffffffffffffffffffffdfffffffffffffffffffff\nstorage_62514009886607029107290561805838585334079798074568712924583230797734656856475 +\nretval_1174: 0x0\ncaller: 0x0\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Cubic_0: 0x9bcdd9e800000000000000000000000000000000000000000000000000000000\ncalldatasize_Cubic: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x9bcdd9e8`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/21/0xfc3c1c0550188c649f70e78787c8cd9ff9d3b8d4.sol", "function": "_function_0x9bcdd9e8", "lineno": 12, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3372, "code": "bic {\n\n    uint public creationTime = now;\n    address public owner = msg.sender;\n    uint256 public totalEthHandled = 0; \n    uint public rate = 0; \n    Cube[] public Cubes;\n\n    /*\n    Events\n    */\n\n    event Freeze(address indexed from, address indexed cubeAddress, uint amount, uint unlockedAfter, string api);\n    event Deliver(address indexed cube, address indexed destination, uint amount);\n\n    /*\n    Public/External functions\n    */\n\n    function() payable { }\n\n    function getCubeCount() external constant returns(uint) {\n        return Cubes.length;\n    }\n\n    function freeze(uint blocks) external payable {\n        secure(blocks, 'cubic');\n    }\n\n    function freezeAPI(uint blocks, string api) external payable {\n        secure(blocks, api);\n    }\n\n    function forgetCube(Cube iceCube) external {\n\n        uint id = iceCube.id();\n        require(msg.sender == address(Cubes[id]));\n\n        if (id != Cubes.length - 1) {\n            Cubes[id] = Cubes[Cubes.length - 1];\n            Cubes[id].setId(id);\n        }\n        Cubes.length--;        \n\n        Deliver(address(iceCube), iceCube.destination(), iceCube.balance);\n    }\n\n    /*\n    Only Owner\n    */\n\n    function withdraw() external {\n        require(msg.sender == owner);        \n        owner.transfer(this.balance);\n    }\n\n    function transferOwnership(address newOwner) external {\n        require(msg.sender == owner);        \n        owner = newOwner;\n    }\n\n    /*\n    Private\n    */\n\n\tfunction secure(uint blocks, string api) private {\n\n        require(msg.value > 0);\n        uint amountToFreeze = msg.value; \n        totalEthHandled = add(totalEthHandled, amountToFreeze);\n          \n        /* \n         The rate starts at zero, over time as this \n         contract is trusted the higher the fee \n         becomes with an upward limit of half of one\n         percent (.50%). The owner of the contract CAN NOT \n         adjust this. \n        */\n        if (rate != 200 ) {\n\n            if (totalEthHandled > 5000 ether) {\n                setRate(200);  //.50 of one percent\n            } else if (totalEthHandled > 1000 ether) { \n                setRate(500);  //.20 of one percent\n            } else if (totalEthHandled > 100 ether) { \n                setRate(1000); //.10 of one percent\n            }\n        }\n\n        if (rate > 0) {\n            uint fee = div(amountToFreeze, rate);\n            amountToFreeze = sub(amountToFreeze, fee);\n        }\n\n        Cube newCube = (new Cube).value(amountToFreeze)(msg.sender, add(block.number, blocks), this);\n        newCube.setId(Cubes.push(newCube) - 1);\n        Freeze(msg.sender, address(newCube), amountToFreeze, add(block.number, blocks), api);\n\t}\n\n    function setRate(uint _newRate) private {\n        rate = _newRate; \n    }\n\n    function add(uint a, uint b) private returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function div(uint a, uint b) private returns (uint) {\n        assert(b > 0);\n        uint c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function sub(uint a, uint b) private returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n}\n\ncontract Cube {\n\n    address public destination;\n    Cubic public cubicContract;    \n    uint public unlockedAfter;\n    uint publi", "debug": "retval_1174: 0x7fffffffffffffffffffffffff3fffffffffffffeffffffffffffffffffffffe\nstorage_4: 0x7fffffffffffffffffffffffff3fffffffffffffefffffffffffffffffffffff\nstorage_62514009886607029107290561805838585334079798074568712924583230797734656856475 +\nretval_1174: 0x0\ncaller: 0x0\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Cubic_0: 0x9bcdd9e800000000000000000000000000000000000000000000000000000000\ncalldatasize_Cubic: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x9bcdd9e8`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/21/0xfc3c1c0550188c649f70e78787c8cd9ff9d3b8d4.sol", "function": "_function_0x9bcdd9e8", "lineno": 12, "title": "Integer Overflow ", "type": "Warning"}], "success": true}