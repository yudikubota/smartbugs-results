{
  "contract": "0xcca36039cfdd0753d3aa9f1b4bf35b606c8ed971",
  "tool": "mythril",
  "start": 1563508739.3441792,
  "end": 1563508841.612122,
  "duration": 102.26794290542603,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 477,
        "code": "g blocklimit\n    for (uint8 i = 0; i < _day.length; i++){\n      require(dayFinished(_day[i]));\n      uint256 amountToAdd = getTokensOwed(msg.sender, _day[i]);\n      amount = amount.add(amountToAdd);\n      delete day[_day[i]].weiContributed[msg.sender];\n      emit LogTokensCollected(msg.sender, amountToAdd, _day[i]);\n    }\n    mybToken.transfer(msg.sender, amount);\n    return true;\n  }\n\n  // @notice owner can withdraw funds to the foundation wallet and ddf wallet\n  // @param (uint) _amount, The amount of wei to withdraw\n  // @dev must put in an _amount equa",
        "debug": "calldata_TokenSale_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenSale_0: 0x132e8bee00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSale: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `batchWithdraw(uint16[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0xcca36039cfdd0753d3aa9f1b4bf35b606c8ed971.sol",
        "function": "batchWithdraw(uint16[])",
        "lineno": 166,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 547,
        "code": " to avoid exceeding blocklimit\n    require(msg.value >= _day.length);   // need at least 1 wei per day\n    uint256 amountPerDay = msg.value.div(_day.length);\n    assert (amountPerDay.mul(_day.length) == msg.value);   // Don't allow any rounding error\n    for (uint8 i = 0; i < _day.length; i++){\n      require(addContribution(msg.sender, amountPerDay, _day[i]));\n    }\n    return true;\n  }\n\n\n  // @notice Updates claimableTokens, sends all wei to the token holder\n  function withdraw(uint16 _day)\n  external\n  returns (bool) {\n     ",
        "debug": "calldata_TokenSale_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenSale_0: 0x1ca8995300000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSale: 0x4\n",
        "description": "A possible integer overflow exists in the function `batchFund(uint16[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0xcca36039cfdd0753d3aa9f1b4bf35b606c8ed971.sol",
        "function": "batchFund(uint16[])",
        "lineno": 136,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 662,
        "code": "16 i = 0; i < _days.length; i++){\n      amount = amount.add(getTokensOwed(_contributor, _days[i]));\n    }\n    return amount;\n  }\n\n  // @notice returns the amount of wei contributed by _contributor on _day\n  function getWeiContributed(uint16 _day, address _contributor)\n  public\n  view\n  returns (uint256) {\n    return day[_day].weiContributed[_contributor];\n ",
        "debug": "calldata_TokenSale_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenSale_0: 0x1ea6b97f00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSale: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getTotalTokensOwed(address,uint16[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0xcca36039cfdd0753d3aa9f1b4bf35b606c8ed971.sol",
        "function": "getTotalTokensOwed(address,uint16[])",
        "lineno": 228,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3191,
        "code": "sg.sender, mybitFoundation, developmentFund, saleAmount, _ti",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/5/0xcca36039cfdd0753d3aa9f1b4bf35b606c8ed971.sol",
        "function": "startSale(uint256)",
        "lineno": 115,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3264,
        "code": ";\n    return true;",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/5/0xcca36039cfdd0753d3aa9f1b4bf35b606c8ed971.sol",
        "function": "startSale(uint256)",
        "lineno": 115,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 4197,
        "code": "ount of wei to withdraw\n  // @dev mus",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/5/0xcca36039cfdd0753d3aa9f1b4bf35b606c8ed971.sol",
        "function": "batchWithdraw(uint16[])",
        "lineno": 179,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6488,
        "code": "Subtr",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenSale_0: 0x1ca8995300000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSale: 0x4\ncalldata_TokenSale_4 + calldata_TokenSale_4: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/5/0xcca36039cfdd0753d3aa9f1b4bf35b606c8ed971.sol",
        "function": "batchFund(uint16[])",
        "lineno": 29,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}