{
  "contract": "0xe066145a0d20b09835111b40667aa6c498eb1911",
  "tool": "mythril",
  "start": 1563638815.4593675,
  "end": 1563638846.0206752,
  "duration": 30.561307668685913,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2281,
        "code": "/\n  function mul(uint a, uint b) internal pur",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function dumpdivs(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/28/0xe066145a0d20b09835111b40667aa6c498eb1911.sol",
        "function": "dumpdivs()",
        "lineno": 404,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3526,
        "code": ".transfer(owner, contractBalance",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/28/0xe066145a0d20b09835111b40667aa6c498eb1911.sol",
        "function": "ownerSetBankroll(address)",
        "lineno": 382,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3526,
        "code": ".transfer(owner, contractBalance",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3880\n",
        "filename": "/unique_chucks/28/0xe066145a0d20b09835111b40667aa6c498eb1911.sol",
        "function": "ownerSetBankroll(address)",
        "lineno": 382,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3647,
        "code": "selfdestruct(owner);\n  }\n  ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/28/0xe066145a0d20b09835111b40667aa6c498eb1911.sol",
        "function": "ownerSetBankroll(address)",
        "lineno": 383,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3880,
        "code": "tion dumpdivs() public{\n      ZethrB",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/28/0xe066145a0d20b09835111b40667aa6c498eb1911.sol",
        "function": "ownerSetBankroll(address)",
        "lineno": 386,
        "title": "Message call to external contract",
        "type": "Informational"
      }
    ],
    "success": true
  }
}