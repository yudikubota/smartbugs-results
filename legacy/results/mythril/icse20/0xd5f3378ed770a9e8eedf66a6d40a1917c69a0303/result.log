{"error": null, "issues": [{"address": 136, "code": "end(address _tokenAddr, address[] memory _to, uint256[] memory _value) public\n    returns (bool _success) {\n        assert(_to.length == _value.length);\n        assert(_to.length <= 150);\n                // loop through to addresses and send value\n        for (uint8 i = 0; i < _to.length; i++) {\n            assert((ERC20Interface(_tokenAddr).transferFrom(msg.sender, _to[i], _value[i])) == true);\n        }\n        return true;\n    }\n}", "debug": "calldata_ERC20Interface_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20Interface_0: 0xad8733ca00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Interface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `multisend(address,address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0xd5f3378ed770a9e8eedf66a6d40a1917c69a0303.sol", "function": "multisend(address,address[],uint256[])", "lineno": 16, "title": "Integer Overflow ", "type": "Warning"}, {"address": 310, "code": " == _value.length);\n        assert(", "debug": "The exception is triggered under the following conditions:\n\nmem_128 +\n32 +\n32*\ncalldata_ERC20Interface_4 + calldata_ERC20Interface_32 + 4: 0x0\ncalldata_ERC20Interface_4 + calldata_ERC20Interface_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20Interface_0: 0xad8733ca00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Interface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/12/0xd5f3378ed770a9e8eedf66a6d40a1917c69a0303.sol", "function": "multisend(address,address[],uint256[])", "lineno": 18, "title": "Exception state", "type": "Informational"}, {"address": 324, "code": "<= 150);\n                ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC20Interface_4 + calldata_ERC20Interface_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_ERC20Interface_0: 0xad8733ca00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Interface: 0x4\nmem_128 +\n32 +\n32*\ncalldata_ERC20Interface_4 + calldata_ERC20Interface_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/12/0xd5f3378ed770a9e8eedf66a6d40a1917c69a0303.sol", "function": "multisend(address,address[],uint256[])", "lineno": 19, "title": "Exception state", "type": "Informational"}, {"address": 616, "code": "Addr).transferFrom(msg.sender, _to[i], _value[i])) == true);\n        }", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/12/0xd5f3378ed770a9e8eedf66a6d40a1917c69a0303.sol", "function": "multisend(address,address[],uint256[])", "lineno": 22, "title": "Message call to external contract", "type": "Warning"}, {"address": 616, "code": "Addr).transferFrom(msg.sender, _to[i], _value[i])) == true);\n        }", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 616\n", "filename": "/unique_chucks/12/0xd5f3378ed770a9e8eedf66a6d40a1917c69a0303.sol", "function": "multisend(address,address[],uint256[])", "lineno": 22, "title": "Multiple Calls", "type": "Information"}, {"address": 682, "code": "e(_tokenAddr).transferFrom(msg.sender, _to[i], _value[i])) == true);\n        }\n        r", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC20Interface_4 + calldata_ERC20Interface_32 + 4: 0x10\nreturndatasize: 0x20\nretval_616: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20Interface_0: 0xad8733ca00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Interface: 0x4\nmem_160 +\n32*\ncalldata_ERC20Interface_4 + calldata_ERC20Interface_32 + 4 +\n32 +\n32*\ncalldata_ERC20Interface_4 + calldata_ERC20Interface_32 + 36: 0x0\nmem_128 +\n32 +\n32*\ncalldata_ERC20Interface_4 + calldata_ERC20Interface_32 + 4: 0x10\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/12/0xd5f3378ed770a9e8eedf66a6d40a1917c69a0303.sol", "function": "multisend(address,address[],uint256[])", "lineno": 22, "title": "Exception state", "type": "Informational"}], "success": true}