{"error": null, "issues": [{"address": 900, "code": "iginator\n", "debug": "", "description": "Function mixGenes(uint256,uint256,uint256) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "filename": "/unique_chucks/36/0xb77feddb7e627a78140a2a32cac65a49ed1dba8e.sol", "function": "mixGenes(uint256,uint256,uint256)", "lineno": 122, "title": "Use of tx.origin", "type": "Warning"}, {"address": 2051, "code": "/// @param _gen", "debug": "The exception is triggered under the following conditions:\n\ncalldata_KittyCoreInterface_4 + calldata_KittyCoreInterface_4: 0x0\ncalldata_KittyCoreInterface_0: 0x1597ee4400000000000000000000000000000000000000000000000000000000\ncalldatasize_KittyCoreInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/36/0xb77feddb7e627a78140a2a32cac65a49ed1dba8e.sol", "function": "encode(uint8[])", "lineno": 110, "title": "Exception state", "type": "Informational"}, {"address": 2489, "code": "     _privilegedBirther", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/36/0xb77feddb7e627a78140a2a32cac65a49ed1dba8e.sol", "function": "setPrivilegedBirther(address)", "lineno": 31, "title": "Message call to external contract", "type": "Informational"}, {"address": 2666, "code": "ddress;\n    }\n\n    /// @dev given a ", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/36/0xb77feddb7e627a78140a2a32cac65a49ed1dba8e.sol", "function": "setPrivilegedBirther(address)", "lineno": 31, "title": "State change after external call", "type": "Warning"}], "success": true}