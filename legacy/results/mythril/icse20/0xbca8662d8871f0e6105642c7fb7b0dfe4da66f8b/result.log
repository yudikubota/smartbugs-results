{"error": null, "issues": [{"address": 194, "code": "ss tokenAddr, address[] dests, uint256[] balances) public ifNotPaused {\n        for (uint i = 0; i < dests.length; i++) {\n            ERC20Token(tokenAddr).transferFrom(msg.sender, dests[i], balances[i]);\n        }\n    }\n}", "debug": "calldata_FutureEdgeAirdrop_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_FutureEdgeAirdrop_0: 0x7da5efc800000000000000000000000000000000000000000000000000000000\ncalldatasize_FutureEdgeAirdrop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `drop(address,address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/23/0xbca8662d8871f0e6105642c7fb7b0dfe4da66f8b.sol", "function": "drop(address,address[],uint256[])", "lineno": 20, "title": "Integer Overflow ", "type": "Warning"}, {"address": 456, "code": " }\n    }\n}", "debug": "The exception is triggered under the following conditions:\n\ncalldata_FutureEdgeAirdrop_4 + calldata_FutureEdgeAirdrop_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncalldata_FutureEdgeAirdrop_0: 0x7da5efc800000000000000000000000000000000000000000000000000000000\ncalldatasize_FutureEdgeAirdrop: 0x4\nmem_128 +\n32 +\n32*\ncalldata_FutureEdgeAirdrop_4 + calldata_FutureEdgeAirdrop_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/23/0xbca8662d8871f0e6105642c7fb7b0dfe4da66f8b.sol", "function": "drop(address,address[],uint256[])", "lineno": 23, "title": "Exception state", "type": "Informational"}, {"address": 654, "code": ".transferFrom(msg.sender, dests[i], balances[i]);\n        }\n    }\n}", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/23/0xbca8662d8871f0e6105642c7fb7b0dfe4da66f8b.sol", "function": "drop(address,address[],uint256[])", "lineno": 22, "title": "Message call to external contract", "type": "Warning"}, {"address": 654, "code": ".transferFrom(msg.sender, dests[i], balances[i]);\n        }\n    }\n}", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 654\n", "filename": "/unique_chucks/23/0xbca8662d8871f0e6105642c7fb7b0dfe4da66f8b.sol", "function": "drop(address,address[],uint256[])", "lineno": 22, "title": "Multiple Calls", "type": "Information"}], "success": true}