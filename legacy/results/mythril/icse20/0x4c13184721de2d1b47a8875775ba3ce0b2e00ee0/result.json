{
  "contract": "0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0",
  "tool": "mythril",
  "start": 1563495917.0671144,
  "end": 1563496512.7946134,
  "duration": 595.7274990081787,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 507,
        "code": "   // If the user exists and has a",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_2535: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_SharkPool: 0x3\nstorage_3: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/6/0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol",
        "function": "fallback",
        "lineno": 245,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 537,
        "code": "t_period;\n               al",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_2535: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_SharkPool: 0x3\nstorage_3: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/6/0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol",
        "function": "fallback",
        "lineno": 249,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 573,
        "code": " function mine() external n",
        "debug": "The exception is triggered under the following conditions:\n\nreturndatasize: 0x20\nretval_2535: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_SharkPool: 0x3\nstorage_3: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/6/0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol",
        "function": "fallback",
        "lineno": 258,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 582,
        "code": "  }\n\n    \n    // Proxy mining to token\n   function mine() external n",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/6/0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol",
        "function": "fallback",
        "lineno": 254,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 603,
        "code": "     uint256 _blockNum = external_to_in",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/6/0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol",
        "function": "fallback",
        "lineno": 261,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 618,
        "code": "number(current_external_block());\n     require(!base_co",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/6/0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol",
        "function": "fallback",
        "lineno": 261,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2535,
        "code": "\n\n         // Did the user already c",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/6/0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol",
        "function": "calculate_minimum_contribution()",
        "lineno": 228,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2535,
        "code": "\n\n         // Did the user already c",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3211\nCall at address: 3211\nCall at address: 2953\nCall at address: 3211\nCall at address: 3211\nCall at address: 2953\n",
        "filename": "/unique_chucks/6/0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol",
        "function": "fallback",
        "lineno": 228,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2953,
        "code": "urns (bool) {\n      return base_contract",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/6/0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol",
        "function": "fallback",
        "lineno": 334,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2953,
        "code": "urns (bool) {\n      return base_contract",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3211\n",
        "filename": "/unique_chucks/6/0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol",
        "function": "fallback",
        "lineno": 334,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3211,
        "code": "lockNum, _sender);\n   }\n   \n   function check",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/6/0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol",
        "function": "fallback",
        "lineno": 335,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3336,
        "code": "t256 _blockNum) constant",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/6/0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol",
        "function": "fallback",
        "lineno": 338,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3618,
        "code": "6 _externalBlockNum) public c",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/6/0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol",
        "function": "fallback",
        "lineno": 169,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3676,
        "code": "int256) {\n        // blockCr",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/6/0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol",
        "function": "fallback",
        "lineno": 169,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 4096,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/6/0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol",
        "function": "checkMiningAttempt(uint256,address)",
        "lineno": 342,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 7644,
        "code": "n max_users - total_users;\n        } ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\ncalldata_SharkPool_0: 0x99f4b25100000000000000000000000000000000000000000000000000000000\ncalldatasize_SharkPool: 0x4\nstorage_6: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/6/0x4c13184721de2d1b47a8875775ba3ce0b2e00ee0.sol",
        "function": "mine()",
        "lineno": 176,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}