{"error": null, "issues": [{"address": 907, "code": "ansfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n\t\trequire(now>=lock[msg.sender]);\n\t\trequire(!freezeIn[_to]);\n\t\trequire(!freezeOut[msg.sender]);\n\t\t\n    \treturn super.transfer(_to, _value);\n\t}\n\n\t", "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0x3d72402700000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x3d724027`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x94d6b3f49a7c720fca2c6d703497872db9f0ae9b.sol", "function": "_function_0x3d724027", "lineno": 240, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1200, "code": "ss=>uint) public lock;\n\t\n\tevent Lock(address[] indexed addrs, uint[] times);\n\t\n\tfunction setLock(address[] addrs, uint[] times) public onlyOwner {\n\t\trequire(addrs.length==times.length);", "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0x40fe90d000000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setFreezeOut(address[],bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x94d6b3f49a7c720fca2c6d703497872db9f0ae9b.sol", "function": "setFreezeOut(address[],bool)", "lineno": 225, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7970, "code": "a);\n ", "debug": "calldata_Token_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_1: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_7: 0x0\nstorage_3: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `mint(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x94d6b3f49a7c720fca2c6d703497872db9f0ae9b.sol", "function": "mint(address,uint256)", "lineno": 26, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7983, "code": "rn c;\n\t}\n}\n\nco", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x1\ncalldata_Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x0\nstorage_3: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/13/0x94d6b3f49a7c720fca2c6d703497872db9f0ae9b.sol", "function": "mint(address,uint256)", "lineno": 27, "title": "Exception state", "type": "Informational"}, {"address": 10401, "code": " \treturn a - b", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncalldata_Token_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/13/0x94d6b3f49a7c720fca2c6d703497872db9f0ae9b.sol", "function": "burn(uint256)", "lineno": 21, "title": "Exception state", "type": "Informational"}], "success": true}