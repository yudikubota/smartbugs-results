{"error": null, "issues": [{"address": 889, "code": "wner);\n    }\n\n", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_contracts/0x435ad5cae6ea3e065ce540464366b71fba8f0c52.sol", "function": "setOwner(address)", "lineno": 39, "title": "State change after external call", "type": "Warning"}, {"address": 1030, "code": "        bool ret ", "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x0\nstorage_2: 0x0\ncalldata_PriceFeed_0: 0x57de26a400000000000000000000000000000000000000000000000000000000\ncalldatasize_PriceFeed: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x435ad5cae6ea3e065ce540464366b71fba8f0c52.sol", "function": "read()", "lineno": 186, "title": "Exception state", "type": "Informational"}, {"address": 1667, "code": "d sender, address feed);\n    mapping(a", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x435ad5cae6ea3e065ce540464366b71fba8f0c52.sol", "function": "post(uint128,uint32,address)", "lineno": 198, "title": "Message call to external contract", "type": "Warning"}, {"address": 1667, "code": "d sender, address feed);\n    mapping(a", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_contracts/0x435ad5cae6ea3e065ce540464366b71fba8f0c52.sol", "function": "post(uint128,uint32,address)", "lineno": 198, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 2834, "code": " DSNote {\n    event LogNote(\n    ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x435ad5cae6ea3e065ce540464366b71fba8f0c52.sol", "function": "void()", "lineno": 68, "title": "Message call to external contract", "type": "Informational"}, {"address": 2834, "code": " DSNote {\n    event LogNote(\n    ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1667\n", "filename": "/unique_contracts/0x435ad5cae6ea3e065ce540464366b71fba8f0c52.sol", "function": "post(uint128,uint32,address)", "lineno": 68, "title": "Multiple Calls", "type": "Information"}, {"address": 2834, "code": " DSNote {\n    event LogNote(\n    ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function void(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_contracts/0x435ad5cae6ea3e065ce540464366b71fba8f0c52.sol", "function": "void()", "lineno": 68, "title": "Transaction order dependence", "type": "Warning"}], "success": true}