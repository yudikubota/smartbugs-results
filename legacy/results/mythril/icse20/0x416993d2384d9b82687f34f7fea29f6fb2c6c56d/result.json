{
  "contract": "0x416993d2384d9b82687f34f7fea29f6fb2c6c56d",
  "tool": "mythril",
  "start": 1563419325.7744493,
  "end": 1563419414.6985655,
  "duration": 88.92411613464355,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 687,
        "code": "e);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexe",
        "debug": "storage_2: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_WhiteList_0: 0xb2f5a54c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteList: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getInvestors()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x416993d2384d9b82687f34f7fea29f6fb2c6c56d.sol",
        "function": "getInvestors()",
        "lineno": 730,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 774,
        "code": "  }\n        }\n        contracts.length -= 1;\n    } else {\n        for (uint j=0; j<investors.length - 1; j++) {\n            if (investors[j] == addr) {\n                investors[j] = investors[investors.length - 1];\n                break;\n            }\n        }\n        investors.length -= 1;\n    }\n    whiteListed[addr] = false;\n    WhiteListed(addr, f",
        "debug": "calldata_WhiteList_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_WhiteList_0: 0xb3621e1a00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteList: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x416993d2384d9b82687f34f7fea29f6fb2c6c56d.sol",
        "function": "addAddress(address[])",
        "lineno": 675,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 897,
        "code": "r);\n    event RequirementChange(uint required);\n\n    /*\n     *  Constants\n     */\n    uin",
        "debug": "storage_3: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_WhiteList_0: 0xc3a2a93a00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteList: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getContracts()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x416993d2384d9b82687f34f7fea29f6fb2c6c56d.sol",
        "function": "getContracts()",
        "lineno": 732,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1122,
        "code": "       if(isContract(addrs",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_WhiteList_4: 0x0\nstorage_2: 0x0\ncalldata_WhiteList_0: 0x3feb5f2b00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteList: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x416993d2384d9b82687f34f7fea29f6fb2c6c56d.sol",
        "function": "_function_0x3feb5f2b",
        "lineno": 643,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1184,
        "code": "{\n            contracts.pu",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_WhiteList_4: 0x0\nstorage_3: 0x0\ncalldata_WhiteList_0: 0x474da79a00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteList: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x416993d2384d9b82687f34f7fea29f6fb2c6c56d.sol",
        "function": "_function_0x474da79a",
        "lineno": 643,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1442,
        "code": "_addr` is a contract",
        "debug": "storage_3: 0x0\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WhiteList_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WhiteList_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WhiteList_0: 0x4ba79dfe00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteList: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `removeAddress(address)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_contracts/0x416993d2384d9b82687f34f7fea29f6fb2c6c56d.sol",
        "function": "removeAddress(address)",
        "lineno": 693,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 1486,
        "code": "ress _addr) ",
        "debug": "The exception is triggered under the following conditions:\n\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WhiteList_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WhiteList_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WhiteList_0: 0x4ba79dfe00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteList: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x416993d2384d9b82687f34f7fea29f6fb2c6c56d.sol",
        "function": "removeAddress(address)",
        "lineno": 694,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1773,
        "code": "getInvestors() publi",
        "debug": "storage_2: 0x0\ncalldata_WhiteList_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WhiteList_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WhiteList_0: 0x4ba79dfe00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteList: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `removeAddress(address)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_contracts/0x416993d2384d9b82687f34f7fea29f6fb2c6c56d.sol",
        "function": "removeAddress(address)",
        "lineno": 705,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 1817,
        "code": "s[]) {\n    r",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_WhiteList_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WhiteList_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WhiteList_0: 0x4ba79dfe00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteList: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x416993d2384d9b82687f34f7fea29f6fb2c6c56d.sol",
        "function": "removeAddress(address)",
        "lineno": 705,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2458,
        "code": "Removal(address ",
        "debug": "storage_2: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_WhiteList_0: 0xb2f5a54c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteList: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getInvestors()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x416993d2384d9b82687f34f7fea29f6fb2c6c56d.sol",
        "function": "getInvestors()",
        "lineno": 732,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2460,
        "code": "Removal(address ",
        "debug": "storage_2: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_WhiteList_0: 0xb2f5a54c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteList: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getInvestors()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x416993d2384d9b82687f34f7fea29f6fb2c6c56d.sol",
        "function": "getInvestors()",
        "lineno": 732,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3459,
        "code": "stants\n     */\n ",
        "debug": "storage_3: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_WhiteList_0: 0xc3a2a93a00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteList: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getContracts()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x416993d2384d9b82687f34f7fea29f6fb2c6c56d.sol",
        "function": "getContracts()",
        "lineno": 736,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3461,
        "code": "stants\n     */\n ",
        "debug": "storage_3: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_WhiteList_0: 0xc3a2a93a00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteList: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getContracts()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x416993d2384d9b82687f34f7fea29f6fb2c6c56d.sol",
        "function": "getContracts()",
        "lineno": 736,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4016,
        "code": "nction WhiteList(address[] addrs) public {\n    for (uint i=0; i<addrs.length; i++) {\n        if(isContract(addrs[i])){\n            contracts.push(addrs[i]);\n        } else {\n            investors.push(addrs[i]);\n        }\n        if (whiteListed[addrs[i]] || addrs[i] == 0) {\n            revert();\n        }\n        whiteListed[addrs[i]] = true;\n    }\n\n  }\n\n  function addAddress(address[] addrs) public onlyOwner areNotWhiteListed(addrs) {\n    for (uint i=0; i<addrs.length; i++) {\n        whiteListed[addrs[i]] = true;\n        if(isContract(addrs[i])){\n            contracts.push(addrs[i]);\n        } else {\n            investors.push(addrs[i]);\n        }\n        WhiteListed(addrs[i], true);\n    }\n  }\n\n  function removeAddress(address addr) public onlyOwner {\n    require(whiteListed[addr]);\n    if (isContract(addr)) {\n        for (uint i=0; i<contracts.length - 1; i++) {\n            if (contracts[i] == addr) {\n                contracts[i] = contracts[contracts.length - 1];\n                break;\n            }\n        }\n        contracts.length -= 1;\n    } else {\n        for (uint j=0; j<investors.length - 1; j++) {\n            if (investors[j] == addr) {\n                investors[j] = investors[investors.length - 1];\n                break;\n            }\n        }\n        investors.length -= 1;\n    }\n    whiteListed[addr] = false;\n    WhiteListed(addr, false);\n  }\n\n  /// @dev Internal function to determine if an address is a contract\n  /// @param _addr The address being queried\n  /// @return True if `_addr` is a contract\n  function isContract(address _addr) constant internal returns(bool) {\n    uint size;\n    if (_addr == 0) return false;\n    assembly {\n        size := extcodesize(_addr)\n    }\n    return size>0;\n  }\n\n\n  // web3 function call\n  function getInvestors() public constant returns (address[]) {\n    return investors;\n  }\n\n  function getContracts() public constant returns (address[]) {\n    return contracts;\n  }\n\n  function isWhiteListed(address addr) public constant returns (bool) {\n    return whiteListed[addr];\n  }\n\n}\n\n\ncontract MultiSigWallet {\n\n    /*\n     *  Events\n     */\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n\n    /*\n     *  Constants\n     */\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    /*\n     *  Storage\n     */\n    mapping (uint => Transaction) public tra",
        "debug": "storage_3: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe2000\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083: 0xffffffffffffffffffffffffffffffffffffffff00\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WhiteList_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WhiteList_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WhiteList_0: 0x4ba79dfe00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteList: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `removeAddress(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x416993d2384d9b82687f34f7fea29f6fb2c6c56d.sol",
        "function": "removeAddress(address)",
        "lineno": 641,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4018,
        "code": "nction WhiteList(address[] addrs) public {\n    for (uint i=0; i<addrs.length; i++) {\n        if(isContract(addrs[i])){\n            contracts.push(addrs[i]);\n        } else {\n            investors.push(addrs[i]);\n        }\n        if (whiteListed[addrs[i]] || addrs[i] == 0) {\n            revert();\n        }\n        whiteListed[addrs[i]] = true;\n    }\n\n  }\n\n  function addAddress(address[] addrs) public onlyOwner areNotWhiteListed(addrs) {\n    for (uint i=0; i<addrs.length; i++) {\n        whiteListed[addrs[i]] = true;\n        if(isContract(addrs[i])){\n            contracts.push(addrs[i]);\n        } else {\n            investors.push(addrs[i]);\n        }\n        WhiteListed(addrs[i], true);\n    }\n  }\n\n  function removeAddress(address addr) public onlyOwner {\n    require(whiteListed[addr]);\n    if (isContract(addr)) {\n        for (uint i=0; i<contracts.length - 1; i++) {\n            if (contracts[i] == addr) {\n                contracts[i] = contracts[contracts.length - 1];\n                break;\n            }\n        }\n        contracts.length -= 1;\n    } else {\n        for (uint j=0; j<investors.length - 1; j++) {\n            if (investors[j] == addr) {\n                investors[j] = investors[investors.length - 1];\n                break;\n            }\n        }\n        investors.length -= 1;\n    }\n    whiteListed[addr] = false;\n    WhiteListed(addr, false);\n  }\n\n  /// @dev Internal function to determine if an address is a contract\n  /// @param _addr The address being queried\n  /// @return True if `_addr` is a contract\n  function isContract(address _addr) constant internal returns(bool) {\n    uint size;\n    if (_addr == 0) return false;\n    assembly {\n        size := extcodesize(_addr)\n    }\n    return size>0;\n  }\n\n\n  // web3 function call\n  function getInvestors() public constant returns (address[]) {\n    return investors;\n  }\n\n  function getContracts() public constant returns (address[]) {\n    return contracts;\n  }\n\n  function isWhiteListed(address addr) public constant returns (bool) {\n    return whiteListed[addr];\n  }\n\n}\n\n\ncontract MultiSigWallet {\n\n    /*\n     *  Events\n     */\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n\n    /*\n     *  Constants\n     */\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    /*\n     *  Storage\n     */\n    mapping (uint => Transaction) public tra",
        "debug": "storage_3: 0x7ffff9f100000000000000000000000000000000000000000000000000000000\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083: 0xffffffffffffffffffffffffffffffffffffffff00\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WhiteList_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WhiteList_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WhiteList_0: 0x4ba79dfe00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteList: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `removeAddress(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x416993d2384d9b82687f34f7fea29f6fb2c6c56d.sol",
        "function": "removeAddress(address)",
        "lineno": 641,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}