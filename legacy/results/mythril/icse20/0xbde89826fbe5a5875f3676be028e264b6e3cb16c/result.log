{"error": null, "issues": [{"address": 700, "code": "ess _token, string _name, uint _decimals, uint _rate, uint _buyoffer) public {\n\t   if (msg.sender == owner) {\n\t     active[_token] = false;\n\t\t tkname[_token] = _name;\n         decimals[_token] = _decimals;\n\t\t rate[_token] = _rate; //with 9 decimal places\n\t\t buyoffer[_token] = _buyoffer;\t//with 18 decimal places\t \n\t   }\n\t}\n\t\n\tfunction enableToken(address _t", "debug": "calldata_token_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_token_0: 0x717868ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerToken(address,string,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0xbde89826fbe5a5875f3676be028e264b6e3cb16c.sol", "function": "registerToken(address,string,uint256,uint256,uint256)", "lineno": 28, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2289, "code": "\n       uint tokenAmount = swapToken.allowance", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/20/0xbde89826fbe5a5875f3676be028e264b6e3cb16c.sol", "function": "exchangeIt(address)", "lineno": 53, "title": "Message call to external contract", "type": "Warning"}, {"address": 2289, "code": "\n       uint tokenAmount = swapToken.allowance", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3544\nCall at address: 3152\nCall at address: 2567\n", "filename": "/unique_chucks/20/0xbde89826fbe5a5875f3676be028e264b6e3cb16c.sol", "function": "exchangeIt(address)", "lineno": 53, "title": "Multiple Calls", "type": "Information"}, {"address": 2567, "code": "  uint amount = (tokenAmount/(10**decimals[_to", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/20/0xbde89826fbe5a5875f3676be028e264b6e3cb16c.sol", "function": "exchangeIt(address)", "lineno": 55, "title": "Message call to external contract", "type": "Warning"}, {"address": 2567, "code": "  uint amount = (tokenAmount/(10**decimals[_to", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3544\nCall at address: 3152\n", "filename": "/unique_chucks/20/0xbde89826fbe5a5875f3676be028e264b6e3cb16c.sol", "function": "exchangeIt(address)", "lineno": 55, "title": "Multiple Calls", "type": "Information"}, {"address": 2770, "code": "n];\n\t   require(amount <= buyoffer", "debug": "The exception is triggered under the following conditions:\n\nretval_2567: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_2289: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_token_4: 0xff00\ncalldata_token_0: 0x4b364d7600000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\n10_EXP_storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_token_4: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/20/0xbde89826fbe5a5875f3676be028e264b6e3cb16c.sol", "function": "exchangeIt(address)", "lineno": 55, "title": "Exception state", "type": "Informational"}, {"address": 3152, "code": "act Funds');\n       swapToken.transf", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/20/0xbde89826fbe5a5875f3676be028e264b6e3cb16c.sol", "function": "exchangeIt(address)", "lineno": 57, "title": "Message call to external contract", "type": "Informational"}, {"address": 3152, "code": "act Funds');\n       swapToken.transf", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3544\n", "filename": "/unique_chucks/20/0xbde89826fbe5a5875f3676be028e264b6e3cb16c.sol", "function": "exchangeIt(address)", "lineno": 57, "title": "Multiple Calls", "type": "Information"}, {"address": 3544, "code": "ount);\n\t   buyoffer[_token] = buyoffer[_token]-amount;\n\t   tok", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/20/0xbde89826fbe5a5875f3676be028e264b6e3cb16c.sol", "function": "exchangeIt(address)", "lineno": 58, "title": "Message call to external contract", "type": "Warning"}, {"address": 3697, "code": "d.transfer(msg.sender, amount);\n       swa", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/20/0xbde89826fbe5a5875f3676be028e264b6e3cb16c.sol", "function": "exchangeIt(address)", "lineno": 60, "title": "State change after external call", "type": "Warning"}, {"address": 5403, "code": "againstTokenTransfer {\n    mapping(address => bool) public active;\n    mapping(address => string) public tkname;\n    mapping(address => uint) public decimals;\n\tmapping(address => uint) public rate; //9 decimal places\n\tmapping(address => uint) public buyoffer; //in AGAINST\n\ttoken tokenReward = token(0xF7Be133620a7D944595683cE2B14156591EFe609);\n\t\n\t\n    string public name = \"AGAINST GR\";\n    string public symbol = \"AGAINST\";\n    string public comment = \"AGAINST Graveyard Tokens\";\n    address internal owner;\n\t\n\tconstructor() public {\n       owner = address(msg.sender); \n    }\n\t\n\tfunction registerToken(address _token, string _name, uint _decimals, uint _rate, uint _buyoffer) public {\n\t   if (msg.sender == owner) {\n\t     active[_token] = false;\n\t\t tkname[_token] = _name;\n         decimals[_token] = _decimals;\n\t\t rate[_token] = _rate; //with 9 decimal places\n\t\t buyoffer[_token] = _buyoffer;\t//with 18 decimal places\t \n\t   }\n\t}\n\t\n\tfunction enableToken(address _token) public {\n\t   if (msg.sender == owner) {\n\t      active[_token] = true;\n\t   }\n\t}\t\n\t\n\tfunction disableToken(address _token) public {\n\t   if (msg.sender == owner) {\n\t      active[_token] = false;\n\t   }\n\t}\n\t\n\tfunction exchangeIt(address _token) public payable {\n\t   require(active[_token],'Token Disabled');\n       token swapToken = token(_token);\n       require(swapToken.allowance(msg.sender, address(this)) > 0);\n       uint tokenAmount = swapToken.allowance(msg.sender, address(this));\n       uint amount = (tokenAmount/(10**decimals[_token]))*(10**9)*rate[_token];\n\t   require(amount <= buyoffer[_token],'Too many coins');\n       require(tokenReward.balanceOf(address(this)) >= amount,'No contract Funds');\n       swapToken.transferFrom(msg.sender, address(this), tokenAmount);\n\t   buyoffer[_token] = buyoffer[_token]-amount;\n\t   tokenReward.transfer(msg.sender, amount);\n       swapToken.transfer(owner, tokenAmount);\n\t}\n\t\n}", "debug": "keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_token_4: 0xfe9659011001f8793364331d4369f7b7ca9def0c2c95cd735dcb0b1c3e833003\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_token_4: 0xe65faf4feb7571ab161eefd68581d1e0648333cbb57b9dc36adcf7efaeef00c1\nstorage_9: 0x0\ncaller: 0x0\ncalldata_token_0: 0x717868ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerToken(address,string,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0xbde89826fbe5a5875f3676be028e264b6e3cb16c.sol", "function": "registerToken(address,string,uint256,uint256,uint256)", "lineno": 10, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5432, "code": "againstTokenTransfer {\n    mapping(address => bool) public active;\n    mapping(address => string) public tkname;\n    mapping(address => uint) public decimals;\n\tmapping(address => uint) public rate; //9 decimal places\n\tmapping(address => uint) public buyoffer; //in AGAINST\n\ttoken tokenReward = token(0xF7Be133620a7D944595683cE2B14156591EFe609);\n\t\n\t\n    string public name = \"AGAINST GR\";\n    string public symbol = \"AGAINST\";\n    string public comment = \"AGAINST Graveyard Tokens\";\n    address internal owner;\n\t\n\tconstructor() public {\n       owner = address(msg.sender); \n    }\n\t\n\tfunction registerToken(address _token, string _name, uint _decimals, uint _rate, uint _buyoffer) public {\n\t   if (msg.sender == owner) {\n\t     active[_token] = false;\n\t\t tkname[_token] = _name;\n         decimals[_token] = _decimals;\n\t\t rate[_token] = _rate; //with 9 decimal places\n\t\t buyoffer[_token] = _buyoffer;\t//with 18 decimal places\t \n\t   }\n\t}\n\t\n\tfunction enableToken(address _token) public {\n\t   if (msg.sender == owner) {\n\t      active[_token] = true;\n\t   }\n\t}\t\n\t\n\tfunction disableToken(address _token) public {\n\t   if (msg.sender == owner) {\n\t      active[_token] = false;\n\t   }\n\t}\n\t\n\tfunction exchangeIt(address _token) public payable {\n\t   require(active[_token],'Token Disabled');\n       token swapToken = token(_token);\n       require(swapToken.allowance(msg.sender, address(this)) > 0);\n       uint tokenAmount = swapToken.allowance(msg.sender, address(this));\n       uint amount = (tokenAmount/(10**decimals[_token]))*(10**9)*rate[_token];\n\t   require(amount <= buyoffer[_token],'Too many coins');\n       require(tokenReward.balanceOf(address(this)) >= amount,'No contract Funds');\n       swapToken.transferFrom(msg.sender, address(this), tokenAmount);\n\t   buyoffer[_token] = buyoffer[_token]-amount;\n\t   tokenReward.transfer(msg.sender, amount);\n       swapToken.transfer(owner, tokenAmount);\n\t}\n\t\n}", "debug": "calldata_token_4 + calldata_token_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_9: 0x0\ncaller: 0x0\ncalldata_token_0: 0x717868ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerToken(address,string,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0xbde89826fbe5a5875f3676be028e264b6e3cb16c.sol", "function": "registerToken(address,string,uint256,uint256,uint256)", "lineno": 10, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5446, "code": "againstTokenTransfer {\n    mapping(address => bool) public active;\n    mapping(address => string) public tkname;\n    mapping(address => uint) public decimals;\n\tmapping(address => uint) public rate; //9 decimal places\n\tmapping(address => uint) public buyoffer; //in AGAINST\n\ttoken tokenReward = token(0xF7Be133620a7D944595683cE2B14156591EFe609);\n\t\n\t\n    string public name = \"AGAINST GR\";\n    string public symbol = \"AGAINST\";\n    string public comment = \"AGAINST Graveyard Tokens\";\n    address internal owner;\n\t\n\tconstructor() public {\n       owner = address(msg.sender); \n    }\n\t\n\tfunction registerToken(address _token, string _name, uint _decimals, uint _rate, uint _buyoffer) public {\n\t   if (msg.sender == owner) {\n\t     active[_token] = false;\n\t\t tkname[_token] = _name;\n         decimals[_token] = _decimals;\n\t\t rate[_token] = _rate; //with 9 decimal places\n\t\t buyoffer[_token] = _buyoffer;\t//with 18 decimal places\t \n\t   }\n\t}\n\t\n\tfunction enableToken(address _token) public {\n\t   if (msg.sender == owner) {\n\t      active[_token] = true;\n\t   }\n\t}\t\n\t\n\tfunction disableToken(address _token) public {\n\t   if (msg.sender == owner) {\n\t      active[_token] = false;\n\t   }\n\t}\n\t\n\tfunction exchangeIt(address _token) public payable {\n\t   require(active[_token],'Token Disabled');\n       token swapToken = token(_token);\n       require(swapToken.allowance(msg.sender, address(this)) > 0);\n       uint tokenAmount = swapToken.allowance(msg.sender, address(this));\n       uint amount = (tokenAmount/(10**decimals[_token]))*(10**9)*rate[_token];\n\t   require(amount <= buyoffer[_token],'Too many coins');\n       require(tokenReward.balanceOf(address(this)) >= amount,'No contract Funds');\n       swapToken.transferFrom(msg.sender, address(this), tokenAmount);\n\t   buyoffer[_token] = buyoffer[_token]-amount;\n\t   tokenReward.transfer(msg.sender, amount);\n       swapToken.transfer(owner, tokenAmount);\n\t}\n\t\n}", "debug": "calldata_token_4 + calldata_token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_9: 0x0\ncaller: 0x0\ncalldata_token_0: 0x717868ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerToken(address,string,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0xbde89826fbe5a5875f3676be028e264b6e3cb16c.sol", "function": "registerToken(address,string,uint256,uint256,uint256)", "lineno": 10, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5468, "code": "againstTokenTransfer {\n    mapping(address => bool) public active;\n    mapping(address => string) public tkname;\n    mapping(address => uint) public decimals;\n\tmapping(address => uint) public rate; //9 decimal places\n\tmapping(address => uint) public buyoffer; //in AGAINST\n\ttoken tokenReward = token(0xF7Be133620a7D944595683cE2B14156591EFe609);\n\t\n\t\n    string public name = \"AGAINST GR\";\n    string public symbol = \"AGAINST\";\n    string public comment = \"AGAINST Graveyard Tokens\";\n    address internal owner;\n\t\n\tconstructor() public {\n       owner = address(msg.sender); \n    }\n\t\n\tfunction registerToken(address _token, string _name, uint _decimals, uint _rate, uint _buyoffer) public {\n\t   if (msg.sender == owner) {\n\t     active[_token] = false;\n\t\t tkname[_token] = _name;\n         decimals[_token] = _decimals;\n\t\t rate[_token] = _rate; //with 9 decimal places\n\t\t buyoffer[_token] = _buyoffer;\t//with 18 decimal places\t \n\t   }\n\t}\n\t\n\tfunction enableToken(address _token) public {\n\t   if (msg.sender == owner) {\n\t      active[_token] = true;\n\t   }\n\t}\t\n\t\n\tfunction disableToken(address _token) public {\n\t   if (msg.sender == owner) {\n\t      active[_token] = false;\n\t   }\n\t}\n\t\n\tfunction exchangeIt(address _token) public payable {\n\t   require(active[_token],'Token Disabled');\n       token swapToken = token(_token);\n       require(swapToken.allowance(msg.sender, address(this)) > 0);\n       uint tokenAmount = swapToken.allowance(msg.sender, address(this));\n       uint amount = (tokenAmount/(10**decimals[_token]))*(10**9)*rate[_token];\n\t   require(amount <= buyoffer[_token],'Too many coins');\n       require(tokenReward.balanceOf(address(this)) >= amount,'No contract Funds');\n       swapToken.transferFrom(msg.sender, address(this), tokenAmount);\n\t   buyoffer[_token] = buyoffer[_token]-amount;\n\t   tokenReward.transfer(msg.sender, amount);\n       swapToken.transfer(owner, tokenAmount);\n\t}\n\t\n}", "debug": "keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_token_4 + calldata_token_32 + 4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\nstorage_9: 0x0\ncaller: 0x0\ncalldata_token_0: 0x717868ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerToken(address,string,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0xbde89826fbe5a5875f3676be028e264b6e3cb16c.sol", "function": "registerToken(address,string,uint256,uint256,uint256)", "lineno": 10, "title": "Integer Overflow ", "type": "Warning"}], "success": true}