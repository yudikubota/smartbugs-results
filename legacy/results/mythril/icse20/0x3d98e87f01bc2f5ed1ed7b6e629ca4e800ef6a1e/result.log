{"error": null, "issues": [{"address": 429, "code": " RegistryInterface registry = RegistryInterface(coord.getContract(\"REGISTRY\")); \n        require(registry.isProviderInitiated(address(this)), \"Provider not intiialized\");\n\n        registry.initiateProviderCurve(endpoint, curve, address(this));\n        curves[endpoint] = newToken(bytes32ToString(endpoint), bytes32ToString(symbol));\n        curves_list.push(endpoint);        \n        registry.setProviderParameter(endpoint, toBytes(curves[endpoint]));\n        \n        DotTokenCreated(curves[endpoint]);\n        return curves[endpoint];\n    }\n\n    //whether this contract holds tokens or coming from msg.sender,etc\n    function bond(bytes32 endpoint, uint numDots) public  {\n\n        require( status == ContestStatus.Initialized, \" contest not live\"); \n\n        bondage = BondageInterface(coord.getContract(\"BONDAGE\"));\n        ui", "debug": "calldata_ZapCoordinatorInterface_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZapCoordinatorInterface_0: 0x6af065000000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `initializeCurve(bytes32,bytes32,int256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "initializeCurve(bytes32,bytes32,int256[])", "lineno": 279, "title": "Integer Overflow ", "type": "Warning"}, {"address": 620, "code": "blic curves_list; // array ", "debug": "The exception is triggered under the following conditions:\n\nstorage_11: 0x8000\ncalldata_ZapCoordinatorInterface_0: 0x200d2ed200000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "_function_0x200d2ed2", "lineno": 172, "title": "Exception state", "type": "Informational"}, {"address": 698, "code": "egistryInterface registry = RegistryInterface(coord.getContract(\"REGISTRY\")); \n        return bytesToAddr(registry.getProviderParameter(address(this), endpoint));\n    }\n\n    // https://ethereum.stackexchange.com/questions/884/how-to-convert-an-address-to-bytes-in-solidity\n    function ", "debug": "calldata_ZapCoordinatorInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZapCoordinatorInterface_0: 0x4629ffea00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `newToken(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "newToken(string,string)", "lineno": 379, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1329, "debug": "calldata_ZapCoordinatorInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZapCoordinatorInterface_0: 0x5ef6228c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x5ef6228c`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "_function_0x5ef6228c", "lineno": 407, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3357, "code": "bol));\n        curves_list.pu", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "initializeCurve(bytes32,bytes32,int256[])", "lineno": 283, "title": "Message call to external contract", "type": "Informational"}, {"address": 3357, "code": "bol));\n        curves_list.pu", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3992\nCall at address: 3992\nCall at address: 3992\nCall at address: 3992\nCall at address: 3992\nCall at address: 3573\n", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "initializeCurve(bytes32,bytes32,int256[])", "lineno": 283, "title": "Multiple Calls", "type": "Information"}, {"address": 3573, "code": "\n        registry.setProviderParameter(endp", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "initializeCurve(bytes32,bytes32,int256[])", "lineno": 284, "title": "Message call to external contract", "type": "Warning"}, {"address": 3573, "code": "\n        registry.setProviderParameter(endp", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3992\nCall at address: 3992\nCall at address: 3992\nCall at address: 3992\nCall at address: 3992\n", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "initializeCurve(bytes32,bytes32,int256[])", "lineno": 284, "title": "Multiple Calls", "type": "Information"}, {"address": 3917, "code": "\n        DotTokenCreated(curves[endpoint]);\n        return cur", "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_32 + 36: 0x800000000000000000000000000000000000000000000000000000000000000\nmem_128 +\n32 +\n32*\ncalldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_3573: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_3357: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_ZapCoordinatorInterface_4: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x6af065000000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `initializeCurve(bytes32,bytes32,int256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "initializeCurve(bytes32,bytes32,int256[])", "lineno": 286, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3992, "code": "\n        DotTokenCreated(curves[endpoint]);\n        return cur", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "initializeCurve(bytes32,bytes32,int256[])", "lineno": 286, "title": "Message call to external contract", "type": "Warning"}, {"address": 4805, "code": "st[i] != winner) {\n           ", "debug": "The exception is triggered under the following conditions:\n\nstorage_11: 0x8000\ncalldata_ZapCoordinatorInterface_0: 0x11da60b400000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "settle()", "lineno": 238, "title": "Exception state", "type": "Informational"}, {"address": 5120, "code": "  \n                if( dots ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "settle()", "lineno": 239, "title": "Message call to external contract", "type": "Informational"}, {"address": 5120, "code": "  \n                if( dots ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6376\nCall at address: 6125\nCall at address: 6376\nCall at address: 6125\nCall at address: 6125\nCall at address: 5535\nCall at address: 6125\nCall at address: 5843\nCall at address: 5535\n", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "settle()", "lineno": 239, "title": "Multiple Calls", "type": "Information"}, {"address": 5239, "code": "ess(this), curves_list[i]);  \n                if( dots >", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "settle()", "lineno": 239, "title": "State change after external call", "type": "Warning"}, {"address": 5535, "code": " many winning dots    \n        uint256 numWin =  bon", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "settle()", "lineno": 246, "title": "Message call to external contract", "type": "Informational"}, {"address": 5535, "code": " many winning dots    \n        uint256 numWin =  bon", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6125\nCall at address: 5843\n", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "settle()", "lineno": 246, "title": "Multiple Calls", "type": "Information"}, {"address": 5843, "code": "deemable value of each dot token\n        winValue =", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "settle()", "lineno": 248, "title": "Message call to external contract", "type": "Informational"}, {"address": 6125, "code": "\n\n\n    //TODO ensure all has been redeemed o", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "settle()", "lineno": 252, "title": "Message call to external contract", "type": "Informational"}, {"address": 6125, "code": "\n\n\n    //TODO ensure all has been redeemed o", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6376\n", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "settle()", "lineno": 252, "title": "Multiple Calls", "type": "Information"}, {"address": 6376, "code": "e(msg.sender == oracle);\n        requ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "settle()", "lineno": 257, "title": "Message call to external contract", "type": "Informational"}, {"address": 6447, "code": "     require(msg.sender == oracle);\n        require(statu", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "settle()", "lineno": 257, "title": "State change after external call", "type": "Warning"}, {"address": 6483, "code": "tStatus.Settled || status == C", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "settle()", "lineno": 258, "title": "State change after external call", "type": "Warning"}, {"address": 6705, "code": "      winner = end", "debug": "storage_7: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nblock_number: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x43d726d600000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `close()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "close()", "lineno": 226, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7118, "code": "/ https://ethereum.stackexchange.", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "newToken(string,string)", "lineno": 383, "title": "Message call to external contract", "type": "Informational"}, {"address": 7240, "code": "rrentCost = CurrentCostInterface(coor", "debug": "The exception is triggered under the following conditions:\n\nstorage_11: 0x8000\ncalldata_ZapCoordinatorInterface_0: 0x4d8de4fc00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "unbond(bytes32,uint256)", "lineno": 324, "title": "Exception state", "type": "Informational"}, {"address": 7603, "code": "Cost = currentCost._costOfND", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "unbond(bytes32,uint256)", "lineno": 326, "title": "Message call to external contract", "type": "Informational"}, {"address": 7603, "code": "Cost = currentCost._costOfND", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7931\n", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "unbond(bytes32,uint256)", "lineno": 326, "title": "Multiple Calls", "type": "Information"}, {"address": 7722, "code": " send \n        uint reserveCost = currentCost._costOfNDo", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "unbond(bytes32,uint256)", "lineno": 325, "title": "State change after external call", "type": "Warning"}, {"address": 7931, "code": "t, issued + 1 - numDots, numDots - 1);\n\n      ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "unbond(bytes32,uint256)", "lineno": 326, "title": "Message call to external contract", "type": "Informational"}, {"address": 7931, "code": "t, issued + 1 - numDots, numDots - 1);\n\n      ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 8207\n", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "unbond(bytes32,uint256)", "lineno": 326, "title": "Multiple Calls", "type": "Information"}, {"address": 8207, "code": " FactoryTokenInterface(curves[endpoint]);\n\n   ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "unbond(bytes32,uint256)", "lineno": 328, "title": "Message call to external contract", "type": "Informational"}, {"address": 11672, "code": "\n        uint256 numReserve = cost.", "debug": "The exception is triggered under the following conditions:\n\nstorage_11: 0x8000\ncalldata_ZapCoordinatorInterface_0: 0x51f9321500000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "bond(bytes32,uint256)", "lineno": 299, "title": "Exception state", "type": "Informational"}, {"address": 11987, "code": "\n\n        require(\n         ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "bond(bytes32,uint256)", "lineno": 300, "title": "Message call to external contract", "type": "Informational"}, {"address": 11987, "code": "\n\n        require(\n         ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 12570\nCall at address: 12315\n", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "bond(bytes32,uint256)", "lineno": 300, "title": "Multiple Calls", "type": "Information"}, {"address": 12106, "code": ", issued + 1, numDots - 1);\n\n        require(\n          ", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "bond(bytes32,uint256)", "lineno": 300, "title": "State change after external call", "type": "Warning"}, {"address": 12315, "code": "msg.sender, address(this), numReserve),\n      ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "bond(bytes32,uint256)", "lineno": 303, "title": "Message call to external contract", "type": "Informational"}, {"address": 12315, "code": "msg.sender, address(this), numReserve),\n      ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 12570\n", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "bond(bytes32,uint256)", "lineno": 303, "title": "Multiple Calls", "type": "Information"}, {"address": 12570, "code": "er\"\n        );\n\n        reserveTo", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "bond(bytes32,uint256)", "lineno": 304, "title": "Message call to external contract", "type": "Informational"}, {"address": 14517, "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x5ef6228c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `_function_0x5ef6228c`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "_function_0x5ef6228c", "lineno": 407, "title": "Integer Underflow", "type": "Warning"}, {"address": 14526, "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x5ef6228c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x5ef6228c`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "_function_0x5ef6228c", "lineno": 407, "title": "Integer Overflow ", "type": "Warning"}, {"address": 14686, "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0x1\ncalldata_ZapCoordinatorInterface_0: 0x5ef6228c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `_function_0x5ef6228c`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "_function_0x5ef6228c", "lineno": 407, "title": "Integer Underflow", "type": "Warning"}, {"address": 15211, "code": "e(uint8(uint(x) / (2**(8*(19 ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0x3d98e87f01bc2f5ed1ed7b6e629ca4e800ef6a1e.sol", "function": "getTokenAddress(bytes32)", "lineno": 387, "title": "Message call to external contract", "type": "Informational"}], "success": true}