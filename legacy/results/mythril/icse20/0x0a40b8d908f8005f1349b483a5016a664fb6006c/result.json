{
  "contract": "0x0a40b8d908f8005f1349b483a5016a664fb6006c",
  "tool": "mythril",
  "start": 1563219821.3655643,
  "end": 1563219876.7369695,
  "duration": 55.37140512466431,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1041,
        "code": "rUser);\n        require(tokenContrac",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x0a40b8d908f8005f1349b483a5016a664fb6006c.sol",
        "function": "withdrawAirdropTokens()",
        "lineno": 57,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1041,
        "code": "rUser);\n        require(tokenContrac",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2086\nCall at address: 2086\nCall at address: 1338\n",
        "filename": "/unique_contracts/0x0a40b8d908f8005f1349b483a5016a664fb6006c.sol",
        "function": "withdrawAirdropTokens()",
        "lineno": 57,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1338,
        "code": "\n        require(!airdroppedUs",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x0a40b8d908f8005f1349b483a5016a664fb6006c.sol",
        "function": "withdrawAirdropTokens()",
        "lineno": 58,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1338,
        "code": "\n        require(!airdroppedUs",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2086\nCall at address: 2086\n",
        "filename": "/unique_contracts/0x0a40b8d908f8005f1349b483a5016a664fb6006c.sol",
        "function": "withdrawAirdropTokens()",
        "lineno": 58,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1507,
        "code": "dUsers[msg.sender]  = true;\n        aird",
        "debug": "retval_1041: 0xff8f9de3fdfbfeffffffffffffff083f8d0500000000000000300dfd40002000\nstorage_2: 0x7fc0000125f9fdff8e3effffffff07ff8d0000000000000000200dfc18802401\nstorage_3: 0xeaf00000098300404020f000000078a0011f010344fffffffff84003beffb7fe\nretval_1338: 0xffe00000000000ff8e4f7fffffff07ff9c100000000000000000077d59941aa7\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_YeekAirdropper_0: 0x490359200000000000000000000000000000000000000000000000000000000\ncalldatasize_YeekAirdropper: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `withdrawAirdropTokens()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x0a40b8d908f8005f1349b483a5016a664fb6006c.sol",
        "function": "withdrawAirdropTokens()",
        "lineno": 63,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1513,
        "code": "dUsers[msg.sender]  = true;\n        aird",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_contracts/0x0a40b8d908f8005f1349b483a5016a664fb6006c.sol",
        "function": "withdrawAirdropTokens()",
        "lineno": 63,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 1601,
        "code": ".length++;\n        airdropRecipient",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_contracts/0x0a40b8d908f8005f1349b483a5016a664fb6006c.sol",
        "function": "withdrawAirdropTokens()",
        "lineno": 64,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 1612,
        "code": "cipients.length - 1]= msg.",
        "debug": "retval_1041: 0xa6d779ebd430bf7776fd3f8e781d0000000000000000000000000001ffffff03\nstorage_2: 0x40090404024a0400010000100042000002000000000000a8040000a200801025\nretval_1338: 0x9ff05ff2cd07a0fdbb7ffffffffdfbfffdffc000000000558371fe5ee073ce1e\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_YeekAirdropper_0: 0x490359200000000000000000000000000000000000000000000000000000000\ncalldatasize_YeekAirdropper: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `withdrawAirdropTokens()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x0a40b8d908f8005f1349b483a5016a664fb6006c.sol",
        "function": "withdrawAirdropTokens()",
        "lineno": 65,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1646,
        "code": "     \n        emit Dispensed(msg.sender, number",
        "debug": "The exception is triggered under the following conditions:\n\nretval_1041: 0xfffffffffdfffffffffffc000200000000000000000000000000000000000000\nstorage_2: 0x7fffffffffffffffeffffc000400000000000000000000000000000000000001\nretval_1338: 0xffffffffffffffffeffffc000400000000000000200000000000000000000000\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_YeekAirdropper_0: 0x490359200000000000000000000000000000000000000000000000000000000\ncalldatasize_YeekAirdropper: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x0a40b8d908f8005f1349b483a5016a664fb6006c.sol",
        "function": "withdrawAirdropTokens()",
        "lineno": 66,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1718,
        "code": "     \n        emit Dispensed(msg.sender, numberOfTokensPerU",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_contracts/0x0a40b8d908f8005f1349b483a5016a664fb6006c.sol",
        "function": "withdrawAirdropTokens()",
        "lineno": 66,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2086,
        "code": ");\n    }\n\n    //How many tokens are remaining to be airdropped\n    f",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x0a40b8d908f8005f1349b483a5016a664fb6006c.sol",
        "function": "withdrawAirdropTokens()",
        "lineno": 68,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2202,
        "code": "\n    event Dispensed(address index",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_YeekAirdropper_4: 0x0\nstorage_5: 0x0\ncalldata_YeekAirdropper_0: 0x646304a100000000000000000000000000000000000000000000000000000000\ncalldatasize_YeekAirdropper: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x0a40b8d908f8005f1349b483a5016a664fb6006c.sol",
        "function": "_function_0x646304a1",
        "lineno": 36,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2716,
        "code": "to suicide and send any accidentally",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x0a40b8d908f8005f1349b483a5016a664fb6006c.sol",
        "function": "tokensRemaining()",
        "lineno": 76,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2801,
        "code": " IStandardToken public tokenContract;  // the token being sold\n    address public owner;\n    uint256 public numberOfTokensPerUser;\n    uint256 public tokensDispensed;\n    mapping(address => bool) public airdroppedUsers;\n    address[] public airdropRecipients;\n    event Dispensed(address indexed buyer, uint256 amount);\n    \n    //Constructs an Airdropper for a given token contract\n    constructor(IStandardToken _tokenContract, uint256 _numTokensPerUser) public {\n        owner = msg.sender;\n        tokenContract = _tokenContract;\n        numberOfTokensPerUser = _numTokensPerUser * 10 ** tokenContract.decimals();\n    }\n\n    //Gets # of people that have already withdrawn their airdrop tokens\n    //In a web3.js client, airdropRecipients.length is not available \n    //so we need to get the count this way. Any iteration over the \n    //airdropRecipients array will be done in JS so as not to waste gas\n    function airdropRecipientCount() public view returns(uint) {\n        return airdropRecipients.length;\n    }\n\n    //Transfers numberOfTokensPerUser from owner to msg.sender\n    //if sufficient remaining tokens exist\n    function withdrawAirdropTokens() public  {\n        require(tokenContract.allowance(owner, this) >= numberOfTokensPerUser);\n        require(tokenContract.balanceOf(owner) >= numberOfTokensPerUser);\n        require(!airdroppedUsers[msg.sender]);  //Each address may only receive the airdrop one time\n        \n        tokensDispensed += numberOfTokensPerUser;\n\n        airdroppedUsers[msg.sender]  = true;\n        airdropRecipients.length++;\n        airdropRecipients[airdropRecipients.length - 1]= msg.sender;\n        \n        emit Dispensed(msg.sender, numberOfTokensPerUser);\n        tokenContract.transferFrom(owner, msg.sender, numberOfTokensPerUser);\n    }\n\n    //How many tokens are remaining to be airdropped\n    function tokensRemaining() public view returns (uint256) {\n        return tokenContract.allowance(owner, this);\n    }\n\n    //Causes this contract to suicide and send any accidentally \n    //acquired ether to its owner.\n    function endAirdrop() public {\n        require(msg.sender == owner);\n        selfdestruct(msg.sender); //If any ethereum has been accidentally sent to the contract, withdraw it \n    }\n}",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_contracts/0x0a40b8d908f8005f1349b483a5016a664fb6006c.sol",
        "function": "withdrawAirdropTokens()",
        "lineno": 31,
        "title": "State change after external call",
        "type": "Warning"
      }
    ],
    "success": true
  }
}