{
  "contract": "0xc03b0dbd201ee426d907e367f996706cf53b8028",
  "tool": "mythril",
  "start": 1563592619.9103281,
  "end": 1563592804.3762925,
  "duration": 184.46596431732178,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 211,
        "debug": "storage_61447924794525943241219752634016909528789496122934506717441295333319263915910: 0xabbbba16031002938fe00000042002220000000000000004831597db2eaec3f1\ncallvalue: 0xa888869bd79fe234002000001de001520000000000000000b051254aa0813bf1\ncalldata_HODLerParadise_0: 0x5a00000000000000000000000000000000000000000000000000000000\ncalldatasize_HODLerParadise: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0xc03b0dbd201ee426d907e367f996706cf53b8028.sol",
        "function": "fallback",
        "lineno": 144,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 519,
        "code": "// not even owner can touch these, that would be unfair!\n        require(keccak256(name) != keccak256(\"last_hodler\"));\n        require(keccak256(name) != keccak256(\"price_pool\"));\n\n        parameters[name] = value;\n        \n        check_parameters_sanity();\n    }\n    \n    function () public payable {\n        parameters[\"price_pool\"] += msg.value;\n    }\n}",
        "debug": "calldata_HODLerParadise_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_HODLerParadise_0: 0xc741e85a00000000000000000000000000000000000000000000000000000000\ncalldatasize_HODLerParadise: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `set_parameter(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0xc03b0dbd201ee426d907e367f996706cf53b8028.sol",
        "function": "set_parameter(string,uint256)",
        "lineno": 132,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1638,
        "code": "   final_reward = parameter",
        "debug": "callvalue: 0xff8dd1180277f6048eff0ba68dfa1b212642db55a4c1650e814d13480aebfbdb\nstorage_86938655952395509963059026282881201633909052388412629128189783516846635716031: 0x6fa613b31105f33968dfdfd25de19aceb682c10d6428182e2082d401048be3f8\ncalldata_HODLerParadise_4: 0x0\nstorage_1 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n3*calldata_HODLerParadise_4: 0x0\nstorage_0: 0x1\nstorage_4894805378880596799629024476089966411594630589551822516667124835949594219265: 0xff8dd1180277f6048eff0ba68dfa1b212642db55a4c1650e814d13480aebfbdb\ncalldata_HODLerParadise_0: 0x9a6b32e100000000000000000000000000000000000000000000000000000000\ncalldatasize_HODLerParadise: 0x4\ncalldata_HODLerParadise_32 + 4: 0x0\n",
        "description": "A possible integer overflow exists in the function `claim_reward(uint256,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0xc03b0dbd201ee426d907e367f996706cf53b8028.sol",
        "function": "claim_reward(uint256,bytes32)",
        "lineno": 94,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1816,
        "code": "  // Delete the user: copy last user ",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/23/0xc03b0dbd201ee426d907e367f996706cf53b8028.sol",
        "function": "claim_reward(uint256,bytes32)",
        "lineno": 99,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1816,
        "code": "  // Delete the user: copy last user ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function claim_reward(uint256,bytes32). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/23/0xc03b0dbd201ee426d907e367f996706cf53b8028.sol",
        "function": "claim_reward(uint256,bytes32)",
        "lineno": 99,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1906,
        "code": "ed user and shorten the array\n        if ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/23/0xc03b0dbd201ee426d907e367f996706cf53b8028.sol",
        "function": "claim_reward(uint256,bytes32)",
        "lineno": 99,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3219,
        "code": "g.sender);\n    }\n    \n    fu",
        "debug": "",
        "description": "In the function `refund_and_die()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/23/0xc03b0dbd201ee426d907e367f996706cf53b8028.sol",
        "function": "refund_and_die()",
        "lineno": 119,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 3433,
        "code": "\n\n//\n// Welcome to",
        "debug": "storage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x0\ncalldata_HODLerParadise_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4894805378880596799629024476089966411594630589551822516667124835949594219265: 0x0\ncalldata_HODLerParadise_0: 0xe1fa8e8400000000000000000000000000000000000000000000000000000000\ncalldatasize_HODLerParadise: 0x4\n",
        "description": "A possible integer overflow exists in the function `register(bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0xc03b0dbd201ee426d907e367f996706cf53b8028.sol",
        "function": "register(bytes32)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3575,
        "code": "r\"] = now;\n   ",
        "debug": "callvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_HODLerParadise_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4894805378880596799629024476089966411594630589551822516667124835949594219265: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_HODLerParadise_0: 0xe1fa8e8400000000000000000000000000000000000000000000000000000000\ncalldatasize_HODLerParadise: 0x4\n",
        "description": "A possible integer overflow exists in the function `register(bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0xc03b0dbd201ee426d907e367f996706cf53b8028.sol",
        "function": "register(bytes32)",
        "lineno": 54,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4276,
        "code": "rParadise{\n    struct User{\n        address hodler;\n        bytes32 passcode;\n        uint hodling_since;\n    }\n    User[] users;\n    mapping (string => uint) parameters;\n    \n    function HODLerParadise() public{\n        parameters[\"owner\"] = uint(msg.sender);\n    }\n    \n    function get_parameters() constant public returns(\n            uint price,\n            uint price_pool,\n            uint base_reward,\n            uint daily_reward,\n            uint max_reward\n        ){\n        price = parameters['price'];\n        price_pool = parameters['price_pool'];\n        base_reward = parameters['base_reward'];\n        daily_reward = parameters['daily_reward'];\n        max_reward = parameters['max_reward'];\n    }\n    \n    // Register as a HODLer.\n    // Passcode can be your password, or the hash of your password, your choice\n    // If it's not hashed, max password len is 16 characters.\n    function register(bytes32 passcode) public payable returns(uint uid)\n    {\n        require(msg.value >= parameters[\"price\"]);\n        require(passcode != \"\");\n\n        users.push(User(msg.sender, passcode, now));\n        \n        // leave some for the deployer\n        parameters[\"price_pool\"] += msg.value * 99 / 100;\n        parameters[\"last_hodler\"] = now;\n        \n        uid = users.length - 1;\n    }\n    \n    // OPTIONAL: Use this to securely hash your password before registering\n    function hash_passcode(bytes32 passcode) public pure returns(bytes32 hash){\n        hash = keccak256(passcode);\n    }\n    \n    // How much would you get if you claimed right now\n    function get_reward(uint uid) public constant returns(uint reward){\n        require(uid < users.length);\n        reward = parameters[\"base_reward\"] + parameters[\"daily_reward\"] * (now - users[uid].hodling_since) / 1 days;\n            reward = parameters[\"max_reward\"];\n    }\n    \n    // Is your password still working?\n    function is_passcode_correct(uint uid, bytes32 passcode) public constant returns(bool passcode_correct){\n        require(uid < users.length);\n        bytes32 passcode_actually = users[uid].passcode;\n        if (passcode_actually & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0){\n            // bottom 16 bytes == 0: stored password was  not hashed\n            // (e.g. it looks like this: \"0x7265676973746572310000000000000000000000000000000000000000000000\" )\n            return passcode == passcode_actually;\n        } else {\n             // stored password is hashed\n            return keccak256(passcode) == passcode_actually;\n        }\n    }\n\n    // Get the price of your glorious HODLing!\n    function claim_reward(uint uid, bytes32 passcode) public payable\n    {\n        // a good HODLer always HODLs some more ether\n        require(msg.value >= parameters[\"price\"]);\n        require(is_passcode_correct(uid, passcode));\n        \n        uint final_reward = get_reward(uid) + msg.value;\n        if (final_reward > parameters[\"price_po\u03bfl\"])\n            final_reward = parameters[\"price_po\u03bfl\"];\n\n        require(msg.sender.call.value(final_reward)());\n\n        parameters[\"price_po\u03bfl\"] -= final_reward;\n        // Delete the user: copy last user to to-be-deleted user and shorten the array\n        if (uid + 1 < users.length)\n            users[uid] = users[users.length - 1];\n        users.length -= 1;\n    }\n    \n    // Refund the early HODLers, and leave the rest to the contract deployer\n    function refund_and_die() public{\n        require(msg.sender == address(parameters['owner']));\n        require(parameters[\"last_h\u03bfdler\"] + 7 days < now);\n        \n        uint price_pool_remaining = parameters[\"price_p\u03bf\u03bfl\"];\n        for(uint i=0; i<users.length && price_pool_remaining > 0; ++i){\n            uint reward = get_reward(i);\n            if (reward > price_pool_remaining)\n                reward = price_pool_remaining;\n            if (users[i].hodler.send(reward))\n                price_pool_remaining -= reward;\n        }\n        \n        selfdestruct(msg.sender);\n    }\n    \n    function check_parameters_sanity() internal view{\n        require(parameters['price'] <= 1 ether);\n        require(parameters['base_reward'] >= parameters['price'] / 2);\n        require(parameters[\"daily_reward\"] >= parameters['base_reward'] / 2);\n        require(parameters['max_reward'] >= parameters['price']);\n    }\n    \n    function set_parameter(string name, uint value) public{\n        require(msg.sender == address(parameters['owner']));\n        \n        // not even owner can touch these, that would be unfair!\n        require(keccak256(name) != keccak256(\"last_hodler\"));\n        require(keccak256(name) != keccak256(\"price_pool\"));\n\n        parameters[name] = value;\n        \n        check_parameters_sanity();\n    }\n    \n    function () public payable {\n        parameters[\"price_pool\"] += msg.value;\n    }\n}",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/23/0xc03b0dbd201ee426d907e367f996706cf53b8028.sol",
        "function": "claim_reward(uint256,bytes32)",
        "lineno": 15,
        "title": "State change after external call",
        "type": "Warning"
      }
    ],
    "success": true
  }
}