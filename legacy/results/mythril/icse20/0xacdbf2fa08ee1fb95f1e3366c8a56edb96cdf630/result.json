{
  "contract": "0xacdbf2fa08ee1fb95f1e3366c8a56edb96cdf630",
  "tool": "mythril",
  "start": 1563591852.630336,
  "end": 1563592221.067558,
  "duration": 368.43722200393677,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 441,
        "code": "    */\n    function setRate(uint256 _ra",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/19/0xacdbf2fa08ee1fb95f1e3366c8a56edb96cdf630.sol",
        "function": "fallback",
        "lineno": 171,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 441,
        "code": "    */\n    function setRate(uint256 _ra",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 609\n",
        "filename": "/unique_chucks/19/0xacdbf2fa08ee1fb95f1e3366c8a56edb96cdf630.sol",
        "function": "fallback",
        "lineno": 171,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1247,
        "code": "  * \n     * @param _telegram string\n     */\n    function setTelegram(string _telegram) external onlyOwner returns (bool) {\n        telegram = _tel",
        "debug": "calldata_SellTokens_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SellTokens_0: 0x90c3f38f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SellTokens: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setDescription(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xacdbf2fa08ee1fb95f1e3366c8a56edb96cdf630.sol",
        "function": "setDescription(string)",
        "lineno": 189,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1253,
        "code": "  * \n     * @param _telegram string\n     */\n    function setTelegram(string _telegram) external onlyOwner returns (bool) {\n        telegram = _tel",
        "debug": "calldata_SellTokens_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_SellTokens_0: 0x90c3f38f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SellTokens: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setDescription(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xacdbf2fa08ee1fb95f1e3366c8a56edb96cdf630.sol",
        "function": "setDescription(string)",
        "lineno": 189,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1330,
        "debug": "calldata_SellTokens_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SellTokens_0: 0xe8e81fe400000000000000000000000000000000000000000000000000000000\ncalldatasize_SellTokens: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTelegram(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xacdbf2fa08ee1fb95f1e3366c8a56edb96cdf630.sol",
        "function": "setTelegram(string)",
        "lineno": 196,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1336,
        "debug": "calldata_SellTokens_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_SellTokens_0: 0xe8e81fe400000000000000000000000000000000000000000000000000000000\ncalldatasize_SellTokens: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTelegram(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xacdbf2fa08ee1fb95f1e3366c8a56edb96cdf630.sol",
        "function": "setTelegram(string)",
        "lineno": 196,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1601,
        "code": " a, u",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SellTokens_0: 0xae3bfa00000000000000000000000000000000000000000000000000000000\ncalldatasize_SellTokens: 0x4\n10_EXP_storage_2: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0xacdbf2fa08ee1fb95f1e3366c8a56edb96cdf630.sol",
        "function": "fallback",
        "lineno": 111,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1862,
        "code": "nce));\n    }\n\n    /**\n",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/19/0xacdbf2fa08ee1fb95f1e3366c8a56edb96cdf630.sol",
        "function": "fallback",
        "lineno": 68,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1862,
        "code": "nce));\n    }\n\n    /**\n",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2119\n",
        "filename": "/unique_chucks/19/0xacdbf2fa08ee1fb95f1e3366c8a56edb96cdf630.sol",
        "function": "fallback",
        "lineno": 68,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2119,
        "code": "aw Ether\n     */\n    function w",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/19/0xacdbf2fa08ee1fb95f1e3366c8a56edb96cdf630.sol",
        "function": "fallback",
        "lineno": 72,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2813,
        "code": " @dev Math operations with safety che",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdrawEther(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/19/0xacdbf2fa08ee1fb95f1e3366c8a56edb96cdf630.sol",
        "function": "withdrawEther()",
        "lineno": 82,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3564,
        "code": "256 public rate;\n    string public description;\n    string public telegram;\n\n\n    /**\n     * @dev Constructor\n     */\n    constructor(ERC20Basic _token, uint256 _tokenDecimals, uint256 _rate, string _description, string _telegram) public {\n        uint256 etherDecimals = 18;\n\n        token = _token;\n        decimalDiff = etherDecimals.sub(_tokenDecimals);\n        rate = _rate;\n        description = _description;\n        telegram = _telegram;\n    }\n\n    /**\n     * @dev receive ETH and send tokens\n     */\n    function () public payable {\n        uint256 weiAmount = msg.value;\n        uint256 tokenAmount = weiAmount.mul(rate).div(10 ** decimalDiff);\n        \n        require(tokenAmount > 0);\n        \n        assert(token.transfer(msg.sender, tokenAmount));\n        owner.transfer(address(this).balance);\n    }\n\n    /**\n     * @dev Set Rate\n     * \n     * @param _rate uint256\n     */\n    function setRate(uint256 _rate) external onlyOwner returns (bool) {\n        rate = _rate;\n        return true;\n    }\n\n    /**\n     * @dev Set Description\n     * \n     * @param _description string\n     */\n    function setDescription(string _description) external onlyOwner returns (bool) {\n        description = _description;\n        return true;\n    }\n\n    /**\n     * @dev Set Telegram\n     * \n     * @param _telegram string\n     */\n    function setTelegram(string _telegram) external onlyOwner returns (bool) {\n        telegram = _telegram;\n        return true;\n    }\n}",
        "debug": "calldata_SellTokens_4 + calldata_SellTokens_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SellTokens_0: 0xe8e81fe400000000000000000000000000000000000000000000000000000000\ncalldatasize_SellTokens: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTelegram(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xacdbf2fa08ee1fb95f1e3366c8a56edb96cdf630.sol",
        "function": "setTelegram(string)",
        "lineno": 136,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3578,
        "code": "256 public rate;\n    string public description;\n    string public telegram;\n\n\n    /**\n     * @dev Constructor\n     */\n    constructor(ERC20Basic _token, uint256 _tokenDecimals, uint256 _rate, string _description, string _telegram) public {\n        uint256 etherDecimals = 18;\n\n        token = _token;\n        decimalDiff = etherDecimals.sub(_tokenDecimals);\n        rate = _rate;\n        description = _description;\n        telegram = _telegram;\n    }\n\n    /**\n     * @dev receive ETH and send tokens\n     */\n    function () public payable {\n        uint256 weiAmount = msg.value;\n        uint256 tokenAmount = weiAmount.mul(rate).div(10 ** decimalDiff);\n        \n        require(tokenAmount > 0);\n        \n        assert(token.transfer(msg.sender, tokenAmount));\n        owner.transfer(address(this).balance);\n    }\n\n    /**\n     * @dev Set Rate\n     * \n     * @param _rate uint256\n     */\n    function setRate(uint256 _rate) external onlyOwner returns (bool) {\n        rate = _rate;\n        return true;\n    }\n\n    /**\n     * @dev Set Description\n     * \n     * @param _description string\n     */\n    function setDescription(string _description) external onlyOwner returns (bool) {\n        description = _description;\n        return true;\n    }\n\n    /**\n     * @dev Set Telegram\n     * \n     * @param _telegram string\n     */\n    function setTelegram(string _telegram) external onlyOwner returns (bool) {\n        telegram = _telegram;\n        return true;\n    }\n}",
        "debug": "calldata_SellTokens_4 + calldata_SellTokens_4: 0x98b80124e0c0001a297fffffffffffffffffffffffffffffffffffffffffffc4\ncalldata_SellTokens_4: 0xda439b2041c8c00602000000000000000000000000000000000000000000001a\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SellTokens_0: 0xe8e81fe400000000000000000000000000000000000000000000000000000000\ncalldatasize_SellTokens: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTelegram(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xacdbf2fa08ee1fb95f1e3366c8a56edb96cdf630.sol",
        "function": "setTelegram(string)",
        "lineno": 136,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3595,
        "code": "256 public rate;\n    string public description;\n    string public telegram;\n\n\n    /**\n     * @dev Constructor\n     */\n    constructor(ERC20Basic _token, uint256 _tokenDecimals, uint256 _rate, string _description, string _telegram) public {\n        uint256 etherDecimals = 18;\n\n        token = _token;\n        decimalDiff = etherDecimals.sub(_tokenDecimals);\n        rate = _rate;\n        description = _description;\n        telegram = _telegram;\n    }\n\n    /**\n     * @dev receive ETH and send tokens\n     */\n    function () public payable {\n        uint256 weiAmount = msg.value;\n        uint256 tokenAmount = weiAmount.mul(rate).div(10 ** decimalDiff);\n        \n        require(tokenAmount > 0);\n        \n        assert(token.transfer(msg.sender, tokenAmount));\n        owner.transfer(address(this).balance);\n    }\n\n    /**\n     * @dev Set Rate\n     * \n     * @param _rate uint256\n     */\n    function setRate(uint256 _rate) external onlyOwner returns (bool) {\n        rate = _rate;\n        return true;\n    }\n\n    /**\n     * @dev Set Description\n     * \n     * @param _description string\n     */\n    function setDescription(string _description) external onlyOwner returns (bool) {\n        description = _description;\n        return true;\n    }\n\n    /**\n     * @dev Set Telegram\n     * \n     * @param _telegram string\n     */\n    function setTelegram(string _telegram) external onlyOwner returns (bool) {\n        telegram = _telegram;\n        return true;\n    }\n}",
        "debug": "calldata_SellTokens_4 + calldata_SellTokens_4: 0x21\ncalldata_SellTokens_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SellTokens_0: 0xe8e81fe400000000000000000000000000000000000000000000000000000000\ncalldatasize_SellTokens: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTelegram(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xacdbf2fa08ee1fb95f1e3366c8a56edb96cdf630.sol",
        "function": "setTelegram(string)",
        "lineno": 136,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}